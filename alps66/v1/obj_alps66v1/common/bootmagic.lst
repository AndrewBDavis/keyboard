   1               		.file	"bootmagic.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.scan_key,"ax",@progbits
  12               	scan_key:
  13               	.LFB99:
  14               		.file 1 "../../../tmk_core/common/bootmagic.c"
   1:../../../tmk_core/common/bootmagic.c **** #include <stdint.h>
   2:../../../tmk_core/common/bootmagic.c **** #include <stdbool.h>
   3:../../../tmk_core/common/bootmagic.c **** #include "wait.h"
   4:../../../tmk_core/common/bootmagic.c **** #include "matrix.h"
   5:../../../tmk_core/common/bootmagic.c **** #include "bootloader.h"
   6:../../../tmk_core/common/bootmagic.c **** #include "debug.h"
   7:../../../tmk_core/common/bootmagic.c **** #include "keymap.h"
   8:../../../tmk_core/common/bootmagic.c **** #include "actionmap.h"
   9:../../../tmk_core/common/bootmagic.c **** #include "host.h"
  10:../../../tmk_core/common/bootmagic.c **** #include "action_layer.h"
  11:../../../tmk_core/common/bootmagic.c **** #include "eeconfig.h"
  12:../../../tmk_core/common/bootmagic.c **** #include "bootmagic.h"
  13:../../../tmk_core/common/bootmagic.c **** #include "hook.h"
  14:../../../tmk_core/common/bootmagic.c **** 
  15:../../../tmk_core/common/bootmagic.c **** keymap_config_t keymap_config;
  16:../../../tmk_core/common/bootmagic.c **** 
  17:../../../tmk_core/common/bootmagic.c **** void bootmagic(void)
  18:../../../tmk_core/common/bootmagic.c **** {
  19:../../../tmk_core/common/bootmagic.c ****     /* check signature */
  20:../../../tmk_core/common/bootmagic.c ****     if (!eeconfig_is_enabled()) {
  21:../../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  22:../../../tmk_core/common/bootmagic.c ****     }
  23:../../../tmk_core/common/bootmagic.c **** 
  24:../../../tmk_core/common/bootmagic.c ****     /* do scans in case of bounce */
  25:../../../tmk_core/common/bootmagic.c ****     print("bootmagic scan: ... ");
  26:../../../tmk_core/common/bootmagic.c ****     uint8_t scan = 100;
  27:../../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); wait_ms(10); }
  28:../../../tmk_core/common/bootmagic.c ****     print("done.\n");
  29:../../../tmk_core/common/bootmagic.c **** 
  30:../../../tmk_core/common/bootmagic.c ****     /* bootmagic skip */
  31:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
  32:../../../tmk_core/common/bootmagic.c ****         return;
  33:../../../tmk_core/common/bootmagic.c ****     }
  34:../../../tmk_core/common/bootmagic.c **** 
  35:../../../tmk_core/common/bootmagic.c ****     /* eeconfig clear */
  36:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
  37:../../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  38:../../../tmk_core/common/bootmagic.c ****     }
  39:../../../tmk_core/common/bootmagic.c **** 
  40:../../../tmk_core/common/bootmagic.c ****     /* bootloader */
  41:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
  42:../../../tmk_core/common/bootmagic.c ****         bootloader_jump();
  43:../../../tmk_core/common/bootmagic.c ****     }
  44:../../../tmk_core/common/bootmagic.c **** 
  45:../../../tmk_core/common/bootmagic.c ****     /* user-defined checks */
  46:../../../tmk_core/common/bootmagic.c ****     hook_bootmagic();
  47:../../../tmk_core/common/bootmagic.c **** 
  48:../../../tmk_core/common/bootmagic.c ****     /* debug enable */
  49:../../../tmk_core/common/bootmagic.c ****     debug_config.raw = eeconfig_read_debug();
  50:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
  51:../../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
  52:../../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
  53:../../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
  54:../../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
  55:../../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
  56:../../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
  57:../../../tmk_core/common/bootmagic.c ****         } else {
  58:../../../tmk_core/common/bootmagic.c ****             debug_config.enable = !debug_config.enable;
  59:../../../tmk_core/common/bootmagic.c ****         }
  60:../../../tmk_core/common/bootmagic.c ****     }
  61:../../../tmk_core/common/bootmagic.c ****     eeconfig_write_debug(debug_config.raw);
  62:../../../tmk_core/common/bootmagic.c **** 
  63:../../../tmk_core/common/bootmagic.c ****     /* keymap config */
  64:../../../tmk_core/common/bootmagic.c ****     keymap_config.raw = eeconfig_read_keymap();
  65:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
  66:../../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
  67:../../../tmk_core/common/bootmagic.c ****     }
  68:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
  69:../../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
  70:../../../tmk_core/common/bootmagic.c ****     }
  71:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
  72:../../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
  73:../../../tmk_core/common/bootmagic.c ****     }
  74:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
  75:../../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
  76:../../../tmk_core/common/bootmagic.c ****     }
  77:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
  78:../../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
  79:../../../tmk_core/common/bootmagic.c ****     }
  80:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
  81:../../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
  82:../../../tmk_core/common/bootmagic.c ****     }
  83:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
  84:../../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
  85:../../../tmk_core/common/bootmagic.c ****     }
  86:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
  87:../../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
  88:../../../tmk_core/common/bootmagic.c ****     }
  89:../../../tmk_core/common/bootmagic.c ****     eeconfig_write_keymap(keymap_config.raw);
  90:../../../tmk_core/common/bootmagic.c **** 
  91:../../../tmk_core/common/bootmagic.c **** #ifdef NKRO_ENABLE
  92:../../../tmk_core/common/bootmagic.c ****     keyboard_nkro = keymap_config.nkro;
  93:../../../tmk_core/common/bootmagic.c **** #endif
  94:../../../tmk_core/common/bootmagic.c **** 
  95:../../../tmk_core/common/bootmagic.c ****     /* default layer */
  96:../../../tmk_core/common/bootmagic.c ****     uint8_t default_layer = 0;
  97:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
  98:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
  99:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 100:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 101:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 102:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 103:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 104:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 105:../../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 106:../../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 107:../../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 108:../../../tmk_core/common/bootmagic.c ****     } else {
 109:../../../tmk_core/common/bootmagic.c ****         default_layer = eeconfig_read_default_layer();
 110:../../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 111:../../../tmk_core/common/bootmagic.c ****     }
 112:../../../tmk_core/common/bootmagic.c **** }
 113:../../../tmk_core/common/bootmagic.c **** 
 114:../../../tmk_core/common/bootmagic.c **** static bool scan_key(uint16_t code)
 115:../../../tmk_core/common/bootmagic.c **** {
  15               		.loc 1 115 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 BF92      		push r11
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 11, -2
  22 0002 CF92      		push r12
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 12, -3
  26 0004 DF92      		push r13
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 13, -4
  30 0006 EF92      		push r14
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 14, -5
  34 0008 FF92      		push r15
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 15, -6
  38 000a 0F93      		push r16
  39               	.LCFI5:
  40               		.cfi_def_cfa_offset 8
  41               		.cfi_offset 16, -7
  42 000c 1F93      		push r17
  43               	.LCFI6:
  44               		.cfi_def_cfa_offset 9
  45               		.cfi_offset 17, -8
  46 000e CF93      		push r28
  47               	.LCFI7:
  48               		.cfi_def_cfa_offset 10
  49               		.cfi_offset 28, -9
  50 0010 DF93      		push r29
  51               	.LCFI8:
  52               		.cfi_def_cfa_offset 11
  53               		.cfi_offset 29, -10
  54               	/* prologue: function */
  55               	/* frame size = 0 */
  56               	/* stack size = 9 */
  57               	.L__stack_usage = 9
  58 0012 EC01      		movw r28,r24
  59               	.LVL1:
  60               	.LBB4:
 116:../../../tmk_core/common/bootmagic.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
  61               		.loc 1 116 0
  62 0014 B12C      		mov r11,__zero_reg__
  63               	.LBB5:
  64               	.LBB6:
 117:../../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 118:../../../tmk_core/common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 119:../../../tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1<<c)) {
  65               		.loc 1 119 0
  66 0016 01E0      		ldi r16,lo8(1)
  67 0018 10E0      		ldi r17,0
  68               	.LVL2:
  69               	.L8:
  70               	.LBE6:
 117:../../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
  71               		.loc 1 117 0
  72 001a 8B2D      		mov r24,r11
  73 001c 0E94 0000 		call matrix_get_row
  74               	.LVL3:
  75 0020 7C01      		movw r14,r24
  76               	.LVL4:
  77 0022 C12C      		mov r12,__zero_reg__
  78 0024 D12C      		mov r13,__zero_reg__
  79               	.LVL5:
  80               	.L7:
  81               	.LBB8:
  82               		.loc 1 119 0
  83 0026 C801      		movw r24,r16
  84 0028 0C2C      		mov r0,r12
  85 002a 00C0      		rjmp 2f
  86               		1:
  87 002c 880F      		lsl r24
  88 002e 991F      		rol r25
  89               		2:
  90 0030 0A94      		dec r0
  91 0032 02F4      		brpl 1b
  92 0034 8E21      		and r24,r14
  93 0036 9F21      		and r25,r15
  94 0038 892B      		or r24,r25
  95 003a 01F0      		breq .L2
  96               	.LBB7:
 120:../../../tmk_core/common/bootmagic.c ****                 // read key from Layer 0
 121:../../../tmk_core/common/bootmagic.c ****                 action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
  97               		.loc 1 121 0
  98 003c 6C2D      		mov r22,r12
  99 003e 7B2D      		mov r23,r11
 100 0040 80E0      		ldi r24,0
 101 0042 0E94 0000 		call action_for_key
 102               	.LVL6:
 122:../../../tmk_core/common/bootmagic.c ****                 if (action.code == code ||
 103               		.loc 1 122 0
 104 0046 8C17      		cp r24,r28
 105 0048 9D07      		cpc r25,r29
 106 004a 01F0      		breq .L3
 107               		.loc 1 122 0 is_stmt 0 discriminator 1
 108 004c 292F      		mov r18,r25
 109 004e 207E      		andi r18,lo8(-32)
 110 0050 392F      		mov r19,r25
 111 0052 307C      		andi r19,lo8(-64)
 112 0054 01F0      		breq .L4
 123:../../../tmk_core/common/bootmagic.c ****                     ((action.kind.id == ACT_LMODS ||
 124:../../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_RMODS ||
 125:../../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_LMODS_TAP ||
 126:../../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_RMODS_TAP ||
 113               		.loc 1 126 0 is_stmt 1
 114 0056 203A      		cpi r18,lo8(-96)
 115 0058 01F4      		brne .L2
 116               	.L4:
 127:../../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_LAYER_TAP ||
 128:../../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_LAYER_TAP_EXT) &&
 117               		.loc 1 128 0
 118 005a 90E0      		ldi r25,0
 119 005c C817      		cp r28,r24
 120 005e D907      		cpc r29,r25
 121               	.LVL7:
 122 0060 01F4      		brne .L2
 123               	.LVL8:
 124               	.L3:
 129:../../../tmk_core/common/bootmagic.c ****                      action.key.code == code)) {
 130:../../../tmk_core/common/bootmagic.c ****                     return true;
 125               		.loc 1 130 0
 126 0062 81E0      		ldi r24,lo8(1)
 127               	.LVL9:
 128 0064 00C0      		rjmp .L6
 129               	.LVL10:
 130               	.L2:
 131 0066 8FEF      		ldi r24,-1
 132 0068 C81A      		sub r12,r24
 133 006a D80A      		sbc r13,r24
 134               	.LVL11:
 135               	.LBE7:
 118:../../../tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1<<c)) {
 136               		.loc 1 118 0 discriminator 2
 137 006c 8AE0      		ldi r24,10
 138 006e C816      		cp r12,r24
 139 0070 D104      		cpc r13,__zero_reg__
 140 0072 01F4      		brne .L7
 141               	.LBE8:
 142               	.LBE5:
 116:../../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 143               		.loc 1 116 0 discriminator 2
 144 0074 B394      		inc r11
 145               	.LVL12:
 146 0076 8AE0      		ldi r24,lo8(10)
 147 0078 B812      		cpse r11,r24
 148 007a 00C0      		rjmp .L8
 149               	.LBE4:
 131:../../../tmk_core/common/bootmagic.c ****                 }
 132:../../../tmk_core/common/bootmagic.c ****             }
 133:../../../tmk_core/common/bootmagic.c ****         }
 134:../../../tmk_core/common/bootmagic.c ****     }
 135:../../../tmk_core/common/bootmagic.c ****     return false;
 150               		.loc 1 135 0
 151 007c 80E0      		ldi r24,0
 152               	.LVL13:
 153               	.L6:
 154               	/* epilogue start */
 136:../../../tmk_core/common/bootmagic.c **** }
 155               		.loc 1 136 0
 156 007e DF91      		pop r29
 157 0080 CF91      		pop r28
 158               	.LVL14:
 159 0082 1F91      		pop r17
 160 0084 0F91      		pop r16
 161 0086 FF90      		pop r15
 162 0088 EF90      		pop r14
 163               	.LVL15:
 164 008a DF90      		pop r13
 165 008c CF90      		pop r12
 166 008e BF90      		pop r11
 167               	.LVL16:
 168 0090 0895      		ret
 169               		.cfi_endproc
 170               	.LFE99:
 172               		.section	.text.bootmagic_scan_key,"ax",@progbits
 173               	.global	bootmagic_scan_key
 175               	bootmagic_scan_key:
 176               	.LFB100:
 137:../../../tmk_core/common/bootmagic.c **** 
 138:../../../tmk_core/common/bootmagic.c **** bool bootmagic_scan_key(uint16_t code)
 139:../../../tmk_core/common/bootmagic.c **** {
 177               		.loc 1 139 0
 178               		.cfi_startproc
 179               	.LVL17:
 180 0000 CF93      		push r28
 181               	.LCFI9:
 182               		.cfi_def_cfa_offset 3
 183               		.cfi_offset 28, -2
 184 0002 DF93      		push r29
 185               	.LCFI10:
 186               		.cfi_def_cfa_offset 4
 187               		.cfi_offset 29, -3
 188               	/* prologue: function */
 189               	/* frame size = 0 */
 190               	/* stack size = 2 */
 191               	.L__stack_usage = 2
 192 0004 EC01      		movw r28,r24
 140:../../../tmk_core/common/bootmagic.c ****     if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
 193               		.loc 1 140 0
 194 0006 8CE2      		ldi r24,lo8(44)
 195 0008 90E0      		ldi r25,0
 196               	.LVL18:
 197 000a 0E94 0000 		call scan_key
 198               	.LVL19:
 199 000e 8823      		tst r24
 200 0010 01F0      		breq .L19
 141:../../../tmk_core/common/bootmagic.c **** 
 142:../../../tmk_core/common/bootmagic.c ****     return scan_key(code);
 201               		.loc 1 142 0
 202 0012 CE01      		movw r24,r28
 203               	/* epilogue start */
 143:../../../tmk_core/common/bootmagic.c **** }
 204               		.loc 1 143 0
 205 0014 DF91      		pop r29
 206 0016 CF91      		pop r28
 207               	.LVL20:
 142:../../../tmk_core/common/bootmagic.c **** }
 208               		.loc 1 142 0
 209 0018 0C94 0000 		jmp scan_key
 210               	.LVL21:
 211               	.L19:
 212               		.loc 1 143 0
 213 001c 80E0      		ldi r24,0
 214               	/* epilogue start */
 215 001e DF91      		pop r29
 216 0020 CF91      		pop r28
 217               	.LVL22:
 218 0022 0895      		ret
 219               		.cfi_endproc
 220               	.LFE100:
 222               		.section	.text.bootmagic,"ax",@progbits
 223               	.global	bootmagic
 225               	bootmagic:
 226               	.LFB98:
  18:../../../tmk_core/common/bootmagic.c ****     /* check signature */
 227               		.loc 1 18 0
 228               		.cfi_startproc
 229 0000 CF93      		push r28
 230               	.LCFI11:
 231               		.cfi_def_cfa_offset 3
 232               		.cfi_offset 28, -2
 233               	/* prologue: function */
 234               	/* frame size = 0 */
 235               	/* stack size = 1 */
 236               	.L__stack_usage = 1
  20:../../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 237               		.loc 1 20 0
 238 0002 0E94 0000 		call eeconfig_is_enabled
 239               	.LVL23:
 240 0006 8111      		cpse r24,__zero_reg__
 241 0008 00C0      		rjmp .L21
  21:../../../tmk_core/common/bootmagic.c ****     }
 242               		.loc 1 21 0
 243 000a 0E94 0000 		call eeconfig_init
 244               	.LVL24:
 245               	.L21:
  18:../../../tmk_core/common/bootmagic.c ****     /* check signature */
 246               		.loc 1 18 0 discriminator 1
 247 000e C5E6      		ldi r28,lo8(101)
 248               	.L22:
 249               	.LVL25:
 250 0010 C150      		subi r28,lo8(-(-1))
 251               	.LVL26:
  27:../../../tmk_core/common/bootmagic.c ****     print("done.\n");
 252               		.loc 1 27 0 discriminator 1
 253 0012 01F0      		breq .L102
 254               	.LVL27:
  27:../../../tmk_core/common/bootmagic.c ****     print("done.\n");
 255               		.loc 1 27 0 is_stmt 0 discriminator 2
 256 0014 0E94 0000 		call matrix_scan
 257               	.LVL28:
 258               	.LBB9:
 259               	.LBB10:
 260               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 261               		.loc 2 187 0 is_stmt 1 discriminator 2
 262 0018 8FE3      		ldi r24,lo8(-25537)
 263 001a 9CE9      		ldi r25,hi8(-25537)
 264 001c 0197      	1:	sbiw r24,1
 265 001e 01F4      		brne 1b
 266 0020 00C0      		rjmp .
 267 0022 0000      		nop
 268 0024 00C0      		rjmp .L22
 269               	.LVL29:
 270               	.L102:
 271               	.LBE10:
 272               	.LBE9:
  31:../../../tmk_core/common/bootmagic.c ****         return;
 273               		.loc 1 31 0
 274 0026 89E2      		ldi r24,lo8(41)
 275 0028 90E0      		ldi r25,0
 276 002a 0E94 0000 		call bootmagic_scan_key
 277               	.LVL30:
 278 002e 8111      		cpse r24,__zero_reg__
 279 0030 00C0      		rjmp .L20
  36:../../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 280               		.loc 1 36 0
 281 0032 8AE2      		ldi r24,lo8(42)
 282 0034 90E0      		ldi r25,0
 283 0036 0E94 0000 		call bootmagic_scan_key
 284               	.LVL31:
 285 003a 8111      		cpse r24,__zero_reg__
  37:../../../tmk_core/common/bootmagic.c ****     }
 286               		.loc 1 37 0
 287 003c 0E94 0000 		call eeconfig_init
 288               	.LVL32:
 289               	.L25:
  41:../../../tmk_core/common/bootmagic.c ****         bootloader_jump();
 290               		.loc 1 41 0
 291 0040 85E0      		ldi r24,lo8(5)
 292 0042 90E0      		ldi r25,0
 293 0044 0E94 0000 		call bootmagic_scan_key
 294               	.LVL33:
 295 0048 8111      		cpse r24,__zero_reg__
  42:../../../tmk_core/common/bootmagic.c ****     }
 296               		.loc 1 42 0
 297 004a 0E94 0000 		call bootloader_jump
 298               	.LVL34:
 299               	.L26:
  46:../../../tmk_core/common/bootmagic.c **** 
 300               		.loc 1 46 0
 301 004e 0E94 0000 		call hook_bootmagic
 302               	.LVL35:
  49:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
 303               		.loc 1 49 0
 304 0052 0E94 0000 		call eeconfig_read_debug
 305               	.LVL36:
 306 0056 8093 0000 		sts debug_config,r24
  50:../../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
 307               		.loc 1 50 0
 308 005a 87E0      		ldi r24,lo8(7)
 309 005c 90E0      		ldi r25,0
 310 005e 0E94 0000 		call bootmagic_scan_key
 311               	.LVL37:
 312 0062 8823      		tst r24
 313 0064 01F0      		breq .L27
  51:../../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
 314               		.loc 1 51 0
 315 0066 8BE1      		ldi r24,lo8(27)
 316 0068 90E0      		ldi r25,0
 317 006a 0E94 0000 		call bootmagic_scan_key
 318               	.LVL38:
 319 006e 8823      		tst r24
 320 0070 01F0      		breq .L28
  52:../../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
 321               		.loc 1 52 0
 322 0072 8091 0000 		lds r24,debug_config
 323 0076 81FB      		bst r24,1
 324 0078 2227      		clr r18
 325 007a 20F9      		bld r18,0
 326 007c 91E0      		ldi r25,lo8(1)
 327 007e 9227      		eor r25,r18
 328 0080 90FB      		bst r25,0
 329 0082 81F9      		bld r24,1
 330 0084 00C0      		rjmp .L99
 331               	.L28:
  53:../../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
 332               		.loc 1 53 0
 333 0086 8EE0      		ldi r24,lo8(14)
 334 0088 90E0      		ldi r25,0
 335 008a 0E94 0000 		call bootmagic_scan_key
 336               	.LVL39:
 337 008e 8823      		tst r24
 338 0090 01F0      		breq .L29
  54:../../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
 339               		.loc 1 54 0
 340 0092 8091 0000 		lds r24,debug_config
 341 0096 82FB      		bst r24,2
 342 0098 2227      		clr r18
 343 009a 20F9      		bld r18,0
 344 009c 91E0      		ldi r25,lo8(1)
 345 009e 9227      		eor r25,r18
 346 00a0 90FB      		bst r25,0
 347 00a2 82F9      		bld r24,2
 348               	.L99:
 349 00a4 8093 0000 		sts debug_config,r24
 350 00a8 00C0      		rjmp .L27
 351               	.L29:
  55:../../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
 352               		.loc 1 55 0
 353 00aa 80E1      		ldi r24,lo8(16)
 354 00ac 90E0      		ldi r25,0
 355 00ae 0E94 0000 		call bootmagic_scan_key
 356               	.LVL40:
 357 00b2 9091 0000 		lds r25,debug_config
 358 00b6 8823      		tst r24
 359 00b8 01F0      		breq .L30
  56:../../../tmk_core/common/bootmagic.c ****         } else {
 360               		.loc 1 56 0
 361 00ba 93FB      		bst r25,3
 362 00bc 2227      		clr r18
 363 00be 20F9      		bld r18,0
 364 00c0 81E0      		ldi r24,lo8(1)
 365 00c2 8227      		eor r24,r18
 366 00c4 80FB      		bst r24,0
 367 00c6 93F9      		bld r25,3
 368 00c8 00C0      		rjmp .L100
 369               	.L30:
  58:../../../tmk_core/common/bootmagic.c ****         }
 370               		.loc 1 58 0
 371 00ca 892F      		mov r24,r25
 372 00cc 8095      		com r24
 373 00ce 80FB      		bst r24,0
 374 00d0 90F9      		bld r25,0
 375               	.L100:
 376 00d2 9093 0000 		sts debug_config,r25
 377               	.L27:
  61:../../../tmk_core/common/bootmagic.c **** 
 378               		.loc 1 61 0
 379 00d6 8091 0000 		lds r24,debug_config
 380 00da 0E94 0000 		call eeconfig_write_debug
 381               	.LVL41:
  64:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
 382               		.loc 1 64 0
 383 00de 0E94 0000 		call eeconfig_read_keymap
 384               	.LVL42:
 385 00e2 8093 0000 		sts keymap_config,r24
  65:../../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
 386               		.loc 1 65 0
 387 00e6 80EE      		ldi r24,lo8(-32)
 388 00e8 90E0      		ldi r25,0
 389 00ea 0E94 0000 		call bootmagic_scan_key
 390               	.LVL43:
 391 00ee 8823      		tst r24
 392 00f0 01F0      		breq .L31
  66:../../../tmk_core/common/bootmagic.c ****     }
 393               		.loc 1 66 0
 394 00f2 8091 0000 		lds r24,keymap_config
 395 00f6 982F      		mov r25,r24
 396 00f8 9095      		com r25
 397 00fa 90FB      		bst r25,0
 398 00fc 80F9      		bld r24,0
 399 00fe 8093 0000 		sts keymap_config,r24
 400               	.L31:
  68:../../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
 401               		.loc 1 68 0
 402 0102 89E3      		ldi r24,lo8(57)
 403 0104 90E0      		ldi r25,0
 404 0106 0E94 0000 		call bootmagic_scan_key
 405               	.LVL44:
 406 010a 8823      		tst r24
 407 010c 01F0      		breq .L32
  69:../../../tmk_core/common/bootmagic.c ****     }
 408               		.loc 1 69 0
 409 010e 8091 0000 		lds r24,keymap_config
 410 0112 81FB      		bst r24,1
 411 0114 2227      		clr r18
 412 0116 20F9      		bld r18,0
 413 0118 91E0      		ldi r25,lo8(1)
 414 011a 9227      		eor r25,r18
 415 011c 90FB      		bst r25,0
 416 011e 81F9      		bld r24,1
 417 0120 8093 0000 		sts keymap_config,r24
 418               	.L32:
  71:../../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 419               		.loc 1 71 0
 420 0124 82EE      		ldi r24,lo8(-30)
 421 0126 90E0      		ldi r25,0
 422 0128 0E94 0000 		call bootmagic_scan_key
 423               	.LVL45:
 424 012c 8823      		tst r24
 425 012e 01F0      		breq .L33
  72:../../../tmk_core/common/bootmagic.c ****     }
 426               		.loc 1 72 0
 427 0130 8091 0000 		lds r24,keymap_config
 428 0134 82FB      		bst r24,2
 429 0136 2227      		clr r18
 430 0138 20F9      		bld r18,0
 431 013a 91E0      		ldi r25,lo8(1)
 432 013c 9227      		eor r25,r18
 433 013e 90FB      		bst r25,0
 434 0140 82F9      		bld r24,2
 435 0142 8093 0000 		sts keymap_config,r24
 436               	.L33:
  74:../../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
 437               		.loc 1 74 0
 438 0146 86EE      		ldi r24,lo8(-26)
 439 0148 90E0      		ldi r25,0
 440 014a 0E94 0000 		call bootmagic_scan_key
 441               	.LVL46:
 442 014e 8823      		tst r24
 443 0150 01F0      		breq .L34
  75:../../../tmk_core/common/bootmagic.c ****     }
 444               		.loc 1 75 0
 445 0152 8091 0000 		lds r24,keymap_config
 446 0156 83FB      		bst r24,3
 447 0158 2227      		clr r18
 448 015a 20F9      		bld r18,0
 449 015c 91E0      		ldi r25,lo8(1)
 450 015e 9227      		eor r25,r18
 451 0160 90FB      		bst r25,0
 452 0162 83F9      		bld r24,3
 453 0164 8093 0000 		sts keymap_config,r24
 454               	.L34:
  77:../../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
 455               		.loc 1 77 0
 456 0168 83EE      		ldi r24,lo8(-29)
 457 016a 90E0      		ldi r25,0
 458 016c 0E94 0000 		call bootmagic_scan_key
 459               	.LVL47:
 460 0170 8823      		tst r24
 461 0172 01F0      		breq .L35
  78:../../../tmk_core/common/bootmagic.c ****     }
 462               		.loc 1 78 0
 463 0174 8091 0000 		lds r24,keymap_config
 464 0178 84FB      		bst r24,4
 465 017a 2227      		clr r18
 466 017c 20F9      		bld r18,0
 467 017e 91E0      		ldi r25,lo8(1)
 468 0180 9227      		eor r25,r18
 469 0182 90FB      		bst r25,0
 470 0184 84F9      		bld r24,4
 471 0186 8093 0000 		sts keymap_config,r24
 472               	.L35:
  80:../../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
 473               		.loc 1 80 0
 474 018a 85E3      		ldi r24,lo8(53)
 475 018c 90E0      		ldi r25,0
 476 018e 0E94 0000 		call bootmagic_scan_key
 477               	.LVL48:
 478 0192 8823      		tst r24
 479 0194 01F0      		breq .L36
  81:../../../tmk_core/common/bootmagic.c ****     }
 480               		.loc 1 81 0
 481 0196 8091 0000 		lds r24,keymap_config
 482 019a 85FB      		bst r24,5
 483 019c 2227      		clr r18
 484 019e 20F9      		bld r18,0
 485 01a0 91E0      		ldi r25,lo8(1)
 486 01a2 9227      		eor r25,r18
 487 01a4 90FB      		bst r25,0
 488 01a6 85F9      		bld r24,5
 489 01a8 8093 0000 		sts keymap_config,r24
 490               	.L36:
  83:../../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
 491               		.loc 1 83 0
 492 01ac 81E3      		ldi r24,lo8(49)
 493 01ae 90E0      		ldi r25,0
 494 01b0 0E94 0000 		call bootmagic_scan_key
 495               	.LVL49:
 496 01b4 8823      		tst r24
 497 01b6 01F0      		breq .L37
  84:../../../tmk_core/common/bootmagic.c ****     }
 498               		.loc 1 84 0
 499 01b8 8091 0000 		lds r24,keymap_config
 500 01bc 86FB      		bst r24,6
 501 01be 2227      		clr r18
 502 01c0 20F9      		bld r18,0
 503 01c2 91E0      		ldi r25,lo8(1)
 504 01c4 9227      		eor r25,r18
 505 01c6 90FB      		bst r25,0
 506 01c8 86F9      		bld r24,6
 507 01ca 8093 0000 		sts keymap_config,r24
 508               	.L37:
  86:../../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
 509               		.loc 1 86 0
 510 01ce 81E1      		ldi r24,lo8(17)
 511 01d0 90E0      		ldi r25,0
 512 01d2 0E94 0000 		call bootmagic_scan_key
 513               	.LVL50:
 514 01d6 8823      		tst r24
 515 01d8 01F0      		breq .L38
  87:../../../tmk_core/common/bootmagic.c ****     }
 516               		.loc 1 87 0
 517 01da 8091 0000 		lds r24,keymap_config
 518 01de 87FB      		bst r24,7
 519 01e0 2227      		clr r18
 520 01e2 20F9      		bld r18,0
 521 01e4 91E0      		ldi r25,lo8(1)
 522 01e6 9227      		eor r25,r18
 523 01e8 90FB      		bst r25,0
 524 01ea 87F9      		bld r24,7
 525 01ec 8093 0000 		sts keymap_config,r24
 526               	.L38:
  89:../../../tmk_core/common/bootmagic.c **** 
 527               		.loc 1 89 0
 528 01f0 8091 0000 		lds r24,keymap_config
 529 01f4 0E94 0000 		call eeconfig_write_keymap
 530               	.LVL51:
  92:../../../tmk_core/common/bootmagic.c **** #endif
 531               		.loc 1 92 0
 532 01f8 8091 0000 		lds r24,keymap_config
 533 01fc 87FB      		bst r24,7
 534 01fe 8827      		clr r24
 535 0200 80F9      		bld r24,0
 536 0202 8093 0000 		sts keyboard_nkro,r24
 537               	.LVL52:
  97:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
 538               		.loc 1 97 0
 539 0206 87E2      		ldi r24,lo8(39)
 540 0208 90E0      		ldi r25,0
 541 020a 0E94 0000 		call bootmagic_scan_key
 542               	.LVL53:
 543 020e C82F      		mov r28,r24
 544               	.LVL54:
  98:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 545               		.loc 1 98 0
 546 0210 8EE1      		ldi r24,lo8(30)
 547 0212 90E0      		ldi r25,0
 548               	.LVL55:
 549 0214 0E94 0000 		call bootmagic_scan_key
 550               	.LVL56:
 551 0218 8111      		cpse r24,__zero_reg__
  98:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 552               		.loc 1 98 0 is_stmt 0 discriminator 1
 553 021a C260      		ori r28,lo8(2)
 554               	.LVL57:
 555               	.L39:
  99:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 556               		.loc 1 99 0 is_stmt 1
 557 021c 8FE1      		ldi r24,lo8(31)
 558 021e 90E0      		ldi r25,0
 559 0220 0E94 0000 		call bootmagic_scan_key
 560               	.LVL58:
 561 0224 8111      		cpse r24,__zero_reg__
  99:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 562               		.loc 1 99 0 is_stmt 0 discriminator 1
 563 0226 C460      		ori r28,lo8(4)
 564               	.LVL59:
 565               	.L40:
 100:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 566               		.loc 1 100 0 is_stmt 1
 567 0228 80E2      		ldi r24,lo8(32)
 568 022a 90E0      		ldi r25,0
 569 022c 0E94 0000 		call bootmagic_scan_key
 570               	.LVL60:
 571 0230 8111      		cpse r24,__zero_reg__
 100:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 572               		.loc 1 100 0 is_stmt 0 discriminator 1
 573 0232 C860      		ori r28,lo8(8)
 574               	.LVL61:
 575               	.L41:
 101:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 576               		.loc 1 101 0 is_stmt 1
 577 0234 81E2      		ldi r24,lo8(33)
 578 0236 90E0      		ldi r25,0
 579 0238 0E94 0000 		call bootmagic_scan_key
 580               	.LVL62:
 581 023c 8111      		cpse r24,__zero_reg__
 101:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 582               		.loc 1 101 0 is_stmt 0 discriminator 1
 583 023e C061      		ori r28,lo8(16)
 584               	.LVL63:
 585               	.L42:
 102:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 586               		.loc 1 102 0 is_stmt 1
 587 0240 82E2      		ldi r24,lo8(34)
 588 0242 90E0      		ldi r25,0
 589 0244 0E94 0000 		call bootmagic_scan_key
 590               	.LVL64:
 591 0248 8111      		cpse r24,__zero_reg__
 102:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 592               		.loc 1 102 0 is_stmt 0 discriminator 1
 593 024a C062      		ori r28,lo8(32)
 594               	.LVL65:
 595               	.L43:
 103:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 596               		.loc 1 103 0 is_stmt 1
 597 024c 83E2      		ldi r24,lo8(35)
 598 024e 90E0      		ldi r25,0
 599 0250 0E94 0000 		call bootmagic_scan_key
 600               	.LVL66:
 601 0254 8111      		cpse r24,__zero_reg__
 103:../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 602               		.loc 1 103 0 is_stmt 0 discriminator 1
 603 0256 C064      		ori r28,lo8(64)
 604               	.LVL67:
 605               	.L44:
 104:../../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 606               		.loc 1 104 0 is_stmt 1
 607 0258 84E2      		ldi r24,lo8(36)
 608 025a 90E0      		ldi r25,0
 609 025c 0E94 0000 		call bootmagic_scan_key
 610               	.LVL68:
 611 0260 8823      		tst r24
 612 0262 01F0      		breq .L45
 104:../../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 613               		.loc 1 104 0 is_stmt 0 discriminator 1
 614 0264 C068      		ori r28,lo8(-128)
 615               	.LVL69:
 616 0266 00C0      		rjmp .L46
 617               	.L45:
 105:../../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 618               		.loc 1 105 0 is_stmt 1
 619 0268 CC23      		tst r28
 620 026a 01F0      		breq .L47
 621               	.L46:
 106:../../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 622               		.loc 1 106 0
 623 026c 8C2F      		mov r24,r28
 624 026e 0E94 0000 		call eeconfig_write_default_layer
 625               	.LVL70:
 107:../../../tmk_core/common/bootmagic.c ****     } else {
 626               		.loc 1 107 0
 627 0272 6C2F      		mov r22,r28
 628 0274 00C0      		rjmp .L101
 629               	.L47:
 109:../../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 630               		.loc 1 109 0
 631 0276 0E94 0000 		call eeconfig_read_default_layer
 632               	.LVL71:
 110:../../../tmk_core/common/bootmagic.c ****     }
 633               		.loc 1 110 0
 634 027a 682F      		mov r22,r24
 635               	.LVL72:
 636               	.L101:
 637 027c 70E0      		ldi r23,0
 638 027e 80E0      		ldi r24,0
 639 0280 90E0      		ldi r25,0
 640               	/* epilogue start */
 112:../../../tmk_core/common/bootmagic.c **** 
 641               		.loc 1 112 0
 642 0282 CF91      		pop r28
 110:../../../tmk_core/common/bootmagic.c ****     }
 643               		.loc 1 110 0
 644 0284 0C94 0000 		jmp default_layer_set
 645               	.LVL73:
 646               	.L20:
 647               	/* epilogue start */
 112:../../../tmk_core/common/bootmagic.c **** 
 648               		.loc 1 112 0
 649 0288 CF91      		pop r28
 650               	.LVL74:
 651 028a 0895      		ret
 652               		.cfi_endproc
 653               	.LFE98:
 655               		.comm	keymap_config,1,1
 656               		.text
 657               	.Letext0:
 658               		.file 3 "/usr/lib/avr/include/stdint.h"
 659               		.file 4 "../../../tmk_core/common/matrix.h"
 660               		.file 5 "../../../tmk_core/common/debug.h"
 661               		.file 6 "../../../tmk_core/common/keyboard.h"
 662               		.file 7 "../../../tmk_core/common/keycode.h"
 663               		.file 8 "../../../tmk_core/common/action_code.h"
 664               		.file 9 "../../../tmk_core/common/keymap.h"
 665               		.file 10 "../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 666               		.file 11 "../../../tmk_core/common/host.h"
 667               		.file 12 "../../../tmk_core/common/action.h"
 668               		.file 13 "../../../tmk_core/common/eeconfig.h"
 669               		.file 14 "../../../tmk_core/common/bootloader.h"
 670               		.file 15 "../../../tmk_core/common/hook.h"
 671               		.file 16 "../../../tmk_core/common/action_layer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 bootmagic.c
     /tmp/cczA3UeZ.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cczA3UeZ.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cczA3UeZ.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cczA3UeZ.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cczA3UeZ.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cczA3UeZ.s:12     .text.scan_key:0000000000000000 scan_key
     /tmp/cczA3UeZ.s:175    .text.bootmagic_scan_key:0000000000000000 bootmagic_scan_key
     /tmp/cczA3UeZ.s:225    .text.bootmagic:0000000000000000 bootmagic
                            *COM*:0000000000000001 keymap_config

UNDEFINED SYMBOLS
matrix_get_row
action_for_key
eeconfig_is_enabled
eeconfig_init
matrix_scan
bootloader_jump
hook_bootmagic
eeconfig_read_debug
debug_config
eeconfig_write_debug
eeconfig_read_keymap
eeconfig_write_keymap
keyboard_nkro
eeconfig_write_default_layer
eeconfig_read_default_layer
default_layer_set
__do_clear_bss
