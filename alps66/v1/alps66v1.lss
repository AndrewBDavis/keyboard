
alps66v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00003666  000036fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003666  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000142  0080011e  0080011e  00003718  2**0
                  ALLOC
  3 .noinit       00000004  00800260  00800260  00003718  2**0
                  ALLOC
  4 .stabstr      00000076  00000000  00000000  00003718  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000378e  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000037a0  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000848  00000000  00000000  000037e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000e4bf  00000000  00000000  00004028  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003ab4  00000000  00000000  000124e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000067f6  00000000  00000000  00015f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001558  00000000  00000000  0001c794  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003ddd  00000000  00000000  0001dcec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006d3b  00000000  00000000  00021ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000009b8  00000000  00000000  00028804  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 90 01 	jmp	0x320	; 0x320 <__ctors_end>
       4:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
       8:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
       c:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
      10:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
      14:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
      18:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
      1c:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
      20:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
      24:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
      28:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
      2c:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__vector_11>
      30:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <__vector_12>
      34:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <__vector_13>
      38:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
      3c:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
      40:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
      44:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
      48:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
      4c:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__vector_19>
      50:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
      54:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
      58:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
      5c:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
      60:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
      64:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
      68:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
      6c:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
      70:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__bad_interrupt>
      74:	1d 02       	muls	r17, r29
      76:	20 02       	muls	r18, r16
      78:	23 02       	muls	r18, r19
      7a:	26 02       	muls	r18, r22
      7c:	29 02       	muls	r18, r25
      7e:	2c 02       	muls	r18, r28
      80:	2f 02       	muls	r18, r31
      82:	32 02       	muls	r19, r18
      84:	35 02       	muls	r19, r21
      86:	42 08       	sbc	r4, r2
      88:	64 08       	sbc	r6, r4
      8a:	57 09       	sbc	r21, r7
      8c:	64 08       	sbc	r6, r4
      8e:	57 09       	sbc	r21, r7
      90:	a9 08       	sbc	r10, r9
      92:	cc 08       	sbc	r12, r12
      94:	57 09       	sbc	r21, r7
      96:	21 09       	sbc	r18, r1
      98:	34 09       	sbc	r19, r4
      9a:	5a 0c       	add	r5, r10
      9c:	5a 0c       	add	r5, r10
      9e:	84 0c       	add	r8, r4
      a0:	84 0c       	add	r8, r4
      a2:	df 0c       	add	r13, r15
      a4:	ec 0e       	add	r14, r28
      a6:	ec 0e       	add	r14, r28
      a8:	ec 0e       	add	r14, r28
      aa:	13 0d       	add	r17, r3
      ac:	ec 0e       	add	r14, r28
      ae:	fe 0d       	add	r31, r14
      b0:	fe 0d       	add	r31, r14
      b2:	c4 0e       	add	r12, r20
      b4:	ec 0e       	add	r14, r28
      b6:	ec 0e       	add	r14, r28
      b8:	d9 0e       	add	r13, r25

000000ba <__trampolines_end>:
      ba:	00 00       	nop
      bc:	f1 a1       	ldd	r31, Z+33	; 0x21
      be:	04 8a       	std	Z+20, r0	; 0x14

000000c0 <keymaps>:
      c0:	e4 10 36 0e 0f 12 27 2d 00 00 50 37 38 33 34 13     ..6...'-..P7834.
      d0:	2f 2e 00 00 51 e5 52 28 2a 30 31 49 00 00 c2 e1     /...Q.R(*01I....
      e0:	e0 04 2b 14 29 1e 00 00 e3 00 1d 16 1a 08 1f 20     ..+.).......... 
      f0:	00 00 e2 1b 07 09 15 17 21 22 00 00 2c 06 19 0a     ........!"..,...
     100:	1c 18 23 24 00 00 c1 05 11 0b 0d 0c 25 26 00 00     ..#$........%&..
     110:	00 00 00 00 00 00 00 00 4c 4f 00 00 00 00 00 00     ........LO......
     120:	00 00 00 e6 c2 01 01 01 4a 47 43 44 00 00 01 4d     ........JGCD...M
     130:	51 50 4f 48 52 45 00 00 01 01 01 58 4b 4e 01 01     QPOHRE.....XKN..
     140:	00 00 01 01 01 aa 39 01 35 3a 00 00 01 01 01 a9     ......9.5:......
     150:	01 01 3b 3c 00 00 01 01 a8 01 01 01 3d 3e 00 00     ..;<........=>..
     160:	01 01 01 01 01 01 3f 40 00 00 01 01 01 01 01 46     ......?@.......F
     170:	41 42 00 00 00 00 00 00 00 00 00 00 01 01 00 00     AB..............
     180:	00 00 00 00 00 00 00 01 c2 01 59 5c 5d 60 01 01     ..........Y\]`..
     190:	00 00 01 5a 5b 5e 01 61 01 01 00 00 01 38 01 01     ...Z[^.a.....8..
     1a0:	01 01 01 01 00 00 01 01 01 50 01 01 01 01 00 00     .........P......
     1b0:	01 01 01 51 52 01 01 01 00 00 01 01 4f 01 01 01     ...QR.......O...
     1c0:	01 01 00 00 01 01 01 01 01 01 01 01 00 00 63 01     ..............c.
     1d0:	01 01 01 5f 01 01 00 00 00 00 00 00 00 00 00 00     ..._............
     1e0:	01 01 00 00 00 00 00 00 00 00 00 62                 ...........b

000001ec <ProductString>:
     1ec:	0e 03 41 00 6c 00 70 00 73 00 36 00 36 00 00 00     ..A.l.p.s.6.6...

000001fc <ManufacturerString>:
     1fc:	08 03 54 00 4d 00 4b 00 00 00                       ..T.M.K...

00000206 <LanguageString>:
     206:	04 03 09 04                                         ....

0000020a <ConfigurationDescriptor>:
     20a:	09 02 54 00 03 01 00 a0 32 09 04 00 00 01 03 01     ..T.....2.......
     21a:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
     22a:	00 0a 09 04 01 00 01 03 00 00 00 09 21 11 01 00     ............!...
     23a:	01 22 36 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."6.............
     24a:	03 00 00 00 09 21 11 01 00 01 22 39 00 07 05 83     .....!...."9....
     25a:	03 20 00 01                                         . ..

0000025e <DeviceDescriptor>:
     25e:	12 01 10 01 00 00 00 08 ed fe 64 64 01 00 01 02     ..........dd....
     26e:	00 01                                               ..

00000270 <NKROReport>:
     270:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     280:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     290:	91 02 95 01 75 03 91 01 05 07 19 00 29 f7 15 00     ....u.......)...
     2a0:	25 01 95 f8 75 01 81 02 c0                          %...u....

000002a9 <ExtrakeyReport>:
     2a9:	05 01 09 80 a1 01 85 02 16 81 00 26 b7 00 1a 81     ...........&....
     2b9:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     2c9:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     2d9:	10 95 01 81 00 c0                                   ......

000002df <KeyboardReport>:
     2df:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     2ef:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     2ff:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     30f:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....
     31f:	00                                                  .

00000320 <__ctors_end>:
     320:	11 24       	eor	r1, r1
     322:	1f be       	out	0x3f, r1	; 63
     324:	cf ef       	ldi	r28, 0xFF	; 255
     326:	d4 e0       	ldi	r29, 0x04	; 4
     328:	de bf       	out	0x3e, r29	; 62
     32a:	cd bf       	out	0x3d, r28	; 61

0000032c <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     32c:	04 b6       	in	r0, 0x34	; 52
     32e:	03 fe       	sbrs	r0, 3
     330:	27 c0       	rjmp	.+78     	; 0x380 <__do_copy_data>
     332:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <__bss_end>
     336:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <__bss_end+0x1>
     33a:	a0 91 62 02 	lds	r26, 0x0262	; 0x800262 <__bss_end+0x2>
     33e:	b0 91 63 02 	lds	r27, 0x0263	; 0x800263 <__bss_end+0x3>
     342:	87 30       	cpi	r24, 0x07	; 7
     344:	90 4b       	sbci	r25, 0xB0	; 176
     346:	a7 40       	sbci	r26, 0x07	; 7
     348:	b0 4b       	sbci	r27, 0xB0	; 176
     34a:	d1 f4       	brne	.+52     	; 0x380 <__do_copy_data>
        reset_key = 0;
     34c:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <__bss_end>
     350:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <__bss_end+0x1>
     354:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <__bss_end+0x2>
     358:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <__bss_end+0x3>

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     35c:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     35e:	84 b7       	in	r24, 0x34	; 52
     360:	87 7f       	andi	r24, 0xF7	; 247
     362:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	f8 94       	cli
     368:	a8 95       	wdr
     36a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     36e:	88 61       	ori	r24, 0x18	; 24
     370:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     374:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     378:	0f be       	out	0x3f, r0	; 63
        wdt_disable();

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     37a:	e0 e0       	ldi	r30, 0x00	; 0
     37c:	f8 e3       	ldi	r31, 0x38	; 56
     37e:	09 95       	icall

00000380 <__do_copy_data>:
     380:	11 e0       	ldi	r17, 0x01	; 1
     382:	a0 e0       	ldi	r26, 0x00	; 0
     384:	b1 e0       	ldi	r27, 0x01	; 1
     386:	e6 e6       	ldi	r30, 0x66	; 102
     388:	f6 e3       	ldi	r31, 0x36	; 54
     38a:	02 c0       	rjmp	.+4      	; 0x390 <__do_copy_data+0x10>
     38c:	05 90       	lpm	r0, Z+
     38e:	0d 92       	st	X+, r0
     390:	ae 31       	cpi	r26, 0x1E	; 30
     392:	b1 07       	cpc	r27, r17
     394:	d9 f7       	brne	.-10     	; 0x38c <__do_copy_data+0xc>

00000396 <__do_clear_bss>:
     396:	22 e0       	ldi	r18, 0x02	; 2
     398:	ae e1       	ldi	r26, 0x1E	; 30
     39a:	b1 e0       	ldi	r27, 0x01	; 1
     39c:	01 c0       	rjmp	.+2      	; 0x3a0 <.do_clear_bss_start>

0000039e <.do_clear_bss_loop>:
     39e:	1d 92       	st	X+, r1

000003a0 <.do_clear_bss_start>:
     3a0:	a0 36       	cpi	r26, 0x60	; 96
     3a2:	b2 07       	cpc	r27, r18
     3a4:	e1 f7       	brne	.-8      	; 0x39e <.do_clear_bss_loop>
     3a6:	0e 94 7d 04 	call	0x8fa	; 0x8fa <main>
     3aa:	0c 94 31 1b 	jmp	0x3662	; 0x3662 <_exit>

000003ae <__bad_interrupt>:
     3ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003b2 <unselect_rows>:
*/
inline
bool matrix_is_on(uint8_t row, uint8_t col)
{
    return (matrix[row] & ((matrix_row_t)1<<col));
}
     3b2:	8a b1       	in	r24, 0x0a	; 10
     3b4:	80 78       	andi	r24, 0x80	; 128
     3b6:	8a b9       	out	0x0a, r24	; 10
     3b8:	8b b1       	in	r24, 0x0b	; 11
     3ba:	80 78       	andi	r24, 0x80	; 128
     3bc:	8b b9       	out	0x0b, r24	; 11
     3be:	87 b1       	in	r24, 0x07	; 7
     3c0:	8b 7c       	andi	r24, 0xCB	; 203
     3c2:	87 b9       	out	0x07, r24	; 7
     3c4:	88 b1       	in	r24, 0x08	; 8
     3c6:	8b 7c       	andi	r24, 0xCB	; 203
     3c8:	88 b9       	out	0x08, r24	; 8
     3ca:	08 95       	ret

000003cc <matrix_init>:
     3cc:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <unselect_rows>
     3d0:	84 b1       	in	r24, 0x04	; 4
     3d2:	14 b8       	out	0x04, r1	; 4
     3d4:	85 b1       	in	r24, 0x05	; 5
     3d6:	8f ef       	ldi	r24, 0xFF	; 255
     3d8:	85 b9       	out	0x05, r24	; 5
     3da:	87 b1       	in	r24, 0x07	; 7
     3dc:	8f 73       	andi	r24, 0x3F	; 63
     3de:	87 b9       	out	0x07, r24	; 7
     3e0:	88 b1       	in	r24, 0x08	; 8
     3e2:	80 6c       	ori	r24, 0xC0	; 192
     3e4:	88 b9       	out	0x08, r24	; 8
     3e6:	e2 e3       	ldi	r30, 0x32	; 50
     3e8:	f1 e0       	ldi	r31, 0x01	; 1
     3ea:	ae e1       	ldi	r26, 0x1E	; 30
     3ec:	b1 e0       	ldi	r27, 0x01	; 1
     3ee:	11 92       	st	Z+, r1
     3f0:	11 92       	st	Z+, r1
     3f2:	1d 92       	st	X+, r1
     3f4:	1d 92       	st	X+, r1
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	e6 34       	cpi	r30, 0x46	; 70
     3fa:	f8 07       	cpc	r31, r24
     3fc:	c1 f7       	brne	.-16     	; 0x3ee <matrix_init+0x22>
     3fe:	08 95       	ret

00000400 <matrix_scan>:
     400:	df 92       	push	r13
     402:	ef 92       	push	r14
     404:	ff 92       	push	r15
     406:	0f 93       	push	r16
     408:	1f 93       	push	r17
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	0e e1       	ldi	r16, 0x1E	; 30
     410:	11 e0       	ldi	r17, 0x01	; 1
     412:	e8 01       	movw	r28, r16
     414:	f1 2c       	mov	r15, r1
     416:	ee 24       	eor	r14, r14
     418:	e3 94       	inc	r14
     41a:	e5 e0       	ldi	r30, 0x05	; 5
     41c:	de 2e       	mov	r13, r30
     41e:	8f 2d       	mov	r24, r15
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	fc 01       	movw	r30, r24
     424:	31 97       	sbiw	r30, 0x01	; 1
     426:	e9 30       	cpi	r30, 0x09	; 9
     428:	f1 05       	cpc	r31, r1
     42a:	20 f4       	brcc	.+8      	; 0x434 <matrix_scan+0x34>
     42c:	e6 5c       	subi	r30, 0xC6	; 198
     42e:	ff 4f       	sbci	r31, 0xFF	; 255
     430:	0c 94 fa 1a 	jmp	0x35f4	; 0x35f4 <__tablejump2__>
     434:	50 9a       	sbi	0x0a, 0	; 10
     436:	58 98       	cbi	0x0b, 0	; 11
     438:	1a c0       	rjmp	.+52     	; 0x46e <matrix_scan+0x6e>
     43a:	51 9a       	sbi	0x0a, 1	; 10
     43c:	59 98       	cbi	0x0b, 1	; 11
     43e:	17 c0       	rjmp	.+46     	; 0x46e <matrix_scan+0x6e>
     440:	52 9a       	sbi	0x0a, 2	; 10
     442:	5a 98       	cbi	0x0b, 2	; 11
     444:	14 c0       	rjmp	.+40     	; 0x46e <matrix_scan+0x6e>
     446:	53 9a       	sbi	0x0a, 3	; 10
     448:	5b 98       	cbi	0x0b, 3	; 11
     44a:	11 c0       	rjmp	.+34     	; 0x46e <matrix_scan+0x6e>
     44c:	54 9a       	sbi	0x0a, 4	; 10
     44e:	5c 98       	cbi	0x0b, 4	; 11
     450:	0e c0       	rjmp	.+28     	; 0x46e <matrix_scan+0x6e>
     452:	55 9a       	sbi	0x0a, 5	; 10
     454:	5d 98       	cbi	0x0b, 5	; 11
     456:	0b c0       	rjmp	.+22     	; 0x46e <matrix_scan+0x6e>
     458:	56 9a       	sbi	0x0a, 6	; 10
     45a:	5e 98       	cbi	0x0b, 6	; 11
     45c:	08 c0       	rjmp	.+16     	; 0x46e <matrix_scan+0x6e>
     45e:	3a 9a       	sbi	0x07, 2	; 7
     460:	42 98       	cbi	0x08, 2	; 8
     462:	05 c0       	rjmp	.+10     	; 0x46e <matrix_scan+0x6e>
     464:	3c 9a       	sbi	0x07, 4	; 7
     466:	44 98       	cbi	0x08, 4	; 8
     468:	02 c0       	rjmp	.+4      	; 0x46e <matrix_scan+0x6e>
     46a:	3d 9a       	sbi	0x07, 5	; 7
     46c:	45 98       	cbi	0x08, 5	; 8
     46e:	80 ea       	ldi	r24, 0xA0	; 160
     470:	8a 95       	dec	r24
     472:	f1 f7       	brne	.-4      	; 0x470 <matrix_scan+0x70>
     474:	83 b1       	in	r24, 0x03	; 3
     476:	81 70       	andi	r24, 0x01	; 1
     478:	8e 25       	eor	r24, r14
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	19 99       	sbic	0x03, 1	; 3
     47e:	03 c0       	rjmp	.+6      	; 0x486 <matrix_scan+0x86>
     480:	e2 e0       	ldi	r30, 0x02	; 2
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	02 c0       	rjmp	.+4      	; 0x48a <matrix_scan+0x8a>
     486:	e0 e0       	ldi	r30, 0x00	; 0
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	8e 2b       	or	r24, r30
     48c:	9f 2b       	or	r25, r31
     48e:	1a 99       	sbic	0x03, 2	; 3
     490:	03 c0       	rjmp	.+6      	; 0x498 <matrix_scan+0x98>
     492:	e4 e0       	ldi	r30, 0x04	; 4
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	02 c0       	rjmp	.+4      	; 0x49c <matrix_scan+0x9c>
     498:	e0 e0       	ldi	r30, 0x00	; 0
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	8e 2b       	or	r24, r30
     49e:	9f 2b       	or	r25, r31
     4a0:	1b 99       	sbic	0x03, 3	; 3
     4a2:	03 c0       	rjmp	.+6      	; 0x4aa <matrix_scan+0xaa>
     4a4:	48 e0       	ldi	r20, 0x08	; 8
     4a6:	50 e0       	ldi	r21, 0x00	; 0
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <matrix_scan+0xae>
     4aa:	40 e0       	ldi	r20, 0x00	; 0
     4ac:	50 e0       	ldi	r21, 0x00	; 0
     4ae:	84 2b       	or	r24, r20
     4b0:	95 2b       	or	r25, r21
     4b2:	1c 99       	sbic	0x03, 4	; 3
     4b4:	03 c0       	rjmp	.+6      	; 0x4bc <matrix_scan+0xbc>
     4b6:	20 e1       	ldi	r18, 0x10	; 16
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <matrix_scan+0xc0>
     4bc:	20 e0       	ldi	r18, 0x00	; 0
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	82 2b       	or	r24, r18
     4c2:	93 2b       	or	r25, r19
     4c4:	1d 99       	sbic	0x03, 5	; 3
     4c6:	03 c0       	rjmp	.+6      	; 0x4ce <matrix_scan+0xce>
     4c8:	e0 e2       	ldi	r30, 0x20	; 32
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <matrix_scan+0xd2>
     4ce:	e0 e0       	ldi	r30, 0x00	; 0
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	8e 2b       	or	r24, r30
     4d4:	9f 2b       	or	r25, r31
     4d6:	1e 99       	sbic	0x03, 6	; 3
     4d8:	03 c0       	rjmp	.+6      	; 0x4e0 <matrix_scan+0xe0>
     4da:	60 e4       	ldi	r22, 0x40	; 64
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	02 c0       	rjmp	.+4      	; 0x4e4 <matrix_scan+0xe4>
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	86 2b       	or	r24, r22
     4e6:	97 2b       	or	r25, r23
     4e8:	63 b1       	in	r22, 0x03	; 3
     4ea:	06 2e       	mov	r0, r22
     4ec:	00 0c       	add	r0, r0
     4ee:	77 0b       	sbc	r23, r23
     4f0:	60 95       	com	r22
     4f2:	70 95       	com	r23
     4f4:	9b 01       	movw	r18, r22
     4f6:	22 27       	eor	r18, r18
     4f8:	33 0f       	add	r19, r19
     4fa:	22 1f       	adc	r18, r18
     4fc:	33 27       	eor	r19, r19
     4fe:	36 95       	lsr	r19
     500:	32 2f       	mov	r19, r18
     502:	22 27       	eor	r18, r18
     504:	37 95       	ror	r19
     506:	27 95       	ror	r18
     508:	ac 01       	movw	r20, r24
     50a:	42 2b       	or	r20, r18
     50c:	53 2b       	or	r21, r19
     50e:	26 b1       	in	r18, 0x06	; 6
     510:	02 2e       	mov	r0, r18
     512:	00 0c       	add	r0, r0
     514:	33 0b       	sbc	r19, r19
     516:	20 95       	com	r18
     518:	30 95       	com	r19
     51a:	c9 01       	movw	r24, r18
     51c:	88 27       	eor	r24, r24
     51e:	99 0f       	add	r25, r25
     520:	88 1f       	adc	r24, r24
     522:	99 27       	eor	r25, r25
     524:	98 2f       	mov	r25, r24
     526:	88 27       	eor	r24, r24
     528:	84 2b       	or	r24, r20
     52a:	95 2b       	or	r25, r21
     52c:	36 99       	sbic	0x06, 6	; 6
     52e:	03 c0       	rjmp	.+6      	; 0x536 <__stack+0x37>
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	32 e0       	ldi	r19, 0x02	; 2
     534:	02 c0       	rjmp	.+4      	; 0x53a <__stack+0x3b>
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	82 2b       	or	r24, r18
     53c:	93 2b       	or	r25, r19
     53e:	28 81       	ld	r18, Y
     540:	39 81       	ldd	r19, Y+1	; 0x01
     542:	28 17       	cp	r18, r24
     544:	39 07       	cpc	r19, r25
     546:	21 f0       	breq	.+8      	; 0x550 <__stack+0x51>
     548:	99 83       	std	Y+1, r25	; 0x01
     54a:	88 83       	st	Y, r24
     54c:	d0 92 00 01 	sts	0x0100, r13	; 0x800100 <__data_start>
     550:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <unselect_rows>
     554:	f3 94       	inc	r15
     556:	22 96       	adiw	r28, 0x02	; 2
     558:	9a e0       	ldi	r25, 0x0A	; 10
     55a:	f9 12       	cpse	r15, r25
     55c:	60 cf       	rjmp	.-320    	; 0x41e <matrix_scan+0x1e>
     55e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     562:	88 23       	and	r24, r24
     564:	c1 f0       	breq	.+48     	; 0x596 <__stack+0x97>
     566:	81 50       	subi	r24, 0x01	; 1
     568:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     56c:	88 23       	and	r24, r24
     56e:	39 f0       	breq	.+14     	; 0x57e <__stack+0x7f>
     570:	af e9       	ldi	r26, 0x9F	; 159
     572:	bf e0       	ldi	r27, 0x0F	; 15
     574:	11 97       	sbiw	r26, 0x01	; 1
     576:	f1 f7       	brne	.-4      	; 0x574 <__stack+0x75>
     578:	00 c0       	rjmp	.+0      	; 0x57a <__stack+0x7b>
     57a:	00 00       	nop
     57c:	0c c0       	rjmp	.+24     	; 0x596 <__stack+0x97>
     57e:	e2 e3       	ldi	r30, 0x32	; 50
     580:	f1 e0       	ldi	r31, 0x01	; 1
     582:	d8 01       	movw	r26, r16
     584:	8d 91       	ld	r24, X+
     586:	9d 91       	ld	r25, X+
     588:	8d 01       	movw	r16, r26
     58a:	81 93       	st	Z+, r24
     58c:	91 93       	st	Z+, r25
     58e:	b1 e0       	ldi	r27, 0x01	; 1
     590:	02 33       	cpi	r16, 0x32	; 50
     592:	1b 07       	cpc	r17, r27
     594:	b1 f7       	brne	.-20     	; 0x582 <__stack+0x83>
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	1f 91       	pop	r17
     59e:	0f 91       	pop	r16
     5a0:	ff 90       	pop	r15
     5a2:	ef 90       	pop	r14
     5a4:	df 90       	pop	r13
     5a6:	08 95       	ret

000005a8 <matrix_get_row>:

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
     5a8:	e8 2f       	mov	r30, r24
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	ee 0f       	add	r30, r30
     5ae:	ff 1f       	adc	r31, r31
     5b0:	ee 5c       	subi	r30, 0xCE	; 206
     5b2:	fe 4f       	sbci	r31, 0xFE	; 254
}
     5b4:	80 81       	ld	r24, Z
     5b6:	91 81       	ldd	r25, Z+1	; 0x01
     5b8:	08 95       	ret

000005ba <matrix_print>:

void matrix_print(void)
{
     5ba:	08 95       	ret

000005bc <led_set>:
#include "stdint.h"
#include "led.h"


void led_set(uint8_t usb_led)
{
     5bc:	08 95       	ret

000005be <keyboard_leds>:
{
#ifdef LUFA_DEBUG_SUART
    xmit(c);
#endif
    return 0;
}
     5be:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <keyboard_led_stats>
     5c2:	08 95       	ret

000005c4 <send_mouse>:
     5c4:	08 95       	ret

000005c6 <send_consumer>:
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	00 d0       	rcall	.+0      	; 0x5cc <send_consumer+0x6>
     5cc:	1f 92       	push	r1
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
     5d2:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <USB_DeviceState>
     5d6:	24 30       	cpi	r18, 0x04	; 4
     5d8:	21 f5       	brne	.+72     	; 0x622 <send_consumer+0x5c>
     5da:	23 e0       	ldi	r18, 0x03	; 3
     5dc:	29 83       	std	Y+1, r18	; 0x01
     5de:	9b 83       	std	Y+3, r25	; 0x03
     5e0:	8a 83       	std	Y+2, r24	; 0x02
     5e2:	82 e0       	ldi	r24, 0x02	; 2
     5e4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
     5ea:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     5ee:	81 50       	subi	r24, 0x01	; 1
     5f0:	95 fd       	sbrc	r25, 5
     5f2:	06 c0       	rjmp	.+12     	; 0x600 <send_consumer+0x3a>
     5f4:	95 ed       	ldi	r25, 0xD5	; 213
     5f6:	9a 95       	dec	r25
     5f8:	f1 f7       	brne	.-4      	; 0x5f6 <send_consumer+0x30>
     5fa:	00 00       	nop
     5fc:	81 11       	cpse	r24, r1
     5fe:	f5 cf       	rjmp	.-22     	; 0x5ea <send_consumer+0x24>
     600:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     604:	85 ff       	sbrs	r24, 5
     606:	0d c0       	rjmp	.+26     	; 0x622 <send_consumer+0x5c>
     608:	40 e0       	ldi	r20, 0x00	; 0
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	63 e0       	ldi	r22, 0x03	; 3
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	ce 01       	movw	r24, r28
     612:	01 96       	adiw	r24, 0x01	; 1
     614:	0e 94 38 05 	call	0xa70	; 0xa70 <Endpoint_Write_Stream_LE>
     618:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     61c:	8e 77       	andi	r24, 0x7E	; 126
     61e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	08 95       	ret

0000062e <send_system>:
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	00 d0       	rcall	.+0      	; 0x634 <send_system+0x6>
     634:	1f 92       	push	r1
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	9c 01       	movw	r18, r24
     63c:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <USB_DeviceState>
     640:	84 30       	cpi	r24, 0x04	; 4
     642:	19 f5       	brne	.+70     	; 0x68a <send_system+0x5c>
     644:	92 e0       	ldi	r25, 0x02	; 2
     646:	99 83       	std	Y+1, r25	; 0x01
     648:	3b 83       	std	Y+3, r19	; 0x03
     64a:	2a 83       	std	Y+2, r18	; 0x02
     64c:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     650:	8f ef       	ldi	r24, 0xFF	; 255
     652:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     656:	81 50       	subi	r24, 0x01	; 1
     658:	95 fd       	sbrc	r25, 5
     65a:	06 c0       	rjmp	.+12     	; 0x668 <send_system+0x3a>
     65c:	95 ed       	ldi	r25, 0xD5	; 213
     65e:	9a 95       	dec	r25
     660:	f1 f7       	brne	.-4      	; 0x65e <send_system+0x30>
     662:	00 00       	nop
     664:	81 11       	cpse	r24, r1
     666:	f5 cf       	rjmp	.-22     	; 0x652 <send_system+0x24>
     668:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     66c:	85 ff       	sbrs	r24, 5
     66e:	0d c0       	rjmp	.+26     	; 0x68a <send_system+0x5c>
     670:	40 e0       	ldi	r20, 0x00	; 0
     672:	50 e0       	ldi	r21, 0x00	; 0
     674:	63 e0       	ldi	r22, 0x03	; 3
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	ce 01       	movw	r24, r28
     67a:	01 96       	adiw	r24, 0x01	; 1
     67c:	0e 94 38 05 	call	0xa70	; 0xa70 <Endpoint_Write_Stream_LE>
     680:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     684:	8e 77       	andi	r24, 0x7E	; 126
     686:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <send_keyboard>:
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <USB_DeviceState>
     69e:	24 30       	cpi	r18, 0x04	; 4
     6a0:	09 f0       	breq	.+2      	; 0x6a4 <send_keyboard+0xe>
     6a2:	48 c0       	rjmp	.+144    	; 0x734 <send_keyboard+0x9e>
     6a4:	ec 01       	movw	r28, r24
     6a6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <keyboard_protocol>
     6aa:	88 23       	and	r24, r24
     6ac:	e1 f0       	breq	.+56     	; 0x6e6 <send_keyboard+0x50>
     6ae:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <keyboard_nkro>
     6b2:	88 23       	and	r24, r24
     6b4:	c1 f0       	breq	.+48     	; 0x6e6 <send_keyboard+0x50>
     6b6:	83 e0       	ldi	r24, 0x03	; 3
     6b8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     6bc:	8f ef       	ldi	r24, 0xFF	; 255
     6be:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     6c2:	81 50       	subi	r24, 0x01	; 1
     6c4:	95 fd       	sbrc	r25, 5
     6c6:	06 c0       	rjmp	.+12     	; 0x6d4 <send_keyboard+0x3e>
     6c8:	9a e2       	ldi	r25, 0x2A	; 42
     6ca:	9a 95       	dec	r25
     6cc:	f1 f7       	brne	.-4      	; 0x6ca <send_keyboard+0x34>
     6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <send_keyboard+0x3a>
     6d0:	81 11       	cpse	r24, r1
     6d2:	f5 cf       	rjmp	.-22     	; 0x6be <send_keyboard+0x28>
     6d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     6d8:	85 ff       	sbrs	r24, 5
     6da:	2c c0       	rjmp	.+88     	; 0x734 <send_keyboard+0x9e>
     6dc:	40 e0       	ldi	r20, 0x00	; 0
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	60 e2       	ldi	r22, 0x20	; 32
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	17 c0       	rjmp	.+46     	; 0x714 <send_keyboard+0x7e>
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     6ec:	8f ef       	ldi	r24, 0xFF	; 255
     6ee:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     6f2:	81 50       	subi	r24, 0x01	; 1
     6f4:	95 fd       	sbrc	r25, 5
     6f6:	06 c0       	rjmp	.+12     	; 0x704 <send_keyboard+0x6e>
     6f8:	95 ed       	ldi	r25, 0xD5	; 213
     6fa:	9a 95       	dec	r25
     6fc:	f1 f7       	brne	.-4      	; 0x6fa <send_keyboard+0x64>
     6fe:	00 00       	nop
     700:	81 11       	cpse	r24, r1
     702:	f5 cf       	rjmp	.-22     	; 0x6ee <send_keyboard+0x58>
     704:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     708:	85 ff       	sbrs	r24, 5
     70a:	14 c0       	rjmp	.+40     	; 0x734 <send_keyboard+0x9e>
     70c:	40 e0       	ldi	r20, 0x00	; 0
     70e:	50 e0       	ldi	r21, 0x00	; 0
     710:	68 e0       	ldi	r22, 0x08	; 8
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	ce 01       	movw	r24, r28
     716:	0e 94 38 05 	call	0xa70	; 0xa70 <Endpoint_Write_Stream_LE>
     71a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     71e:	8e 77       	andi	r24, 0x7E	; 126
     720:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     724:	80 e2       	ldi	r24, 0x20	; 32
     726:	fe 01       	movw	r30, r28
     728:	a7 e4       	ldi	r26, 0x47	; 71
     72a:	b1 e0       	ldi	r27, 0x01	; 1
     72c:	01 90       	ld	r0, Z+
     72e:	0d 92       	st	X+, r0
     730:	8a 95       	dec	r24
     732:	e1 f7       	brne	.-8      	; 0x72c <send_keyboard+0x96>
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	08 95       	ret

0000073a <EVENT_USB_Device_Reset>:
     73a:	08 95       	ret

0000073c <EVENT_USB_Device_ConfigurationChanged>:
     73c:	42 e0       	ldi	r20, 0x02	; 2
     73e:	61 ec       	ldi	r22, 0xC1	; 193
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	0e 94 3c 06 	call	0xc78	; 0xc78 <Endpoint_ConfigureEndpoint_Prv>
     746:	42 e0       	ldi	r20, 0x02	; 2
     748:	61 ec       	ldi	r22, 0xC1	; 193
     74a:	82 e0       	ldi	r24, 0x02	; 2
     74c:	0e 94 3c 06 	call	0xc78	; 0xc78 <Endpoint_ConfigureEndpoint_Prv>
     750:	42 e2       	ldi	r20, 0x22	; 34
     752:	61 ec       	ldi	r22, 0xC1	; 193
     754:	83 e0       	ldi	r24, 0x03	; 3
     756:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <Endpoint_ConfigureEndpoint_Prv>

0000075a <EVENT_USB_Device_ControlRequest>:
     75a:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <USB_ControlRequest+0x1>
     75e:	83 30       	cpi	r24, 0x03	; 3
     760:	09 f4       	brne	.+2      	; 0x764 <EVENT_USB_Device_ControlRequest+0xa>
     762:	55 c0       	rjmp	.+170    	; 0x80e <EVENT_USB_Device_ControlRequest+0xb4>
     764:	30 f4       	brcc	.+12     	; 0x772 <EVENT_USB_Device_ControlRequest+0x18>
     766:	81 30       	cpi	r24, 0x01	; 1
     768:	71 f0       	breq	.+28     	; 0x786 <EVENT_USB_Device_ControlRequest+0x2c>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	09 f4       	brne	.+2      	; 0x770 <EVENT_USB_Device_ControlRequest+0x16>
     76e:	8e c0       	rjmp	.+284    	; 0x88c <EVENT_USB_Device_ControlRequest+0x132>
     770:	08 95       	ret
     772:	8a 30       	cpi	r24, 0x0A	; 10
     774:	09 f4       	brne	.+2      	; 0x778 <EVENT_USB_Device_ControlRequest+0x1e>
     776:	7a c0       	rjmp	.+244    	; 0x86c <EVENT_USB_Device_ControlRequest+0x112>
     778:	8b 30       	cpi	r24, 0x0B	; 11
     77a:	09 f4       	brne	.+2      	; 0x77e <EVENT_USB_Device_ControlRequest+0x24>
     77c:	60 c0       	rjmp	.+192    	; 0x83e <EVENT_USB_Device_ControlRequest+0xe4>
     77e:	89 30       	cpi	r24, 0x09	; 9
     780:	09 f0       	breq	.+2      	; 0x784 <EVENT_USB_Device_ControlRequest+0x2a>
     782:	9c c0       	rjmp	.+312    	; 0x8bc <EVENT_USB_Device_ControlRequest+0x162>
     784:	20 c0       	rjmp	.+64     	; 0x7c6 <EVENT_USB_Device_ControlRequest+0x6c>
     786:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <USB_ControlRequest>
     78a:	81 3a       	cpi	r24, 0xA1	; 161
     78c:	09 f0       	breq	.+2      	; 0x790 <EVENT_USB_Device_ControlRequest+0x36>
     78e:	96 c0       	rjmp	.+300    	; 0x8bc <EVENT_USB_Device_ControlRequest+0x162>
     790:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     794:	87 7f       	andi	r24, 0xF7	; 247
     796:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     79a:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <USB_ControlRequest+0x4>
     79e:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <USB_ControlRequest+0x5>
     7a2:	89 2b       	or	r24, r25
     7a4:	21 f4       	brne	.+8      	; 0x7ae <EVENT_USB_Device_ControlRequest+0x54>
     7a6:	60 e2       	ldi	r22, 0x20	; 32
     7a8:	87 e4       	ldi	r24, 0x47	; 71
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	03 c0       	rjmp	.+6      	; 0x7b4 <EVENT_USB_Device_ControlRequest+0x5a>
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	0e 94 83 05 	call	0xb06	; 0xb06 <Endpoint_Write_Control_Stream_LE>
     7ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     7be:	8b 77       	andi	r24, 0x7B	; 123
     7c0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     7c4:	08 95       	ret
     7c6:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <USB_ControlRequest>
     7ca:	81 32       	cpi	r24, 0x21	; 33
     7cc:	09 f0       	breq	.+2      	; 0x7d0 <EVENT_USB_Device_ControlRequest+0x76>
     7ce:	76 c0       	rjmp	.+236    	; 0x8bc <EVENT_USB_Device_ControlRequest+0x162>
     7d0:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <USB_ControlRequest+0x4>
     7d4:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <USB_ControlRequest+0x5>
     7d8:	00 97       	sbiw	r24, 0x00	; 0
     7da:	19 f0       	breq	.+6      	; 0x7e2 <EVENT_USB_Device_ControlRequest+0x88>
     7dc:	02 97       	sbiw	r24, 0x02	; 2
     7de:	09 f0       	breq	.+2      	; 0x7e2 <EVENT_USB_Device_ControlRequest+0x88>
     7e0:	6d c0       	rjmp	.+218    	; 0x8bc <EVENT_USB_Device_ControlRequest+0x162>
     7e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     7e6:	87 7f       	andi	r24, 0xF7	; 247
     7e8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     7ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     7f0:	82 fd       	sbrc	r24, 2
     7f2:	05 c0       	rjmp	.+10     	; 0x7fe <EVENT_USB_Device_ControlRequest+0xa4>
     7f4:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <USB_DeviceState>
     7f8:	81 11       	cpse	r24, r1
     7fa:	f8 cf       	rjmp	.-16     	; 0x7ec <EVENT_USB_Device_ControlRequest+0x92>
     7fc:	5f c0       	rjmp	.+190    	; 0x8bc <EVENT_USB_Device_ControlRequest+0x162>
     7fe:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     802:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <keyboard_led_stats>
     806:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     80a:	8b 77       	andi	r24, 0x7B	; 123
     80c:	53 c0       	rjmp	.+166    	; 0x8b4 <EVENT_USB_Device_ControlRequest+0x15a>
     80e:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <USB_ControlRequest>
     812:	81 3a       	cpi	r24, 0xA1	; 161
     814:	09 f0       	breq	.+2      	; 0x818 <EVENT_USB_Device_ControlRequest+0xbe>
     816:	52 c0       	rjmp	.+164    	; 0x8bc <EVENT_USB_Device_ControlRequest+0x162>
     818:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <USB_ControlRequest+0x4>
     81c:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <USB_ControlRequest+0x5>
     820:	89 2b       	or	r24, r25
     822:	09 f0       	breq	.+2      	; 0x826 <EVENT_USB_Device_ControlRequest+0xcc>
     824:	4b c0       	rjmp	.+150    	; 0x8bc <EVENT_USB_Device_ControlRequest+0x162>
     826:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     82a:	87 7f       	andi	r24, 0xF7	; 247
     82c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     830:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     834:	80 ff       	sbrs	r24, 0
     836:	fc cf       	rjmp	.-8      	; 0x830 <EVENT_USB_Device_ControlRequest+0xd6>
     838:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <keyboard_protocol>
     83c:	36 c0       	rjmp	.+108    	; 0x8aa <EVENT_USB_Device_ControlRequest+0x150>
     83e:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <USB_ControlRequest>
     842:	81 32       	cpi	r24, 0x21	; 33
     844:	d9 f5       	brne	.+118    	; 0x8bc <EVENT_USB_Device_ControlRequest+0x162>
     846:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <USB_ControlRequest+0x4>
     84a:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <USB_ControlRequest+0x5>
     84e:	89 2b       	or	r24, r25
     850:	a9 f5       	brne	.+106    	; 0x8bc <EVENT_USB_Device_ControlRequest+0x162>
     852:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     856:	87 7f       	andi	r24, 0xF7	; 247
     858:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     85c:	0e 94 71 06 	call	0xce2	; 0xce2 <Endpoint_ClearStatusStage>
     860:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <USB_ControlRequest+0x2>
     864:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <keyboard_protocol>
     868:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <clear_keyboard>
     86c:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <USB_ControlRequest>
     870:	81 32       	cpi	r24, 0x21	; 33
     872:	21 f5       	brne	.+72     	; 0x8bc <EVENT_USB_Device_ControlRequest+0x162>
     874:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     878:	87 7f       	andi	r24, 0xF7	; 247
     87a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     87e:	0e 94 71 06 	call	0xce2	; 0xce2 <Endpoint_ClearStatusStage>
     882:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <USB_ControlRequest+0x3>
     886:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <keyboard_idle>
     88a:	08 95       	ret
     88c:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <USB_ControlRequest>
     890:	81 3a       	cpi	r24, 0xA1	; 161
     892:	a1 f4       	brne	.+40     	; 0x8bc <EVENT_USB_Device_ControlRequest+0x162>
     894:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     898:	87 7f       	andi	r24, 0xF7	; 247
     89a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     89e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     8a2:	80 ff       	sbrs	r24, 0
     8a4:	fc cf       	rjmp	.-8      	; 0x89e <EVENT_USB_Device_ControlRequest+0x144>
     8a6:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <keyboard_idle>
     8aa:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     8ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     8b2:	8e 77       	andi	r24, 0x7E	; 126
     8b4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     8b8:	0c 94 71 06 	jmp	0xce2	; 0xce2 <Endpoint_ClearStatusStage>
     8bc:	08 95       	ret

000008be <hook_late_init>:
/* hooks */
__attribute__((weak))
void hook_early_init(void) {}

__attribute__((weak))
void hook_late_init(void) {}
     8be:	08 95       	ret

000008c0 <hook_early_init>:
     8c0:	0c 94 5f 04 	jmp	0x8be	; 0x8be <hook_late_init>

000008c4 <hook_usb_suspend_entry>:
void hook_usb_suspend_entry(void)
{
    // Turn LED off to save power
    // Set 0 with putting aside status before suspend and restore
    // it after wakeup, then LED is updated at keyboard_task() in main loop
    _led_stats = keyboard_led_stats;
     8c4:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <keyboard_led_stats>
     8c8:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <_led_stats>
    keyboard_led_stats = 0;
     8cc:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <keyboard_led_stats>
    led_set(keyboard_led_stats);
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	0e 94 de 02 	call	0x5bc	; 0x5bc <led_set>

    matrix_clear();
     8d6:	0e 94 65 0a 	call	0x14ca	; 0x14ca <matrix_clear>
    clear_keyboard();
     8da:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <clear_keyboard>

000008de <EVENT_USB_Device_Suspend>:
void EVENT_USB_Device_Suspend()
{
#ifdef LUFA_DEBUG
    print("[S]");
#endif
    hook_usb_suspend_entry();
     8de:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <hook_usb_suspend_entry>

000008e2 <hook_usb_suspend_loop>:
}

__attribute__((weak))
void hook_usb_suspend_loop(void)
{
    suspend_power_down();
     8e2:	0e 94 12 16 	call	0x2c24	; 0x2c24 <suspend_power_down>
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
     8e6:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <USB_Device_RemoteWakeupEnabled>
     8ea:	88 23       	and	r24, r24
     8ec:	29 f0       	breq	.+10     	; 0x8f8 <hook_usb_suspend_loop+0x16>
     8ee:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <suspend_wakeup_condition>
     8f2:	81 11       	cpse	r24, r1
        USB_Device_SendRemoteWakeup();
     8f4:	0c 94 22 05 	jmp	0xa44	; 0xa44 <USB_Device_SendRemoteWakeup>
     8f8:	08 95       	ret

000008fa <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
     8fa:	84 b7       	in	r24, 0x34	; 52
     8fc:	87 7f       	andi	r24, 0xF7	; 247
     8fe:	84 bf       	out	0x34, r24	; 52
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	f8 94       	cli
     904:	a8 95       	wdr
     906:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     90a:	88 61       	ori	r24, 0x18	; 24
     90c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     910:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     914:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	80 e8       	ldi	r24, 0x80	; 128
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	f8 94       	cli
     91e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
     922:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
     926:	0f be       	out	0x3f, r0	; 63
    SUART_OUT_PORT |= (1<<SUART_OUT_BIT);
#endif
    print_set_sendchar(sendchar);
    print("\r\ninit\n");

    hook_early_init();
     928:	0e 94 60 04 	call	0x8c0	; 0x8c0 <hook_early_init>
    keyboard_setup();
     92c:	0e 94 b8 09 	call	0x1370	; 0x1370 <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
     930:	0e 94 c3 06 	call	0xd86	; 0xd86 <USB_Disable>

    USB_Init();
     934:	0e 94 16 07 	call	0xe2c	; 0xe2c <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     938:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     93c:	84 60       	ori	r24, 0x04	; 4
     93e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    print("\r\ninit\n");

    hook_early_init();
    keyboard_setup();
    setup_usb();
    sei();
     942:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
     944:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <USB_DeviceState>
     948:	84 30       	cpi	r24, 0x04	; 4
     94a:	e1 f7       	brne	.-8      	; 0x944 <main+0x4a>
     94c:	81 ed       	ldi	r24, 0xD1	; 209
     94e:	97 e0       	ldi	r25, 0x07	; 7
     950:	01 97       	sbiw	r24, 0x01	; 1
    }

    /* wait for Console startup */
    // TODO: long delay often works anyhoo but proper startup would be better
    uint16_t delay = 2000;
    while (delay--) {
     952:	39 f0       	breq	.+14     	; 0x962 <main+0x68>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     954:	ef e9       	ldi	r30, 0x9F	; 159
     956:	ff e0       	ldi	r31, 0x0F	; 15
     958:	31 97       	sbiw	r30, 0x01	; 1
     95a:	f1 f7       	brne	.-4      	; 0x958 <main+0x5e>
     95c:	00 c0       	rjmp	.+0      	; 0x95e <main+0x64>
     95e:	00 00       	nop
     960:	f7 cf       	rjmp	.-18     	; 0x950 <main+0x56>
    }

    print("USB configured.\n");

    /* init modules */
    keyboard_init();
     962:	0e 94 ba 09 	call	0x1374	; 0x1374 <keyboard_init>
    host_set_driver(&lufa_driver);
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	0e 94 70 09 	call	0x12e0	; 0x12e0 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    hook_late_init();
     96e:	0e 94 5f 04 	call	0x8be	; 0x8be <hook_late_init>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
     972:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <USB_DeviceState>
     976:	85 30       	cpi	r24, 0x05	; 5
     978:	19 f4       	brne	.+6      	; 0x980 <main+0x86>
#ifdef LUFA_DEBUG
            print("[s]");
#endif
            hook_usb_suspend_loop();
     97a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <hook_usb_suspend_loop>
     97e:	f9 cf       	rjmp	.-14     	; 0x972 <main+0x78>
        }

        keyboard_task();
     980:	0e 94 c0 09 	call	0x1380	; 0x1380 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
     984:	f6 cf       	rjmp	.-20     	; 0x972 <main+0x78>

00000986 <hook_usb_wakeup>:
}

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
     986:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <suspend_wakeup_init>
    // Restore LED status
    // BIOS/grub won't recognize/enumerate if led_set() takes long(around 40ms?)
    // Converters fall into the case and miss wakeup event(timeout to reply?) in the end.
    //led_set(host_keyboard_leds());
    // Instead, restore stats and update at keyboard_task() in main loop
    keyboard_led_stats = _led_stats;
     98a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <_led_stats>
     98e:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <keyboard_led_stats>
     992:	08 95       	ret

00000994 <EVENT_USB_Device_WakeUp>:
void EVENT_USB_Device_WakeUp()
{
#ifdef LUFA_DEBUG
    print("[W]");
#endif
    hook_usb_wakeup();
     994:	0c 94 c3 04 	jmp	0x986	; 0x986 <hook_usb_wakeup>

00000998 <CALLBACK_USB_GetDescriptor>:
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
     998:	29 2f       	mov	r18, r25
     99a:	33 27       	eor	r19, r19
     99c:	23 30       	cpi	r18, 0x03	; 3
     99e:	31 05       	cpc	r19, r1
     9a0:	c9 f0       	breq	.+50     	; 0x9d4 <CALLBACK_USB_GetDescriptor+0x3c>
     9a2:	60 f4       	brcc	.+24     	; 0x9bc <CALLBACK_USB_GetDescriptor+0x24>
     9a4:	21 30       	cpi	r18, 0x01	; 1
     9a6:	31 05       	cpc	r19, r1
     9a8:	81 f0       	breq	.+32     	; 0x9ca <CALLBACK_USB_GetDescriptor+0x32>
     9aa:	22 30       	cpi	r18, 0x02	; 2
     9ac:	31 05       	cpc	r19, r1
     9ae:	09 f0       	breq	.+2      	; 0x9b2 <CALLBACK_USB_GetDescriptor+0x1a>
     9b0:	41 c0       	rjmp	.+130    	; 0xa34 <CALLBACK_USB_GetDescriptor+0x9c>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
     9b2:	84 e5       	ldi	r24, 0x54	; 84
     9b4:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
     9b6:	2a e0       	ldi	r18, 0x0A	; 10
     9b8:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
     9ba:	40 c0       	rjmp	.+128    	; 0xa3c <CALLBACK_USB_GetDescriptor+0xa4>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
     9bc:	21 32       	cpi	r18, 0x21	; 33
     9be:	31 05       	cpc	r19, r1
     9c0:	e1 f0       	breq	.+56     	; 0x9fa <CALLBACK_USB_GetDescriptor+0x62>
     9c2:	22 32       	cpi	r18, 0x22	; 34
     9c4:	31 05       	cpc	r19, r1
     9c6:	31 f1       	breq	.+76     	; 0xa14 <CALLBACK_USB_GetDescriptor+0x7c>
     9c8:	35 c0       	rjmp	.+106    	; 0xa34 <CALLBACK_USB_GetDescriptor+0x9c>
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
     9ca:	82 e1       	ldi	r24, 0x12	; 18
     9cc:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
     9ce:	2e e5       	ldi	r18, 0x5E	; 94
     9d0:	32 e0       	ldi	r19, 0x02	; 2
     9d2:	34 c0       	rjmp	.+104    	; 0xa3c <CALLBACK_USB_GetDescriptor+0xa4>
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
     9d4:	99 27       	eor	r25, r25
     9d6:	81 30       	cpi	r24, 0x01	; 1
     9d8:	91 05       	cpc	r25, r1
     9da:	49 f0       	breq	.+18     	; 0x9ee <CALLBACK_USB_GetDescriptor+0x56>
     9dc:	28 f0       	brcs	.+10     	; 0x9e8 <CALLBACK_USB_GetDescriptor+0x50>
     9de:	02 97       	sbiw	r24, 0x02	; 2
     9e0:	49 f5       	brne	.+82     	; 0xa34 <CALLBACK_USB_GetDescriptor+0x9c>
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
     9e2:	ec ee       	ldi	r30, 0xEC	; 236
     9e4:	f1 e0       	ldi	r31, 0x01	; 1
     9e6:	05 c0       	rjmp	.+10     	; 0x9f2 <CALLBACK_USB_GetDescriptor+0x5a>
        case DTYPE_String:
            switch (DescriptorIndex )
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
     9e8:	e6 e0       	ldi	r30, 0x06	; 6
     9ea:	f2 e0       	ldi	r31, 0x02	; 2
     9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <CALLBACK_USB_GetDescriptor+0x5a>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     9ee:	ec ef       	ldi	r30, 0xFC	; 252
     9f0:	f1 e0       	ldi	r31, 0x01	; 1
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
     9f2:	84 91       	lpm	r24, Z
     9f4:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
     9f6:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
     9f8:	21 c0       	rjmp	.+66     	; 0xa3c <CALLBACK_USB_GetDescriptor+0xa4>
     9fa:	63 30       	cpi	r22, 0x03	; 3
     9fc:	d8 f4       	brcc	.+54     	; 0xa34 <CALLBACK_USB_GetDescriptor+0x9c>
     9fe:	e6 2f       	mov	r30, r22
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	ee 0f       	add	r30, r30
     a04:	ff 1f       	adc	r31, r31
     a06:	e8 5e       	subi	r30, 0xE8	; 232
     a08:	fe 4f       	sbci	r31, 0xFE	; 254
     a0a:	20 81       	ld	r18, Z
     a0c:	31 81       	ldd	r19, Z+1	; 0x01
     a0e:	89 e0       	ldi	r24, 0x09	; 9
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	14 c0       	rjmp	.+40     	; 0xa3c <CALLBACK_USB_GetDescriptor+0xa4>
     a14:	63 30       	cpi	r22, 0x03	; 3
     a16:	70 f4       	brcc	.+28     	; 0xa34 <CALLBACK_USB_GetDescriptor+0x9c>
     a18:	70 e0       	ldi	r23, 0x00	; 0
     a1a:	fb 01       	movw	r30, r22
     a1c:	ee 0f       	add	r30, r30
     a1e:	ff 1f       	adc	r31, r31
     a20:	ee 5e       	subi	r30, 0xEE	; 238
     a22:	fe 4f       	sbci	r31, 0xFE	; 254
     a24:	20 81       	ld	r18, Z
     a26:	31 81       	ldd	r19, Z+1	; 0x01
     a28:	fb 01       	movw	r30, r22
     a2a:	e1 5f       	subi	r30, 0xF1	; 241
     a2c:	fe 4f       	sbci	r31, 0xFE	; 254
     a2e:	80 81       	ld	r24, Z
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	04 c0       	rjmp	.+8      	; 0xa3c <CALLBACK_USB_GetDescriptor+0xa4>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
     a3c:	fa 01       	movw	r30, r20
     a3e:	31 83       	std	Z+1, r19	; 0x01
     a40:	20 83       	st	Z, r18
    return Size;
}
     a42:	08 95       	ret

00000a44 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     a44:	84 e0       	ldi	r24, 0x04	; 4
     a46:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     a48:	86 e0       	ldi	r24, 0x06	; 6
     a4a:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     a4c:	09 b4       	in	r0, 0x29	; 41
     a4e:	00 fe       	sbrs	r0, 0
     a50:	fd cf       	rjmp	.-6      	; 0xa4c <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     a52:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     a56:	8f 7d       	andi	r24, 0xDF	; 223
     a58:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
     a5c:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
     a60:	82 60       	ori	r24, 0x02	; 2
     a62:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
	while (UDCON & (1 << RMWKUP));
     a66:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
     a6a:	81 fd       	sbrc	r24, 1
     a6c:	fc cf       	rjmp	.-8      	; 0xa66 <USB_Device_SendRemoteWakeup+0x22>
}
     a6e:	08 95       	ret

00000a70 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     a70:	cf 92       	push	r12
     a72:	df 92       	push	r13
     a74:	ef 92       	push	r14
     a76:	ff 92       	push	r15
     a78:	0f 93       	push	r16
     a7a:	1f 93       	push	r17
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	ec 01       	movw	r28, r24
     a82:	8b 01       	movw	r16, r22
     a84:	7a 01       	movw	r14, r20
     a86:	0e 94 90 06 	call	0xd20	; 0xd20 <Endpoint_WaitUntilReady>
     a8a:	81 11       	cpse	r24, r1
     a8c:	33 c0       	rjmp	.+102    	; 0xaf4 <Endpoint_Write_Stream_LE+0x84>
     a8e:	e1 14       	cp	r14, r1
     a90:	f1 04       	cpc	r15, r1
     a92:	39 f0       	breq	.+14     	; 0xaa2 <Endpoint_Write_Stream_LE+0x32>
     a94:	f7 01       	movw	r30, r14
     a96:	80 81       	ld	r24, Z
     a98:	91 81       	ldd	r25, Z+1	; 0x01
     a9a:	08 1b       	sub	r16, r24
     a9c:	19 0b       	sbc	r17, r25
     a9e:	c8 0f       	add	r28, r24
     aa0:	d9 1f       	adc	r29, r25
     aa2:	c1 2c       	mov	r12, r1
     aa4:	d1 2c       	mov	r13, r1
     aa6:	01 15       	cp	r16, r1
     aa8:	11 05       	cpc	r17, r1
     aaa:	19 f1       	breq	.+70     	; 0xaf2 <Endpoint_Write_Stream_LE+0x82>
     aac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     ab0:	85 fd       	sbrc	r24, 5
     ab2:	16 c0       	rjmp	.+44     	; 0xae0 <Endpoint_Write_Stream_LE+0x70>
     ab4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     ab8:	8e 77       	andi	r24, 0x7E	; 126
     aba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     abe:	e1 14       	cp	r14, r1
     ac0:	f1 04       	cpc	r15, r1
     ac2:	49 f0       	breq	.+18     	; 0xad6 <Endpoint_Write_Stream_LE+0x66>
     ac4:	f7 01       	movw	r30, r14
     ac6:	80 81       	ld	r24, Z
     ac8:	91 81       	ldd	r25, Z+1	; 0x01
     aca:	c8 0e       	add	r12, r24
     acc:	d9 1e       	adc	r13, r25
     ace:	d1 82       	std	Z+1, r13	; 0x01
     ad0:	c0 82       	st	Z, r12
     ad2:	85 e0       	ldi	r24, 0x05	; 5
     ad4:	0f c0       	rjmp	.+30     	; 0xaf4 <Endpoint_Write_Stream_LE+0x84>
     ad6:	0e 94 90 06 	call	0xd20	; 0xd20 <Endpoint_WaitUntilReady>
     ada:	88 23       	and	r24, r24
     adc:	21 f3       	breq	.-56     	; 0xaa6 <Endpoint_Write_Stream_LE+0x36>
     ade:	0a c0       	rjmp	.+20     	; 0xaf4 <Endpoint_Write_Stream_LE+0x84>
     ae0:	89 91       	ld	r24, Y+
     ae2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     ae6:	01 50       	subi	r16, 0x01	; 1
     ae8:	11 09       	sbc	r17, r1
     aea:	ff ef       	ldi	r31, 0xFF	; 255
     aec:	cf 1a       	sub	r12, r31
     aee:	df 0a       	sbc	r13, r31
     af0:	da cf       	rjmp	.-76     	; 0xaa6 <Endpoint_Write_Stream_LE+0x36>
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	ff 90       	pop	r15
     afe:	ef 90       	pop	r14
     b00:	df 90       	pop	r13
     b02:	cf 90       	pop	r12
     b04:	08 95       	ret

00000b06 <Endpoint_Write_Control_Stream_LE>:
     b06:	20 91 5d 02 	lds	r18, 0x025D	; 0x80025d <USB_ControlRequest+0x6>
     b0a:	30 91 5e 02 	lds	r19, 0x025E	; 0x80025e <USB_ControlRequest+0x7>
     b0e:	26 17       	cp	r18, r22
     b10:	37 07       	cpc	r19, r23
     b12:	48 f0       	brcs	.+18     	; 0xb26 <Endpoint_Write_Control_Stream_LE+0x20>
     b14:	61 15       	cp	r22, r1
     b16:	71 05       	cpc	r23, r1
     b18:	39 f4       	brne	.+14     	; 0xb28 <Endpoint_Write_Control_Stream_LE+0x22>
     b1a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     b1e:	2e 77       	andi	r18, 0x7E	; 126
     b20:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     b24:	01 c0       	rjmp	.+2      	; 0xb28 <Endpoint_Write_Control_Stream_LE+0x22>
     b26:	b9 01       	movw	r22, r18
     b28:	fc 01       	movw	r30, r24
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	61 15       	cp	r22, r1
     b2e:	71 05       	cpc	r23, r1
     b30:	61 f1       	breq	.+88     	; 0xb8a <Endpoint_Write_Control_Stream_LE+0x84>
     b32:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <USB_DeviceState>
     b36:	88 23       	and	r24, r24
     b38:	d9 f1       	breq	.+118    	; 0xbb0 <Endpoint_Write_Control_Stream_LE+0xaa>
     b3a:	85 30       	cpi	r24, 0x05	; 5
     b3c:	d9 f1       	breq	.+118    	; 0xbb4 <Endpoint_Write_Control_Stream_LE+0xae>
     b3e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     b42:	83 fd       	sbrc	r24, 3
     b44:	39 c0       	rjmp	.+114    	; 0xbb8 <Endpoint_Write_Control_Stream_LE+0xb2>
     b46:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     b4a:	82 fd       	sbrc	r24, 2
     b4c:	2b c0       	rjmp	.+86     	; 0xba4 <Endpoint_Write_Control_Stream_LE+0x9e>
     b4e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     b52:	80 ff       	sbrs	r24, 0
     b54:	eb cf       	rjmp	.-42     	; 0xb2c <Endpoint_Write_Control_Stream_LE+0x26>
     b56:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	61 15       	cp	r22, r1
     b5e:	71 05       	cpc	r23, r1
     b60:	51 f0       	breq	.+20     	; 0xb76 <Endpoint_Write_Control_Stream_LE+0x70>
     b62:	88 30       	cpi	r24, 0x08	; 8
     b64:	91 05       	cpc	r25, r1
     b66:	38 f4       	brcc	.+14     	; 0xb76 <Endpoint_Write_Control_Stream_LE+0x70>
     b68:	21 91       	ld	r18, Z+
     b6a:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     b6e:	61 50       	subi	r22, 0x01	; 1
     b70:	71 09       	sbc	r23, r1
     b72:	01 96       	adiw	r24, 0x01	; 1
     b74:	f3 cf       	rjmp	.-26     	; 0xb5c <Endpoint_Write_Control_Stream_LE+0x56>
     b76:	21 e0       	ldi	r18, 0x01	; 1
     b78:	08 97       	sbiw	r24, 0x08	; 8
     b7a:	09 f0       	breq	.+2      	; 0xb7e <Endpoint_Write_Control_Stream_LE+0x78>
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     b82:	8e 77       	andi	r24, 0x7E	; 126
     b84:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     b88:	d1 cf       	rjmp	.-94     	; 0xb2c <Endpoint_Write_Control_Stream_LE+0x26>
     b8a:	21 11       	cpse	r18, r1
     b8c:	d2 cf       	rjmp	.-92     	; 0xb32 <Endpoint_Write_Control_Stream_LE+0x2c>
     b8e:	0a c0       	rjmp	.+20     	; 0xba4 <Endpoint_Write_Control_Stream_LE+0x9e>
     b90:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <USB_DeviceState>
     b94:	88 23       	and	r24, r24
     b96:	61 f0       	breq	.+24     	; 0xbb0 <Endpoint_Write_Control_Stream_LE+0xaa>
     b98:	85 30       	cpi	r24, 0x05	; 5
     b9a:	61 f0       	breq	.+24     	; 0xbb4 <Endpoint_Write_Control_Stream_LE+0xae>
     b9c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     ba0:	83 fd       	sbrc	r24, 3
     ba2:	0a c0       	rjmp	.+20     	; 0xbb8 <Endpoint_Write_Control_Stream_LE+0xb2>
     ba4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     ba8:	82 ff       	sbrs	r24, 2
     baa:	f2 cf       	rjmp	.-28     	; 0xb90 <Endpoint_Write_Control_Stream_LE+0x8a>
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	08 95       	ret
     bb0:	82 e0       	ldi	r24, 0x02	; 2
     bb2:	08 95       	ret
     bb4:	83 e0       	ldi	r24, 0x03	; 3
     bb6:	08 95       	ret
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	08 95       	ret

00000bbc <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     bbc:	20 91 5d 02 	lds	r18, 0x025D	; 0x80025d <USB_ControlRequest+0x6>
     bc0:	30 91 5e 02 	lds	r19, 0x025E	; 0x80025e <USB_ControlRequest+0x7>
     bc4:	26 17       	cp	r18, r22
     bc6:	37 07       	cpc	r19, r23
     bc8:	48 f0       	brcs	.+18     	; 0xbdc <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     bca:	61 15       	cp	r22, r1
     bcc:	71 05       	cpc	r23, r1
     bce:	39 f4       	brne	.+14     	; 0xbde <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bd0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     bd4:	2e 77       	andi	r18, 0x7E	; 126
     bd6:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     bda:	01 c0       	rjmp	.+2      	; 0xbde <Endpoint_Write_Control_PStream_LE+0x22>
     bdc:	b9 01       	movw	r22, r18
     bde:	fc 01       	movw	r30, r24
     be0:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     be2:	61 15       	cp	r22, r1
     be4:	71 05       	cpc	r23, r1
     be6:	79 f1       	breq	.+94     	; 0xc46 <Endpoint_Write_Control_PStream_LE+0x8a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     be8:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     bec:	88 23       	and	r24, r24
     bee:	09 f4       	brne	.+2      	; 0xbf2 <Endpoint_Write_Control_PStream_LE+0x36>
     bf0:	3d c0       	rjmp	.+122    	; 0xc6c <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     bf2:	85 30       	cpi	r24, 0x05	; 5
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <Endpoint_Write_Control_PStream_LE+0x3c>
     bf6:	3c c0       	rjmp	.+120    	; 0xc70 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bf8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     bfc:	83 fd       	sbrc	r24, 3
     bfe:	3a c0       	rjmp	.+116    	; 0xc74 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     c04:	82 fd       	sbrc	r24, 2
     c06:	2c c0       	rjmp	.+88     	; 0xc60 <Endpoint_Write_Control_PStream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c08:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  break;

		if (Endpoint_IsINReady())
     c0c:	80 ff       	sbrs	r24, 0
     c0e:	e9 cf       	rjmp	.-46     	; 0xbe2 <Endpoint_Write_Control_PStream_LE+0x26>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     c10:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     c14:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     c16:	61 15       	cp	r22, r1
     c18:	71 05       	cpc	r23, r1
     c1a:	59 f0       	breq	.+22     	; 0xc32 <Endpoint_Write_Control_PStream_LE+0x76>
     c1c:	88 30       	cpi	r24, 0x08	; 8
     c1e:	91 05       	cpc	r25, r1
     c20:	40 f4       	brcc	.+16     	; 0xc32 <Endpoint_Write_Control_PStream_LE+0x76>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     c22:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c24:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     c28:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     c2a:	61 50       	subi	r22, 0x01	; 1
     c2c:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     c2e:	01 96       	adiw	r24, 0x01	; 1
     c30:	f2 cf       	rjmp	.-28     	; 0xc16 <Endpoint_Write_Control_PStream_LE+0x5a>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     c32:	21 e0       	ldi	r18, 0x01	; 1
     c34:	08 97       	sbiw	r24, 0x08	; 8
     c36:	09 f0       	breq	.+2      	; 0xc3a <Endpoint_Write_Control_PStream_LE+0x7e>
     c38:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c3a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     c3e:	8e 77       	andi	r24, 0x7E	; 126
     c40:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     c44:	ce cf       	rjmp	.-100    	; 0xbe2 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     c46:	21 11       	cpse	r18, r1
     c48:	cf cf       	rjmp	.-98     	; 0xbe8 <Endpoint_Write_Control_PStream_LE+0x2c>
     c4a:	0a c0       	rjmp	.+20     	; 0xc60 <Endpoint_Write_Control_PStream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c4c:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c50:	88 23       	and	r24, r24
     c52:	61 f0       	breq	.+24     	; 0xc6c <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c54:	85 30       	cpi	r24, 0x05	; 5
     c56:	61 f0       	breq	.+24     	; 0xc70 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c58:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     c5c:	83 fd       	sbrc	r24, 3
     c5e:	0a c0       	rjmp	.+20     	; 0xc74 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c60:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     c64:	82 ff       	sbrs	r24, 2
     c66:	f2 cf       	rjmp	.-28     	; 0xc4c <Endpoint_Write_Control_PStream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     c6c:	82 e0       	ldi	r24, 0x02	; 2
     c6e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     c70:	83 e0       	ldi	r24, 0x03	; 3
     c72:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     c74:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     c76:	08 95       	ret

00000c78 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     c78:	98 2f       	mov	r25, r24
     c7a:	95 30       	cpi	r25, 0x05	; 5
     c7c:	68 f5       	brcc	.+90     	; 0xcd8 <Endpoint_ConfigureEndpoint_Prv+0x60>
     c7e:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     c82:	98 17       	cp	r25, r24
     c84:	39 f0       	breq	.+14     	; 0xc94 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     c86:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     c8a:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     c8e:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     c92:	03 c0       	rjmp	.+6      	; 0xc9a <Endpoint_ConfigureEndpoint_Prv+0x22>
     c94:	24 2f       	mov	r18, r20
     c96:	76 2f       	mov	r23, r22
     c98:	50 e0       	ldi	r21, 0x00	; 0
     c9a:	21 fd       	sbrc	r18, 1
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <Endpoint_ConfigureEndpoint_Prv+0x2a>
     c9e:	9f 5f       	subi	r25, 0xFF	; 255
     ca0:	ec cf       	rjmp	.-40     	; 0xc7a <Endpoint_ConfigureEndpoint_Prv+0x2>
     ca2:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     ca6:	3e 7f       	andi	r19, 0xFE	; 254
     ca8:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     cac:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     cb0:	3d 7f       	andi	r19, 0xFD	; 253
     cb2:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     cb6:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     cba:	31 60       	ori	r19, 0x01	; 1
     cbc:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     cc0:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     cc4:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     cc8:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     ccc:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
     cd0:	27 fd       	sbrc	r18, 7
     cd2:	e5 cf       	rjmp	.-54     	; 0xc9e <Endpoint_ConfigureEndpoint_Prv+0x26>
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	08 95       	ret
     cd8:	8f 70       	andi	r24, 0x0F	; 15
     cda:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	08 95       	ret

00000ce2 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     ce2:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <USB_ControlRequest>
     ce6:	87 ff       	sbrs	r24, 7
     ce8:	11 c0       	rjmp	.+34     	; 0xd0c <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     cea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     cee:	82 fd       	sbrc	r24, 2
     cf0:	05 c0       	rjmp	.+10     	; 0xcfc <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     cf2:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <USB_DeviceState>
     cf6:	81 11       	cpse	r24, r1
     cf8:	f8 cf       	rjmp	.-16     	; 0xcea <Endpoint_ClearStatusStage+0x8>
     cfa:	11 c0       	rjmp	.+34     	; 0xd1e <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     cfc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     d00:	8b 77       	andi	r24, 0x7B	; 123
     d02:	0b c0       	rjmp	.+22     	; 0xd1a <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     d04:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <USB_DeviceState>
     d08:	88 23       	and	r24, r24
     d0a:	49 f0       	breq	.+18     	; 0xd1e <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d0c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     d10:	80 ff       	sbrs	r24, 0
     d12:	f8 cf       	rjmp	.-16     	; 0xd04 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d14:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     d18:	8e 77       	andi	r24, 0x7E	; 126
     d1a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     d1e:	08 95       	ret

00000d20 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     d20:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
     d24:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
     d28:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d2a:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     d2e:	84 2f       	mov	r24, r20
     d30:	81 70       	andi	r24, 0x01	; 1
     d32:	40 ff       	sbrs	r20, 0
     d34:	23 c0       	rjmp	.+70     	; 0xd7c <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d36:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     d3a:	80 fd       	sbrc	r24, 0
     d3c:	1d c0       	rjmp	.+58     	; 0xd78 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     d3e:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     d42:	88 23       	and	r24, r24
     d44:	99 f0       	breq	.+38     	; 0xd6c <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     d46:	85 30       	cpi	r24, 0x05	; 5
     d48:	99 f0       	breq	.+38     	; 0xd70 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     d4a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     d4e:	85 fd       	sbrc	r24, 5
     d50:	11 c0       	rjmp	.+34     	; 0xd74 <Endpoint_WaitUntilReady+0x54>
     d52:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
     d56:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     d5a:	24 17       	cp	r18, r20
     d5c:	35 07       	cpc	r19, r21
     d5e:	29 f3       	breq	.-54     	; 0xd2a <Endpoint_WaitUntilReady+0xa>
     d60:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     d62:	11 f0       	breq	.+4      	; 0xd68 <Endpoint_WaitUntilReady+0x48>
     d64:	9a 01       	movw	r18, r20
     d66:	e1 cf       	rjmp	.-62     	; 0xd2a <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     d68:	84 e0       	ldi	r24, 0x04	; 4
     d6a:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     d6c:	82 e0       	ldi	r24, 0x02	; 2
     d6e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     d70:	83 e0       	ldi	r24, 0x03	; 3
     d72:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d7c:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     d80:	42 ff       	sbrs	r20, 2
     d82:	dd cf       	rjmp	.-70     	; 0xd3e <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     d84:	08 95       	ret

00000d86 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     d86:	0e 94 20 07 	call	0xe40	; 0xe40 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     d8a:	0e 94 23 07 	call	0xe46	; 0xe46 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     d8e:	e0 ee       	ldi	r30, 0xE0	; 224
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	81 60       	ori	r24, 0x01	; 1
     d96:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     d98:	e8 ed       	ldi	r30, 0xD8	; 216
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	8f 77       	andi	r24, 0x7F	; 127
     da0:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     da2:	19 bc       	out	0x29, r1	; 41
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
			#else
				REGCR  |=  (1 << REGDIS);
     da4:	e3 e6       	ldi	r30, 0x63	; 99
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	81 60       	ori	r24, 0x01	; 1
     dac:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     dae:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <USB_IsInitialized>
     db2:	08 95       	ret

00000db4 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     db4:	0e 94 20 07 	call	0xe40	; 0xe40 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     db8:	0e 94 23 07 	call	0xe46	; 0xe46 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     dbc:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     dc0:	8f 77       	andi	r24, 0x7F	; 127
     dc2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON |=  (1 << USBE);
     dc6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     dca:	80 68       	ori	r24, 0x80	; 128
     dcc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     dd0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     dd4:	8f 7d       	andi	r24, 0xDF	; 223
     dd6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     dda:	84 e0       	ldi	r24, 0x04	; 4
     ddc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     dde:	86 e0       	ldi	r24, 0x06	; 6
     de0:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     de2:	09 b4       	in	r0, 0x29	; 41
     de4:	00 fe       	sbrs	r0, 0
     de6:	fd cf       	rjmp	.-6      	; 0xde2 <USB_ResetInterface+0x2e>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     de8:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
     dec:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     df0:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     df4:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <USB_Device_CurrentlySelfPowered>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     df8:	42 e0       	ldi	r20, 0x02	; 2
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	0e 94 3c 06 	call	0xc78	; 0xc78 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     e02:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     e06:	8e 7f       	andi	r24, 0xFE	; 254
     e08:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     e0c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     e10:	81 60       	ori	r24, 0x01	; 1
     e12:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     e16:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     e1a:	88 60       	ori	r24, 0x08	; 8
     e1c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     e20:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
     e24:	8e 7f       	andi	r24, 0xFE	; 254
     e26:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
     e2a:	08 95       	ret

00000e2c <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     e2c:	e3 e6       	ldi	r30, 0x63	; 99
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	8e 7f       	andi	r24, 0xFE	; 254
     e34:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <USB_IsInitialized>

	USB_ResetInterface();
     e3c:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <USB_ResetInterface>

00000e40 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     e40:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     e44:	08 95       	ret

00000e46 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     e46:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     e4a:	08 95       	ret

00000e4c <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     e4c:	1f 92       	push	r1
     e4e:	0f 92       	push	r0
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	0f 92       	push	r0
     e54:	11 24       	eor	r1, r1
     e56:	2f 93       	push	r18
     e58:	3f 93       	push	r19
     e5a:	4f 93       	push	r20
     e5c:	5f 93       	push	r21
     e5e:	6f 93       	push	r22
     e60:	7f 93       	push	r23
     e62:	8f 93       	push	r24
     e64:	9f 93       	push	r25
     e66:	af 93       	push	r26
     e68:	bf 93       	push	r27
     e6a:	ef 93       	push	r30
     e6c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     e6e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     e72:	82 ff       	sbrs	r24, 2
     e74:	0b c0       	rjmp	.+22     	; 0xe8c <__vector_11+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     e76:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     e7a:	82 ff       	sbrs	r24, 2
     e7c:	07 c0       	rjmp	.+14     	; 0xe8c <__vector_11+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     e7e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     e82:	8b 7f       	andi	r24, 0xFB	; 251
     e84:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     e88:	0e 94 6f 09 	call	0x12de	; 0x12de <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     e8c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     e90:	80 ff       	sbrs	r24, 0
     e92:	19 c0       	rjmp	.+50     	; 0xec6 <__vector_11+0x7a>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     e94:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     e98:	80 ff       	sbrs	r24, 0
     e9a:	15 c0       	rjmp	.+42     	; 0xec6 <__vector_11+0x7a>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     e9c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     ea0:	8e 7f       	andi	r24, 0xFE	; 254
     ea2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     ea6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     eaa:	80 61       	ori	r24, 0x10	; 16
     eac:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     eb0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     eb4:	80 62       	ori	r24, 0x20	; 32
     eb6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     eba:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     ebc:	85 e0       	ldi	r24, 0x05	; 5
     ebe:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
     ec2:	0e 94 6f 04 	call	0x8de	; 0x8de <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     ec6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     eca:	84 ff       	sbrs	r24, 4
     ecc:	30 c0       	rjmp	.+96     	; 0xf2e <__vector_11+0xe2>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     ece:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     ed2:	84 ff       	sbrs	r24, 4
     ed4:	2c c0       	rjmp	.+88     	; 0xf2e <__vector_11+0xe2>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     ed6:	84 e0       	ldi	r24, 0x04	; 4
     ed8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     eda:	86 e0       	ldi	r24, 0x06	; 6
     edc:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     ede:	09 b4       	in	r0, 0x29	; 41
     ee0:	00 fe       	sbrs	r0, 0
     ee2:	fd cf       	rjmp	.-6      	; 0xede <__vector_11+0x92>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     ee4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     ee8:	8f 7d       	andi	r24, 0xDF	; 223
     eea:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     eee:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     ef2:	8f 7e       	andi	r24, 0xEF	; 239
     ef4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     ef8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     efc:	8f 7e       	andi	r24, 0xEF	; 239
     efe:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     f02:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     f06:	81 60       	ori	r24, 0x01	; 1
     f08:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     f0c:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <USB_Device_ConfigurationNumber>
     f10:	88 23       	and	r24, r24
     f12:	11 f0       	breq	.+4      	; 0xf18 <__vector_11+0xcc>
		  USB_DeviceState = DEVICE_STATE_Configured;
     f14:	84 e0       	ldi	r24, 0x04	; 4
     f16:	07 c0       	rjmp	.+14     	; 0xf26 <__vector_11+0xda>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     f18:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     f1c:	87 fd       	sbrc	r24, 7
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <__vector_11+0xd8>
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	01 c0       	rjmp	.+2      	; 0xf26 <__vector_11+0xda>
     f24:	83 e0       	ldi	r24, 0x03	; 3
     f26:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     f2a:	0e 94 ca 04 	call	0x994	; 0x994 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     f2e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     f32:	83 ff       	sbrs	r24, 3
     f34:	29 c0       	rjmp	.+82     	; 0xf88 <__vector_11+0x13c>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     f36:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     f3a:	83 ff       	sbrs	r24, 3
     f3c:	25 c0       	rjmp	.+74     	; 0xf88 <__vector_11+0x13c>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     f3e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     f42:	87 7f       	andi	r24, 0xF7	; 247
     f44:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     f4e:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     f52:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     f56:	8e 7f       	andi	r24, 0xFE	; 254
     f58:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     f5c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     f60:	8e 7f       	andi	r24, 0xFE	; 254
     f62:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     f66:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     f6a:	80 61       	ori	r24, 0x10	; 16
     f6c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     f70:	42 e0       	ldi	r20, 0x02	; 2
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	0e 94 3c 06 	call	0xc78	; 0xc78 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     f7a:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     f7e:	88 60       	ori	r24, 0x08	; 8
     f80:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     f84:	0e 94 9d 03 	call	0x73a	; 0x73a <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     f88:	ff 91       	pop	r31
     f8a:	ef 91       	pop	r30
     f8c:	bf 91       	pop	r27
     f8e:	af 91       	pop	r26
     f90:	9f 91       	pop	r25
     f92:	8f 91       	pop	r24
     f94:	7f 91       	pop	r23
     f96:	6f 91       	pop	r22
     f98:	5f 91       	pop	r21
     f9a:	4f 91       	pop	r20
     f9c:	3f 91       	pop	r19
     f9e:	2f 91       	pop	r18
     fa0:	0f 90       	pop	r0
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	0f 90       	pop	r0
     fa6:	1f 90       	pop	r1
     fa8:	18 95       	reti

00000faa <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     faa:	1f 92       	push	r1
     fac:	0f 92       	push	r0
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	0f 92       	push	r0
     fb2:	11 24       	eor	r1, r1
     fb4:	2f 93       	push	r18
     fb6:	3f 93       	push	r19
     fb8:	4f 93       	push	r20
     fba:	5f 93       	push	r21
     fbc:	6f 93       	push	r22
     fbe:	7f 93       	push	r23
     fc0:	8f 93       	push	r24
     fc2:	9f 93       	push	r25
     fc4:	af 93       	push	r26
     fc6:	bf 93       	push	r27
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	ef 93       	push	r30
     fce:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     fd0:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     fd4:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     fd6:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     fda:	d8 2f       	mov	r29, r24
     fdc:	d1 70       	andi	r29, 0x01	; 1
     fde:	80 fd       	sbrc	r24, 0
     fe0:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fe2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     fe6:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     fea:	87 7f       	andi	r24, 0xF7	; 247
     fec:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     ff0:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     ff2:	0e 94 19 08 	call	0x1032	; 0x1032 <USB_Device_ProcessControlRequest>
     ff6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     ffa:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     ffe:	88 60       	ori	r24, 0x08	; 8
    1000:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
    1004:	cd 2b       	or	r28, r29
    1006:	cf 70       	andi	r28, 0x0F	; 15
    1008:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    100c:	ff 91       	pop	r31
    100e:	ef 91       	pop	r30
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	bf 91       	pop	r27
    1016:	af 91       	pop	r26
    1018:	9f 91       	pop	r25
    101a:	8f 91       	pop	r24
    101c:	7f 91       	pop	r23
    101e:	6f 91       	pop	r22
    1020:	5f 91       	pop	r21
    1022:	4f 91       	pop	r20
    1024:	3f 91       	pop	r19
    1026:	2f 91       	pop	r18
    1028:	0f 90       	pop	r0
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	0f 90       	pop	r0
    102e:	1f 90       	pop	r1
    1030:	18 95       	reti

00001032 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1032:	1f 93       	push	r17
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	aa 97       	sbiw	r28, 0x2a	; 42
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	e7 e5       	ldi	r30, 0x57	; 87
    104a:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    104c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1050:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1052:	22 e0       	ldi	r18, 0x02	; 2
    1054:	ef 35       	cpi	r30, 0x5F	; 95
    1056:	f2 07       	cpc	r31, r18
    1058:	c9 f7       	brne	.-14     	; 0x104c <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    105a:	0e 94 ad 03 	call	0x75a	; 0x75a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    105e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	if (Endpoint_IsSETUPReceived())
    1062:	83 ff       	sbrs	r24, 3
    1064:	24 c1       	rjmp	.+584    	; 0x12ae <USB_Device_ProcessControlRequest+0x27c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1066:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    106a:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <USB_ControlRequest+0x1>
    106e:	49 2f       	mov	r20, r25
    1070:	50 e0       	ldi	r21, 0x00	; 0
    1072:	4a 30       	cpi	r20, 0x0A	; 10
    1074:	51 05       	cpc	r21, r1
    1076:	08 f0       	brcs	.+2      	; 0x107a <USB_Device_ProcessControlRequest+0x48>
    1078:	1a c1       	rjmp	.+564    	; 0x12ae <USB_Device_ProcessControlRequest+0x27c>
    107a:	fa 01       	movw	r30, r20
    107c:	ed 5b       	subi	r30, 0xBD	; 189
    107e:	ff 4f       	sbci	r31, 0xFF	; 255
    1080:	0c 94 fa 1a 	jmp	0x35f4	; 0x35f4 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1084:	80 38       	cpi	r24, 0x80	; 128
    1086:	81 f0       	breq	.+32     	; 0x10a8 <USB_Device_ProcessControlRequest+0x76>
    1088:	82 38       	cpi	r24, 0x82	; 130
    108a:	09 f0       	breq	.+2      	; 0x108e <USB_Device_ProcessControlRequest+0x5c>
    108c:	10 c1       	rjmp	.+544    	; 0x12ae <USB_Device_ProcessControlRequest+0x27c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    108e:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <USB_ControlRequest+0x4>
    1092:	8f 70       	andi	r24, 0x0F	; 15
    1094:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1098:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    109c:	85 fb       	bst	r24, 5
    109e:	88 27       	eor	r24, r24
    10a0:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10a2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
    10a6:	06 c0       	rjmp	.+12     	; 0x10b4 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    10a8:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    10ac:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <USB_Device_RemoteWakeupEnabled>
    10b0:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    10b2:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10b4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    10b8:	97 7f       	andi	r25, 0xF7	; 247
    10ba:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    10be:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
    10c2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
    10c6:	c8 c0       	rjmp	.+400    	; 0x1258 <USB_Device_ProcessControlRequest+0x226>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    10c8:	28 2f       	mov	r18, r24
    10ca:	2d 7f       	andi	r18, 0xFD	; 253
    10cc:	09 f0       	breq	.+2      	; 0x10d0 <USB_Device_ProcessControlRequest+0x9e>
    10ce:	ef c0       	rjmp	.+478    	; 0x12ae <USB_Device_ProcessControlRequest+0x27c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    10d0:	88 23       	and	r24, r24
    10d2:	19 f0       	breq	.+6      	; 0x10da <USB_Device_ProcessControlRequest+0xa8>
    10d4:	82 30       	cpi	r24, 0x02	; 2
    10d6:	61 f0       	breq	.+24     	; 0x10f0 <USB_Device_ProcessControlRequest+0xbe>
    10d8:	ea c0       	rjmp	.+468    	; 0x12ae <USB_Device_ProcessControlRequest+0x27c>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    10da:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <USB_ControlRequest+0x2>
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <USB_Device_ProcessControlRequest+0xb2>
    10e2:	e5 c0       	rjmp	.+458    	; 0x12ae <USB_Device_ProcessControlRequest+0x27c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    10e4:	93 30       	cpi	r25, 0x03	; 3
    10e6:	09 f0       	breq	.+2      	; 0x10ea <USB_Device_ProcessControlRequest+0xb8>
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <USB_Device_RemoteWakeupEnabled>
    10ee:	2b c0       	rjmp	.+86     	; 0x1146 <USB_Device_ProcessControlRequest+0x114>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    10f0:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <USB_ControlRequest+0x2>
    10f4:	81 11       	cpse	r24, r1
    10f6:	27 c0       	rjmp	.+78     	; 0x1146 <USB_Device_ProcessControlRequest+0x114>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    10f8:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <USB_ControlRequest+0x4>
    10fc:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    10fe:	09 f4       	brne	.+2      	; 0x1102 <USB_Device_ProcessControlRequest+0xd0>
    1100:	d6 c0       	rjmp	.+428    	; 0x12ae <USB_Device_ProcessControlRequest+0x27c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1102:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1106:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    110a:	20 ff       	sbrs	r18, 0
    110c:	1c c0       	rjmp	.+56     	; 0x1146 <USB_Device_ProcessControlRequest+0x114>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    110e:	93 30       	cpi	r25, 0x03	; 3
    1110:	21 f4       	brne	.+8      	; 0x111a <USB_Device_ProcessControlRequest+0xe8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1112:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
    1116:	80 62       	ori	r24, 0x20	; 32
    1118:	14 c0       	rjmp	.+40     	; 0x1142 <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    111a:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
    111e:	90 61       	ori	r25, 0x10	; 16
    1120:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1124:	21 e0       	ldi	r18, 0x01	; 1
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	a9 01       	movw	r20, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <USB_Device_ProcessControlRequest+0xfe>
    112c:	44 0f       	add	r20, r20
    112e:	55 1f       	adc	r21, r21
    1130:	8a 95       	dec	r24
    1132:	e2 f7       	brpl	.-8      	; 0x112c <USB_Device_ProcessControlRequest+0xfa>
    1134:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UERST = 0;
    1138:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    113c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
    1140:	88 60       	ori	r24, 0x08	; 8
    1142:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1146:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    114a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    114e:	87 7f       	andi	r24, 0xF7	; 247
    1150:	86 c0       	rjmp	.+268    	; 0x125e <USB_Device_ProcessControlRequest+0x22c>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1152:	81 11       	cpse	r24, r1
    1154:	ac c0       	rjmp	.+344    	; 0x12ae <USB_Device_ProcessControlRequest+0x27c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1156:	10 91 59 02 	lds	r17, 0x0259	; 0x800259 <USB_ControlRequest+0x2>
    115a:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    115c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
    1160:	80 78       	andi	r24, 0x80	; 128
    1162:	81 2b       	or	r24, r17
    1164:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
    1168:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    116c:	87 7f       	andi	r24, 0xF7	; 247
    116e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1172:	0e 94 71 06 	call	0xce2	; 0xce2 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1176:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	while (!(Endpoint_IsINReady()));
    117a:	80 ff       	sbrs	r24, 0
    117c:	fc cf       	rjmp	.-8      	; 0x1176 <USB_Device_ProcessControlRequest+0x144>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    117e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
    1182:	80 68       	ori	r24, 0x80	; 128
    1184:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1188:	11 11       	cpse	r17, r1
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <USB_Device_ProcessControlRequest+0x15e>
    118c:	82 e0       	ldi	r24, 0x02	; 2
    118e:	01 c0       	rjmp	.+2      	; 0x1192 <USB_Device_ProcessControlRequest+0x160>
    1190:	83 e0       	ldi	r24, 0x03	; 3
    1192:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <USB_DeviceState>
    1196:	8b c0       	rjmp	.+278    	; 0x12ae <USB_Device_ProcessControlRequest+0x27c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1198:	80 58       	subi	r24, 0x80	; 128
    119a:	82 30       	cpi	r24, 0x02	; 2
    119c:	08 f0       	brcs	.+2      	; 0x11a0 <USB_Device_ProcessControlRequest+0x16e>
    119e:	87 c0       	rjmp	.+270    	; 0x12ae <USB_Device_ProcessControlRequest+0x27c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    11a0:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <USB_ControlRequest+0x2>
    11a4:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <USB_ControlRequest+0x3>
    11a8:	8c 3d       	cpi	r24, 0xDC	; 220
    11aa:	53 e0       	ldi	r21, 0x03	; 3
    11ac:	95 07       	cpc	r25, r21
    11ae:	79 f5       	brne	.+94     	; 0x120e <USB_Device_ProcessControlRequest+0x1dc>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    11b0:	83 e0       	ldi	r24, 0x03	; 3
    11b2:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    11b4:	8a e2       	ldi	r24, 0x2A	; 42
    11b6:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    11b8:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    11ba:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    11bc:	de 01       	movw	r26, r28
    11be:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    11c0:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    11c2:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    11c4:	51 e2       	ldi	r21, 0x21	; 33
    11c6:	e3 2f       	mov	r30, r19
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
    11ce:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    11d0:	20 ff       	sbrs	r18, 0
    11d2:	03 c0       	rjmp	.+6      	; 0x11da <USB_Device_ProcessControlRequest+0x1a8>
					{
						SerialByte >>= 4;
    11d4:	e2 95       	swap	r30
    11d6:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    11d8:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    11da:	ef 70       	andi	r30, 0x0F	; 15
    11dc:	8e 2f       	mov	r24, r30
    11de:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    11e0:	ea 30       	cpi	r30, 0x0A	; 10
    11e2:	10 f0       	brcs	.+4      	; 0x11e8 <USB_Device_ProcessControlRequest+0x1b6>
    11e4:	c7 96       	adiw	r24, 0x37	; 55
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <USB_Device_ProcessControlRequest+0x1b8>
    11e8:	c0 96       	adiw	r24, 0x30	; 48
    11ea:	8d 93       	st	X+, r24
    11ec:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    11ee:	2f 5f       	subi	r18, 0xFF	; 255
    11f0:	24 31       	cpi	r18, 0x14	; 20
    11f2:	49 f7       	brne	.-46     	; 0x11c6 <USB_Device_ProcessControlRequest+0x194>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    11f4:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    11fa:	87 7f       	andi	r24, 0xF7	; 247
    11fc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1200:	6a e2       	ldi	r22, 0x2A	; 42
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	ce 01       	movw	r24, r28
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	0e 94 83 05 	call	0xb06	; 0xb06 <Endpoint_Write_Control_Stream_LE>
    120c:	14 c0       	rjmp	.+40     	; 0x1236 <USB_Device_ProcessControlRequest+0x204>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    120e:	ae 01       	movw	r20, r28
    1210:	4f 5f       	subi	r20, 0xFF	; 255
    1212:	5f 4f       	sbci	r21, 0xFF	; 255
    1214:	60 91 5b 02 	lds	r22, 0x025B	; 0x80025b <USB_ControlRequest+0x4>
    1218:	0e 94 cc 04 	call	0x998	; 0x998 <CALLBACK_USB_GetDescriptor>
    121c:	bc 01       	movw	r22, r24
    121e:	89 2b       	or	r24, r25
    1220:	09 f4       	brne	.+2      	; 0x1224 <USB_Device_ProcessControlRequest+0x1f2>
    1222:	45 c0       	rjmp	.+138    	; 0x12ae <USB_Device_ProcessControlRequest+0x27c>
    1224:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1228:	97 7f       	andi	r25, 0xF7	; 247
    122a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	9a 81       	ldd	r25, Y+2	; 0x02
    1232:	0e 94 de 05 	call	0xbbc	; 0xbbc <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1236:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    123a:	8b 77       	andi	r24, 0x7B	; 123
    123c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1240:	36 c0       	rjmp	.+108    	; 0x12ae <USB_Device_ProcessControlRequest+0x27c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1242:	80 38       	cpi	r24, 0x80	; 128
    1244:	a1 f5       	brne	.+104    	; 0x12ae <USB_Device_ProcessControlRequest+0x27c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1246:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    124a:	87 7f       	andi	r24, 0xF7	; 247
    124c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1250:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1254:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1258:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    125c:	8e 77       	andi	r24, 0x7E	; 126
    125e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1262:	0e 94 71 06 	call	0xce2	; 0xce2 <Endpoint_ClearStatusStage>
    1266:	23 c0       	rjmp	.+70     	; 0x12ae <USB_Device_ProcessControlRequest+0x27c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1268:	81 11       	cpse	r24, r1
    126a:	21 c0       	rjmp	.+66     	; 0x12ae <USB_Device_ProcessControlRequest+0x27c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    126c:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <USB_ControlRequest+0x2>
    1270:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <USB_ControlRequest+0x3>
    1274:	99 27       	eor	r25, r25
    1276:	02 97       	sbiw	r24, 0x02	; 2
    1278:	d4 f4       	brge	.+52     	; 0x12ae <USB_Device_ProcessControlRequest+0x27c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    127a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    127e:	87 7f       	andi	r24, 0xF7	; 247
    1280:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1284:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <USB_ControlRequest+0x2>
    1288:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    128c:	0e 94 71 06 	call	0xce2	; 0xce2 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1290:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <USB_Device_ConfigurationNumber>
    1294:	81 11       	cpse	r24, r1
    1296:	06 c0       	rjmp	.+12     	; 0x12a4 <USB_Device_ProcessControlRequest+0x272>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1298:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    129c:	87 fd       	sbrc	r24, 7
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <USB_Device_ProcessControlRequest+0x272>
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	01 c0       	rjmp	.+2      	; 0x12a6 <USB_Device_ProcessControlRequest+0x274>
    12a4:	84 e0       	ldi	r24, 0x04	; 4
    12a6:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    12aa:	0e 94 9e 03 	call	0x73c	; 0x73c <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    12ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    12b2:	83 ff       	sbrs	r24, 3
    12b4:	0a c0       	rjmp	.+20     	; 0x12ca <USB_Device_ProcessControlRequest+0x298>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    12ba:	87 7f       	andi	r24, 0xF7	; 247
    12bc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    12c0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
    12c4:	80 62       	ori	r24, 0x20	; 32
    12c6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    12ca:	aa 96       	adiw	r28, 0x2a	; 42
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	cd bf       	out	0x3d, r28	; 61
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	1f 91       	pop	r17
    12dc:	08 95       	ret

000012de <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    12de:	08 95       	ret

000012e0 <host_set_driver>:
}

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    (*driver->send_mouse)(report);
    12e0:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <driver+0x1>
    12e4:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <driver>
    12e8:	08 95       	ret

000012ea <host_keyboard_leds>:
    12ea:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <driver>
    12ee:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <driver+0x1>
    12f2:	30 97       	sbiw	r30, 0x00	; 0
    12f4:	21 f0       	breq	.+8      	; 0x12fe <host_keyboard_leds+0x14>
    12f6:	01 90       	ld	r0, Z+
    12f8:	f0 81       	ld	r31, Z
    12fa:	e0 2d       	mov	r30, r0
    12fc:	09 94       	ijmp
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	08 95       	ret

00001302 <host_keyboard_send>:
    1302:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <driver>
    1306:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <driver+0x1>
    130a:	30 97       	sbiw	r30, 0x00	; 0
    130c:	21 f0       	breq	.+8      	; 0x1316 <host_keyboard_send+0x14>
    130e:	02 80       	ldd	r0, Z+2	; 0x02
    1310:	f3 81       	ldd	r31, Z+3	; 0x03
    1312:	e0 2d       	mov	r30, r0
    1314:	09 94       	ijmp
    1316:	08 95       	ret

00001318 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    1318:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <last_system_report>
    131c:	30 91 6c 01 	lds	r19, 0x016C	; 0x80016c <last_system_report+0x1>
    1320:	28 17       	cp	r18, r24
    1322:	39 07       	cpc	r19, r25
    1324:	71 f0       	breq	.+28     	; 0x1342 <host_system_send+0x2a>
    last_system_report = report;
    1326:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <last_system_report+0x1>
    132a:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <last_system_report>

    if (!driver) return;
    132e:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <driver>
    1332:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <driver+0x1>
    1336:	30 97       	sbiw	r30, 0x00	; 0
    1338:	21 f0       	breq	.+8      	; 0x1342 <host_system_send+0x2a>
    (*driver->send_system)(report);
    133a:	06 80       	ldd	r0, Z+6	; 0x06
    133c:	f7 81       	ldd	r31, Z+7	; 0x07
    133e:	e0 2d       	mov	r30, r0
    1340:	09 94       	ijmp
    1342:	08 95       	ret

00001344 <host_consumer_send>:
    }
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    1344:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <last_consumer_report>
    1348:	30 91 6a 01 	lds	r19, 0x016A	; 0x80016a <last_consumer_report+0x1>
    134c:	28 17       	cp	r18, r24
    134e:	39 07       	cpc	r19, r25
    1350:	71 f0       	breq	.+28     	; 0x136e <host_consumer_send+0x2a>
    last_consumer_report = report;
    1352:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <last_consumer_report+0x1>
    1356:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <last_consumer_report>

    if (!driver) return;
    135a:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <driver>
    135e:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <driver+0x1>
    1362:	30 97       	sbiw	r30, 0x00	; 0
    1364:	21 f0       	breq	.+8      	; 0x136e <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    1366:	00 84       	ldd	r0, Z+8	; 0x08
    1368:	f1 85       	ldd	r31, Z+9	; 0x09
    136a:	e0 2d       	mov	r30, r0
    136c:	09 94       	ijmp
    136e:	08 95       	ret

00001370 <keyboard_setup>:
#endif


void keyboard_setup(void)
{
    matrix_setup();
    1370:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <matrix_setup>

00001374 <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    1374:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <timer_init>
    matrix_init();
    1378:	0e 94 e6 01 	call	0x3cc	; 0x3cc <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    137c:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <bootmagic>

00001380 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan matrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    1380:	8f 92       	push	r8
    1382:	9f 92       	push	r9
    1384:	af 92       	push	r10
    1386:	bf 92       	push	r11
    1388:	cf 92       	push	r12
    138a:	df 92       	push	r13
    138c:	ef 92       	push	r14
    138e:	ff 92       	push	r15
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	00 d0       	rcall	.+0      	; 0x139a <keyboard_task+0x1a>
    139a:	00 d0       	rcall	.+0      	; 0x139c <keyboard_task+0x1c>
    139c:	1f 92       	push	r1
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    13a2:	0e 94 00 02 	call	0x400	; 0x400 <matrix_scan>
    13a6:	00 e7       	ldi	r16, 0x70	; 112
    13a8:	11 e0       	ldi	r17, 0x01	; 1
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    13aa:	f1 2c       	mov	r15, r1
        matrix_row = matrix_get_row(r);
    13ac:	8f 2d       	mov	r24, r15
    13ae:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <matrix_get_row>
    13b2:	4c 01       	movw	r8, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    13b4:	f8 01       	movw	r30, r16
    13b6:	a0 80       	ld	r10, Z
    13b8:	b1 80       	ldd	r11, Z+1	; 0x01
    13ba:	a8 26       	eor	r10, r24
    13bc:	b9 26       	eor	r11, r25
        if (matrix_change) {
    13be:	a1 14       	cp	r10, r1
    13c0:	b1 04       	cpc	r11, r1
    13c2:	39 f4       	brne	.+14     	; 0x13d2 <keyboard_task+0x52>
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    13c4:	f3 94       	inc	r15
    13c6:	0e 5f       	subi	r16, 0xFE	; 254
    13c8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ca:	fa e0       	ldi	r31, 0x0A	; 10
    13cc:	ff 12       	cpse	r15, r31
    13ce:	ee cf       	rjmp	.-36     	; 0x13ac <keyboard_task+0x2c>
    13d0:	39 c0       	rjmp	.+114    	; 0x1444 <keyboard_task+0xc4>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    13d2:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <debug_config>
    13d6:	81 fd       	sbrc	r24, 1
    13d8:	0e 94 dd 02 	call	0x5ba	; 0x5ba <matrix_print>
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    13dc:	e1 2c       	mov	r14, r1
    13de:	cc 24       	eor	r12, r12
    13e0:	c3 94       	inc	r12
    13e2:	d1 2c       	mov	r13, r1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            matrix_row_t col_mask = 1;
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
                if (matrix_change & col_mask) {
    13e4:	c5 01       	movw	r24, r10
    13e6:	8c 21       	and	r24, r12
    13e8:	9d 21       	and	r25, r13
    13ea:	89 2b       	or	r24, r25
    13ec:	21 f1       	breq	.+72     	; 0x1436 <keyboard_task+0xb6>
                    keyevent_t e = (keyevent_t){
    13ee:	e9 82       	std	Y+1, r14	; 0x01
    13f0:	fa 82       	std	Y+2, r15	; 0x02
    13f2:	21 e0       	ldi	r18, 0x01	; 1
    13f4:	c4 01       	movw	r24, r8
    13f6:	8c 21       	and	r24, r12
    13f8:	9d 21       	and	r25, r13
    13fa:	89 2b       	or	r24, r25
    13fc:	09 f4       	brne	.+2      	; 0x1400 <keyboard_task+0x80>
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	2b 83       	std	Y+3, r18	; 0x03
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & col_mask),
                        .time = (timer_read() | 1) /* time should not be 0 */
    1402:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <timer_read>
#endif
            if (debug_matrix) matrix_print();
            matrix_row_t col_mask = 1;
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
                if (matrix_change & col_mask) {
                    keyevent_t e = (keyevent_t){
    1406:	81 60       	ori	r24, 0x01	; 1
    1408:	78 2f       	mov	r23, r24
    140a:	9d 83       	std	Y+5, r25	; 0x05
    140c:	8c 83       	std	Y+4, r24	; 0x04
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & col_mask),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    };
                    action_exec(e);
    140e:	49 81       	ldd	r20, Y+1	; 0x01
    1410:	5a 81       	ldd	r21, Y+2	; 0x02
    1412:	6b 81       	ldd	r22, Y+3	; 0x03
    1414:	8d 81       	ldd	r24, Y+5	; 0x05
    1416:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <action_exec>
                    hook_matrix_change(e);
    141a:	49 81       	ldd	r20, Y+1	; 0x01
    141c:	5a 81       	ldd	r21, Y+2	; 0x02
    141e:	6b 81       	ldd	r22, Y+3	; 0x03
    1420:	7c 81       	ldd	r23, Y+4	; 0x04
    1422:	8d 81       	ldd	r24, Y+5	; 0x05
    1424:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= col_mask;
    1428:	f8 01       	movw	r30, r16
    142a:	80 81       	ld	r24, Z
    142c:	91 81       	ldd	r25, Z+1	; 0x01
    142e:	8c 25       	eor	r24, r12
    1430:	9d 25       	eor	r25, r13
    1432:	91 83       	std	Z+1, r25	; 0x01
    1434:	80 83       	st	Z, r24
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            matrix_row_t col_mask = 1;
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
    1436:	e3 94       	inc	r14
    1438:	cc 0c       	add	r12, r12
    143a:	dd 1c       	adc	r13, r13
    143c:	fa e0       	ldi	r31, 0x0A	; 10
    143e:	ef 12       	cpse	r14, r31
    1440:	d1 cf       	rjmp	.-94     	; 0x13e4 <keyboard_task+0x64>
    1442:	c0 cf       	rjmp	.-128    	; 0x13c4 <keyboard_task+0x44>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    1444:	8f ef       	ldi	r24, 0xFF	; 255
    1446:	89 83       	std	Y+1, r24	; 0x01
    1448:	8a 83       	std	Y+2, r24	; 0x02
    144a:	1b 82       	std	Y+3, r1	; 0x03
    144c:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <timer_read>
    1450:	81 60       	ori	r24, 0x01	; 1
    1452:	78 2f       	mov	r23, r24
    1454:	9d 83       	std	Y+5, r25	; 0x05
    1456:	8c 83       	std	Y+4, r24	; 0x04
    1458:	49 81       	ldd	r20, Y+1	; 0x01
    145a:	5a 81       	ldd	r21, Y+2	; 0x02
    145c:	6b 81       	ldd	r22, Y+3	; 0x03
    145e:	8d 81       	ldd	r24, Y+5	; 0x05
    1460:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <action_exec>

//MATRIX_LOOP_END:

    hook_keyboard_loop();
    1464:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <hook_keyboard_loop>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    1468:	0e 94 75 09 	call	0x12ea	; 0x12ea <host_keyboard_leds>
    146c:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <led_status.4898>
    1470:	89 17       	cp	r24, r25
    1472:	b9 f0       	breq	.+46     	; 0x14a2 <keyboard_task+0x122>
        led_status = host_keyboard_leds();
    1474:	0e 94 75 09 	call	0x12ea	; 0x12ea <host_keyboard_leds>
    1478:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <led_status.4898>
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    }
}
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	df 91       	pop	r29
    1488:	cf 91       	pop	r28
    148a:	1f 91       	pop	r17
    148c:	0f 91       	pop	r16
    148e:	ff 90       	pop	r15
    1490:	ef 90       	pop	r14
    1492:	df 90       	pop	r13
    1494:	cf 90       	pop	r12
    1496:	bf 90       	pop	r11
    1498:	af 90       	pop	r10
    149a:	9f 90       	pop	r9
    149c:	8f 90       	pop	r8

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    149e:	0c 94 0f 16 	jmp	0x2c1e	; 0x2c1e <hook_keyboard_leds_change>
    }
}
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	1f 91       	pop	r17
    14b2:	0f 91       	pop	r16
    14b4:	ff 90       	pop	r15
    14b6:	ef 90       	pop	r14
    14b8:	df 90       	pop	r13
    14ba:	cf 90       	pop	r12
    14bc:	bf 90       	pop	r11
    14be:	af 90       	pop	r10
    14c0:	9f 90       	pop	r9
    14c2:	8f 90       	pop	r8
    14c4:	08 95       	ret

000014c6 <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    14c6:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <led_set>

000014ca <matrix_clear>:
    14ca:	08 95       	ret

000014cc <matrix_setup>:
    14cc:	08 95       	ret

000014ce <matrix_power_up>:
    14ce:	08 95       	ret

000014d0 <matrix_power_down>:
    return false;
}
#endif

__attribute__ ((weak)) void matrix_power_up(void) {}
__attribute__ ((weak)) void matrix_power_down(void) {}
    14d0:	08 95       	ret

000014d2 <action_exec>:
}

void type_code(uint8_t code)
{
    register_code(code);
    unregister_code(code);
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	2b 97       	sbiw	r28, 0x0b	; 11
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	94 2f       	mov	r25, r20
    14e8:	4f 83       	std	Y+7, r20	; 0x07
    14ea:	25 2f       	mov	r18, r21
    14ec:	58 87       	std	Y+8, r21	; 0x08
    14ee:	69 87       	std	Y+9, r22	; 0x09
    14f0:	7a 87       	std	Y+10, r23	; 0x0a
    14f2:	8b 87       	std	Y+11, r24	; 0x0b
    14f4:	4a 85       	ldd	r20, Y+10	; 0x0a
    14f6:	5b 85       	ldd	r21, Y+11	; 0x0b
    14f8:	45 2b       	or	r20, r21
    14fa:	31 f0       	breq	.+12     	; 0x1508 <action_exec+0x36>
    14fc:	2f 3f       	cpi	r18, 0xFF	; 255
    14fe:	31 f4       	brne	.+12     	; 0x150c <action_exec+0x3a>
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	9f 3f       	cpi	r25, 0xFF	; 255
    1504:	19 f4       	brne	.+6      	; 0x150c <action_exec+0x3a>
    1506:	03 c0       	rjmp	.+6      	; 0x150e <action_exec+0x3c>
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	01 c0       	rjmp	.+2      	; 0x150e <action_exec+0x3c>
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	80 fd       	sbrc	r24, 0
    1510:	07 c0       	rjmp	.+14     	; 0x1520 <action_exec+0x4e>
    1512:	4f 81       	ldd	r20, Y+7	; 0x07
    1514:	58 85       	ldd	r21, Y+8	; 0x08
    1516:	69 85       	ldd	r22, Y+9	; 0x09
    1518:	7a 85       	ldd	r23, Y+10	; 0x0a
    151a:	8b 85       	ldd	r24, Y+11	; 0x0b
    151c:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <hook_matrix_change>
    1520:	de 01       	movw	r26, r28
    1522:	11 96       	adiw	r26, 0x01	; 1
    1524:	86 e0       	ldi	r24, 0x06	; 6
    1526:	fd 01       	movw	r30, r26
    1528:	11 92       	st	Z+, r1
    152a:	8a 95       	dec	r24
    152c:	e9 f7       	brne	.-6      	; 0x1528 <action_exec+0x56>
    152e:	85 e0       	ldi	r24, 0x05	; 5
    1530:	fe 01       	movw	r30, r28
    1532:	37 96       	adiw	r30, 0x07	; 7
    1534:	01 90       	ld	r0, Z+
    1536:	0d 92       	st	X+, r0
    1538:	8a 95       	dec	r24
    153a:	e1 f7       	brne	.-8      	; 0x1534 <action_exec+0x62>
    153c:	49 81       	ldd	r20, Y+1	; 0x01
    153e:	5a 81       	ldd	r21, Y+2	; 0x02
    1540:	6b 81       	ldd	r22, Y+3	; 0x03
    1542:	7c 81       	ldd	r23, Y+4	; 0x04
    1544:	8d 81       	ldd	r24, Y+5	; 0x05
    1546:	9e 81       	ldd	r25, Y+6	; 0x06
    1548:	0e 94 26 12 	call	0x244c	; 0x244c <action_tapping_process>
    154c:	2b 96       	adiw	r28, 0x0b	; 11
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	08 95       	ret

0000155e <register_code>:
    155e:	cf 93       	push	r28
    1560:	88 23       	and	r24, r24
    1562:	09 f4       	brne	.+2      	; 0x1566 <register_code+0x8>
    1564:	e8 c0       	rjmp	.+464    	; 0x1736 <register_code+0x1d8>
    1566:	c8 2f       	mov	r28, r24
    1568:	82 38       	cpi	r24, 0x82	; 130
    156a:	a1 f4       	brne	.+40     	; 0x1594 <register_code+0x36>
    156c:	0e 94 75 09 	call	0x12ea	; 0x12ea <host_keyboard_leds>
    1570:	81 fd       	sbrc	r24, 1
    1572:	e1 c0       	rjmp	.+450    	; 0x1736 <register_code+0x1d8>
    1574:	89 e3       	ldi	r24, 0x39	; 57
    1576:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <add_key>
    157a:	0e 94 d7 15 	call	0x2bae	; 0x2bae <send_keyboard_report>
    157e:	2f ef       	ldi	r18, 0xFF	; 255
    1580:	81 ee       	ldi	r24, 0xE1	; 225
    1582:	94 e0       	ldi	r25, 0x04	; 4
    1584:	21 50       	subi	r18, 0x01	; 1
    1586:	80 40       	sbci	r24, 0x00	; 0
    1588:	90 40       	sbci	r25, 0x00	; 0
    158a:	e1 f7       	brne	.-8      	; 0x1584 <register_code+0x26>
    158c:	00 c0       	rjmp	.+0      	; 0x158e <register_code+0x30>
    158e:	00 00       	nop
    1590:	89 e3       	ldi	r24, 0x39	; 57
    1592:	15 c0       	rjmp	.+42     	; 0x15be <register_code+0x60>
    1594:	83 38       	cpi	r24, 0x83	; 131
    1596:	c1 f4       	brne	.+48     	; 0x15c8 <register_code+0x6a>
    1598:	0e 94 75 09 	call	0x12ea	; 0x12ea <host_keyboard_leds>
    159c:	80 fd       	sbrc	r24, 0
    159e:	cb c0       	rjmp	.+406    	; 0x1736 <register_code+0x1d8>
    15a0:	83 e5       	ldi	r24, 0x53	; 83
    15a2:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <add_key>
    15a6:	0e 94 d7 15 	call	0x2bae	; 0x2bae <send_keyboard_report>
    15aa:	2f ef       	ldi	r18, 0xFF	; 255
    15ac:	81 ee       	ldi	r24, 0xE1	; 225
    15ae:	94 e0       	ldi	r25, 0x04	; 4
    15b0:	21 50       	subi	r18, 0x01	; 1
    15b2:	80 40       	sbci	r24, 0x00	; 0
    15b4:	90 40       	sbci	r25, 0x00	; 0
    15b6:	e1 f7       	brne	.-8      	; 0x15b0 <register_code+0x52>
    15b8:	00 c0       	rjmp	.+0      	; 0x15ba <register_code+0x5c>
    15ba:	00 00       	nop
    15bc:	83 e5       	ldi	r24, 0x53	; 83
    15be:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <del_key>
    15c2:	cf 91       	pop	r28
    15c4:	0c 94 d7 15 	jmp	0x2bae	; 0x2bae <send_keyboard_report>
    15c8:	84 38       	cpi	r24, 0x84	; 132
    15ca:	a1 f4       	brne	.+40     	; 0x15f4 <register_code+0x96>
    15cc:	0e 94 75 09 	call	0x12ea	; 0x12ea <host_keyboard_leds>
    15d0:	82 fd       	sbrc	r24, 2
    15d2:	b1 c0       	rjmp	.+354    	; 0x1736 <register_code+0x1d8>
    15d4:	87 e4       	ldi	r24, 0x47	; 71
    15d6:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <add_key>
    15da:	0e 94 d7 15 	call	0x2bae	; 0x2bae <send_keyboard_report>
    15de:	2f ef       	ldi	r18, 0xFF	; 255
    15e0:	81 ee       	ldi	r24, 0xE1	; 225
    15e2:	94 e0       	ldi	r25, 0x04	; 4
    15e4:	21 50       	subi	r18, 0x01	; 1
    15e6:	80 40       	sbci	r24, 0x00	; 0
    15e8:	90 40       	sbci	r25, 0x00	; 0
    15ea:	e1 f7       	brne	.-8      	; 0x15e4 <register_code+0x86>
    15ec:	00 c0       	rjmp	.+0      	; 0x15ee <register_code+0x90>
    15ee:	00 00       	nop
    15f0:	87 e4       	ldi	r24, 0x47	; 71
    15f2:	e5 cf       	rjmp	.-54     	; 0x15be <register_code+0x60>
    15f4:	8c ef       	ldi	r24, 0xFC	; 252
    15f6:	8c 0f       	add	r24, r28
    15f8:	81 3a       	cpi	r24, 0xA1	; 161
    15fa:	48 f4       	brcc	.+18     	; 0x160e <register_code+0xb0>
    15fc:	8c 2f       	mov	r24, r28
    15fe:	0e 94 a7 1a 	call	0x354e	; 0x354e <command_proc>
    1602:	81 11       	cpse	r24, r1
    1604:	98 c0       	rjmp	.+304    	; 0x1736 <register_code+0x1d8>
    1606:	8c 2f       	mov	r24, r28
    1608:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <add_key>
    160c:	da cf       	rjmp	.-76     	; 0x15c2 <register_code+0x64>
    160e:	80 e2       	ldi	r24, 0x20	; 32
    1610:	8c 0f       	add	r24, r28
    1612:	88 30       	cpi	r24, 0x08	; 8
    1614:	48 f4       	brcc	.+18     	; 0x1628 <register_code+0xca>
    1616:	c7 70       	andi	r28, 0x07	; 7
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	01 c0       	rjmp	.+2      	; 0x161e <register_code+0xc0>
    161c:	88 0f       	add	r24, r24
    161e:	ca 95       	dec	r28
    1620:	ea f7       	brpl	.-6      	; 0x161c <register_code+0xbe>
    1622:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <add_mods>
    1626:	cd cf       	rjmp	.-102    	; 0x15c2 <register_code+0x64>
    1628:	8b e5       	ldi	r24, 0x5B	; 91
    162a:	8c 0f       	add	r24, r28
    162c:	83 30       	cpi	r24, 0x03	; 3
    162e:	78 f4       	brcc	.+30     	; 0x164e <register_code+0xf0>
    1630:	c5 3a       	cpi	r28, 0xA5	; 165
    1632:	29 f0       	breq	.+10     	; 0x163e <register_code+0xe0>
    1634:	c6 3a       	cpi	r28, 0xA6	; 166
    1636:	31 f0       	breq	.+12     	; 0x1644 <register_code+0xe6>
    1638:	83 e8       	ldi	r24, 0x83	; 131
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	05 c0       	rjmp	.+10     	; 0x1648 <register_code+0xea>
    163e:	81 e8       	ldi	r24, 0x81	; 129
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <register_code+0xea>
    1644:	82 e8       	ldi	r24, 0x82	; 130
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	cf 91       	pop	r28
    164a:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <host_system_send>
    164e:	88 e5       	ldi	r24, 0x58	; 88
    1650:	8c 0f       	add	r24, r28
    1652:	85 31       	cpi	r24, 0x15	; 21
    1654:	08 f0       	brcs	.+2      	; 0x1658 <register_code+0xfa>
    1656:	6f c0       	rjmp	.+222    	; 0x1736 <register_code+0x1d8>
    1658:	c8 3a       	cpi	r28, 0xA8	; 168
    165a:	61 f1       	breq	.+88     	; 0x16b4 <register_code+0x156>
    165c:	c9 3a       	cpi	r28, 0xA9	; 169
    165e:	69 f1       	breq	.+90     	; 0x16ba <register_code+0x15c>
    1660:	ca 3a       	cpi	r28, 0xAA	; 170
    1662:	71 f1       	breq	.+92     	; 0x16c0 <register_code+0x162>
    1664:	cb 3a       	cpi	r28, 0xAB	; 171
    1666:	79 f1       	breq	.+94     	; 0x16c6 <register_code+0x168>
    1668:	cc 3a       	cpi	r28, 0xAC	; 172
    166a:	81 f1       	breq	.+96     	; 0x16cc <register_code+0x16e>
    166c:	cd 3a       	cpi	r28, 0xAD	; 173
    166e:	89 f1       	breq	.+98     	; 0x16d2 <register_code+0x174>
    1670:	ce 3a       	cpi	r28, 0xAE	; 174
    1672:	91 f1       	breq	.+100    	; 0x16d8 <register_code+0x17a>
    1674:	cf 3a       	cpi	r28, 0xAF	; 175
    1676:	99 f1       	breq	.+102    	; 0x16de <register_code+0x180>
    1678:	c1 3b       	cpi	r28, 0xB1	; 177
    167a:	a1 f1       	breq	.+104    	; 0x16e4 <register_code+0x186>
    167c:	c0 3b       	cpi	r28, 0xB0	; 176
    167e:	a9 f1       	breq	.+106    	; 0x16ea <register_code+0x18c>
    1680:	c2 3b       	cpi	r28, 0xB2	; 178
    1682:	b1 f1       	breq	.+108    	; 0x16f0 <register_code+0x192>
    1684:	c3 3b       	cpi	r28, 0xB3	; 179
    1686:	b9 f1       	breq	.+110    	; 0x16f6 <register_code+0x198>
    1688:	c4 3b       	cpi	r28, 0xB4	; 180
    168a:	c1 f1       	breq	.+112    	; 0x16fc <register_code+0x19e>
    168c:	c5 3b       	cpi	r28, 0xB5	; 181
    168e:	c9 f1       	breq	.+114    	; 0x1702 <register_code+0x1a4>
    1690:	c6 3b       	cpi	r28, 0xB6	; 182
    1692:	d1 f1       	breq	.+116    	; 0x1708 <register_code+0x1aa>
    1694:	c7 3b       	cpi	r28, 0xB7	; 183
    1696:	d9 f1       	breq	.+118    	; 0x170e <register_code+0x1b0>
    1698:	c8 3b       	cpi	r28, 0xB8	; 184
    169a:	e1 f1       	breq	.+120    	; 0x1714 <register_code+0x1b6>
    169c:	c9 3b       	cpi	r28, 0xB9	; 185
    169e:	e9 f1       	breq	.+122    	; 0x171a <register_code+0x1bc>
    16a0:	ca 3b       	cpi	r28, 0xBA	; 186
    16a2:	f1 f1       	breq	.+124    	; 0x1720 <register_code+0x1c2>
    16a4:	cb 3b       	cpi	r28, 0xBB	; 187
    16a6:	f9 f1       	breq	.+126    	; 0x1726 <register_code+0x1c8>
    16a8:	cc 3b       	cpi	r28, 0xBC	; 188
    16aa:	09 f4       	brne	.+2      	; 0x16ae <register_code+0x150>
    16ac:	3f c0       	rjmp	.+126    	; 0x172c <register_code+0x1ce>
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	3e c0       	rjmp	.+124    	; 0x1730 <register_code+0x1d2>
    16b4:	82 ee       	ldi	r24, 0xE2	; 226
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	3b c0       	rjmp	.+118    	; 0x1730 <register_code+0x1d2>
    16ba:	89 ee       	ldi	r24, 0xE9	; 233
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	38 c0       	rjmp	.+112    	; 0x1730 <register_code+0x1d2>
    16c0:	8a ee       	ldi	r24, 0xEA	; 234
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	35 c0       	rjmp	.+106    	; 0x1730 <register_code+0x1d2>
    16c6:	85 eb       	ldi	r24, 0xB5	; 181
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	32 c0       	rjmp	.+100    	; 0x1730 <register_code+0x1d2>
    16cc:	86 eb       	ldi	r24, 0xB6	; 182
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	2f c0       	rjmp	.+94     	; 0x1730 <register_code+0x1d2>
    16d2:	83 eb       	ldi	r24, 0xB3	; 179
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	2c c0       	rjmp	.+88     	; 0x1730 <register_code+0x1d2>
    16d8:	84 eb       	ldi	r24, 0xB4	; 180
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	29 c0       	rjmp	.+82     	; 0x1730 <register_code+0x1d2>
    16de:	87 eb       	ldi	r24, 0xB7	; 183
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	26 c0       	rjmp	.+76     	; 0x1730 <register_code+0x1d2>
    16e4:	8c ec       	ldi	r24, 0xCC	; 204
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	23 c0       	rjmp	.+70     	; 0x1730 <register_code+0x1d2>
    16ea:	8d ec       	ldi	r24, 0xCD	; 205
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	20 c0       	rjmp	.+64     	; 0x1730 <register_code+0x1d2>
    16f0:	83 e8       	ldi	r24, 0x83	; 131
    16f2:	91 e0       	ldi	r25, 0x01	; 1
    16f4:	1d c0       	rjmp	.+58     	; 0x1730 <register_code+0x1d2>
    16f6:	8a e8       	ldi	r24, 0x8A	; 138
    16f8:	91 e0       	ldi	r25, 0x01	; 1
    16fa:	1a c0       	rjmp	.+52     	; 0x1730 <register_code+0x1d2>
    16fc:	82 e9       	ldi	r24, 0x92	; 146
    16fe:	91 e0       	ldi	r25, 0x01	; 1
    1700:	17 c0       	rjmp	.+46     	; 0x1730 <register_code+0x1d2>
    1702:	84 e9       	ldi	r24, 0x94	; 148
    1704:	91 e0       	ldi	r25, 0x01	; 1
    1706:	14 c0       	rjmp	.+40     	; 0x1730 <register_code+0x1d2>
    1708:	81 e2       	ldi	r24, 0x21	; 33
    170a:	92 e0       	ldi	r25, 0x02	; 2
    170c:	11 c0       	rjmp	.+34     	; 0x1730 <register_code+0x1d2>
    170e:	83 e2       	ldi	r24, 0x23	; 35
    1710:	92 e0       	ldi	r25, 0x02	; 2
    1712:	0e c0       	rjmp	.+28     	; 0x1730 <register_code+0x1d2>
    1714:	84 e2       	ldi	r24, 0x24	; 36
    1716:	92 e0       	ldi	r25, 0x02	; 2
    1718:	0b c0       	rjmp	.+22     	; 0x1730 <register_code+0x1d2>
    171a:	85 e2       	ldi	r24, 0x25	; 37
    171c:	92 e0       	ldi	r25, 0x02	; 2
    171e:	08 c0       	rjmp	.+16     	; 0x1730 <register_code+0x1d2>
    1720:	86 e2       	ldi	r24, 0x26	; 38
    1722:	92 e0       	ldi	r25, 0x02	; 2
    1724:	05 c0       	rjmp	.+10     	; 0x1730 <register_code+0x1d2>
    1726:	87 e2       	ldi	r24, 0x27	; 39
    1728:	92 e0       	ldi	r25, 0x02	; 2
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <register_code+0x1d2>
    172c:	8a e2       	ldi	r24, 0x2A	; 42
    172e:	92 e0       	ldi	r25, 0x02	; 2
    1730:	cf 91       	pop	r28
    1732:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <host_consumer_send>
    1736:	cf 91       	pop	r28
    1738:	08 95       	ret

0000173a <unregister_code>:
    173a:	88 23       	and	r24, r24
    173c:	09 f4       	brne	.+2      	; 0x1740 <unregister_code+0x6>
    173e:	66 c0       	rjmp	.+204    	; 0x180c <unregister_code+0xd2>
    1740:	82 38       	cpi	r24, 0x82	; 130
    1742:	a1 f4       	brne	.+40     	; 0x176c <unregister_code+0x32>
    1744:	0e 94 75 09 	call	0x12ea	; 0x12ea <host_keyboard_leds>
    1748:	81 ff       	sbrs	r24, 1
    174a:	60 c0       	rjmp	.+192    	; 0x180c <unregister_code+0xd2>
    174c:	89 e3       	ldi	r24, 0x39	; 57
    174e:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <add_key>
    1752:	0e 94 d7 15 	call	0x2bae	; 0x2bae <send_keyboard_report>
    1756:	2f ef       	ldi	r18, 0xFF	; 255
    1758:	81 ee       	ldi	r24, 0xE1	; 225
    175a:	94 e0       	ldi	r25, 0x04	; 4
    175c:	21 50       	subi	r18, 0x01	; 1
    175e:	80 40       	sbci	r24, 0x00	; 0
    1760:	90 40       	sbci	r25, 0x00	; 0
    1762:	e1 f7       	brne	.-8      	; 0x175c <unregister_code+0x22>
    1764:	00 c0       	rjmp	.+0      	; 0x1766 <unregister_code+0x2c>
    1766:	00 00       	nop
    1768:	89 e3       	ldi	r24, 0x39	; 57
    176a:	15 c0       	rjmp	.+42     	; 0x1796 <unregister_code+0x5c>
    176c:	83 38       	cpi	r24, 0x83	; 131
    176e:	b9 f4       	brne	.+46     	; 0x179e <unregister_code+0x64>
    1770:	0e 94 75 09 	call	0x12ea	; 0x12ea <host_keyboard_leds>
    1774:	80 ff       	sbrs	r24, 0
    1776:	4a c0       	rjmp	.+148    	; 0x180c <unregister_code+0xd2>
    1778:	83 e5       	ldi	r24, 0x53	; 83
    177a:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <add_key>
    177e:	0e 94 d7 15 	call	0x2bae	; 0x2bae <send_keyboard_report>
    1782:	2f ef       	ldi	r18, 0xFF	; 255
    1784:	81 ee       	ldi	r24, 0xE1	; 225
    1786:	94 e0       	ldi	r25, 0x04	; 4
    1788:	21 50       	subi	r18, 0x01	; 1
    178a:	80 40       	sbci	r24, 0x00	; 0
    178c:	90 40       	sbci	r25, 0x00	; 0
    178e:	e1 f7       	brne	.-8      	; 0x1788 <unregister_code+0x4e>
    1790:	00 c0       	rjmp	.+0      	; 0x1792 <unregister_code+0x58>
    1792:	00 00       	nop
    1794:	83 e5       	ldi	r24, 0x53	; 83
    1796:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <del_key>
    179a:	0c 94 d7 15 	jmp	0x2bae	; 0x2bae <send_keyboard_report>
    179e:	84 38       	cpi	r24, 0x84	; 132
    17a0:	a1 f4       	brne	.+40     	; 0x17ca <unregister_code+0x90>
    17a2:	0e 94 75 09 	call	0x12ea	; 0x12ea <host_keyboard_leds>
    17a6:	82 ff       	sbrs	r24, 2
    17a8:	31 c0       	rjmp	.+98     	; 0x180c <unregister_code+0xd2>
    17aa:	87 e4       	ldi	r24, 0x47	; 71
    17ac:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <add_key>
    17b0:	0e 94 d7 15 	call	0x2bae	; 0x2bae <send_keyboard_report>
    17b4:	2f ef       	ldi	r18, 0xFF	; 255
    17b6:	81 ee       	ldi	r24, 0xE1	; 225
    17b8:	94 e0       	ldi	r25, 0x04	; 4
    17ba:	21 50       	subi	r18, 0x01	; 1
    17bc:	80 40       	sbci	r24, 0x00	; 0
    17be:	90 40       	sbci	r25, 0x00	; 0
    17c0:	e1 f7       	brne	.-8      	; 0x17ba <unregister_code+0x80>
    17c2:	00 c0       	rjmp	.+0      	; 0x17c4 <unregister_code+0x8a>
    17c4:	00 00       	nop
    17c6:	87 e4       	ldi	r24, 0x47	; 71
    17c8:	e6 cf       	rjmp	.-52     	; 0x1796 <unregister_code+0x5c>
    17ca:	9c ef       	ldi	r25, 0xFC	; 252
    17cc:	98 0f       	add	r25, r24
    17ce:	91 3a       	cpi	r25, 0xA1	; 161
    17d0:	10 f3       	brcs	.-60     	; 0x1796 <unregister_code+0x5c>
    17d2:	90 e2       	ldi	r25, 0x20	; 32
    17d4:	98 0f       	add	r25, r24
    17d6:	98 30       	cpi	r25, 0x08	; 8
    17d8:	50 f4       	brcc	.+20     	; 0x17ee <unregister_code+0xb4>
    17da:	87 70       	andi	r24, 0x07	; 7
    17dc:	91 e0       	ldi	r25, 0x01	; 1
    17de:	01 c0       	rjmp	.+2      	; 0x17e2 <unregister_code+0xa8>
    17e0:	99 0f       	add	r25, r25
    17e2:	8a 95       	dec	r24
    17e4:	ea f7       	brpl	.-6      	; 0x17e0 <unregister_code+0xa6>
    17e6:	89 2f       	mov	r24, r25
    17e8:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <del_mods>
    17ec:	d6 cf       	rjmp	.-84     	; 0x179a <unregister_code+0x60>
    17ee:	9b e5       	ldi	r25, 0x5B	; 91
    17f0:	98 0f       	add	r25, r24
    17f2:	93 30       	cpi	r25, 0x03	; 3
    17f4:	20 f4       	brcc	.+8      	; 0x17fe <unregister_code+0xc4>
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <host_system_send>
    17fe:	88 5a       	subi	r24, 0xA8	; 168
    1800:	85 31       	cpi	r24, 0x15	; 21
    1802:	20 f4       	brcc	.+8      	; 0x180c <unregister_code+0xd2>
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <host_consumer_send>
    180c:	08 95       	ret

0000180e <register_mods>:
}

void register_mods(uint8_t mods)
{
    if (mods) {
    180e:	88 23       	and	r24, r24
    1810:	21 f0       	breq	.+8      	; 0x181a <register_mods+0xc>
        add_mods(mods);
    1812:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <add_mods>
        send_keyboard_report();
    1816:	0c 94 d7 15 	jmp	0x2bae	; 0x2bae <send_keyboard_report>
    181a:	08 95       	ret

0000181c <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    181c:	88 23       	and	r24, r24
    181e:	21 f0       	breq	.+8      	; 0x1828 <unregister_mods+0xc>
        del_mods(mods);
    1820:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <del_mods>
        send_keyboard_report();
    1824:	0c 94 d7 15 	jmp	0x2bae	; 0x2bae <send_keyboard_report>
    1828:	08 95       	ret

0000182a <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    182a:	cf 92       	push	r12
    182c:	df 92       	push	r13
    182e:	ef 92       	push	r14
    1830:	ff 92       	push	r15
    1832:	0f 93       	push	r16
    1834:	1f 93       	push	r17
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
    183a:	00 d0       	rcall	.+0      	; 0x183c <process_action+0x12>
    183c:	00 d0       	rcall	.+0      	; 0x183e <process_action+0x14>
    183e:	1f 92       	push	r1
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	6c 01       	movw	r12, r24
    keyevent_t event = record->event;
    1846:	85 e0       	ldi	r24, 0x05	; 5
    1848:	f6 01       	movw	r30, r12
    184a:	de 01       	movw	r26, r28
    184c:	11 96       	adiw	r26, 0x01	; 1
    184e:	01 90       	ld	r0, Z+
    1850:	0d 92       	st	X+, r0
    1852:	8a 95       	dec	r24
    1854:	e1 f7       	brne	.-8      	; 0x184e <process_action+0x24>
    1856:	f6 01       	movw	r30, r12
    1858:	40 81       	ld	r20, Z
    185a:	51 81       	ldd	r21, Z+1	; 0x01
    185c:	23 81       	ldd	r18, Z+3	; 0x03
    185e:	34 81       	ldd	r19, Z+4	; 0x04

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    1860:	21 15       	cp	r18, r1
    1862:	31 05       	cpc	r19, r1
    1864:	31 f0       	breq	.+12     	; 0x1872 <process_action+0x48>
    1866:	5f 3f       	cpi	r21, 0xFF	; 255
    1868:	31 f4       	brne	.+12     	; 0x1876 <process_action+0x4c>
    186a:	91 e0       	ldi	r25, 0x01	; 1
    186c:	4f 3f       	cpi	r20, 0xFF	; 255
    186e:	19 f4       	brne	.+6      	; 0x1876 <process_action+0x4c>
    1870:	03 c0       	rjmp	.+6      	; 0x1878 <process_action+0x4e>
    1872:	91 e0       	ldi	r25, 0x01	; 1
    1874:	01 c0       	rjmp	.+2      	; 0x1878 <process_action+0x4e>
    1876:	90 e0       	ldi	r25, 0x00	; 0
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
#endif

    if (IS_NOEVENT(event)) { return; }
    1878:	90 fd       	sbrc	r25, 0
    187a:	ae c2       	rjmp	.+1372   	; 0x1dd8 <process_action+0x5ae>
#endif
}

void process_action(keyrecord_t *record)
{
    keyevent_t event = record->event;
    187c:	f6 01       	movw	r30, r12
    187e:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    1880:	e5 80       	ldd	r14, Z+5	; 0x05
    1882:	e2 94       	swap	r14
    1884:	8f e0       	ldi	r24, 0x0F	; 15
    1886:	e8 22       	and	r14, r24
#endif

    if (IS_NOEVENT(event)) { return; }

    action_t action = layer_switch_get_action(event);
    1888:	72 2f       	mov	r23, r18
    188a:	3d 83       	std	Y+5, r19	; 0x05
    188c:	2c 83       	std	Y+4, r18	; 0x04
    188e:	6f 2d       	mov	r22, r15
    1890:	8d 81       	ldd	r24, Y+5	; 0x05
    1892:	0e 94 8f 14 	call	0x291e	; 0x291e <layer_switch_get_action>
    1896:	8c 01       	movw	r16, r24
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    1898:	0e 94 8e 14 	call	0x291c	; 0x291c <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    189c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    18a0:	e1 2f       	mov	r30, r17
    18a2:	e2 95       	swap	r30
    18a4:	ef 70       	andi	r30, 0x0F	; 15
    18a6:	8e 2f       	mov	r24, r30
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	fc 01       	movw	r30, r24
    18ac:	e3 5b       	subi	r30, 0xB3	; 179
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	0c 94 fa 1a 	jmp	0x35f4	; 0x35f4 <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    18b4:	81 2f       	mov	r24, r17
    18b6:	80 7f       	andi	r24, 0xF0	; 240
    18b8:	1f 70       	andi	r17, 0x0F	; 15
    18ba:	88 23       	and	r24, r24
    18bc:	11 f0       	breq	.+4      	; 0x18c2 <process_action+0x98>
    18be:	12 95       	swap	r17
    18c0:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    18c2:	ff 20       	and	r15, r15
    18c4:	49 f0       	breq	.+18     	; 0x18d8 <process_action+0xae>
                    if (mods) {
    18c6:	11 23       	and	r17, r17
    18c8:	09 f4       	brne	.+2      	; 0x18cc <process_action+0xa2>
    18ca:	3b c2       	rjmp	.+1142   	; 0x1d42 <process_action+0x518>
                        add_weak_mods(mods);
    18cc:	81 2f       	mov	r24, r17
    18ce:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <add_weak_mods>
                        send_keyboard_report();
    18d2:	0e 94 d7 15 	call	0x2bae	; 0x2bae <send_keyboard_report>
    18d6:	35 c2       	rjmp	.+1130   	; 0x1d42 <process_action+0x518>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    18d8:	80 2f       	mov	r24, r16
    18da:	0e 94 9d 0b 	call	0x173a	; 0x173a <unregister_code>
                    if (mods) {
    18de:	11 23       	and	r17, r17
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <process_action+0xba>
    18e2:	7a c2       	rjmp	.+1268   	; 0x1dd8 <process_action+0x5ae>
                        del_weak_mods(mods);
    18e4:	81 2f       	mov	r24, r17
    18e6:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	1f 91       	pop	r17
    18fa:	0f 91       	pop	r16
    18fc:	ff 90       	pop	r15
    18fe:	ef 90       	pop	r14
    1900:	df 90       	pop	r13
    1902:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    1904:	0c 94 d7 15 	jmp	0x2bae	; 0x2bae <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    1908:	81 2f       	mov	r24, r17
    190a:	80 7f       	andi	r24, 0xF0	; 240
    190c:	1f 70       	andi	r17, 0x0F	; 15
    190e:	80 32       	cpi	r24, 0x20	; 32
    1910:	11 f0       	breq	.+4      	; 0x1916 <process_action+0xec>
    1912:	12 95       	swap	r17
    1914:	10 7f       	andi	r17, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.key.code) {
    1916:	00 23       	and	r16, r16
    1918:	19 f0       	breq	.+6      	; 0x1920 <process_action+0xf6>
    191a:	01 30       	cpi	r16, 0x01	; 1
    191c:	09 f1       	breq	.+66     	; 0x1960 <process_action+0x136>
    191e:	2b c0       	rjmp	.+86     	; 0x1976 <process_action+0x14c>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    1920:	ff 20       	and	r15, r15
    1922:	a9 f0       	breq	.+42     	; 0x194e <process_action+0x124>
                            if (tap_count == 0) {
    1924:	ee 20       	and	r14, r14
    1926:	59 f1       	breq	.+86     	; 0x197e <process_action+0x154>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    1928:	f1 e0       	ldi	r31, 0x01	; 1
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    192a:	81 2f       	mov	r24, r17
                        // Oneshot modifier
                        if (event.pressed) {
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    192c:	ef 12       	cpse	r14, r31
    192e:	28 c0       	rjmp	.+80     	; 0x1980 <process_action+0x156>
            break;
#endif
        default:
            break;
    }
}
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	1f 91       	pop	r17
    1940:	0f 91       	pop	r16
    1942:	ff 90       	pop	r15
    1944:	ef 90       	pop	r14
    1946:	df 90       	pop	r13
    1948:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    194a:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    194e:	ee 20       	and	r14, r14
    1950:	21 f0       	breq	.+8      	; 0x195a <process_action+0x130>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	e8 16       	cp	r14, r24
    1956:	09 f4       	brne	.+2      	; 0x195a <process_action+0x130>
    1958:	3f c2       	rjmp	.+1150   	; 0x1dd8 <process_action+0x5ae>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    195a:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <clear_oneshot_mods>
    195e:	2d c0       	rjmp	.+90     	; 0x19ba <process_action+0x190>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    1960:	ff 20       	and	r15, r15
    1962:	e9 f0       	breq	.+58     	; 0x199e <process_action+0x174>
                            if (tap_count <= TAPPING_TOGGLE) {
    1964:	e5 e0       	ldi	r30, 0x05	; 5
    1966:	ee 15       	cp	r30, r14
    1968:	08 f4       	brcc	.+2      	; 0x196c <process_action+0x142>
    196a:	36 c2       	rjmp	.+1132   	; 0x1dd8 <process_action+0x5ae>
                                if (mods & get_mods()) {
    196c:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <get_mods>
    1970:	81 23       	and	r24, r17
    1972:	29 f0       	breq	.+10     	; 0x197e <process_action+0x154>
    1974:	22 c0       	rjmp	.+68     	; 0x19ba <process_action+0x190>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    1976:	ff 20       	and	r15, r15
    1978:	f1 f0       	breq	.+60     	; 0x19b6 <process_action+0x18c>
                            if (tap_count > 0) {
    197a:	e1 10       	cpse	r14, r1
    197c:	15 c0       	rjmp	.+42     	; 0x19a8 <process_action+0x17e>
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    197e:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	df 91       	pop	r29
    198c:	cf 91       	pop	r28
    198e:	1f 91       	pop	r17
    1990:	0f 91       	pop	r16
    1992:	ff 90       	pop	r15
    1994:	ef 90       	pop	r14
    1996:	df 90       	pop	r13
    1998:	cf 90       	pop	r12
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    199a:	0c 94 07 0c 	jmp	0x180e	; 0x180e <register_mods>
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    199e:	f4 e0       	ldi	r31, 0x04	; 4
    19a0:	fe 15       	cp	r31, r14
    19a2:	08 f4       	brcc	.+2      	; 0x19a6 <process_action+0x17c>
    19a4:	19 c2       	rjmp	.+1074   	; 0x1dd8 <process_action+0x5ae>
    19a6:	09 c0       	rjmp	.+18     	; 0x19ba <process_action+0x190>
                        }
                        break;
                    default:
                        if (event.pressed) {
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
    19a8:	f6 01       	movw	r30, r12
    19aa:	85 81       	ldd	r24, Z+5	; 0x05
    19ac:	80 ff       	sbrs	r24, 0
    19ae:	c9 c1       	rjmp	.+914    	; 0x1d42 <process_action+0x518>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    19b0:	8f 70       	andi	r24, 0x0F	; 15
    19b2:	85 83       	std	Z+5, r24	; 0x05
    19b4:	e4 cf       	rjmp	.-56     	; 0x197e <process_action+0x154>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    19b6:	e1 10       	cpse	r14, r1
    19b8:	d7 c1       	rjmp	.+942    	; 0x1d68 <process_action+0x53e>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    19ba:	81 2f       	mov	r24, r17
    19bc:	4a c1       	rjmp	.+660    	; 0x1c52 <process_action+0x428>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    19be:	81 2f       	mov	r24, r17
    19c0:	86 95       	lsr	r24
    19c2:	86 95       	lsr	r24
    19c4:	83 70       	andi	r24, 0x03	; 3
    19c6:	19 f0       	breq	.+6      	; 0x19ce <process_action+0x1a4>
    19c8:	81 30       	cpi	r24, 0x01	; 1
    19ca:	b9 f0       	breq	.+46     	; 0x19fa <process_action+0x1d0>
    19cc:	05 c2       	rjmp	.+1034   	; 0x1dd8 <process_action+0x5ae>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    19ce:	ff 20       	and	r15, r15
    19d0:	19 f0       	breq	.+6      	; 0x19d8 <process_action+0x1ae>
                        host_system_send(action.usage.code);
    19d2:	c8 01       	movw	r24, r16
    19d4:	93 70       	andi	r25, 0x03	; 3
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <process_action+0x1b2>
                    } else {
                        host_system_send(0);
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	df 91       	pop	r29
    19e8:	cf 91       	pop	r28
    19ea:	1f 91       	pop	r17
    19ec:	0f 91       	pop	r16
    19ee:	ff 90       	pop	r15
    19f0:	ef 90       	pop	r14
    19f2:	df 90       	pop	r13
    19f4:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    19f6:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    19fa:	ff 20       	and	r15, r15
    19fc:	19 f0       	breq	.+6      	; 0x1a04 <process_action+0x1da>
                        host_consumer_send(action.usage.code);
    19fe:	c8 01       	movw	r24, r16
    1a00:	93 70       	andi	r25, 0x03	; 3
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <process_action+0x1de>
                    } else {
                        host_consumer_send(0);
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	df 91       	pop	r29
    1a14:	cf 91       	pop	r28
    1a16:	1f 91       	pop	r17
    1a18:	0f 91       	pop	r16
    1a1a:	ff 90       	pop	r15
    1a1c:	ef 90       	pop	r14
    1a1e:	df 90       	pop	r13
    1a20:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    1a22:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <host_consumer_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    1a26:	81 2f       	mov	r24, r17
    1a28:	83 70       	andi	r24, 0x03	; 3
    1a2a:	09 f0       	breq	.+2      	; 0x1a2e <process_action+0x204>
    1a2c:	70 c0       	rjmp	.+224    	; 0x1b0e <process_action+0x2e4>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    1a2e:	f1 10       	cpse	r15, r1
    1a30:	d3 c1       	rjmp	.+934    	; 0x1dd8 <process_action+0x5ae>
                    uint8_t shift = action.layer_bitop.part*4;
    1a32:	20 2f       	mov	r18, r16
    1a34:	22 95       	swap	r18
    1a36:	26 95       	lsr	r18
    1a38:	27 70       	andi	r18, 0x07	; 7
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    1a3a:	22 0f       	add	r18, r18
    1a3c:	22 0f       	add	r18, r18
    1a3e:	60 2f       	mov	r22, r16
    1a40:	6f 70       	andi	r22, 0x0F	; 15
    1a42:	86 2f       	mov	r24, r22
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	a0 e0       	ldi	r26, 0x00	; 0
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	6c 01       	movw	r12, r24
    1a4c:	7d 01       	movw	r14, r26
    1a4e:	02 2e       	mov	r0, r18
    1a50:	04 c0       	rjmp	.+8      	; 0x1a5a <process_action+0x230>
    1a52:	cc 0c       	add	r12, r12
    1a54:	dd 1c       	adc	r13, r13
    1a56:	ee 1c       	adc	r14, r14
    1a58:	ff 1c       	adc	r15, r15
    1a5a:	0a 94       	dec	r0
    1a5c:	d2 f7       	brpl	.-12     	; 0x1a52 <process_action+0x228>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    1a5e:	04 ff       	sbrs	r16, 4
    1a60:	12 c0       	rjmp	.+36     	; 0x1a86 <process_action+0x25c>
    1a62:	8f e0       	ldi	r24, 0x0F	; 15
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	a0 e0       	ldi	r26, 0x00	; 0
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	04 c0       	rjmp	.+8      	; 0x1a74 <process_action+0x24a>
    1a6c:	88 0f       	add	r24, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	aa 1f       	adc	r26, r26
    1a72:	bb 1f       	adc	r27, r27
    1a74:	2a 95       	dec	r18
    1a76:	d2 f7       	brpl	.-12     	; 0x1a6c <process_action+0x242>
    1a78:	bc 01       	movw	r22, r24
    1a7a:	cd 01       	movw	r24, r26
    1a7c:	60 95       	com	r22
    1a7e:	70 95       	com	r23
    1a80:	80 95       	com	r24
    1a82:	90 95       	com	r25
    1a84:	03 c0       	rjmp	.+6      	; 0x1a8c <process_action+0x262>
    1a86:	60 e0       	ldi	r22, 0x00	; 0
    1a88:	70 e0       	ldi	r23, 0x00	; 0
    1a8a:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    1a8c:	16 95       	lsr	r17
    1a8e:	16 95       	lsr	r17
    1a90:	13 70       	andi	r17, 0x03	; 3
    1a92:	12 30       	cpi	r17, 0x02	; 2
    1a94:	b1 f0       	breq	.+44     	; 0x1ac2 <process_action+0x298>
    1a96:	40 f5       	brcc	.+80     	; 0x1ae8 <process_action+0x2be>
    1a98:	6c 29       	or	r22, r12
    1a9a:	7d 29       	or	r23, r13
    1a9c:	8e 29       	or	r24, r14
    1a9e:	9f 29       	or	r25, r15
    1aa0:	11 30       	cpi	r17, 0x01	; 1
    1aa2:	31 f1       	breq	.+76     	; 0x1af0 <process_action+0x2c6>
            break;
#endif
        default:
            break;
    }
}
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	ff 90       	pop	r15
    1ab8:	ef 90       	pop	r14
    1aba:	df 90       	pop	r13
    1abc:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    1abe:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    1ac2:	6c 29       	or	r22, r12
    1ac4:	7d 29       	or	r23, r13
    1ac6:	8e 29       	or	r24, r14
    1ac8:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	1f 91       	pop	r17
    1ada:	0f 91       	pop	r16
    1adc:	ff 90       	pop	r15
    1ade:	ef 90       	pop	r14
    1ae0:	df 90       	pop	r13
    1ae2:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    1ae4:	0c 94 bd 13 	jmp	0x277a	; 0x277a <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    1ae8:	0e 94 a3 13 	call	0x2746	; 0x2746 <default_layer_and>
    1aec:	c7 01       	movw	r24, r14
    1aee:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	df 91       	pop	r29
    1afc:	cf 91       	pop	r28
    1afe:	1f 91       	pop	r17
    1b00:	0f 91       	pop	r16
    1b02:	ff 90       	pop	r15
    1b04:	ef 90       	pop	r14
    1b06:	df 90       	pop	r13
    1b08:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    1b0a:	0c 94 89 13 	jmp	0x2712	; 0x2712 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    1b0e:	ff 20       	and	r15, r15
    1b10:	19 f0       	breq	.+6      	; 0x1b18 <process_action+0x2ee>
    1b12:	81 2f       	mov	r24, r17
    1b14:	81 70       	andi	r24, 0x01	; 1
    1b16:	01 c0       	rjmp	.+2      	; 0x1b1a <process_action+0x2f0>
    1b18:	86 95       	lsr	r24
    1b1a:	88 23       	and	r24, r24
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <process_action+0x2f6>
    1b1e:	5c c1       	rjmp	.+696    	; 0x1dd8 <process_action+0x5ae>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    1b20:	20 2f       	mov	r18, r16
    1b22:	22 95       	swap	r18
    1b24:	26 95       	lsr	r18
    1b26:	27 70       	andi	r18, 0x07	; 7
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    1b28:	22 0f       	add	r18, r18
    1b2a:	22 0f       	add	r18, r18
    1b2c:	60 2f       	mov	r22, r16
    1b2e:	6f 70       	andi	r22, 0x0F	; 15
    1b30:	86 2f       	mov	r24, r22
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	a0 e0       	ldi	r26, 0x00	; 0
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	6c 01       	movw	r12, r24
    1b3a:	7d 01       	movw	r14, r26
    1b3c:	02 2e       	mov	r0, r18
    1b3e:	04 c0       	rjmp	.+8      	; 0x1b48 <process_action+0x31e>
    1b40:	cc 0c       	add	r12, r12
    1b42:	dd 1c       	adc	r13, r13
    1b44:	ee 1c       	adc	r14, r14
    1b46:	ff 1c       	adc	r15, r15
    1b48:	0a 94       	dec	r0
    1b4a:	d2 f7       	brpl	.-12     	; 0x1b40 <process_action+0x316>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    1b4c:	04 ff       	sbrs	r16, 4
    1b4e:	12 c0       	rjmp	.+36     	; 0x1b74 <process_action+0x34a>
    1b50:	8f e0       	ldi	r24, 0x0F	; 15
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	a0 e0       	ldi	r26, 0x00	; 0
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	04 c0       	rjmp	.+8      	; 0x1b62 <process_action+0x338>
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	aa 1f       	adc	r26, r26
    1b60:	bb 1f       	adc	r27, r27
    1b62:	2a 95       	dec	r18
    1b64:	d2 f7       	brpl	.-12     	; 0x1b5a <process_action+0x330>
    1b66:	bc 01       	movw	r22, r24
    1b68:	cd 01       	movw	r24, r26
    1b6a:	60 95       	com	r22
    1b6c:	70 95       	com	r23
    1b6e:	80 95       	com	r24
    1b70:	90 95       	com	r25
    1b72:	03 c0       	rjmp	.+6      	; 0x1b7a <process_action+0x350>
    1b74:	60 e0       	ldi	r22, 0x00	; 0
    1b76:	70 e0       	ldi	r23, 0x00	; 0
    1b78:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    1b7a:	16 95       	lsr	r17
    1b7c:	16 95       	lsr	r17
    1b7e:	13 70       	andi	r17, 0x03	; 3
    1b80:	12 30       	cpi	r17, 0x02	; 2
    1b82:	b1 f0       	breq	.+44     	; 0x1bb0 <process_action+0x386>
    1b84:	40 f5       	brcc	.+80     	; 0x1bd6 <process_action+0x3ac>
    1b86:	6c 29       	or	r22, r12
    1b88:	7d 29       	or	r23, r13
    1b8a:	8e 29       	or	r24, r14
    1b8c:	9f 29       	or	r25, r15
    1b8e:	11 30       	cpi	r17, 0x01	; 1
    1b90:	31 f1       	breq	.+76     	; 0x1bde <process_action+0x3b4>
            break;
#endif
        default:
            break;
    }
}
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	df 91       	pop	r29
    1b9e:	cf 91       	pop	r28
    1ba0:	1f 91       	pop	r17
    1ba2:	0f 91       	pop	r16
    1ba4:	ff 90       	pop	r15
    1ba6:	ef 90       	pop	r14
    1ba8:	df 90       	pop	r13
    1baa:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    1bac:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    1bb0:	6c 29       	or	r22, r12
    1bb2:	7d 29       	or	r23, r13
    1bb4:	8e 29       	or	r24, r14
    1bb6:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	1f 91       	pop	r17
    1bc8:	0f 91       	pop	r16
    1bca:	ff 90       	pop	r15
    1bcc:	ef 90       	pop	r14
    1bce:	df 90       	pop	r13
    1bd0:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    1bd2:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    1bd6:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <layer_and>
    1bda:	c7 01       	movw	r24, r14
    1bdc:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	df 91       	pop	r29
    1bea:	cf 91       	pop	r28
    1bec:	1f 91       	pop	r17
    1bee:	0f 91       	pop	r16
    1bf0:	ff 90       	pop	r15
    1bf2:	ef 90       	pop	r14
    1bf4:	df 90       	pop	r13
    1bf6:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    1bf8:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    1bfc:	00 3f       	cpi	r16, 0xF0	; 240
    1bfe:	c1 f1       	breq	.+112    	; 0x1c70 <process_action+0x446>
    1c00:	28 f4       	brcc	.+10     	; 0x1c0c <process_action+0x3e2>
    1c02:	80 e4       	ldi	r24, 0x40	; 64
    1c04:	80 0f       	add	r24, r16
    1c06:	80 32       	cpi	r24, 0x20	; 32
    1c08:	50 f0       	brcs	.+20     	; 0x1c1e <process_action+0x3f4>
    1c0a:	96 c0       	rjmp	.+300    	; 0x1d38 <process_action+0x50e>
    1c0c:	02 3f       	cpi	r16, 0xF2	; 242
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <process_action+0x3e8>
    1c10:	5e c0       	rjmp	.+188    	; 0x1cce <process_action+0x4a4>
    1c12:	08 f4       	brcc	.+2      	; 0x1c16 <process_action+0x3ec>
    1c14:	49 c0       	rjmp	.+146    	; 0x1ca8 <process_action+0x47e>
    1c16:	03 3f       	cpi	r16, 0xF3	; 243
    1c18:	09 f4       	brne	.+2      	; 0x1c1c <process_action+0x3f2>
    1c1a:	6c c0       	rjmp	.+216    	; 0x1cf4 <process_action+0x4ca>
    1c1c:	8d c0       	rjmp	.+282    	; 0x1d38 <process_action+0x50e>
    1c1e:	f0 2f       	mov	r31, r16
    1c20:	f0 71       	andi	r31, 0x10	; 16
    1c22:	ef 2e       	mov	r14, r31
    1c24:	81 2f       	mov	r24, r17
    1c26:	8f 71       	andi	r24, 0x1F	; 31
                case 0xc0 ... 0xdf:
                    /* layer On/Off with modifiers */
                    if (event.pressed) {
    1c28:	ff 20       	and	r15, r15
    1c2a:	51 f0       	breq	.+20     	; 0x1c40 <process_action+0x416>
                        layer_on(action.layer_tap.val);
    1c2c:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <layer_on>
                        register_mods((action.layer_tap.code & 0x10) ?
    1c30:	80 2f       	mov	r24, r16
    1c32:	ee 20       	and	r14, r14
    1c34:	19 f0       	breq	.+6      	; 0x1c3c <process_action+0x412>
    1c36:	82 95       	swap	r24
    1c38:	80 7f       	andi	r24, 0xF0	; 240
    1c3a:	a2 ce       	rjmp	.-700    	; 0x1980 <process_action+0x156>
    1c3c:	8f 70       	andi	r24, 0x0F	; 15
    1c3e:	a0 ce       	rjmp	.-704    	; 0x1980 <process_action+0x156>
                                (action.layer_tap.code & 0x0f) << 4 :
                                (action.layer_tap.code & 0x0f));
                    } else {
                        layer_off(action.layer_tap.val);
    1c40:	0e 94 12 14 	call	0x2824	; 0x2824 <layer_off>
                        unregister_mods((action.layer_tap.code & 0x10) ?
    1c44:	80 2f       	mov	r24, r16
    1c46:	ee 20       	and	r14, r14
    1c48:	19 f0       	breq	.+6      	; 0x1c50 <process_action+0x426>
    1c4a:	82 95       	swap	r24
    1c4c:	80 7f       	andi	r24, 0xF0	; 240
    1c4e:	01 c0       	rjmp	.+2      	; 0x1c52 <process_action+0x428>
    1c50:	8f 70       	andi	r24, 0x0F	; 15
            break;
#endif
        default:
            break;
    }
}
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	1f 91       	pop	r17
    1c62:	0f 91       	pop	r16
    1c64:	ff 90       	pop	r15
    1c66:	ef 90       	pop	r14
    1c68:	df 90       	pop	r13
    1c6a:	cf 90       	pop	r12
                        register_mods((action.layer_tap.code & 0x10) ?
                                (action.layer_tap.code & 0x0f) << 4 :
                                (action.layer_tap.code & 0x0f));
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods((action.layer_tap.code & 0x10) ?
    1c6c:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <unregister_mods>
                                (action.layer_tap.code & 0x0f));
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    1c70:	ff 20       	and	r15, r15
    1c72:	a9 f0       	breq	.+42     	; 0x1c9e <process_action+0x474>
                        if (tap_count < TAPPING_TOGGLE) {
    1c74:	84 e0       	ldi	r24, 0x04	; 4
    1c76:	8e 15       	cp	r24, r14
    1c78:	08 f4       	brcc	.+2      	; 0x1c7c <process_action+0x452>
    1c7a:	ae c0       	rjmp	.+348    	; 0x1dd8 <process_action+0x5ae>
                            layer_invert(action.layer_tap.val);
    1c7c:	81 2f       	mov	r24, r17
    1c7e:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	1f 91       	pop	r17
    1c90:	0f 91       	pop	r16
    1c92:	ff 90       	pop	r15
    1c94:	ef 90       	pop	r14
    1c96:	df 90       	pop	r13
    1c98:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    1c9a:	0c 94 37 14 	jmp	0x286e	; 0x286e <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    1c9e:	e5 e0       	ldi	r30, 0x05	; 5
    1ca0:	ee 15       	cp	r30, r14
    1ca2:	08 f4       	brcc	.+2      	; 0x1ca6 <process_action+0x47c>
    1ca4:	99 c0       	rjmp	.+306    	; 0x1dd8 <process_action+0x5ae>
    1ca6:	ea cf       	rjmp	.-44     	; 0x1c7c <process_action+0x452>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    1ca8:	ff 20       	and	r15, r15
    1caa:	99 f0       	breq	.+38     	; 0x1cd2 <process_action+0x4a8>
    1cac:	81 2f       	mov	r24, r17
    1cae:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	df 91       	pop	r29
    1cbc:	cf 91       	pop	r28
    1cbe:	1f 91       	pop	r17
    1cc0:	0f 91       	pop	r16
    1cc2:	ff 90       	pop	r15
    1cc4:	ef 90       	pop	r14
    1cc6:	df 90       	pop	r13
    1cc8:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    1cca:	0c 94 f1 13 	jmp	0x27e2	; 0x27e2 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    1cce:	ff 20       	and	r15, r15
    1cd0:	69 f3       	breq	.-38     	; 0x1cac <process_action+0x482>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    1cd2:	81 2f       	mov	r24, r17
    1cd4:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	df 91       	pop	r29
    1ce2:	cf 91       	pop	r28
    1ce4:	1f 91       	pop	r17
    1ce6:	0f 91       	pop	r16
    1ce8:	ff 90       	pop	r15
    1cea:	ef 90       	pop	r14
    1cec:	df 90       	pop	r13
    1cee:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    1cf0:	0c 94 12 14 	jmp	0x2824	; 0x2824 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    1cf4:	ff 20       	and	r15, r15
    1cf6:	89 f0       	breq	.+34     	; 0x1d1a <process_action+0x4f0>
    1cf8:	81 2f       	mov	r24, r17
    1cfa:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	1f 91       	pop	r17
    1d0c:	0f 91       	pop	r16
    1d0e:	ff 90       	pop	r15
    1d10:	ef 90       	pop	r14
    1d12:	df 90       	pop	r13
    1d14:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    1d16:	0c 94 dc 13 	jmp	0x27b8	; 0x27b8 <layer_move>
            break;
#endif
        default:
            break;
    }
}
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	1f 91       	pop	r17
    1d2a:	0f 91       	pop	r16
    1d2c:	ff 90       	pop	r15
    1d2e:	ef 90       	pop	r14
    1d30:	df 90       	pop	r13
    1d32:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    1d34:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    1d38:	ff 20       	and	r15, r15
    1d3a:	99 f0       	breq	.+38     	; 0x1d62 <process_action+0x538>
                        if (tap_count > 0) {
    1d3c:	ee 20       	and	r14, r14
    1d3e:	09 f4       	brne	.+2      	; 0x1d42 <process_action+0x518>
    1d40:	b5 cf       	rjmp	.-150    	; 0x1cac <process_action+0x482>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    1d42:	80 2f       	mov	r24, r16
            break;
#endif
        default:
            break;
    }
}
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	df 91       	pop	r29
    1d50:	cf 91       	pop	r28
    1d52:	1f 91       	pop	r17
    1d54:	0f 91       	pop	r16
    1d56:	ff 90       	pop	r15
    1d58:	ef 90       	pop	r14
    1d5a:	df 90       	pop	r13
    1d5c:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    1d5e:	0c 94 af 0a 	jmp	0x155e	; 0x155e <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    1d62:	ee 20       	and	r14, r14
    1d64:	09 f4       	brne	.+2      	; 0x1d68 <process_action+0x53e>
    1d66:	b5 cf       	rjmp	.-150    	; 0x1cd2 <process_action+0x4a8>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    1d68:	80 2f       	mov	r24, r16
            break;
#endif
        default:
            break;
    }
}
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	df 91       	pop	r29
    1d76:	cf 91       	pop	r28
    1d78:	1f 91       	pop	r17
    1d7a:	0f 91       	pop	r16
    1d7c:	ff 90       	pop	r15
    1d7e:	ef 90       	pop	r14
    1d80:	df 90       	pop	r13
    1d82:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    1d84:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    1d88:	41 2f       	mov	r20, r17
    1d8a:	4f 70       	andi	r20, 0x0F	; 15
    1d8c:	60 2f       	mov	r22, r16
    1d8e:	c6 01       	movw	r24, r12
    1d90:	0e 94 6d 17 	call	0x2eda	; 0x2eda <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	df 91       	pop	r29
    1da0:	cf 91       	pop	r28
    1da2:	1f 91       	pop	r17
    1da4:	0f 91       	pop	r16
    1da6:	ff 90       	pop	r15
    1da8:	ef 90       	pop	r14
    1daa:	df 90       	pop	r13
    1dac:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    1dae:	0c 94 d9 12 	jmp	0x25b2	; 0x25b2 <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    1db2:	41 2f       	mov	r20, r17
    1db4:	4f 70       	andi	r20, 0x0F	; 15
    1db6:	60 2f       	mov	r22, r16
    1db8:	c6 01       	movw	r24, r12
            break;
#endif
        default:
            break;
    }
}
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	0f 90       	pop	r0
    1dc2:	0f 90       	pop	r0
    1dc4:	df 91       	pop	r29
    1dc6:	cf 91       	pop	r28
    1dc8:	1f 91       	pop	r17
    1dca:	0f 91       	pop	r16
    1dcc:	ff 90       	pop	r15
    1dce:	ef 90       	pop	r14
    1dd0:	df 90       	pop	r13
    1dd2:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    1dd4:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <action_function>
            break;
#endif
        default:
            break;
    }
}
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	df 91       	pop	r29
    1de4:	cf 91       	pop	r28
    1de6:	1f 91       	pop	r17
    1de8:	0f 91       	pop	r16
    1dea:	ff 90       	pop	r15
    1dec:	ef 90       	pop	r14
    1dee:	df 90       	pop	r13
    1df0:	cf 90       	pop	r12
    1df2:	08 95       	ret

00001df4 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    1df4:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <clear_weak_mods>
    clear_keys();
    1df8:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <clear_keys>
    send_keyboard_report();
    1dfc:	0e 94 d7 15 	call	0x2bae	; 0x2bae <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    mousekey_send();
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	0e 94 8c 09 	call	0x1318	; 0x1318 <host_system_send>
    host_consumer_send(0);
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <host_consumer_send>

00001e10 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    1e10:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <clear_mods>
    clear_keyboard_but_mods();
    1e14:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <clear_keyboard_but_mods>

00001e18 <is_tap_key>:
    host_consumer_send(0);
#endif
}

bool is_tap_key(keyevent_t event)
{
    1e18:	1f 93       	push	r17
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
    1e1e:	00 d0       	rcall	.+0      	; 0x1e20 <is_tap_key+0x8>
    1e20:	00 d0       	rcall	.+0      	; 0x1e22 <is_tap_key+0xa>
    1e22:	1f 92       	push	r1
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	94 2f       	mov	r25, r20
    1e2a:	49 83       	std	Y+1, r20	; 0x01
    1e2c:	25 2f       	mov	r18, r21
    1e2e:	5a 83       	std	Y+2, r21	; 0x02
    1e30:	6b 83       	std	Y+3, r22	; 0x03
    1e32:	7c 83       	std	Y+4, r23	; 0x04
    1e34:	8d 83       	std	Y+5, r24	; 0x05
    1e36:	4c 81       	ldd	r20, Y+4	; 0x04
    1e38:	5d 81       	ldd	r21, Y+5	; 0x05
    1e3a:	45 2b       	or	r20, r21
    1e3c:	31 f0       	breq	.+12     	; 0x1e4a <is_tap_key+0x32>
    1e3e:	2f 3f       	cpi	r18, 0xFF	; 255
    1e40:	31 f4       	brne	.+12     	; 0x1e4e <is_tap_key+0x36>
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	9f 3f       	cpi	r25, 0xFF	; 255
    1e46:	19 f4       	brne	.+6      	; 0x1e4e <is_tap_key+0x36>
    1e48:	03 c0       	rjmp	.+6      	; 0x1e50 <is_tap_key+0x38>
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	01 c0       	rjmp	.+2      	; 0x1e50 <is_tap_key+0x38>
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    if (IS_NOEVENT(event)) { return false; }
    1e50:	18 2f       	mov	r17, r24
    1e52:	11 70       	andi	r17, 0x01	; 1
    1e54:	80 fd       	sbrc	r24, 0
    1e56:	31 c0       	rjmp	.+98     	; 0x1eba <is_tap_key+0xa2>

    action_t action = layer_switch_get_action(event);
    1e58:	49 81       	ldd	r20, Y+1	; 0x01
    1e5a:	5a 81       	ldd	r21, Y+2	; 0x02
    1e5c:	6b 81       	ldd	r22, Y+3	; 0x03
    1e5e:	7c 81       	ldd	r23, Y+4	; 0x04
    1e60:	8d 81       	ldd	r24, Y+5	; 0x05
    1e62:	0e 94 8f 14 	call	0x291e	; 0x291e <layer_switch_get_action>

    switch (action.kind.id) {
    1e66:	29 2f       	mov	r18, r25
    1e68:	22 95       	swap	r18
    1e6a:	2f 70       	andi	r18, 0x0F	; 15
    1e6c:	2c 30       	cpi	r18, 0x0C	; 12
    1e6e:	30 f4       	brcc	.+12     	; 0x1e7c <is_tap_key+0x64>
    1e70:	2a 30       	cpi	r18, 0x0A	; 10
    1e72:	a0 f4       	brcc	.+40     	; 0x1e9c <is_tap_key+0x84>
    1e74:	22 50       	subi	r18, 0x02	; 2
    1e76:	22 30       	cpi	r18, 0x02	; 2
    1e78:	30 f0       	brcs	.+12     	; 0x1e86 <is_tap_key+0x6e>
    1e7a:	22 c0       	rjmp	.+68     	; 0x1ec0 <is_tap_key+0xa8>
    1e7c:	2c 30       	cpi	r18, 0x0C	; 12
    1e7e:	c9 f0       	breq	.+50     	; 0x1eb2 <is_tap_key+0x9a>
    1e80:	2f 30       	cpi	r18, 0x0F	; 15
    1e82:	b9 f0       	breq	.+46     	; 0x1eb2 <is_tap_key+0x9a>
    1e84:	1d c0       	rjmp	.+58     	; 0x1ec0 <is_tap_key+0xa8>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            switch (action.key.code) {
    1e86:	85 3a       	cpi	r24, 0xA5	; 165
    1e88:	28 f4       	brcc	.+10     	; 0x1e94 <is_tap_key+0x7c>
    1e8a:	84 30       	cpi	r24, 0x04	; 4
    1e8c:	c0 f4       	brcc	.+48     	; 0x1ebe <is_tap_key+0xa6>
    1e8e:	82 30       	cpi	r24, 0x02	; 2
    1e90:	28 f4       	brcc	.+10     	; 0x1e9c <is_tap_key+0x84>
    1e92:	15 c0       	rjmp	.+42     	; 0x1ebe <is_tap_key+0xa6>
    1e94:	90 e2       	ldi	r25, 0x20	; 32
    1e96:	98 0f       	add	r25, r24
    1e98:	98 30       	cpi	r25, 0x08	; 8
    1e9a:	88 f0       	brcs	.+34     	; 0x1ebe <is_tap_key+0xa6>
                case KC_LCTRL ... KC_RGUI:              // tap key
                    return true;
            }
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    1e9c:	88 3e       	cpi	r24, 0xE8	; 232
    1e9e:	30 f4       	brcc	.+12     	; 0x1eac <is_tap_key+0x94>
    1ea0:	80 3e       	cpi	r24, 0xE0	; 224
    1ea2:	68 f4       	brcc	.+26     	; 0x1ebe <is_tap_key+0xa6>
    1ea4:	84 50       	subi	r24, 0x04	; 4
    1ea6:	81 3a       	cpi	r24, 0xA1	; 161
    1ea8:	58 f4       	brcc	.+22     	; 0x1ec0 <is_tap_key+0xa8>
    1eaa:	09 c0       	rjmp	.+18     	; 0x1ebe <is_tap_key+0xa6>
    1eac:	80 3f       	cpi	r24, 0xF0	; 240
    1eae:	41 f4       	brne	.+16     	; 0x1ec0 <is_tap_key+0xa8>
    1eb0:	06 c0       	rjmp	.+12     	; 0x1ebe <is_tap_key+0xa6>
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    1eb2:	93 fb       	bst	r25, 3
    1eb4:	11 27       	eor	r17, r17
    1eb6:	10 f9       	bld	r17, 0
    1eb8:	03 c0       	rjmp	.+6      	; 0x1ec0 <is_tap_key+0xa8>
#endif
}

bool is_tap_key(keyevent_t event)
{
    if (IS_NOEVENT(event)) { return false; }
    1eba:	10 e0       	ldi	r17, 0x00	; 0
    1ebc:	01 c0       	rjmp	.+2      	; 0x1ec0 <is_tap_key+0xa8>
            switch (action.key.code) {
                case MODS_ONESHOT:
                case MODS_TAP_TOGGLE:
                case KC_A ... KC_EXSEL:                 // tap key
                case KC_LCTRL ... KC_RGUI:              // tap key
                    return true;
    1ebe:	11 e0       	ldi	r17, 0x01	; 1
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    1ec0:	81 2f       	mov	r24, r17
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	df 91       	pop	r29
    1ece:	cf 91       	pop	r28
    1ed0:	1f 91       	pop	r17
    1ed2:	08 95       	ret

00001ed4 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    1ed4:	cf 93       	push	r28
    1ed6:	df 93       	push	r29
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <debug_event+0x6>
    1eda:	00 d0       	rcall	.+0      	; 0x1edc <debug_event+0x8>
    1edc:	1f 92       	push	r1
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	df 91       	pop	r29
    1eee:	cf 91       	pop	r28
    1ef0:	08 95       	ret

00001ef2 <debug_record>:

void debug_record(keyrecord_t record)
{
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <debug_record+0x6>
    1ef8:	00 d0       	rcall	.+0      	; 0x1efa <debug_record+0x8>
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <debug_record+0xa>
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    1f00:	26 96       	adiw	r28, 0x06	; 6
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	f8 94       	cli
    1f06:	de bf       	out	0x3e, r29	; 62
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	cd bf       	out	0x3d, r28	; 61
    1f0c:	df 91       	pop	r29
    1f0e:	cf 91       	pop	r28
    1f10:	08 95       	ret

00001f12 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    1f12:	cf 93       	push	r28
    1f14:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    1f16:	c0 91 84 01 	lds	r28, 0x0184	; 0x800184 <waiting_buffer_tail>
    1f1a:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <waiting_buffer_head>
    1f1e:	c8 17       	cp	r28, r24
    1f20:	a1 f0       	breq	.+40     	; 0x1f4a <debug_waiting_buffer+0x38>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    1f22:	d0 e0       	ldi	r29, 0x00	; 0
    1f24:	ce 01       	movw	r24, r28
    1f26:	66 e0       	ldi	r22, 0x06	; 6
    1f28:	70 e0       	ldi	r23, 0x00	; 0
    1f2a:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__mulhi3>
    1f2e:	fc 01       	movw	r30, r24
    1f30:	ea 57       	subi	r30, 0x7A	; 122
    1f32:	fe 4f       	sbci	r31, 0xFE	; 254
    1f34:	40 81       	ld	r20, Z
    1f36:	51 81       	ldd	r21, Z+1	; 0x01
    1f38:	62 81       	ldd	r22, Z+2	; 0x02
    1f3a:	73 81       	ldd	r23, Z+3	; 0x03
    1f3c:	84 81       	ldd	r24, Z+4	; 0x04
    1f3e:	95 81       	ldd	r25, Z+5	; 0x05
    1f40:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    1f44:	21 96       	adiw	r28, 0x01	; 1
    1f46:	c7 70       	andi	r28, 0x07	; 7
    1f48:	e8 cf       	rjmp	.-48     	; 0x1f1a <debug_waiting_buffer+0x8>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    1f4a:	df 91       	pop	r29
    1f4c:	cf 91       	pop	r28
    1f4e:	08 95       	ret

00001f50 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    1f50:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <tapping_key>
    1f54:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <tapping_key+0x1>
    1f58:	60 91 b8 01 	lds	r22, 0x01B8	; 0x8001b8 <tapping_key+0x2>
    1f5c:	70 91 b9 01 	lds	r23, 0x01B9	; 0x8001b9 <tapping_key+0x3>
    1f60:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <tapping_key+0x4>
    1f64:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <tapping_key+0x5>
    1f68:	0c 94 79 0f 	jmp	0x1ef2	; 0x1ef2 <debug_record>

00001f6c <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    1f6c:	1f 93       	push	r17
    1f6e:	cf 93       	push	r28
    1f70:	df 93       	push	r29
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    1f72:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <tapping_key+0x5>
    1f76:	82 95       	swap	r24
    1f78:	8f 70       	andi	r24, 0x0F	; 15
    1f7a:	09 f0       	breq	.+2      	; 0x1f7e <waiting_buffer_scan_tap+0x12>
    1f7c:	66 c0       	rjmp	.+204    	; 0x204a <waiting_buffer_scan_tap+0xde>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    1f7e:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <tapping_key+0x2>
    1f82:	88 23       	and	r24, r24
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <waiting_buffer_scan_tap+0x1c>
    1f86:	61 c0       	rjmp	.+194    	; 0x204a <waiting_buffer_scan_tap+0xde>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    1f88:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <waiting_buffer_tail>
    1f8c:	10 91 85 01 	lds	r17, 0x0185	; 0x800185 <waiting_buffer_head>
    1f90:	c0 91 b6 01 	lds	r28, 0x01B6	; 0x8001b6 <tapping_key>
    1f94:	d0 91 b7 01 	lds	r29, 0x01B7	; 0x8001b7 <tapping_key+0x1>
    1f98:	e0 91 b9 01 	lds	r30, 0x01B9	; 0x8001b9 <tapping_key+0x3>
    1f9c:	f0 91 ba 01 	lds	r31, 0x01BA	; 0x8001ba <tapping_key+0x4>
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	cf 3f       	cpi	r28, 0xFF	; 255
    1fa4:	09 f0       	breq	.+2      	; 0x1fa8 <waiting_buffer_scan_tap+0x3c>
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	48 2f       	mov	r20, r24
    1faa:	21 17       	cp	r18, r17
    1fac:	09 f4       	brne	.+2      	; 0x1fb0 <waiting_buffer_scan_tap+0x44>
    1fae:	4d c0       	rjmp	.+154    	; 0x204a <waiting_buffer_scan_tap+0xde>
    1fb0:	30 97       	sbiw	r30, 0x00	; 0
    1fb2:	21 f0       	breq	.+8      	; 0x1fbc <waiting_buffer_scan_tap+0x50>
    1fb4:	df 3f       	cpi	r29, 0xFF	; 255
    1fb6:	21 f0       	breq	.+8      	; 0x1fc0 <waiting_buffer_scan_tap+0x54>
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	03 c0       	rjmp	.+6      	; 0x1fc2 <waiting_buffer_scan_tap+0x56>
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	01 c0       	rjmp	.+2      	; 0x1fc2 <waiting_buffer_scan_tap+0x56>
    1fc0:	84 2f       	mov	r24, r20
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    1fc4:	80 fd       	sbrc	r24, 0
    1fc6:	3d c0       	rjmp	.+122    	; 0x2042 <waiting_buffer_scan_tap+0xd6>
    1fc8:	c9 01       	movw	r24, r18
    1fca:	66 e0       	ldi	r22, 0x06	; 6
    1fcc:	70 e0       	ldi	r23, 0x00	; 0
    1fce:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__mulhi3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	aa 57       	subi	r26, 0x7A	; 122
    1fd6:	be 4f       	sbci	r27, 0xFE	; 254
    1fd8:	11 96       	adiw	r26, 0x01	; 1
    1fda:	8c 91       	ld	r24, X
    1fdc:	11 97       	sbiw	r26, 0x01	; 1
    1fde:	8d 13       	cpse	r24, r29
    1fe0:	30 c0       	rjmp	.+96     	; 0x2042 <waiting_buffer_scan_tap+0xd6>
    1fe2:	8c 91       	ld	r24, X
    1fe4:	8c 13       	cpse	r24, r28
    1fe6:	2d c0       	rjmp	.+90     	; 0x2042 <waiting_buffer_scan_tap+0xd6>
    1fe8:	12 96       	adiw	r26, 0x02	; 2
    1fea:	8c 91       	ld	r24, X
    1fec:	12 97       	sbiw	r26, 0x02	; 2
    1fee:	81 11       	cpse	r24, r1
    1ff0:	28 c0       	rjmp	.+80     	; 0x2042 <waiting_buffer_scan_tap+0xd6>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    1ff2:	13 96       	adiw	r26, 0x03	; 3
    1ff4:	8d 91       	ld	r24, X+
    1ff6:	9c 91       	ld	r25, X
    1ff8:	14 97       	sbiw	r26, 0x04	; 4
    1ffa:	8e 17       	cp	r24, r30
    1ffc:	9f 07       	cpc	r25, r31
    1ffe:	08 f4       	brcc	.+2      	; 0x2002 <waiting_buffer_scan_tap+0x96>
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	8e 1b       	sub	r24, r30
    2004:	9f 0b       	sbc	r25, r31
    2006:	88 3c       	cpi	r24, 0xC8	; 200
    2008:	91 05       	cpc	r25, r1
    200a:	d8 f4       	brcc	.+54     	; 0x2042 <waiting_buffer_scan_tap+0xd6>
            tapping_key.tap.count = 1;
    200c:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <tapping_key+0x5>
    2010:	8f 70       	andi	r24, 0x0F	; 15
    2012:	80 61       	ori	r24, 0x10	; 16
    2014:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <tapping_key+0x5>
            waiting_buffer[i].tap.count = 1;
    2018:	c9 01       	movw	r24, r18
    201a:	66 e0       	ldi	r22, 0x06	; 6
    201c:	70 e0       	ldi	r23, 0x00	; 0
    201e:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__mulhi3>
    2022:	fc 01       	movw	r30, r24
    2024:	e5 57       	subi	r30, 0x75	; 117
    2026:	fe 4f       	sbci	r31, 0xFE	; 254
    2028:	90 81       	ld	r25, Z
    202a:	9f 70       	andi	r25, 0x0F	; 15
    202c:	90 61       	ori	r25, 0x10	; 16
    202e:	90 83       	st	Z, r25
            process_action(&tapping_key);
    2030:	86 eb       	ldi	r24, 0xB6	; 182
    2032:	91 e0       	ldi	r25, 0x01	; 1
    2034:	0e 94 15 0c 	call	0x182a	; 0x182a <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2038:	df 91       	pop	r29
    203a:	cf 91       	pop	r28
    203c:	1f 91       	pop	r17
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    203e:	0c 94 89 0f 	jmp	0x1f12	; 0x1f12 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2042:	2f 5f       	subi	r18, 0xFF	; 255
    2044:	3f 4f       	sbci	r19, 0xFF	; 255
    2046:	27 70       	andi	r18, 0x07	; 7
    2048:	b0 cf       	rjmp	.-160    	; 0x1faa <waiting_buffer_scan_tap+0x3e>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    204a:	df 91       	pop	r29
    204c:	cf 91       	pop	r28
    204e:	1f 91       	pop	r17
    2050:	08 95       	ret

00002052 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    2052:	af 92       	push	r10
    2054:	bf 92       	push	r11
    2056:	cf 92       	push	r12
    2058:	df 92       	push	r13
    205a:	ef 92       	push	r14
    205c:	ff 92       	push	r15
    205e:	0f 93       	push	r16
    2060:	1f 93       	push	r17
    2062:	cf 93       	push	r28
    2064:	df 93       	push	r29
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	61 97       	sbiw	r28, 0x11	; 17
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	de bf       	out	0x3e, r29	; 62
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	cd bf       	out	0x3d, r28	; 61
    2076:	7c 01       	movw	r14, r24
    keyevent_t event = keyp->event;
    2078:	85 e0       	ldi	r24, 0x05	; 5
    207a:	f7 01       	movw	r30, r14
    207c:	de 01       	movw	r26, r28
    207e:	1d 96       	adiw	r26, 0x0d	; 13
    2080:	01 90       	ld	r0, Z+
    2082:	0d 92       	st	X+, r0
    2084:	8a 95       	dec	r24
    2086:	e1 f7       	brne	.-8      	; 0x2080 <process_tapping+0x2e>
    2088:	d7 01       	movw	r26, r14
    208a:	4c 91       	ld	r20, X
    208c:	11 96       	adiw	r26, 0x01	; 1
    208e:	2c 91       	ld	r18, X
    2090:	11 97       	sbiw	r26, 0x01	; 1
    2092:	12 96       	adiw	r26, 0x02	; 2
    2094:	dc 90       	ld	r13, X
    2096:	12 97       	sbiw	r26, 0x02	; 2
    2098:	13 96       	adiw	r26, 0x03	; 3
    209a:	0d 91       	ld	r16, X+
    209c:	1c 91       	ld	r17, X
    209e:	14 97       	sbiw	r26, 0x04	; 4
    20a0:	50 91 b6 01 	lds	r21, 0x01B6	; 0x8001b6 <tapping_key>
    20a4:	60 91 b7 01 	lds	r22, 0x01B7	; 0x8001b7 <tapping_key+0x1>
    20a8:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <tapping_key+0x3>
    20ac:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <tapping_key+0x4>
    20b0:	00 97       	sbiw	r24, 0x00	; 0
    20b2:	31 f0       	breq	.+12     	; 0x20c0 <process_tapping+0x6e>
    20b4:	6f 3f       	cpi	r22, 0xFF	; 255
    20b6:	31 f4       	brne	.+12     	; 0x20c4 <process_tapping+0x72>
    20b8:	31 e0       	ldi	r19, 0x01	; 1
    20ba:	5f 3f       	cpi	r21, 0xFF	; 255
    20bc:	19 f4       	brne	.+6      	; 0x20c4 <process_tapping+0x72>
    20be:	03 c0       	rjmp	.+6      	; 0x20c6 <process_tapping+0x74>
    20c0:	31 e0       	ldi	r19, 0x01	; 1
    20c2:	01 c0       	rjmp	.+2      	; 0x20c6 <process_tapping+0x74>
    20c4:	30 e0       	ldi	r19, 0x00	; 0

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    20c6:	b3 2f       	mov	r27, r19
    20c8:	b1 70       	andi	r27, 0x01	; 1
    20ca:	bb 2e       	mov	r11, r27
    20cc:	30 fd       	sbrc	r19, 0
    20ce:	76 c1       	rjmp	.+748    	; 0x23bc <process_tapping+0x36a>
    20d0:	a0 90 b8 01 	lds	r10, 0x01B8	; 0x8001b8 <tapping_key+0x2>
    20d4:	aa 20       	and	r10, r10
    20d6:	09 f4       	brne	.+2      	; 0x20da <process_tapping+0x88>
    20d8:	d2 c0       	rjmp	.+420    	; 0x227e <process_tapping+0x22c>
    20da:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <tapping_key+0x5>
        if (WITHIN_TAPPING_TERM(event)) {
    20de:	08 17       	cp	r16, r24
    20e0:	19 07       	cpc	r17, r25
    20e2:	28 f0       	brcs	.+10     	; 0x20ee <process_tapping+0x9c>
    20e4:	f8 01       	movw	r30, r16
    20e6:	e8 1b       	sub	r30, r24
    20e8:	f9 0b       	sbc	r31, r25
    20ea:	cf 01       	movw	r24, r30
    20ec:	04 c0       	rjmp	.+8      	; 0x20f6 <process_tapping+0xa4>
    20ee:	80 95       	com	r24
    20f0:	90 95       	com	r25
    20f2:	80 0f       	add	r24, r16
    20f4:	91 1f       	adc	r25, r17
    20f6:	cc 24       	eor	r12, r12
    20f8:	c3 94       	inc	r12
    20fa:	88 3c       	cpi	r24, 0xC8	; 200
    20fc:	91 05       	cpc	r25, r1
    20fe:	88 f0       	brcs	.+34     	; 0x2122 <process_tapping+0xd0>
    2100:	c1 2c       	mov	r12, r1
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    2102:	30 7f       	andi	r19, 0xF0	; 240
    2104:	09 f0       	breq	.+2      	; 0x2108 <process_tapping+0xb6>
    2106:	a6 c0       	rjmp	.+332    	; 0x2254 <process_tapping+0x202>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    2108:	70 2f       	mov	r23, r16
    210a:	19 8b       	std	Y+17, r17	; 0x11
    210c:	08 8b       	std	Y+16, r16	; 0x10
    210e:	52 2f       	mov	r21, r18
    2110:	6d 2d       	mov	r22, r13
    2112:	89 89       	ldd	r24, Y+17	; 0x11
    2114:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <debug_event>
                process_action(&tapping_key);
    2118:	86 eb       	ldi	r24, 0xB6	; 182
    211a:	91 e0       	ldi	r25, 0x01	; 1
    211c:	0e 94 15 0c 	call	0x182a	; 0x182a <process_action>
    2120:	c3 c0       	rjmp	.+390    	; 0x22a8 <process_tapping+0x256>
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
    2122:	83 2f       	mov	r24, r19
    2124:	80 7f       	andi	r24, 0xF0	; 240
    2126:	09 f0       	breq	.+2      	; 0x212a <process_tapping+0xd8>
    2128:	59 c0       	rjmp	.+178    	; 0x21dc <process_tapping+0x18a>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    212a:	26 13       	cpse	r18, r22
    212c:	15 c0       	rjmp	.+42     	; 0x2158 <process_tapping+0x106>
    212e:	45 13       	cpse	r20, r21
    2130:	13 c0       	rjmp	.+38     	; 0x2158 <process_tapping+0x106>
    2132:	cd 2c       	mov	r12, r13
    2134:	d1 10       	cpse	r13, r1
    2136:	10 c0       	rjmp	.+32     	; 0x2158 <process_tapping+0x106>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    2138:	3f 70       	andi	r19, 0x0F	; 15
    213a:	30 61       	ori	r19, 0x10	; 16
    213c:	30 93 bb 01 	sts	0x01BB, r19	; 0x8001bb <tapping_key+0x5>
                    debug_tapping_key();
    2140:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <debug_tapping_key>
                    process_action(&tapping_key);
    2144:	86 eb       	ldi	r24, 0xB6	; 182
    2146:	91 e0       	ldi	r25, 0x01	; 1
    2148:	0e 94 15 0c 	call	0x182a	; 0x182a <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    214c:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <tapping_key+0x5>
    2150:	d7 01       	movw	r26, r14
    2152:	15 96       	adiw	r26, 0x05	; 5
    2154:	8c 93       	st	X, r24
                    // enqueue
                    return false;
    2156:	68 c1       	rjmp	.+720    	; 0x2428 <process_tapping+0x3d6>
    2158:	01 15       	cp	r16, r1
    215a:	11 05       	cpc	r17, r1
    215c:	31 f0       	breq	.+12     	; 0x216a <process_tapping+0x118>
    215e:	2f 3f       	cpi	r18, 0xFF	; 255
    2160:	31 f4       	brne	.+12     	; 0x216e <process_tapping+0x11c>
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	4f 3f       	cpi	r20, 0xFF	; 255
    2166:	19 f4       	brne	.+6      	; 0x216e <process_tapping+0x11c>
    2168:	03 c0       	rjmp	.+6      	; 0x2170 <process_tapping+0x11e>
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	01 c0       	rjmp	.+2      	; 0x2170 <process_tapping+0x11e>
    216e:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    2170:	80 fd       	sbrc	r24, 0
    2172:	03 c0       	rjmp	.+6      	; 0x217a <process_tapping+0x128>
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	8d 25       	eor	r24, r13
    2178:	02 c0       	rjmp	.+4      	; 0x217e <process_tapping+0x12c>
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	90 e0       	ldi	r25, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    217e:	b8 2f       	mov	r27, r24
    2180:	b1 70       	andi	r27, 0x01	; 1
    2182:	cb 2e       	mov	r12, r27
    2184:	80 ff       	sbrs	r24, 0
    2186:	1f c0       	rjmp	.+62     	; 0x21c6 <process_tapping+0x174>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2188:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <waiting_buffer_tail>
    218c:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <waiting_buffer_head>
    2190:	e3 17       	cp	r30, r19
    2192:	09 f4       	brne	.+2      	; 0x2196 <process_tapping+0x144>
    2194:	25 c1       	rjmp	.+586    	; 0x23e0 <process_tapping+0x38e>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	cf 01       	movw	r24, r30
    219a:	66 e0       	ldi	r22, 0x06	; 6
    219c:	70 e0       	ldi	r23, 0x00	; 0
    219e:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__mulhi3>
    21a2:	dc 01       	movw	r26, r24
    21a4:	aa 57       	subi	r26, 0x7A	; 122
    21a6:	be 4f       	sbci	r27, 0xFE	; 254
    21a8:	11 96       	adiw	r26, 0x01	; 1
    21aa:	8c 91       	ld	r24, X
    21ac:	11 97       	sbiw	r26, 0x01	; 1
    21ae:	28 13       	cpse	r18, r24
    21b0:	07 c0       	rjmp	.+14     	; 0x21c0 <process_tapping+0x16e>
    21b2:	8c 91       	ld	r24, X
    21b4:	48 13       	cpse	r20, r24
    21b6:	04 c0       	rjmp	.+8      	; 0x21c0 <process_tapping+0x16e>
    21b8:	12 96       	adiw	r26, 0x02	; 2
    21ba:	8c 91       	ld	r24, X
    21bc:	d8 12       	cpse	r13, r24
    21be:	03 c0       	rjmp	.+6      	; 0x21c6 <process_tapping+0x174>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    21c0:	31 96       	adiw	r30, 0x01	; 1
    21c2:	e7 70       	andi	r30, 0x07	; 7
    21c4:	e5 cf       	rjmp	.-54     	; 0x2190 <process_tapping+0x13e>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    21c6:	cd 2c       	mov	r12, r13
    21c8:	dd 20       	and	r13, r13
    21ca:	09 f4       	brne	.+2      	; 0x21ce <process_tapping+0x17c>
    21cc:	2d c1       	rjmp	.+602    	; 0x2428 <process_tapping+0x3d6>
                        tapping_key.tap.interrupted = true;
    21ce:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <tapping_key+0x5>
    21d2:	81 60       	ori	r24, 0x01	; 1
    21d4:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <tapping_key+0x5>
                    }
                    // enqueue 
                    return false;
    21d8:	c1 2c       	mov	r12, r1
    21da:	26 c1       	rjmp	.+588    	; 0x2428 <process_tapping+0x3d6>
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    21dc:	26 13       	cpse	r18, r22
    21de:	08 c0       	rjmp	.+16     	; 0x21f0 <process_tapping+0x19e>
    21e0:	45 13       	cpse	r20, r21
    21e2:	06 c0       	rjmp	.+12     	; 0x21f0 <process_tapping+0x19e>
    21e4:	d1 10       	cpse	r13, r1
    21e6:	04 c0       	rjmp	.+8      	; 0x21f0 <process_tapping+0x19e>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    21e8:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <tapping_key+0x5>
    21ec:	d7 01       	movw	r26, r14
    21ee:	b9 c0       	rjmp	.+370    	; 0x2362 <process_tapping+0x310>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event) && event.pressed) {
    21f0:	4d 87       	std	Y+13, r20	; 0x0d
    21f2:	2e 87       	std	Y+14, r18	; 0x0e
    21f4:	df 86       	std	Y+15, r13	; 0x0f
    21f6:	70 2f       	mov	r23, r16
    21f8:	19 8b       	std	Y+17, r17	; 0x11
    21fa:	08 8b       	std	Y+16, r16	; 0x10
    21fc:	52 2f       	mov	r21, r18
    21fe:	6d 2d       	mov	r22, r13
    2200:	89 89       	ldd	r24, Y+17	; 0x11
    2202:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <is_tap_key>
    2206:	88 23       	and	r24, r24
    2208:	a1 f1       	breq	.+104    	; 0x2272 <process_tapping+0x220>
    220a:	dd 20       	and	r13, r13
    220c:	91 f1       	breq	.+100    	; 0x2272 <process_tapping+0x220>
                    if (tapping_key.tap.count > 1) {
    220e:	20 91 bb 01 	lds	r18, 0x01BB	; 0x8001bb <tapping_key+0x5>
    2212:	82 2f       	mov	r24, r18
    2214:	82 95       	swap	r24
    2216:	8f 70       	andi	r24, 0x0F	; 15
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	02 97       	sbiw	r24, 0x02	; 2
    221c:	74 f0       	brlt	.+28     	; 0x223a <process_tapping+0x1e8>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    221e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <tapping_key>
    2222:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <tapping_key+0x1>
    2226:	98 87       	std	Y+8, r25	; 0x08
    2228:	8f 83       	std	Y+7, r24	; 0x07
    222a:	19 86       	std	Y+9, r1	; 0x09
    222c:	1b 87       	std	Y+11, r17	; 0x0b
    222e:	0a 87       	std	Y+10, r16	; 0x0a
    2230:	2c 87       	std	Y+12, r18	; 0x0c
    2232:	ce 01       	movw	r24, r28
    2234:	07 96       	adiw	r24, 0x07	; 7
    2236:	0e 94 15 0c 	call	0x182a	; 0x182a <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
    223a:	86 e0       	ldi	r24, 0x06	; 6
    223c:	f7 01       	movw	r30, r14
    223e:	a6 eb       	ldi	r26, 0xB6	; 182
    2240:	b1 e0       	ldi	r27, 0x01	; 1
    2242:	01 90       	ld	r0, Z+
    2244:	0d 92       	st	X+, r0
    2246:	8a 95       	dec	r24
    2248:	e1 f7       	brne	.-8      	; 0x2242 <process_tapping+0x1f0>
                    waiting_buffer_scan_tap();
    224a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <waiting_buffer_scan_tap>
                    debug_tapping_key();
    224e:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <debug_tapping_key>
    2252:	12 c0       	rjmp	.+36     	; 0x2278 <process_tapping+0x226>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2254:	26 17       	cp	r18, r22
    2256:	91 f1       	breq	.+100    	; 0x22bc <process_tapping+0x26a>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event) && event.pressed) {
    2258:	4d 87       	std	Y+13, r20	; 0x0d
    225a:	2e 87       	std	Y+14, r18	; 0x0e
    225c:	df 86       	std	Y+15, r13	; 0x0f
    225e:	70 2f       	mov	r23, r16
    2260:	19 8b       	std	Y+17, r17	; 0x11
    2262:	08 8b       	std	Y+16, r16	; 0x10
    2264:	52 2f       	mov	r21, r18
    2266:	6d 2d       	mov	r22, r13
    2268:	89 89       	ldd	r24, Y+17	; 0x11
    226a:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <is_tap_key>
    226e:	81 11       	cpse	r24, r1
    2270:	39 c0       	rjmp	.+114    	; 0x22e4 <process_tapping+0x292>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    2272:	c7 01       	movw	r24, r14
    2274:	0e 94 15 0c 	call	0x182a	; 0x182a <process_action>
                    return true;
    2278:	cc 24       	eor	r12, r12
    227a:	c3 94       	inc	r12
    227c:	d5 c0       	rjmp	.+426    	; 0x2428 <process_tapping+0x3d6>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    227e:	08 17       	cp	r16, r24
    2280:	19 07       	cpc	r17, r25
    2282:	08 f4       	brcc	.+2      	; 0x2286 <process_tapping+0x234>
    2284:	47 c0       	rjmp	.+142    	; 0x2314 <process_tapping+0x2c2>
    2286:	f8 01       	movw	r30, r16
    2288:	e8 1b       	sub	r30, r24
    228a:	f9 0b       	sbc	r31, r25
    228c:	cf 01       	movw	r24, r30
    228e:	88 3c       	cpi	r24, 0xC8	; 200
    2290:	91 05       	cpc	r25, r1
    2292:	08 f4       	brcc	.+2      	; 0x2296 <process_tapping+0x244>
    2294:	44 c0       	rjmp	.+136    	; 0x231e <process_tapping+0x2cc>
    2296:	c1 2c       	mov	r12, r1
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    2298:	70 2f       	mov	r23, r16
    229a:	19 8b       	std	Y+17, r17	; 0x11
    229c:	08 8b       	std	Y+16, r16	; 0x10
    229e:	52 2f       	mov	r21, r18
    22a0:	6d 2d       	mov	r22, r13
    22a2:	89 89       	ldd	r24, Y+17	; 0x11
    22a4:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <debug_event>
        else {
            if (tapping_key.tap.count == 0) {
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
    22a8:	e6 eb       	ldi	r30, 0xB6	; 182
    22aa:	f1 e0       	ldi	r31, 0x01	; 1
    22ac:	86 e0       	ldi	r24, 0x06	; 6
    22ae:	df 01       	movw	r26, r30
    22b0:	1d 92       	st	X+, r1
    22b2:	8a 95       	dec	r24
    22b4:	e9 f7       	brne	.-6      	; 0x22b0 <process_tapping+0x25e>
                debug_tapping_key();
    22b6:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <debug_tapping_key>
                return false;
    22ba:	b6 c0       	rjmp	.+364    	; 0x2428 <process_tapping+0x3d6>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    22bc:	45 13       	cpse	r20, r21
    22be:	cc cf       	rjmp	.-104    	; 0x2258 <process_tapping+0x206>
    22c0:	d1 10       	cpse	r13, r1
    22c2:	ca cf       	rjmp	.-108    	; 0x2258 <process_tapping+0x206>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    22c4:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <tapping_key+0x5>
    22c8:	f7 01       	movw	r30, r14
    22ca:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    22cc:	c7 01       	movw	r24, r14
    22ce:	0e 94 15 0c 	call	0x182a	; 0x182a <process_action>
                    tapping_key = (keyrecord_t){};
    22d2:	86 e0       	ldi	r24, 0x06	; 6
    22d4:	e6 eb       	ldi	r30, 0xB6	; 182
    22d6:	f1 e0       	ldi	r31, 0x01	; 1
    22d8:	df 01       	movw	r26, r30
    22da:	1d 92       	st	X+, r1
    22dc:	8a 95       	dec	r24
    22de:	e9 f7       	brne	.-6      	; 0x22da <process_tapping+0x288>
                    return true;
    22e0:	ca 2c       	mov	r12, r10
    22e2:	a2 c0       	rjmp	.+324    	; 0x2428 <process_tapping+0x3d6>
                }
                else if (is_tap_key(event) && event.pressed) {
    22e4:	dd 20       	and	r13, r13
    22e6:	29 f2       	breq	.-118    	; 0x2272 <process_tapping+0x220>
                    if (tapping_key.tap.count > 1) {
    22e8:	20 91 bb 01 	lds	r18, 0x01BB	; 0x8001bb <tapping_key+0x5>
    22ec:	82 2f       	mov	r24, r18
    22ee:	82 95       	swap	r24
    22f0:	8f 70       	andi	r24, 0x0F	; 15
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	02 97       	sbiw	r24, 0x02	; 2
    22f6:	0c f4       	brge	.+2      	; 0x22fa <process_tapping+0x2a8>
    22f8:	a0 cf       	rjmp	.-192    	; 0x223a <process_tapping+0x1e8>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    22fa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <tapping_key>
    22fe:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <tapping_key+0x1>
    2302:	9a 83       	std	Y+2, r25	; 0x02
    2304:	89 83       	std	Y+1, r24	; 0x01
    2306:	1b 82       	std	Y+3, r1	; 0x03
    2308:	1d 83       	std	Y+5, r17	; 0x05
    230a:	0c 83       	std	Y+4, r16	; 0x04
    230c:	2e 83       	std	Y+6, r18	; 0x06
    230e:	ce 01       	movw	r24, r28
    2310:	01 96       	adiw	r24, 0x01	; 1
    2312:	91 cf       	rjmp	.-222    	; 0x2236 <process_tapping+0x1e4>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    2314:	80 95       	com	r24
    2316:	90 95       	com	r25
    2318:	80 0f       	add	r24, r16
    231a:	91 1f       	adc	r25, r17
    231c:	b8 cf       	rjmp	.-144    	; 0x228e <process_tapping+0x23c>
            if (event.pressed) {
    231e:	cd 2c       	mov	r12, r13
    2320:	dd 20       	and	r13, r13
    2322:	09 f4       	brne	.+2      	; 0x2326 <process_tapping+0x2d4>
    2324:	a6 cf       	rjmp	.-180    	; 0x2272 <process_tapping+0x220>
                if (IS_TAPPING_KEY(event.key)) {
    2326:	26 13       	cpse	r18, r22
    2328:	33 c0       	rjmp	.+102    	; 0x2390 <process_tapping+0x33e>
    232a:	45 13       	cpse	r20, r21
    232c:	31 c0       	rjmp	.+98     	; 0x2390 <process_tapping+0x33e>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    232e:	20 91 bb 01 	lds	r18, 0x01BB	; 0x8001bb <tapping_key+0x5>
    2332:	20 fd       	sbrc	r18, 0
    2334:	24 c0       	rjmp	.+72     	; 0x237e <process_tapping+0x32c>
    2336:	82 2f       	mov	r24, r18
    2338:	82 95       	swap	r24
    233a:	8f 70       	andi	r24, 0x0F	; 15
    233c:	48 2f       	mov	r20, r24
    233e:	50 e0       	ldi	r21, 0x00	; 0
    2340:	41 15       	cp	r20, r1
    2342:	51 05       	cpc	r21, r1
    2344:	e1 f0       	breq	.+56     	; 0x237e <process_tapping+0x32c>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    2346:	d7 01       	movw	r26, r14
    2348:	15 96       	adiw	r26, 0x05	; 5
    234a:	2c 93       	st	X, r18
    234c:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    234e:	4f 30       	cpi	r20, 0x0F	; 15
    2350:	51 05       	cpc	r21, r1
    2352:	49 f0       	breq	.+18     	; 0x2366 <process_tapping+0x314>
    2354:	8f 5f       	subi	r24, 0xFF	; 255
    2356:	98 2f       	mov	r25, r24
    2358:	92 95       	swap	r25
    235a:	90 7f       	andi	r25, 0xF0	; 240
    235c:	82 2f       	mov	r24, r18
    235e:	8f 70       	andi	r24, 0x0F	; 15
    2360:	89 2b       	or	r24, r25
    2362:	15 96       	adiw	r26, 0x05	; 5
    2364:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    2366:	c7 01       	movw	r24, r14
    2368:	0e 94 15 0c 	call	0x182a	; 0x182a <process_action>
                        tapping_key = *keyp;
    236c:	86 e0       	ldi	r24, 0x06	; 6
    236e:	f7 01       	movw	r30, r14
    2370:	a6 eb       	ldi	r26, 0xB6	; 182
    2372:	b1 e0       	ldi	r27, 0x01	; 1
    2374:	01 90       	ld	r0, Z+
    2376:	0d 92       	st	X+, r0
    2378:	8a 95       	dec	r24
    237a:	e1 f7       	brne	.-8      	; 0x2374 <process_tapping+0x322>
    237c:	9c cf       	rjmp	.-200    	; 0x22b6 <process_tapping+0x264>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    237e:	86 e0       	ldi	r24, 0x06	; 6
    2380:	f7 01       	movw	r30, r14
    2382:	a6 eb       	ldi	r26, 0xB6	; 182
    2384:	b1 e0       	ldi	r27, 0x01	; 1
    2386:	01 90       	ld	r0, Z+
    2388:	0d 92       	st	X+, r0
    238a:	8a 95       	dec	r24
    238c:	e1 f7       	brne	.-8      	; 0x2386 <process_tapping+0x334>
                        return true;
    238e:	4c c0       	rjmp	.+152    	; 0x2428 <process_tapping+0x3d6>
                    }
                } else if (is_tap_key(event)) {
    2390:	4d 87       	std	Y+13, r20	; 0x0d
    2392:	2e 87       	std	Y+14, r18	; 0x0e
    2394:	df 86       	std	Y+15, r13	; 0x0f
    2396:	70 2f       	mov	r23, r16
    2398:	19 8b       	std	Y+17, r17	; 0x11
    239a:	08 8b       	std	Y+16, r16	; 0x10
    239c:	52 2f       	mov	r21, r18
    239e:	6d 2d       	mov	r22, r13
    23a0:	89 89       	ldd	r24, Y+17	; 0x11
    23a2:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <is_tap_key>
    23a6:	81 11       	cpse	r24, r1
    23a8:	48 cf       	rjmp	.-368    	; 0x223a <process_tapping+0x1e8>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    23aa:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <tapping_key+0x5>
    23ae:	81 60       	ori	r24, 0x01	; 1
    23b0:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <tapping_key+0x5>
                    process_action(keyp);
    23b4:	c7 01       	movw	r24, r14
    23b6:	0e 94 15 0c 	call	0x182a	; 0x182a <process_action>
                    return true;
    23ba:	36 c0       	rjmp	.+108    	; 0x2428 <process_tapping+0x3d6>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event)) {
    23bc:	dd 20       	and	r13, r13
    23be:	09 f4       	brne	.+2      	; 0x23c2 <process_tapping+0x370>
    23c0:	58 cf       	rjmp	.-336    	; 0x2272 <process_tapping+0x220>
    23c2:	4d 87       	std	Y+13, r20	; 0x0d
    23c4:	2e 87       	std	Y+14, r18	; 0x0e
    23c6:	df 86       	std	Y+15, r13	; 0x0f
    23c8:	70 2f       	mov	r23, r16
    23ca:	19 8b       	std	Y+17, r17	; 0x11
    23cc:	08 8b       	std	Y+16, r16	; 0x10
    23ce:	52 2f       	mov	r21, r18
    23d0:	6d 2d       	mov	r22, r13
    23d2:	89 89       	ldd	r24, Y+17	; 0x11
    23d4:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <is_tap_key>
    23d8:	88 23       	and	r24, r24
    23da:	09 f4       	brne	.+2      	; 0x23de <process_tapping+0x38c>
    23dc:	4a cf       	rjmp	.-364    	; 0x2272 <process_tapping+0x220>
    23de:	2d cf       	rjmp	.-422    	; 0x223a <process_tapping+0x1e8>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event);
    23e0:	70 2f       	mov	r23, r16
    23e2:	19 8b       	std	Y+17, r17	; 0x11
    23e4:	08 8b       	std	Y+16, r16	; 0x10
    23e6:	52 2f       	mov	r21, r18
    23e8:	6d 2d       	mov	r22, r13
    23ea:	89 89       	ldd	r24, Y+17	; 0x11
    23ec:	0e 94 8f 14 	call	0x291e	; 0x291e <layer_switch_get_action>
                    switch (action.kind.id) {
    23f0:	29 2f       	mov	r18, r25
    23f2:	22 95       	swap	r18
    23f4:	2f 70       	andi	r18, 0x0F	; 15
    23f6:	22 30       	cpi	r18, 0x02	; 2
    23f8:	28 f4       	brcc	.+10     	; 0x2404 <process_tapping+0x3b2>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    23fa:	9f 70       	andi	r25, 0x0F	; 15
    23fc:	39 f0       	breq	.+14     	; 0x240c <process_tapping+0x3ba>
    23fe:	81 11       	cpse	r24, r1
    2400:	05 c0       	rjmp	.+10     	; 0x240c <process_tapping+0x3ba>
    2402:	0b c0       	rjmp	.+22     	; 0x241a <process_tapping+0x3c8>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event);
                    switch (action.kind.id) {
    2404:	24 30       	cpi	r18, 0x04	; 4
    2406:	28 f4       	brcc	.+10     	; 0x2412 <process_tapping+0x3c0>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    2408:	9f 70       	andi	r25, 0x0F	; 15
    240a:	49 f4       	brne	.+18     	; 0x241e <process_tapping+0x3cc>
                            if (IS_MOD(action.key.code)) return false;
    240c:	80 5e       	subi	r24, 0xE0	; 224
    240e:	88 30       	cpi	r24, 0x08	; 8
    2410:	20 f0       	brcs	.+8      	; 0x241a <process_tapping+0x3c8>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    2412:	c7 01       	movw	r24, r14
    2414:	0e 94 15 0c 	call	0x182a	; 0x182a <process_action>
                    return true;
    2418:	bc 2c       	mov	r11, r12
    241a:	cb 2c       	mov	r12, r11
    241c:	05 c0       	rjmp	.+10     	; 0x2428 <process_tapping+0x3d6>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    241e:	f7 01       	movw	r30, r14
    2420:	95 81       	ldd	r25, Z+5	; 0x05
    2422:	90 7f       	andi	r25, 0xF0	; 240
    2424:	99 f7       	brne	.-26     	; 0x240c <process_tapping+0x3ba>
    2426:	f9 cf       	rjmp	.-14     	; 0x241a <process_tapping+0x3c8>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    2428:	8c 2d       	mov	r24, r12
    242a:	61 96       	adiw	r28, 0x11	; 17
    242c:	0f b6       	in	r0, 0x3f	; 63
    242e:	f8 94       	cli
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	cd bf       	out	0x3d, r28	; 61
    2436:	df 91       	pop	r29
    2438:	cf 91       	pop	r28
    243a:	1f 91       	pop	r17
    243c:	0f 91       	pop	r16
    243e:	ff 90       	pop	r15
    2440:	ef 90       	pop	r14
    2442:	df 90       	pop	r13
    2444:	cf 90       	pop	r12
    2446:	bf 90       	pop	r11
    2448:	af 90       	pop	r10
    244a:	08 95       	ret

0000244c <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    244c:	cf 93       	push	r28
    244e:	df 93       	push	r29
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
    2454:	2c 97       	sbiw	r28, 0x0c	; 12
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	de bf       	out	0x3e, r29	; 62
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	cd bf       	out	0x3d, r28	; 61
    2460:	4f 83       	std	Y+7, r20	; 0x07
    2462:	58 87       	std	Y+8, r21	; 0x08
    2464:	69 87       	std	Y+9, r22	; 0x09
    2466:	7a 87       	std	Y+10, r23	; 0x0a
    2468:	8b 87       	std	Y+11, r24	; 0x0b
    246a:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    246c:	ce 01       	movw	r24, r28
    246e:	07 96       	adiw	r24, 0x07	; 7
    2470:	0e 94 29 10 	call	0x2052	; 0x2052 <process_tapping>
    2474:	88 23       	and	r24, r24
    2476:	d1 f0       	breq	.+52     	; 0x24ac <action_tapping_process+0x60>
    2478:	9f 81       	ldd	r25, Y+7	; 0x07
    247a:	88 85       	ldd	r24, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    247c:	2a 85       	ldd	r18, Y+10	; 0x0a
    247e:	3b 85       	ldd	r19, Y+11	; 0x0b
    2480:	23 2b       	or	r18, r19
    2482:	31 f0       	breq	.+12     	; 0x2490 <action_tapping_process+0x44>
    2484:	8f 3f       	cpi	r24, 0xFF	; 255
    2486:	31 f4       	brne	.+12     	; 0x2494 <action_tapping_process+0x48>
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	9f 3f       	cpi	r25, 0xFF	; 255
    248c:	19 f4       	brne	.+6      	; 0x2494 <action_tapping_process+0x48>
    248e:	03 c0       	rjmp	.+6      	; 0x2496 <action_tapping_process+0x4a>
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	01 c0       	rjmp	.+2      	; 0x2496 <action_tapping_process+0x4a>
    2494:	80 e0       	ldi	r24, 0x00	; 0
        if (!IS_NOEVENT(record.event)) {
    2496:	80 fd       	sbrc	r24, 0
    2498:	6f c0       	rjmp	.+222    	; 0x2578 <action_tapping_process+0x12c>
            debug("processed: "); debug_record(record); debug("\n");
    249a:	4f 81       	ldd	r20, Y+7	; 0x07
    249c:	58 85       	ldd	r21, Y+8	; 0x08
    249e:	69 85       	ldd	r22, Y+9	; 0x09
    24a0:	7a 85       	ldd	r23, Y+10	; 0x0a
    24a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    24a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    24a6:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <debug_record>
    24aa:	66 c0       	rjmp	.+204    	; 0x2578 <action_tapping_process+0x12c>
    24ac:	86 e0       	ldi	r24, 0x06	; 6
    24ae:	fe 01       	movw	r30, r28
    24b0:	37 96       	adiw	r30, 0x07	; 7
    24b2:	de 01       	movw	r26, r28
    24b4:	11 96       	adiw	r26, 0x01	; 1
    24b6:	01 90       	ld	r0, Z+
    24b8:	0d 92       	st	X+, r0
    24ba:	8a 95       	dec	r24
    24bc:	e1 f7       	brne	.-8      	; 0x24b6 <action_tapping_process+0x6a>
    24be:	ff 81       	ldd	r31, Y+7	; 0x07
    24c0:	e8 85       	ldd	r30, Y+8	; 0x08
    24c2:	6a 85       	ldd	r22, Y+10	; 0x0a
    24c4:	7b 85       	ldd	r23, Y+11	; 0x0b
    24c6:	61 15       	cp	r22, r1
    24c8:	71 05       	cpc	r23, r1
    24ca:	31 f0       	breq	.+12     	; 0x24d8 <action_tapping_process+0x8c>
    24cc:	ef 3f       	cpi	r30, 0xFF	; 255
    24ce:	31 f4       	brne	.+12     	; 0x24dc <action_tapping_process+0x90>
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	ff 3f       	cpi	r31, 0xFF	; 255
    24d4:	19 f4       	brne	.+6      	; 0x24dc <action_tapping_process+0x90>
    24d6:	03 c0       	rjmp	.+6      	; 0x24de <action_tapping_process+0x92>
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	01 c0       	rjmp	.+2      	; 0x24de <action_tapping_process+0x92>
    24dc:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    24de:	80 fd       	sbrc	r24, 0
    24e0:	4b c0       	rjmp	.+150    	; 0x2578 <action_tapping_process+0x12c>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    24e2:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <waiting_buffer_head>
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	9c 01       	movw	r18, r24
    24ea:	2f 5f       	subi	r18, 0xFF	; 255
    24ec:	3f 4f       	sbci	r19, 0xFF	; 255
    24ee:	27 70       	andi	r18, 0x07	; 7
    24f0:	33 27       	eor	r19, r19
    24f2:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <waiting_buffer_tail>
    24f6:	50 e0       	ldi	r21, 0x00	; 0
    24f8:	24 17       	cp	r18, r20
    24fa:	35 07       	cpc	r19, r21
    24fc:	09 f4       	brne	.+2      	; 0x2500 <action_tapping_process+0xb4>
    24fe:	43 c0       	rjmp	.+134    	; 0x2586 <action_tapping_process+0x13a>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    2500:	f9 83       	std	Y+1, r31	; 0x01
    2502:	ea 83       	std	Y+2, r30	; 0x02
    2504:	7d 83       	std	Y+5, r23	; 0x05
    2506:	6c 83       	std	Y+4, r22	; 0x04
    2508:	66 e0       	ldi	r22, 0x06	; 6
    250a:	70 e0       	ldi	r23, 0x00	; 0
    250c:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__mulhi3>
    2510:	dc 01       	movw	r26, r24
    2512:	aa 57       	subi	r26, 0x7A	; 122
    2514:	be 4f       	sbci	r27, 0xFE	; 254
    2516:	96 e0       	ldi	r25, 0x06	; 6
    2518:	fe 01       	movw	r30, r28
    251a:	31 96       	adiw	r30, 0x01	; 1
    251c:	01 90       	ld	r0, Z+
    251e:	0d 92       	st	X+, r0
    2520:	9a 95       	dec	r25
    2522:	e1 f7       	brne	.-8      	; 0x251c <action_tapping_process+0xd0>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    2524:	20 93 85 01 	sts	0x0185, r18	; 0x800185 <waiting_buffer_head>

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    2528:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <debug_waiting_buffer>
    252c:	25 c0       	rjmp	.+74     	; 0x2578 <action_tapping_process+0x12c>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	66 e0       	ldi	r22, 0x06	; 6
    2532:	70 e0       	ldi	r23, 0x00	; 0
    2534:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__mulhi3>
    2538:	8a 57       	subi	r24, 0x7A	; 122
    253a:	9e 4f       	sbci	r25, 0xFE	; 254
    253c:	0e 94 29 10 	call	0x2052	; 0x2052 <process_tapping>
    2540:	88 23       	and	r24, r24
    2542:	71 f1       	breq	.+92     	; 0x25a0 <action_tapping_process+0x154>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    2544:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <waiting_buffer_tail>
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	66 e0       	ldi	r22, 0x06	; 6
    254c:	70 e0       	ldi	r23, 0x00	; 0
    254e:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__mulhi3>
    2552:	fc 01       	movw	r30, r24
    2554:	ea 57       	subi	r30, 0x7A	; 122
    2556:	fe 4f       	sbci	r31, 0xFE	; 254
    2558:	40 81       	ld	r20, Z
    255a:	51 81       	ldd	r21, Z+1	; 0x01
    255c:	62 81       	ldd	r22, Z+2	; 0x02
    255e:	73 81       	ldd	r23, Z+3	; 0x03
    2560:	84 81       	ldd	r24, Z+4	; 0x04
    2562:	95 81       	ldd	r25, Z+5	; 0x05
    2564:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    2568:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <waiting_buffer_tail>
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	01 96       	adiw	r24, 0x01	; 1
    2570:	87 70       	andi	r24, 0x07	; 7
    2572:	99 27       	eor	r25, r25
    2574:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <waiting_buffer_tail>
    2578:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <waiting_buffer_tail>
    257c:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <waiting_buffer_head>
    2580:	89 13       	cpse	r24, r25
    2582:	d5 cf       	rjmp	.-86     	; 0x252e <action_tapping_process+0xe2>
    2584:	0d c0       	rjmp	.+26     	; 0x25a0 <action_tapping_process+0x154>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    2586:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    258a:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <waiting_buffer_head>
    waiting_buffer_tail = 0;
    258e:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <waiting_buffer_tail>
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    2592:	e6 eb       	ldi	r30, 0xB6	; 182
    2594:	f1 e0       	ldi	r31, 0x01	; 1
    2596:	86 e0       	ldi	r24, 0x06	; 6
    2598:	df 01       	movw	r26, r30
    259a:	1d 92       	st	X+, r1
    259c:	8a 95       	dec	r24
    259e:	e9 f7       	brne	.-6      	; 0x259a <action_tapping_process+0x14e>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    25a0:	2c 96       	adiw	r28, 0x0c	; 12
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	de bf       	out	0x3e, r29	; 62
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	cd bf       	out	0x3d, r28	; 61
    25ac:	df 91       	pop	r29
    25ae:	cf 91       	pop	r28
    25b0:	08 95       	ret

000025b2 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    25b2:	df 92       	push	r13
    25b4:	ef 92       	push	r14
    25b6:	ff 92       	push	r15
    25b8:	0f 93       	push	r16
    25ba:	1f 93       	push	r17
    25bc:	cf 93       	push	r28
    25be:	df 93       	push	r29
    25c0:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    25c2:	89 2b       	or	r24, r25
    25c4:	09 f4       	brne	.+2      	; 0x25c8 <action_macro_play+0x16>
    25c6:	88 c0       	rjmp	.+272    	; 0x26d8 <action_macro_play+0x126>
    25c8:	e1 2c       	mov	r14, r1
    25ca:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    25cc:	dd 24       	eor	r13, r13
    25ce:	d3 94       	inc	r13

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    25d0:	ef 01       	movw	r28, r30
    25d2:	21 96       	adiw	r28, 0x01	; 1
    25d4:	84 91       	lpm	r24, Z
    25d6:	85 37       	cpi	r24, 0x75	; 117
    25d8:	09 f4       	brne	.+2      	; 0x25dc <action_macro_play+0x2a>
    25da:	60 c0       	rjmp	.+192    	; 0x269c <action_macro_play+0xea>
    25dc:	58 f4       	brcc	.+22     	; 0x25f4 <action_macro_play+0x42>
    25de:	84 37       	cpi	r24, 0x74	; 116
    25e0:	08 f0       	brcs	.+2      	; 0x25e4 <action_macro_play+0x32>
    25e2:	4e c0       	rjmp	.+156    	; 0x2680 <action_macro_play+0xce>
    25e4:	84 30       	cpi	r24, 0x04	; 4
    25e6:	08 f0       	brcs	.+2      	; 0x25ea <action_macro_play+0x38>
    25e8:	68 c0       	rjmp	.+208    	; 0x26ba <action_macro_play+0x108>
    25ea:	81 30       	cpi	r24, 0x01	; 1
    25ec:	d1 f0       	breq	.+52     	; 0x2622 <action_macro_play+0x70>
    25ee:	82 30       	cpi	r24, 0x02	; 2
    25f0:	71 f1       	breq	.+92     	; 0x264e <action_macro_play+0x9c>
    25f2:	72 c0       	rjmp	.+228    	; 0x26d8 <action_macro_play+0x126>
    25f4:	88 37       	cpi	r24, 0x78	; 120
    25f6:	09 f4       	brne	.+2      	; 0x25fa <action_macro_play+0x48>
    25f8:	5b c0       	rjmp	.+182    	; 0x26b0 <action_macro_play+0xfe>
    25fa:	50 f4       	brcc	.+20     	; 0x2610 <action_macro_play+0x5e>
    25fc:	86 37       	cpi	r24, 0x76	; 118
    25fe:	09 f4       	brne	.+2      	; 0x2602 <action_macro_play+0x50>
    2600:	53 c0       	rjmp	.+166    	; 0x26a8 <action_macro_play+0xf6>
    2602:	87 37       	cpi	r24, 0x77	; 119
    2604:	09 f0       	breq	.+2      	; 0x2608 <action_macro_play+0x56>
    2606:	68 c0       	rjmp	.+208    	; 0x26d8 <action_macro_play+0x126>
                break;
            case MOD_STORE:
                mod_storage = get_mods();
                break;
            case MOD_RESTORE:
                set_mods(mod_storage);
    2608:	8e 2d       	mov	r24, r14
    260a:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <set_mods>
    260e:	52 c0       	rjmp	.+164    	; 0x26b4 <action_macro_play+0x102>

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    2610:	9c e7       	ldi	r25, 0x7C	; 124
    2612:	98 0f       	add	r25, r24
    2614:	90 37       	cpi	r25, 0x70	; 112
    2616:	08 f0       	brcs	.+2      	; 0x261a <action_macro_play+0x68>
    2618:	5f c0       	rjmp	.+190    	; 0x26d8 <action_macro_play+0x126>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    261a:	8f 77       	andi	r24, 0x7F	; 127
    261c:	0e 94 9d 0b 	call	0x173a	; 0x173a <unregister_code>
                break;
    2620:	4e c0       	rjmp	.+156    	; 0x26be <action_macro_play+0x10c>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    2622:	8f 01       	movw	r16, r30
    2624:	0e 5f       	subi	r16, 0xFE	; 254
    2626:	1f 4f       	sbci	r17, 0xFF	; 255
    2628:	fe 01       	movw	r30, r28
    262a:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    262c:	90 e2       	ldi	r25, 0x20	; 32
    262e:	98 0f       	add	r25, r24
    2630:	98 30       	cpi	r25, 0x08	; 8
    2632:	50 f4       	brcc	.+20     	; 0x2648 <action_macro_play+0x96>
                    add_weak_mods(MOD_BIT(macro));
    2634:	87 70       	andi	r24, 0x07	; 7
    2636:	fd 2d       	mov	r31, r13
    2638:	01 c0       	rjmp	.+2      	; 0x263c <action_macro_play+0x8a>
    263a:	ff 0f       	add	r31, r31
    263c:	8a 95       	dec	r24
    263e:	ea f7       	brpl	.-6      	; 0x263a <action_macro_play+0x88>
    2640:	8f 2f       	mov	r24, r31
    2642:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <add_weak_mods>
    2646:	15 c0       	rjmp	.+42     	; 0x2672 <action_macro_play+0xc0>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    2648:	0e 94 af 0a 	call	0x155e	; 0x155e <register_code>
    264c:	14 c0       	rjmp	.+40     	; 0x2676 <action_macro_play+0xc4>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    264e:	8f 01       	movw	r16, r30
    2650:	0e 5f       	subi	r16, 0xFE	; 254
    2652:	1f 4f       	sbci	r17, 0xFF	; 255
    2654:	fe 01       	movw	r30, r28
    2656:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    2658:	90 e2       	ldi	r25, 0x20	; 32
    265a:	98 0f       	add	r25, r24
    265c:	98 30       	cpi	r25, 0x08	; 8
    265e:	68 f4       	brcc	.+26     	; 0x267a <action_macro_play+0xc8>
                    del_weak_mods(MOD_BIT(macro));
    2660:	87 70       	andi	r24, 0x07	; 7
    2662:	fd 2d       	mov	r31, r13
    2664:	01 c0       	rjmp	.+2      	; 0x2668 <action_macro_play+0xb6>
    2666:	ff 0f       	add	r31, r31
    2668:	8a 95       	dec	r24
    266a:	ea f7       	brpl	.-6      	; 0x2666 <action_macro_play+0xb4>
    266c:	8f 2f       	mov	r24, r31
    266e:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <del_weak_mods>
                    send_keyboard_report();
    2672:	0e 94 d7 15 	call	0x2bae	; 0x2bae <send_keyboard_report>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    2676:	e8 01       	movw	r28, r16
    2678:	22 c0       	rjmp	.+68     	; 0x26be <action_macro_play+0x10c>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                    send_keyboard_report();
                } else {
                    unregister_code(macro);
    267a:	0e 94 9d 0b 	call	0x173a	; 0x173a <unregister_code>
    267e:	fb cf       	rjmp	.-10     	; 0x2676 <action_macro_play+0xc4>
                }
                break;
            case WAIT:
                MACRO_READ();
    2680:	cf 01       	movw	r24, r30
    2682:	02 96       	adiw	r24, 0x02	; 2
    2684:	fe 01       	movw	r30, r28
    2686:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    2688:	cc 23       	and	r28, r28
    268a:	61 f0       	breq	.+24     	; 0x26a4 <action_macro_play+0xf2>
    268c:	ef e9       	ldi	r30, 0x9F	; 159
    268e:	ff e0       	ldi	r31, 0x0F	; 15
    2690:	31 97       	sbiw	r30, 0x01	; 1
    2692:	f1 f7       	brne	.-4      	; 0x2690 <action_macro_play+0xde>
    2694:	00 c0       	rjmp	.+0      	; 0x2696 <action_macro_play+0xe4>
    2696:	00 00       	nop
    2698:	c1 50       	subi	r28, 0x01	; 1
    269a:	f6 cf       	rjmp	.-20     	; 0x2688 <action_macro_play+0xd6>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    269c:	cf 01       	movw	r24, r30
    269e:	02 96       	adiw	r24, 0x02	; 2
    26a0:	fe 01       	movw	r30, r28
    26a2:	f4 90       	lpm	r15, Z
    26a4:	ec 01       	movw	r28, r24
                dprintf("INTERVAL(%u)\n", interval);
                break;
    26a6:	0b c0       	rjmp	.+22     	; 0x26be <action_macro_play+0x10c>
            case MOD_STORE:
                mod_storage = get_mods();
    26a8:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <get_mods>
    26ac:	e8 2e       	mov	r14, r24
                break;
    26ae:	07 c0       	rjmp	.+14     	; 0x26be <action_macro_play+0x10c>
            case MOD_RESTORE:
                set_mods(mod_storage);
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    26b0:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <clear_mods>
                send_keyboard_report();
    26b4:	0e 94 d7 15 	call	0x2bae	; 0x2bae <send_keyboard_report>
                break;
    26b8:	02 c0       	rjmp	.+4      	; 0x26be <action_macro_play+0x10c>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    26ba:	0e 94 af 0a 	call	0x155e	; 0x155e <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    26be:	8f 2d       	mov	r24, r15
    26c0:	88 23       	and	r24, r24
    26c2:	41 f0       	breq	.+16     	; 0x26d4 <action_macro_play+0x122>
    26c4:	ef e9       	ldi	r30, 0x9F	; 159
    26c6:	ff e0       	ldi	r31, 0x0F	; 15
    26c8:	31 97       	sbiw	r30, 0x01	; 1
    26ca:	f1 f7       	brne	.-4      	; 0x26c8 <action_macro_play+0x116>
    26cc:	00 c0       	rjmp	.+0      	; 0x26ce <action_macro_play+0x11c>
    26ce:	00 00       	nop
    26d0:	81 50       	subi	r24, 0x01	; 1
    26d2:	f6 cf       	rjmp	.-20     	; 0x26c0 <action_macro_play+0x10e>
    26d4:	fe 01       	movw	r30, r28
    26d6:	7c cf       	rjmp	.-264    	; 0x25d0 <action_macro_play+0x1e>
    }
}
    26d8:	df 91       	pop	r29
    26da:	cf 91       	pop	r28
    26dc:	1f 91       	pop	r17
    26de:	0f 91       	pop	r16
    26e0:	ff 90       	pop	r15
    26e2:	ef 90       	pop	r14
    26e4:	df 90       	pop	r13
    26e6:	08 95       	ret

000026e8 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    26e8:	60 93 20 02 	sts	0x0220, r22	; 0x800220 <layer_state>
    26ec:	70 93 21 02 	sts	0x0221, r23	; 0x800221 <layer_state+0x1>
    26f0:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <layer_state+0x2>
    26f4:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <layer_state+0x3>
    hook_layer_change(layer_state);
    26f8:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <hook_layer_change>

000026fc <default_layer_debug>:
    26fc:	08 95       	ret

000026fe <default_layer_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    26fe:	60 93 24 02 	sts	0x0224, r22	; 0x800224 <default_layer_state>
    2702:	70 93 25 02 	sts	0x0225, r23	; 0x800225 <default_layer_state+0x1>
    2706:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <default_layer_state+0x2>
    270a:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    270e:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <hook_default_layer_change>

00002712 <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    2712:	0f 93       	push	r16
    2714:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    2716:	00 91 24 02 	lds	r16, 0x0224	; 0x800224 <default_layer_state>
    271a:	10 91 25 02 	lds	r17, 0x0225	; 0x800225 <default_layer_state+0x1>
    271e:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <default_layer_state+0x2>
    2722:	30 91 27 02 	lds	r19, 0x0227	; 0x800227 <default_layer_state+0x3>
    2726:	60 2b       	or	r22, r16
    2728:	71 2b       	or	r23, r17
    272a:	82 2b       	or	r24, r18
    272c:	93 2b       	or	r25, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    272e:	60 93 24 02 	sts	0x0224, r22	; 0x800224 <default_layer_state>
    2732:	70 93 25 02 	sts	0x0225, r23	; 0x800225 <default_layer_state+0x1>
    2736:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <default_layer_state+0x2>
    273a:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <default_layer_state+0x3>

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
    273e:	1f 91       	pop	r17
    2740:	0f 91       	pop	r16
static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    hook_default_layer_change(default_layer_state);
    2742:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <hook_default_layer_change>

00002746 <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    2746:	0f 93       	push	r16
    2748:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    274a:	00 91 24 02 	lds	r16, 0x0224	; 0x800224 <default_layer_state>
    274e:	10 91 25 02 	lds	r17, 0x0225	; 0x800225 <default_layer_state+0x1>
    2752:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <default_layer_state+0x2>
    2756:	30 91 27 02 	lds	r19, 0x0227	; 0x800227 <default_layer_state+0x3>
    275a:	60 23       	and	r22, r16
    275c:	71 23       	and	r23, r17
    275e:	82 23       	and	r24, r18
    2760:	93 23       	and	r25, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    2762:	60 93 24 02 	sts	0x0224, r22	; 0x800224 <default_layer_state>
    2766:	70 93 25 02 	sts	0x0225, r23	; 0x800225 <default_layer_state+0x1>
    276a:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <default_layer_state+0x2>
    276e:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <default_layer_state+0x3>
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
    2772:	1f 91       	pop	r17
    2774:	0f 91       	pop	r16
static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    hook_default_layer_change(default_layer_state);
    2776:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <hook_default_layer_change>

0000277a <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    277a:	0f 93       	push	r16
    277c:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    277e:	00 91 24 02 	lds	r16, 0x0224	; 0x800224 <default_layer_state>
    2782:	10 91 25 02 	lds	r17, 0x0225	; 0x800225 <default_layer_state+0x1>
    2786:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <default_layer_state+0x2>
    278a:	30 91 27 02 	lds	r19, 0x0227	; 0x800227 <default_layer_state+0x3>
    278e:	60 27       	eor	r22, r16
    2790:	71 27       	eor	r23, r17
    2792:	82 27       	eor	r24, r18
    2794:	93 27       	eor	r25, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    2796:	60 93 24 02 	sts	0x0224, r22	; 0x800224 <default_layer_state>
    279a:	70 93 25 02 	sts	0x0225, r23	; 0x800225 <default_layer_state+0x1>
    279e:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <default_layer_state+0x2>
    27a2:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <default_layer_state+0x3>
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
}
    27a6:	1f 91       	pop	r17
    27a8:	0f 91       	pop	r16
static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    hook_default_layer_change(default_layer_state);
    27aa:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <hook_default_layer_change>

000027ae <layer_clear>:
#endif
}

void layer_clear(void)
{
    layer_state_set(0);
    27ae:	60 e0       	ldi	r22, 0x00	; 0
    27b0:	70 e0       	ldi	r23, 0x00	; 0
    27b2:	cb 01       	movw	r24, r22
    27b4:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <layer_state_set>

000027b8 <layer_move>:
}

void layer_move(uint8_t layer)
{
    27b8:	0f 93       	push	r16
    27ba:	1f 93       	push	r17
    layer_state_set(1UL<<layer);
    27bc:	41 e0       	ldi	r20, 0x01	; 1
    27be:	50 e0       	ldi	r21, 0x00	; 0
    27c0:	60 e0       	ldi	r22, 0x00	; 0
    27c2:	70 e0       	ldi	r23, 0x00	; 0
    27c4:	8a 01       	movw	r16, r20
    27c6:	9b 01       	movw	r18, r22
    27c8:	04 c0       	rjmp	.+8      	; 0x27d2 <layer_move+0x1a>
    27ca:	00 0f       	add	r16, r16
    27cc:	11 1f       	adc	r17, r17
    27ce:	22 1f       	adc	r18, r18
    27d0:	33 1f       	adc	r19, r19
    27d2:	8a 95       	dec	r24
    27d4:	d2 f7       	brpl	.-12     	; 0x27ca <layer_move+0x12>
    27d6:	c9 01       	movw	r24, r18
    27d8:	b8 01       	movw	r22, r16
}
    27da:	1f 91       	pop	r17
    27dc:	0f 91       	pop	r16
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    27de:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <layer_state_set>

000027e2 <layer_on>:
}

void layer_on(uint8_t layer)
{
    27e2:	0f 93       	push	r16
    27e4:	1f 93       	push	r17
    layer_state_set(layer_state | (1UL<<layer));
    27e6:	41 e0       	ldi	r20, 0x01	; 1
    27e8:	50 e0       	ldi	r21, 0x00	; 0
    27ea:	60 e0       	ldi	r22, 0x00	; 0
    27ec:	70 e0       	ldi	r23, 0x00	; 0
    27ee:	04 c0       	rjmp	.+8      	; 0x27f8 <layer_on+0x16>
    27f0:	44 0f       	add	r20, r20
    27f2:	55 1f       	adc	r21, r21
    27f4:	66 1f       	adc	r22, r22
    27f6:	77 1f       	adc	r23, r23
    27f8:	8a 95       	dec	r24
    27fa:	d2 f7       	brpl	.-12     	; 0x27f0 <layer_on+0xe>
    27fc:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <layer_state>
    2800:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <layer_state+0x1>
    2804:	a0 91 22 02 	lds	r26, 0x0222	; 0x800222 <layer_state+0x2>
    2808:	b0 91 23 02 	lds	r27, 0x0223	; 0x800223 <layer_state+0x3>
    280c:	8a 01       	movw	r16, r20
    280e:	9b 01       	movw	r18, r22
    2810:	08 2b       	or	r16, r24
    2812:	19 2b       	or	r17, r25
    2814:	2a 2b       	or	r18, r26
    2816:	3b 2b       	or	r19, r27
    2818:	c9 01       	movw	r24, r18
    281a:	b8 01       	movw	r22, r16
}
    281c:	1f 91       	pop	r17
    281e:	0f 91       	pop	r16
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    2820:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <layer_state_set>

00002824 <layer_off>:
}

void layer_off(uint8_t layer)
{
    2824:	0f 93       	push	r16
    2826:	1f 93       	push	r17
    layer_state_set(layer_state & ~(1UL<<layer));
    2828:	41 e0       	ldi	r20, 0x01	; 1
    282a:	50 e0       	ldi	r21, 0x00	; 0
    282c:	60 e0       	ldi	r22, 0x00	; 0
    282e:	70 e0       	ldi	r23, 0x00	; 0
    2830:	04 c0       	rjmp	.+8      	; 0x283a <layer_off+0x16>
    2832:	44 0f       	add	r20, r20
    2834:	55 1f       	adc	r21, r21
    2836:	66 1f       	adc	r22, r22
    2838:	77 1f       	adc	r23, r23
    283a:	8a 95       	dec	r24
    283c:	d2 f7       	brpl	.-12     	; 0x2832 <layer_off+0xe>
    283e:	40 95       	com	r20
    2840:	50 95       	com	r21
    2842:	60 95       	com	r22
    2844:	70 95       	com	r23
    2846:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <layer_state>
    284a:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <layer_state+0x1>
    284e:	a0 91 22 02 	lds	r26, 0x0222	; 0x800222 <layer_state+0x2>
    2852:	b0 91 23 02 	lds	r27, 0x0223	; 0x800223 <layer_state+0x3>
    2856:	8a 01       	movw	r16, r20
    2858:	9b 01       	movw	r18, r22
    285a:	08 23       	and	r16, r24
    285c:	19 23       	and	r17, r25
    285e:	2a 23       	and	r18, r26
    2860:	3b 23       	and	r19, r27
    2862:	c9 01       	movw	r24, r18
    2864:	b8 01       	movw	r22, r16
}
    2866:	1f 91       	pop	r17
    2868:	0f 91       	pop	r16
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    286a:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <layer_state_set>

0000286e <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    286e:	0f 93       	push	r16
    2870:	1f 93       	push	r17
    layer_state_set(layer_state ^ (1UL<<layer));
    2872:	41 e0       	ldi	r20, 0x01	; 1
    2874:	50 e0       	ldi	r21, 0x00	; 0
    2876:	60 e0       	ldi	r22, 0x00	; 0
    2878:	70 e0       	ldi	r23, 0x00	; 0
    287a:	04 c0       	rjmp	.+8      	; 0x2884 <layer_invert+0x16>
    287c:	44 0f       	add	r20, r20
    287e:	55 1f       	adc	r21, r21
    2880:	66 1f       	adc	r22, r22
    2882:	77 1f       	adc	r23, r23
    2884:	8a 95       	dec	r24
    2886:	d2 f7       	brpl	.-12     	; 0x287c <layer_invert+0xe>
    2888:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <layer_state>
    288c:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <layer_state+0x1>
    2890:	a0 91 22 02 	lds	r26, 0x0222	; 0x800222 <layer_state+0x2>
    2894:	b0 91 23 02 	lds	r27, 0x0223	; 0x800223 <layer_state+0x3>
    2898:	8a 01       	movw	r16, r20
    289a:	9b 01       	movw	r18, r22
    289c:	08 27       	eor	r16, r24
    289e:	19 27       	eor	r17, r25
    28a0:	2a 27       	eor	r18, r26
    28a2:	3b 27       	eor	r19, r27
    28a4:	c9 01       	movw	r24, r18
    28a6:	b8 01       	movw	r22, r16
}
    28a8:	1f 91       	pop	r17
    28aa:	0f 91       	pop	r16
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    28ac:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <layer_state_set>

000028b0 <layer_or>:
}

void layer_or(uint32_t state)
{
    28b0:	0f 93       	push	r16
    28b2:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    28b4:	00 91 20 02 	lds	r16, 0x0220	; 0x800220 <layer_state>
    28b8:	10 91 21 02 	lds	r17, 0x0221	; 0x800221 <layer_state+0x1>
    28bc:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <layer_state+0x2>
    28c0:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <layer_state+0x3>
    28c4:	60 2b       	or	r22, r16
    28c6:	71 2b       	or	r23, r17
    28c8:	82 2b       	or	r24, r18
    28ca:	93 2b       	or	r25, r19
}
    28cc:	1f 91       	pop	r17
    28ce:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    28d0:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <layer_state_set>

000028d4 <layer_and>:
}
void layer_and(uint32_t state)
{
    28d4:	0f 93       	push	r16
    28d6:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    28d8:	00 91 20 02 	lds	r16, 0x0220	; 0x800220 <layer_state>
    28dc:	10 91 21 02 	lds	r17, 0x0221	; 0x800221 <layer_state+0x1>
    28e0:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <layer_state+0x2>
    28e4:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <layer_state+0x3>
    28e8:	60 23       	and	r22, r16
    28ea:	71 23       	and	r23, r17
    28ec:	82 23       	and	r24, r18
    28ee:	93 23       	and	r25, r19
}
    28f0:	1f 91       	pop	r17
    28f2:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    28f4:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <layer_state_set>

000028f8 <layer_xor>:
}
void layer_xor(uint32_t state)
{
    28f8:	0f 93       	push	r16
    28fa:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    28fc:	00 91 20 02 	lds	r16, 0x0220	; 0x800220 <layer_state>
    2900:	10 91 21 02 	lds	r17, 0x0221	; 0x800221 <layer_state+0x1>
    2904:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <layer_state+0x2>
    2908:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <layer_state+0x3>
    290c:	60 27       	eor	r22, r16
    290e:	71 27       	eor	r23, r17
    2910:	82 27       	eor	r24, r18
    2912:	93 27       	eor	r25, r19
}
    2914:	1f 91       	pop	r17
    2916:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    2918:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <layer_state_set>

0000291c <layer_debug>:
}

void layer_debug(void)
{
    291c:	08 95       	ret

0000291e <layer_switch_get_action>:
#ifndef NO_TRACK_KEY_PRESS
/* record layer on where key is pressed */
static uint8_t layer_pressed[MATRIX_ROWS][MATRIX_COLS] = {};
#endif
action_t layer_switch_get_action(keyevent_t event)
{
    291e:	8f 92       	push	r8
    2920:	9f 92       	push	r9
    2922:	af 92       	push	r10
    2924:	bf 92       	push	r11
    2926:	df 92       	push	r13
    2928:	ef 92       	push	r14
    292a:	ff 92       	push	r15
    292c:	0f 93       	push	r16
    292e:	1f 93       	push	r17
    2930:	cf 93       	push	r28
    2932:	df 93       	push	r29
    2934:	00 d0       	rcall	.+0      	; 0x2936 <layer_switch_get_action+0x18>
    2936:	00 d0       	rcall	.+0      	; 0x2938 <layer_switch_get_action+0x1a>
    2938:	1f 92       	push	r1
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
    293e:	6b 83       	std	Y+3, r22	; 0x03
    2940:	7c 83       	std	Y+4, r23	; 0x04
    2942:	8d 83       	std	Y+5, r24	; 0x05
    2944:	8a 01       	movw	r16, r20
    2946:	8c 81       	ldd	r24, Y+4	; 0x04
    2948:	9d 81       	ldd	r25, Y+5	; 0x05
    294a:	89 2b       	or	r24, r25
    294c:	31 f0       	breq	.+12     	; 0x295a <layer_switch_get_action+0x3c>
    294e:	1f 3f       	cpi	r17, 0xFF	; 255
    2950:	31 f4       	brne	.+12     	; 0x295e <layer_switch_get_action+0x40>
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	4f 3f       	cpi	r20, 0xFF	; 255
    2956:	19 f4       	brne	.+6      	; 0x295e <layer_switch_get_action+0x40>
    2958:	03 c0       	rjmp	.+6      	; 0x2960 <layer_switch_get_action+0x42>
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	01 c0       	rjmp	.+2      	; 0x2960 <layer_switch_get_action+0x42>
    295e:	80 e0       	ldi	r24, 0x00	; 0
    if (IS_NOEVENT(event)) return (action_t)ACTION_NO;
    2960:	80 ff       	sbrs	r24, 0
    2962:	03 c0       	rjmp	.+6      	; 0x296a <layer_switch_get_action+0x4c>
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	54 c0       	rjmp	.+168    	; 0x2a12 <layer_switch_get_action+0xf4>

    uint8_t layer = 0;
#ifndef NO_TRACK_KEY_PRESS
    if (event.pressed) {
    296a:	8b 81       	ldd	r24, Y+3	; 0x03
    296c:	88 23       	and	r24, r24
    296e:	09 f4       	brne	.+2      	; 0x2972 <layer_switch_get_action+0x54>
    2970:	3d c0       	rjmp	.+122    	; 0x29ec <layer_switch_get_action+0xce>
/* return layer effective for key at this time */
static uint8_t current_layer_for_key(keypos_t key)
{
#ifndef NO_ACTION_LAYER
    action_t action = ACTION_TRANSPARENT;
    uint32_t layers = layer_state | default_layer_state;
    2972:	80 90 20 02 	lds	r8, 0x0220	; 0x800220 <layer_state>
    2976:	90 90 21 02 	lds	r9, 0x0221	; 0x800221 <layer_state+0x1>
    297a:	a0 90 22 02 	lds	r10, 0x0222	; 0x800222 <layer_state+0x2>
    297e:	b0 90 23 02 	lds	r11, 0x0223	; 0x800223 <layer_state+0x3>
    2982:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <default_layer_state>
    2986:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <default_layer_state+0x1>
    298a:	a0 91 26 02 	lds	r26, 0x0226	; 0x800226 <default_layer_state+0x2>
    298e:	b0 91 27 02 	lds	r27, 0x0227	; 0x800227 <default_layer_state+0x3>
    2992:	88 2a       	or	r8, r24
    2994:	99 2a       	or	r9, r25
    2996:	aa 2a       	or	r10, r26
    2998:	bb 2a       	or	r11, r27
    299a:	8f e1       	ldi	r24, 0x1F	; 31
    299c:	e8 2e       	mov	r14, r24
    299e:	f1 2c       	mov	r15, r1
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    29a0:	d5 01       	movw	r26, r10
    29a2:	c4 01       	movw	r24, r8
    29a4:	0e 2c       	mov	r0, r14
    29a6:	04 c0       	rjmp	.+8      	; 0x29b0 <layer_switch_get_action+0x92>
    29a8:	b6 95       	lsr	r27
    29aa:	a7 95       	ror	r26
    29ac:	97 95       	ror	r25
    29ae:	87 95       	ror	r24
    29b0:	0a 94       	dec	r0
    29b2:	d2 f7       	brpl	.-12     	; 0x29a8 <layer_switch_get_action+0x8a>
    29b4:	80 fd       	sbrc	r24, 0
    29b6:	06 c0       	rjmp	.+12     	; 0x29c4 <layer_switch_get_action+0xa6>
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	e8 1a       	sub	r14, r24
    29bc:	f1 08       	sbc	r15, r1
    29be:	80 f7       	brcc	.-32     	; 0x29a0 <layer_switch_get_action+0x82>
                return i;
            }
        }
    }
    /* fall back to layer 0 */
    return 0;
    29c0:	d1 2c       	mov	r13, r1
    29c2:	07 c0       	rjmp	.+14     	; 0x29d2 <layer_switch_get_action+0xb4>
    action_t action = ACTION_TRANSPARENT;
    uint32_t layers = layer_state | default_layer_state;
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
            action = action_for_key(i, key);
    29c4:	de 2c       	mov	r13, r14
    29c6:	b8 01       	movw	r22, r16
    29c8:	8e 2d       	mov	r24, r14
    29ca:	0e 94 92 17 	call	0x2f24	; 0x2f24 <action_for_key>
            if (action.code != (action_t)ACTION_TRANSPARENT.code) {
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	99 f3       	breq	.-26     	; 0x29b8 <layer_switch_get_action+0x9a>

    uint8_t layer = 0;
#ifndef NO_TRACK_KEY_PRESS
    if (event.pressed) {
        layer = current_layer_for_key(event.key);
        layer_pressed[event.key.row][event.key.col] = layer;
    29d2:	81 2f       	mov	r24, r17
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	6a e0       	ldi	r22, 0x0A	; 10
    29d8:	70 e0       	ldi	r23, 0x00	; 0
    29da:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__mulhi3>
    29de:	84 54       	subi	r24, 0x44	; 68
    29e0:	9e 4f       	sbci	r25, 0xFE	; 254
    29e2:	fc 01       	movw	r30, r24
    29e4:	e0 0f       	add	r30, r16
    29e6:	f1 1d       	adc	r31, r1
    29e8:	d0 82       	st	Z, r13
    29ea:	0c c0       	rjmp	.+24     	; 0x2a04 <layer_switch_get_action+0xe6>
    } else {
        layer = layer_pressed[event.key.row][event.key.col];
    29ec:	81 2f       	mov	r24, r17
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	6a e0       	ldi	r22, 0x0A	; 10
    29f2:	70 e0       	ldi	r23, 0x00	; 0
    29f4:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__mulhi3>
    29f8:	84 54       	subi	r24, 0x44	; 68
    29fa:	9e 4f       	sbci	r25, 0xFE	; 254
    29fc:	fc 01       	movw	r30, r24
    29fe:	e0 0f       	add	r30, r16
    2a00:	f1 1d       	adc	r31, r1
    2a02:	d0 80       	ld	r13, Z
    }
#else
    layer = current_layer_for_key(event.key);
#endif
    return action_for_key(layer, event.key);
    2a04:	09 83       	std	Y+1, r16	; 0x01
    2a06:	1a 83       	std	Y+2, r17	; 0x02
    2a08:	69 81       	ldd	r22, Y+1	; 0x01
    2a0a:	7a 81       	ldd	r23, Y+2	; 0x02
    2a0c:	8d 2d       	mov	r24, r13
    2a0e:	0e 94 92 17 	call	0x2f24	; 0x2f24 <action_for_key>
}
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	0f 90       	pop	r0
    2a18:	0f 90       	pop	r0
    2a1a:	0f 90       	pop	r0
    2a1c:	df 91       	pop	r29
    2a1e:	cf 91       	pop	r28
    2a20:	1f 91       	pop	r17
    2a22:	0f 91       	pop	r16
    2a24:	ff 90       	pop	r15
    2a26:	ef 90       	pop	r14
    2a28:	df 90       	pop	r13
    2a2a:	bf 90       	pop	r11
    2a2c:	af 90       	pop	r10
    2a2e:	9f 90       	pop	r9
    2a30:	8f 90       	pop	r8
    2a32:	08 95       	ret

00002a34 <add_key>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
    2a34:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <keyboard_protocol>
    2a38:	99 23       	and	r25, r25
    2a3a:	f1 f0       	breq	.+60     	; 0x2a78 <add_key+0x44>
    2a3c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <keyboard_nkro>
    2a40:	99 23       	and	r25, r25
    2a42:	d1 f0       	breq	.+52     	; 0x2a78 <add_key+0x44>
    2a44:	98 2f       	mov	r25, r24
    2a46:	96 95       	lsr	r25
    2a48:	96 95       	lsr	r25
    2a4a:	96 95       	lsr	r25
    2a4c:	9f 31       	cpi	r25, 0x1F	; 31
    2a4e:	81 f1       	breq	.+96     	; 0x2ab0 <add_key+0x7c>
    2a50:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    2a54:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    2a58:	e9 0f       	add	r30, r25
    2a5a:	f1 1d       	adc	r31, r1
    2a5c:	87 70       	andi	r24, 0x07	; 7
    2a5e:	21 e0       	ldi	r18, 0x01	; 1
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	a9 01       	movw	r20, r18
    2a64:	02 c0       	rjmp	.+4      	; 0x2a6a <add_key+0x36>
    2a66:	44 0f       	add	r20, r20
    2a68:	55 1f       	adc	r21, r21
    2a6a:	8a 95       	dec	r24
    2a6c:	e2 f7       	brpl	.-8      	; 0x2a66 <add_key+0x32>
    2a6e:	ca 01       	movw	r24, r20
    2a70:	91 81       	ldd	r25, Z+1	; 0x01
    2a72:	89 2b       	or	r24, r25
    2a74:	81 83       	std	Z+1, r24	; 0x01
    2a76:	08 95       	ret
    2a78:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <keyboard_report>
    2a7c:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <keyboard_report+0x1>
    2a80:	f9 01       	movw	r30, r18
    2a82:	32 96       	adiw	r30, 0x02	; 2
    2a84:	9f ef       	ldi	r25, 0xFF	; 255
    2a86:	40 e0       	ldi	r20, 0x00	; 0
    2a88:	51 91       	ld	r21, Z+
    2a8a:	85 17       	cp	r24, r21
    2a8c:	89 f0       	breq	.+34     	; 0x2ab0 <add_key+0x7c>
    2a8e:	9f 3f       	cpi	r25, 0xFF	; 255
    2a90:	19 f4       	brne	.+6      	; 0x2a98 <add_key+0x64>
    2a92:	51 11       	cpse	r21, r1
    2a94:	01 c0       	rjmp	.+2      	; 0x2a98 <add_key+0x64>
    2a96:	94 2f       	mov	r25, r20
    2a98:	4f 5f       	subi	r20, 0xFF	; 255
    2a9a:	4e 31       	cpi	r20, 0x1E	; 30
    2a9c:	a9 f7       	brne	.-22     	; 0x2a88 <add_key+0x54>
    2a9e:	9f 3f       	cpi	r25, 0xFF	; 255
    2aa0:	39 f0       	breq	.+14     	; 0x2ab0 <add_key+0x7c>
    2aa2:	f9 01       	movw	r30, r18
    2aa4:	e9 0f       	add	r30, r25
    2aa6:	f1 1d       	adc	r31, r1
    2aa8:	97 fd       	sbrc	r25, 7
    2aaa:	fa 95       	dec	r31
    2aac:	82 83       	std	Z+2, r24	; 0x02
    2aae:	08 95       	ret
    2ab0:	08 95       	ret

00002ab2 <del_key>:
    2ab2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <keyboard_protocol>
    2ab6:	99 23       	and	r25, r25
    2ab8:	f9 f0       	breq	.+62     	; 0x2af8 <del_key+0x46>
    2aba:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <keyboard_nkro>
    2abe:	99 23       	and	r25, r25
    2ac0:	d9 f0       	breq	.+54     	; 0x2af8 <del_key+0x46>
    2ac2:	98 2f       	mov	r25, r24
    2ac4:	96 95       	lsr	r25
    2ac6:	96 95       	lsr	r25
    2ac8:	96 95       	lsr	r25
    2aca:	9f 31       	cpi	r25, 0x1F	; 31
    2acc:	21 f1       	breq	.+72     	; 0x2b16 <del_key+0x64>
    2ace:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    2ad2:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    2ad6:	e9 0f       	add	r30, r25
    2ad8:	f1 1d       	adc	r31, r1
    2ada:	87 70       	andi	r24, 0x07	; 7
    2adc:	21 e0       	ldi	r18, 0x01	; 1
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	a9 01       	movw	r20, r18
    2ae2:	02 c0       	rjmp	.+4      	; 0x2ae8 <del_key+0x36>
    2ae4:	44 0f       	add	r20, r20
    2ae6:	55 1f       	adc	r21, r21
    2ae8:	8a 95       	dec	r24
    2aea:	e2 f7       	brpl	.-8      	; 0x2ae4 <del_key+0x32>
    2aec:	ca 01       	movw	r24, r20
    2aee:	80 95       	com	r24
    2af0:	91 81       	ldd	r25, Z+1	; 0x01
    2af2:	89 23       	and	r24, r25
    2af4:	81 83       	std	Z+1, r24	; 0x01
    2af6:	08 95       	ret
    2af8:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    2afc:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    2b00:	9f 01       	movw	r18, r30
    2b02:	22 5e       	subi	r18, 0xE2	; 226
    2b04:	3f 4f       	sbci	r19, 0xFF	; 255
    2b06:	92 81       	ldd	r25, Z+2	; 0x02
    2b08:	89 13       	cpse	r24, r25
    2b0a:	01 c0       	rjmp	.+2      	; 0x2b0e <del_key+0x5c>
    2b0c:	12 82       	std	Z+2, r1	; 0x02
    2b0e:	31 96       	adiw	r30, 0x01	; 1
    2b10:	e2 17       	cp	r30, r18
    2b12:	f3 07       	cpc	r31, r19
    2b14:	c1 f7       	brne	.-16     	; 0x2b06 <del_key+0x54>
    2b16:	08 95       	ret

00002b18 <clear_keys>:
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    2b20:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    2b24:	e8 0f       	add	r30, r24
    2b26:	f9 1f       	adc	r31, r25
    2b28:	10 82       	st	Z, r1
    2b2a:	01 96       	adiw	r24, 0x01	; 1
    2b2c:	80 32       	cpi	r24, 0x20	; 32
    2b2e:	91 05       	cpc	r25, r1
    2b30:	a9 f7       	brne	.-22     	; 0x2b1c <clear_keys+0x4>
    2b32:	08 95       	ret

00002b34 <get_mods>:
    2b34:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <real_mods>
    2b38:	08 95       	ret

00002b3a <add_mods>:
    2b3a:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <real_mods>
    2b3e:	89 2b       	or	r24, r25
    2b40:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <real_mods>
    2b44:	08 95       	ret

00002b46 <del_mods>:
    2b46:	80 95       	com	r24
    2b48:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <real_mods>
    2b4c:	89 23       	and	r24, r25
    2b4e:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <real_mods>
    2b52:	08 95       	ret

00002b54 <set_mods>:
    2b54:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <real_mods>
    2b58:	08 95       	ret

00002b5a <clear_mods>:
    2b5a:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <real_mods>
    2b5e:	08 95       	ret

00002b60 <add_weak_mods>:
    2b60:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <weak_mods>
    2b64:	89 2b       	or	r24, r25
    2b66:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <weak_mods>
    2b6a:	08 95       	ret

00002b6c <del_weak_mods>:
    2b6c:	80 95       	com	r24
    2b6e:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <weak_mods>
    2b72:	89 23       	and	r24, r25
    2b74:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <weak_mods>
    2b78:	08 95       	ret

00002b7a <clear_weak_mods>:
void clear_weak_mods(void) { weak_mods = 0; }
    2b7a:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <weak_mods>
    2b7e:	08 95       	ret

00002b80 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    2b80:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <oneshot_mods>
    2b84:	08 95       	ret

00002b86 <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    2b86:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <oneshot_mods>
    2b8a:	08 95       	ret

00002b8c <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    2b8c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <keyboard_report>
    2b90:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <keyboard_report+0x1>
    2b94:	fc 01       	movw	r30, r24
    2b96:	31 96       	adiw	r30, 0x01	; 1
    2b98:	9c 01       	movw	r18, r24
    2b9a:	20 5e       	subi	r18, 0xE0	; 224
    2b9c:	3f 4f       	sbci	r19, 0xFF	; 255
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    2b9e:	80 e0       	ldi	r24, 0x00	; 0
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    2ba0:	91 91       	ld	r25, Z+
    2ba2:	91 11       	cpse	r25, r1
            cnt++;
    2ba4:	8f 5f       	subi	r24, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    2ba6:	e2 17       	cp	r30, r18
    2ba8:	f3 07       	cpc	r31, r19
    2baa:	d1 f7       	brne	.-12     	; 0x2ba0 <has_anykey+0x14>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    2bac:	08 95       	ret

00002bae <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    2bae:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    2bb2:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    2bb6:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <real_mods>
    2bba:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    2bbc:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    2bc0:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    2bc4:	90 81       	ld	r25, Z
    2bc6:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <weak_mods>
    2bca:	89 2b       	or	r24, r25
    2bcc:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    2bce:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <oneshot_mods>
    2bd2:	88 23       	and	r24, r24
    2bd4:	61 f0       	breq	.+24     	; 0x2bee <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    2bd6:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    2bda:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    2bde:	90 81       	ld	r25, Z
    2be0:	89 2b       	or	r24, r25
    2be2:	80 83       	st	Z, r24
        if (has_anykey()) {
    2be4:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <has_anykey>
    2be8:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    2bea:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <oneshot_mods>
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    2bee:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <keyboard_report>
    2bf2:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <keyboard_report+0x1>
    2bf6:	0c 94 81 09 	jmp	0x1302	; 0x1302 <host_keyboard_send>

00002bfa <hook_keyboard_loop>:
    2bfa:	08 95       	ret

00002bfc <hook_matrix_change>:

__attribute__((weak))
void hook_keyboard_loop(void) {}

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    2bfc:	cf 93       	push	r28
    2bfe:	df 93       	push	r29
    2c00:	00 d0       	rcall	.+0      	; 0x2c02 <hook_matrix_change+0x6>
    2c02:	00 d0       	rcall	.+0      	; 0x2c04 <hook_matrix_change+0x8>
    2c04:	1f 92       	push	r1
    2c06:	cd b7       	in	r28, 0x3d	; 61
    2c08:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    2c0a:	0f 90       	pop	r0
    2c0c:	0f 90       	pop	r0
    2c0e:	0f 90       	pop	r0
    2c10:	0f 90       	pop	r0
    2c12:	0f 90       	pop	r0
    2c14:	df 91       	pop	r29
    2c16:	cf 91       	pop	r28
    2c18:	08 95       	ret

00002c1a <hook_default_layer_change>:
    2c1a:	08 95       	ret

00002c1c <hook_layer_change>:
void hook_default_layer_change(uint32_t default_layer_state) {
    (void)default_layer_state;
}

__attribute__((weak))
void hook_layer_change(uint32_t layer_state) {
    2c1c:	08 95       	ret

00002c1e <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    2c1e:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <keyboard_set_leds>

00002c22 <hook_bootmagic>:
}

__attribute__((weak))
void hook_bootmagic(void) {}
    2c22:	08 95       	ret

00002c24 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    2c24:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <USB_DeviceState>
    2c28:	84 30       	cpi	r24, 0x04	; 4
    2c2a:	21 f1       	breq	.+72     	; 0x2c74 <suspend_power_down+0x50>
#endif
    wdt_timeout = wdto;
    2c2c:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <wdt_timeout>

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    2c30:	20 e4       	ldi	r18, 0x40	; 64
    2c32:	88 e1       	ldi	r24, 0x18	; 24
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	0f b6       	in	r0, 0x3f	; 63
    2c38:	f8 94       	cli
    2c3a:	a8 95       	wdr
    2c3c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    2c40:	0f be       	out	0x3f, r0	; 63
    2c42:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    2c46:	83 b7       	in	r24, 0x33	; 51
    2c48:	81 7f       	andi	r24, 0xF1	; 241
    2c4a:	84 60       	ori	r24, 0x04	; 4
    2c4c:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    2c4e:	83 b7       	in	r24, 0x33	; 51
    2c50:	81 60       	ori	r24, 0x01	; 1
    2c52:	83 bf       	out	0x33, r24	; 51
    sei();
    2c54:	78 94       	sei
    sleep_cpu();
    2c56:	88 95       	sleep
    sleep_disable();
    2c58:	83 b7       	in	r24, 0x33	; 51
    2c5a:	8e 7f       	andi	r24, 0xFE	; 254
    2c5c:	83 bf       	out	0x33, r24	; 51
    2c5e:	0f b6       	in	r0, 0x3f	; 63
    2c60:	f8 94       	cli
    2c62:	a8 95       	wdr
    2c64:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    2c68:	88 61       	ori	r24, 0x18	; 24
    2c6a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    2c6e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    2c72:	0f be       	out	0x3f, r0	; 63
    2c74:	08 95       	ret

00002c76 <suspend_wakeup_condition>:
    power_down(WDTO_15MS);
#endif
}

bool suspend_wakeup_condition(void)
{
    2c76:	cf 93       	push	r28
    matrix_power_up();
    2c78:	0e 94 67 0a 	call	0x14ce	; 0x14ce <matrix_power_up>
    matrix_scan();
    2c7c:	0e 94 00 02 	call	0x400	; 0x400 <matrix_scan>
    matrix_power_down();
    2c80:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2c84:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    2c86:	8c 2f       	mov	r24, r28
    2c88:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <matrix_get_row>
    2c8c:	89 2b       	or	r24, r25
    2c8e:	29 f4       	brne	.+10     	; 0x2c9a <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2c90:	cf 5f       	subi	r28, 0xFF	; 255
    2c92:	ca 30       	cpi	r28, 0x0A	; 10
    2c94:	c1 f7       	brne	.-16     	; 0x2c86 <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    2c96:	80 e0       	ldi	r24, 0x00	; 0
    2c98:	01 c0       	rjmp	.+2      	; 0x2c9c <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    2c9c:	cf 91       	pop	r28
    2c9e:	08 95       	ret

00002ca0 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    matrix_clear();
    2ca0:	0e 94 65 0a 	call	0x14ca	; 0x14ca <matrix_clear>
    clear_keyboard();
    2ca4:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <clear_keyboard>

00002ca8 <__vector_13>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    2ca8:	1f 92       	push	r1
    2caa:	0f 92       	push	r0
    2cac:	0f b6       	in	r0, 0x3f	; 63
    2cae:	0f 92       	push	r0
    2cb0:	11 24       	eor	r1, r1
    2cb2:	8f 93       	push	r24
    2cb4:	9f 93       	push	r25
    2cb6:	af 93       	push	r26
    2cb8:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    2cba:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <wdt_timeout>
    2cbe:	81 11       	cpse	r24, r1
    2cc0:	13 c0       	rjmp	.+38     	; 0x2ce8 <__vector_13+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    2cc2:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <timer_count>
    2cc6:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <timer_count+0x1>
    2cca:	a0 91 4f 02 	lds	r26, 0x024F	; 0x80024f <timer_count+0x2>
    2cce:	b0 91 50 02 	lds	r27, 0x0250	; 0x800250 <timer_count+0x3>
    2cd2:	41 96       	adiw	r24, 0x11	; 17
    2cd4:	a1 1d       	adc	r26, r1
    2cd6:	b1 1d       	adc	r27, r1
    2cd8:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <timer_count>
    2cdc:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <timer_count+0x1>
    2ce0:	a0 93 4f 02 	sts	0x024F, r26	; 0x80024f <timer_count+0x2>
    2ce4:	b0 93 50 02 	sts	0x0250, r27	; 0x800250 <timer_count+0x3>
            break;
        default:
            ;
    }
}
    2ce8:	bf 91       	pop	r27
    2cea:	af 91       	pop	r26
    2cec:	9f 91       	pop	r25
    2cee:	8f 91       	pop	r24
    2cf0:	0f 90       	pop	r0
    2cf2:	0f be       	out	0x3f, r0	; 63
    2cf4:	0f 90       	pop	r0
    2cf6:	1f 90       	pop	r1
    2cf8:	18 95       	reti

00002cfa <timer_init>:
    cli();
    t = timer_count;
    SREG = sreg;

    return TIMER_DIFF_32(t, last);
}
    2cfa:	82 e0       	ldi	r24, 0x02	; 2
    2cfc:	84 bd       	out	0x24, r24	; 36
    2cfe:	93 e0       	ldi	r25, 0x03	; 3
    2d00:	95 bd       	out	0x25, r25	; 37
    2d02:	9a ef       	ldi	r25, 0xFA	; 250
    2d04:	97 bd       	out	0x27, r25	; 39
    2d06:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    2d0a:	08 95       	ret

00002d0c <timer_read>:
    2d0c:	2f b7       	in	r18, 0x3f	; 63
    2d0e:	f8 94       	cli
    2d10:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <timer_count>
    2d14:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <timer_count+0x1>
    2d18:	a0 91 4f 02 	lds	r26, 0x024F	; 0x80024f <timer_count+0x2>
    2d1c:	b0 91 50 02 	lds	r27, 0x0250	; 0x800250 <timer_count+0x3>
    2d20:	2f bf       	out	0x3f, r18	; 63
    2d22:	08 95       	ret

00002d24 <__vector_19>:

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    2d24:	1f 92       	push	r1
    2d26:	0f 92       	push	r0
    2d28:	0f b6       	in	r0, 0x3f	; 63
    2d2a:	0f 92       	push	r0
    2d2c:	11 24       	eor	r1, r1
    2d2e:	8f 93       	push	r24
    2d30:	9f 93       	push	r25
    2d32:	af 93       	push	r26
    2d34:	bf 93       	push	r27
    timer_count++;
    2d36:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <timer_count>
    2d3a:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <timer_count+0x1>
    2d3e:	a0 91 4f 02 	lds	r26, 0x024F	; 0x80024f <timer_count+0x2>
    2d42:	b0 91 50 02 	lds	r27, 0x0250	; 0x800250 <timer_count+0x3>
    2d46:	01 96       	adiw	r24, 0x01	; 1
    2d48:	a1 1d       	adc	r26, r1
    2d4a:	b1 1d       	adc	r27, r1
    2d4c:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <timer_count>
    2d50:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <timer_count+0x1>
    2d54:	a0 93 4f 02 	sts	0x024F, r26	; 0x80024f <timer_count+0x2>
    2d58:	b0 93 50 02 	sts	0x0250, r27	; 0x800250 <timer_count+0x3>
}
    2d5c:	bf 91       	pop	r27
    2d5e:	af 91       	pop	r26
    2d60:	9f 91       	pop	r25
    2d62:	8f 91       	pop	r24
    2d64:	0f 90       	pop	r0
    2d66:	0f be       	out	0x3f, r0	; 63
    2d68:	0f 90       	pop	r0
    2d6a:	1f 90       	pop	r1
    2d6c:	18 95       	reti

00002d6e <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    2d6e:	0e 94 c3 06 	call	0xd86	; 0xd86 <USB_Disable>
    cli();
    2d72:	f8 94       	cli
    2d74:	2f ef       	ldi	r18, 0xFF	; 255
    2d76:	87 ea       	ldi	r24, 0xA7	; 167
    2d78:	91 e6       	ldi	r25, 0x61	; 97
    2d7a:	21 50       	subi	r18, 0x01	; 1
    2d7c:	80 40       	sbci	r24, 0x00	; 0
    2d7e:	90 40       	sbci	r25, 0x00	; 0
    2d80:	e1 f7       	brne	.-8      	; 0x2d7a <bootloader_jump+0xc>
    2d82:	00 c0       	rjmp	.+0      	; 0x2d84 <bootloader_jump+0x16>
    2d84:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    2d86:	87 e0       	ldi	r24, 0x07	; 7
    2d88:	90 eb       	ldi	r25, 0xB0	; 176
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <__bss_end>
    2d90:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <__bss_end+0x1>
    2d94:	a0 93 62 02 	sts	0x0262, r26	; 0x800262 <__bss_end+0x2>
    2d98:	b0 93 63 02 	sts	0x0263, r27	; 0x800263 <__bss_end+0x3>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    2d9c:	9c e0       	ldi	r25, 0x0C	; 12
    2d9e:	88 e1       	ldi	r24, 0x18	; 24
    2da0:	0f b6       	in	r0, 0x3f	; 63
    2da2:	f8 94       	cli
    2da4:	a8 95       	wdr
    2da6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    2daa:	0f be       	out	0x3f, r0	; 63
    2dac:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    2db0:	ff cf       	rjmp	.-2      	; 0x2db0 <bootloader_jump+0x42>

00002db2 <keycode_to_action>:


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    2db2:	8d 3b       	cpi	r24, 0xBD	; 189
    2db4:	60 f4       	brcc	.+24     	; 0x2dce <keycode_to_action+0x1c>
    2db6:	88 3a       	cpi	r24, 0xA8	; 168
    2db8:	90 f5       	brcc	.+100    	; 0x2e1e <keycode_to_action+0x6c>
    2dba:	85 3a       	cpi	r24, 0xA5	; 165
    2dbc:	28 f5       	brcc	.+74     	; 0x2e08 <keycode_to_action+0x56>
    2dbe:	84 30       	cpi	r24, 0x04	; 4
    2dc0:	08 f5       	brcc	.+66     	; 0x2e04 <keycode_to_action+0x52>
    2dc2:	81 30       	cpi	r24, 0x01	; 1
    2dc4:	09 f0       	breq	.+2      	; 0x2dc8 <keycode_to_action+0x16>
    2dc6:	86 c0       	rjmp	.+268    	; 0x2ed4 <keycode_to_action+0x122>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            return (action_t)ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            return (action_t)ACTION_TRANSPARENT;
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	08 95       	ret


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    2dce:	88 3e       	cpi	r24, 0xE8	; 232
    2dd0:	98 f4       	brcc	.+38     	; 0x2df8 <keycode_to_action+0x46>
    2dd2:	80 3e       	cpi	r24, 0xE0	; 224
    2dd4:	b8 f4       	brcc	.+46     	; 0x2e04 <keycode_to_action+0x52>
    2dd6:	8f 3b       	cpi	r24, 0xBF	; 191
    2dd8:	09 f0       	breq	.+2      	; 0x2ddc <keycode_to_action+0x2a>
    2dda:	7c c0       	rjmp	.+248    	; 0x2ed4 <keycode_to_action+0x122>
            break;
        case KC_TRNS:
            return (action_t)ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    2ddc:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <clear_keyboard>
    2de0:	2f ef       	ldi	r18, 0xFF	; 255
    2de2:	80 e7       	ldi	r24, 0x70	; 112
    2de4:	92 e0       	ldi	r25, 0x02	; 2
    2de6:	21 50       	subi	r18, 0x01	; 1
    2de8:	80 40       	sbci	r24, 0x00	; 0
    2dea:	90 40       	sbci	r25, 0x00	; 0
    2dec:	e1 f7       	brne	.-8      	; 0x2de6 <keycode_to_action+0x34>
    2dee:	00 c0       	rjmp	.+0      	; 0x2df0 <keycode_to_action+0x3e>
    2df0:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    2df2:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <bootloader_jump>
    2df6:	6e c0       	rjmp	.+220    	; 0x2ed4 <keycode_to_action+0x122>


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    2df8:	80 3f       	cpi	r24, 0xF0	; 240
    2dfa:	08 f4       	brcc	.+2      	; 0x2dfe <keycode_to_action+0x4c>
    2dfc:	6b c0       	rjmp	.+214    	; 0x2ed4 <keycode_to_action+0x122>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            return (action_t)ACTION_MOUSEKEY(keycode);
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	90 65       	ori	r25, 0x50	; 80
    2e02:	08 95       	ret
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            return (action_t)ACTION_KEY(keycode);
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	08 95       	ret
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            return (action_t)ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    2e08:	85 3a       	cpi	r24, 0xA5	; 165
    2e0a:	21 f0       	breq	.+8      	; 0x2e14 <keycode_to_action+0x62>
    2e0c:	86 3a       	cpi	r24, 0xA6	; 166
    2e0e:	21 f0       	breq	.+8      	; 0x2e18 <keycode_to_action+0x66>
    2e10:	33 e8       	ldi	r19, 0x83	; 131
    2e12:	03 c0       	rjmp	.+6      	; 0x2e1a <keycode_to_action+0x68>
    2e14:	31 e8       	ldi	r19, 0x81	; 129
    2e16:	01 c0       	rjmp	.+2      	; 0x2e1a <keycode_to_action+0x68>
    2e18:	32 e8       	ldi	r19, 0x82	; 130
    2e1a:	20 e4       	ldi	r18, 0x40	; 64
    2e1c:	58 c0       	rjmp	.+176    	; 0x2ece <keycode_to_action+0x11c>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    2e1e:	88 3a       	cpi	r24, 0xA8	; 168
    2e20:	51 f1       	breq	.+84     	; 0x2e76 <keycode_to_action+0xc4>
    2e22:	89 3a       	cpi	r24, 0xA9	; 169
    2e24:	59 f1       	breq	.+86     	; 0x2e7c <keycode_to_action+0xca>
    2e26:	8a 3a       	cpi	r24, 0xAA	; 170
    2e28:	59 f1       	breq	.+86     	; 0x2e80 <keycode_to_action+0xce>
    2e2a:	8b 3a       	cpi	r24, 0xAB	; 171
    2e2c:	59 f1       	breq	.+86     	; 0x2e84 <keycode_to_action+0xd2>
    2e2e:	8c 3a       	cpi	r24, 0xAC	; 172
    2e30:	59 f1       	breq	.+86     	; 0x2e88 <keycode_to_action+0xd6>
    2e32:	8d 3a       	cpi	r24, 0xAD	; 173
    2e34:	59 f1       	breq	.+86     	; 0x2e8c <keycode_to_action+0xda>
    2e36:	8e 3a       	cpi	r24, 0xAE	; 174
    2e38:	59 f1       	breq	.+86     	; 0x2e90 <keycode_to_action+0xde>
    2e3a:	8f 3a       	cpi	r24, 0xAF	; 175
    2e3c:	59 f1       	breq	.+86     	; 0x2e94 <keycode_to_action+0xe2>
    2e3e:	81 3b       	cpi	r24, 0xB1	; 177
    2e40:	59 f1       	breq	.+86     	; 0x2e98 <keycode_to_action+0xe6>
    2e42:	80 3b       	cpi	r24, 0xB0	; 176
    2e44:	59 f1       	breq	.+86     	; 0x2e9c <keycode_to_action+0xea>
    2e46:	82 3b       	cpi	r24, 0xB2	; 178
    2e48:	59 f1       	breq	.+86     	; 0x2ea0 <keycode_to_action+0xee>
    2e4a:	83 3b       	cpi	r24, 0xB3	; 179
    2e4c:	59 f1       	breq	.+86     	; 0x2ea4 <keycode_to_action+0xf2>
    2e4e:	84 3b       	cpi	r24, 0xB4	; 180
    2e50:	59 f1       	breq	.+86     	; 0x2ea8 <keycode_to_action+0xf6>
    2e52:	85 3b       	cpi	r24, 0xB5	; 181
    2e54:	59 f1       	breq	.+86     	; 0x2eac <keycode_to_action+0xfa>
    2e56:	86 3b       	cpi	r24, 0xB6	; 182
    2e58:	61 f1       	breq	.+88     	; 0x2eb2 <keycode_to_action+0x100>
    2e5a:	87 3b       	cpi	r24, 0xB7	; 183
    2e5c:	61 f1       	breq	.+88     	; 0x2eb6 <keycode_to_action+0x104>
    2e5e:	88 3b       	cpi	r24, 0xB8	; 184
    2e60:	61 f1       	breq	.+88     	; 0x2eba <keycode_to_action+0x108>
    2e62:	89 3b       	cpi	r24, 0xB9	; 185
    2e64:	61 f1       	breq	.+88     	; 0x2ebe <keycode_to_action+0x10c>
    2e66:	8a 3b       	cpi	r24, 0xBA	; 186
    2e68:	61 f1       	breq	.+88     	; 0x2ec2 <keycode_to_action+0x110>
    2e6a:	8b 3b       	cpi	r24, 0xBB	; 187
    2e6c:	61 f1       	breq	.+88     	; 0x2ec6 <keycode_to_action+0x114>
    2e6e:	8c 3b       	cpi	r24, 0xBC	; 188
    2e70:	61 f1       	breq	.+88     	; 0x2eca <keycode_to_action+0x118>
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	01 c0       	rjmp	.+2      	; 0x2e78 <keycode_to_action+0xc6>
    2e76:	32 ee       	ldi	r19, 0xE2	; 226
    2e78:	24 e4       	ldi	r18, 0x44	; 68
    2e7a:	29 c0       	rjmp	.+82     	; 0x2ece <keycode_to_action+0x11c>
    2e7c:	39 ee       	ldi	r19, 0xE9	; 233
    2e7e:	fc cf       	rjmp	.-8      	; 0x2e78 <keycode_to_action+0xc6>
    2e80:	3a ee       	ldi	r19, 0xEA	; 234
    2e82:	fa cf       	rjmp	.-12     	; 0x2e78 <keycode_to_action+0xc6>
    2e84:	35 eb       	ldi	r19, 0xB5	; 181
    2e86:	f8 cf       	rjmp	.-16     	; 0x2e78 <keycode_to_action+0xc6>
    2e88:	36 eb       	ldi	r19, 0xB6	; 182
    2e8a:	f6 cf       	rjmp	.-20     	; 0x2e78 <keycode_to_action+0xc6>
    2e8c:	33 eb       	ldi	r19, 0xB3	; 179
    2e8e:	f4 cf       	rjmp	.-24     	; 0x2e78 <keycode_to_action+0xc6>
    2e90:	34 eb       	ldi	r19, 0xB4	; 180
    2e92:	f2 cf       	rjmp	.-28     	; 0x2e78 <keycode_to_action+0xc6>
    2e94:	37 eb       	ldi	r19, 0xB7	; 183
    2e96:	f0 cf       	rjmp	.-32     	; 0x2e78 <keycode_to_action+0xc6>
    2e98:	3c ec       	ldi	r19, 0xCC	; 204
    2e9a:	ee cf       	rjmp	.-36     	; 0x2e78 <keycode_to_action+0xc6>
    2e9c:	3d ec       	ldi	r19, 0xCD	; 205
    2e9e:	ec cf       	rjmp	.-40     	; 0x2e78 <keycode_to_action+0xc6>
    2ea0:	33 e8       	ldi	r19, 0x83	; 131
    2ea2:	05 c0       	rjmp	.+10     	; 0x2eae <keycode_to_action+0xfc>
    2ea4:	3a e8       	ldi	r19, 0x8A	; 138
    2ea6:	03 c0       	rjmp	.+6      	; 0x2eae <keycode_to_action+0xfc>
    2ea8:	32 e9       	ldi	r19, 0x92	; 146
    2eaa:	01 c0       	rjmp	.+2      	; 0x2eae <keycode_to_action+0xfc>
    2eac:	34 e9       	ldi	r19, 0x94	; 148
    2eae:	25 e4       	ldi	r18, 0x45	; 69
    2eb0:	0e c0       	rjmp	.+28     	; 0x2ece <keycode_to_action+0x11c>
    2eb2:	31 e2       	ldi	r19, 0x21	; 33
    2eb4:	0b c0       	rjmp	.+22     	; 0x2ecc <keycode_to_action+0x11a>
    2eb6:	33 e2       	ldi	r19, 0x23	; 35
    2eb8:	09 c0       	rjmp	.+18     	; 0x2ecc <keycode_to_action+0x11a>
    2eba:	34 e2       	ldi	r19, 0x24	; 36
    2ebc:	07 c0       	rjmp	.+14     	; 0x2ecc <keycode_to_action+0x11a>
    2ebe:	35 e2       	ldi	r19, 0x25	; 37
    2ec0:	05 c0       	rjmp	.+10     	; 0x2ecc <keycode_to_action+0x11a>
    2ec2:	36 e2       	ldi	r19, 0x26	; 38
    2ec4:	03 c0       	rjmp	.+6      	; 0x2ecc <keycode_to_action+0x11a>
    2ec6:	37 e2       	ldi	r19, 0x27	; 39
    2ec8:	01 c0       	rjmp	.+2      	; 0x2ecc <keycode_to_action+0x11a>
    2eca:	3a e2       	ldi	r19, 0x2A	; 42
    2ecc:	26 e4       	ldi	r18, 0x46	; 70
    2ece:	83 2f       	mov	r24, r19
    2ed0:	92 2f       	mov	r25, r18
    2ed2:	08 95       	ret
            clear_keyboard();
            wait_ms(50);
            bootloader_jump(); // not return
            break;
        default:
            return (action_t)ACTION_NO;
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
            break;
    }
    return (action_t)ACTION_NO;
}
    2ed8:	08 95       	ret

00002eda <action_get_macro>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    2eda:	80 e0       	ldi	r24, 0x00	; 0
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	08 95       	ret

00002ee0 <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    2ee0:	08 95       	ret

00002ee2 <keymap_key_to_keycode>:
extern const uint8_t keymaps[][MATRIX_ROWS][MATRIX_COLS];
extern const action_t fn_actions[];

__attribute__ ((weak))
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    2ee2:	38 2f       	mov	r19, r24
    2ee4:	26 2f       	mov	r18, r22
#if defined(__AVR__)
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
    2ee6:	87 2f       	mov	r24, r23
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	6a e0       	ldi	r22, 0x0A	; 10
    2eec:	70 e0       	ldi	r23, 0x00	; 0
    2eee:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__mulhi3>
    2ef2:	fc 01       	movw	r30, r24
    2ef4:	83 2f       	mov	r24, r19
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	64 e6       	ldi	r22, 0x64	; 100
    2efa:	70 e0       	ldi	r23, 0x00	; 0
    2efc:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__mulhi3>
    2f00:	8e 0f       	add	r24, r30
    2f02:	9f 1f       	adc	r25, r31
    2f04:	fc 01       	movw	r30, r24
    2f06:	e2 0f       	add	r30, r18
    2f08:	f1 1d       	adc	r31, r1
    2f0a:	e0 54       	subi	r30, 0x40	; 64
    2f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0e:	84 91       	lpm	r24, Z
#else
    return keymaps[(layer)][(key.row)][(key.col)];
#endif
}
    2f10:	08 95       	ret

00002f12 <keymap_fn_to_action>:

__attribute__ ((weak))
action_t keymap_fn_to_action(uint8_t keycode)
{
#if defined(__AVR__)
    return (action_t)pgm_read_word(&fn_actions[FN_INDEX(keycode)]);
    2f12:	e8 2f       	mov	r30, r24
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	ee 0f       	add	r30, r30
    2f18:	ff 1f       	adc	r31, r31
    2f1a:	e6 5c       	subi	r30, 0xC6	; 198
    2f1c:	f0 40       	sbci	r31, 0x00	; 0
    2f1e:	85 91       	lpm	r24, Z+
    2f20:	94 91       	lpm	r25, Z
#else
    return fn_actions[FN_INDEX(keycode)];
#endif
}
    2f22:	08 95       	ret

00002f24 <action_for_key>:

/* converts key to action */
__attribute__ ((weak))
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    2f24:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <keymap_key_to_keycode>
    switch (keycode) {
    2f28:	80 3e       	cpi	r24, 0xE0	; 224
    2f2a:	a8 f4       	brcc	.+42     	; 0x2f56 <action_for_key+0x32>
    2f2c:	80 3c       	cpi	r24, 0xC0	; 192
    2f2e:	00 f5       	brcc	.+64     	; 0x2f70 <action_for_key+0x4c>
    2f30:	81 33       	cpi	r24, 0x31	; 49
    2f32:	09 f4       	brne	.+2      	; 0x2f36 <action_for_key+0x12>
    2f34:	5c c0       	rjmp	.+184    	; 0x2fee <action_for_key+0xca>
    2f36:	38 f4       	brcc	.+14     	; 0x2f46 <action_for_key+0x22>
    2f38:	89 32       	cpi	r24, 0x29	; 41
    2f3a:	09 f4       	brne	.+2      	; 0x2f3e <action_for_key+0x1a>
    2f3c:	52 c0       	rjmp	.+164    	; 0x2fe2 <action_for_key+0xbe>
    2f3e:	8a 32       	cpi	r24, 0x2A	; 42
    2f40:	09 f4       	brne	.+2      	; 0x2f44 <action_for_key+0x20>
    2f42:	5b c0       	rjmp	.+182    	; 0x2ffa <action_for_key+0xd6>
    2f44:	5f c0       	rjmp	.+190    	; 0x3004 <action_for_key+0xe0>
    2f46:	89 33       	cpi	r24, 0x39	; 57
    2f48:	b1 f0       	breq	.+44     	; 0x2f76 <action_for_key+0x52>
    2f4a:	82 38       	cpi	r24, 0x82	; 130
    2f4c:	a1 f0       	breq	.+40     	; 0x2f76 <action_for_key+0x52>
    2f4e:	85 33       	cpi	r24, 0x35	; 53
    2f50:	09 f4       	brne	.+2      	; 0x2f54 <action_for_key+0x30>
    2f52:	41 c0       	rjmp	.+130    	; 0x2fd6 <action_for_key+0xb2>
    2f54:	57 c0       	rjmp	.+174    	; 0x3004 <action_for_key+0xe0>
    2f56:	83 3e       	cpi	r24, 0xE3	; 227
    2f58:	41 f1       	breq	.+80     	; 0x2faa <action_for_key+0x86>
    2f5a:	28 f4       	brcc	.+10     	; 0x2f66 <action_for_key+0x42>
    2f5c:	80 3e       	cpi	r24, 0xE0	; 224
    2f5e:	99 f0       	breq	.+38     	; 0x2f86 <action_for_key+0x62>
    2f60:	82 3e       	cpi	r24, 0xE2	; 226
    2f62:	b9 f0       	breq	.+46     	; 0x2f92 <action_for_key+0x6e>
    2f64:	4f c0       	rjmp	.+158    	; 0x3004 <action_for_key+0xe0>
    2f66:	86 3e       	cpi	r24, 0xE6	; 230
    2f68:	31 f1       	breq	.+76     	; 0x2fb6 <action_for_key+0x92>
    2f6a:	87 3e       	cpi	r24, 0xE7	; 231
    2f6c:	71 f1       	breq	.+92     	; 0x2fca <action_for_key+0xa6>
    2f6e:	4a c0       	rjmp	.+148    	; 0x3004 <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    2f70:	0e 94 89 17 	call	0x2f12	; 0x2f12 <keymap_fn_to_action>
    2f74:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    2f76:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <keymap_config>
    2f7a:	90 fd       	sbrc	r25, 0
    2f7c:	02 c0       	rjmp	.+4      	; 0x2f82 <action_for_key+0x5e>
    2f7e:	91 ff       	sbrs	r25, 1
    2f80:	41 c0       	rjmp	.+130    	; 0x3004 <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    2f82:	80 ee       	ldi	r24, 0xE0	; 224
    2f84:	3f c0       	rjmp	.+126    	; 0x3004 <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    2f86:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <keymap_config>
    2f8a:	80 ff       	sbrs	r24, 0
    2f8c:	fa cf       	rjmp	.-12     	; 0x2f82 <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    2f8e:	89 e3       	ldi	r24, 0x39	; 57
    2f90:	39 c0       	rjmp	.+114    	; 0x3004 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    2f92:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <keymap_config>
    2f96:	82 ff       	sbrs	r24, 2
    2f98:	0c c0       	rjmp	.+24     	; 0x2fb2 <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    2f9a:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <keymap_config>
    2f9e:	84 ff       	sbrs	r24, 4
    2fa0:	02 c0       	rjmp	.+4      	; 0x2fa6 <action_for_key+0x82>
                    return keycode_to_action(KC_NO);
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	2f c0       	rjmp	.+94     	; 0x3004 <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    2fa6:	83 ee       	ldi	r24, 0xE3	; 227
    2fa8:	2d c0       	rjmp	.+90     	; 0x3004 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    2faa:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <keymap_config>
    2fae:	82 ff       	sbrs	r24, 2
    2fb0:	f4 cf       	rjmp	.-24     	; 0x2f9a <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(KC_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    2fb2:	82 ee       	ldi	r24, 0xE2	; 226
    2fb4:	27 c0       	rjmp	.+78     	; 0x3004 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(KC_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    2fb6:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <keymap_config>
    2fba:	83 ff       	sbrs	r24, 3
    2fbc:	0a c0       	rjmp	.+20     	; 0x2fd2 <action_for_key+0xae>
                if (keymap_config.no_gui) {
    2fbe:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <keymap_config>
    2fc2:	84 fd       	sbrc	r24, 4
    2fc4:	ee cf       	rjmp	.-36     	; 0x2fa2 <action_for_key+0x7e>
                    return keycode_to_action(KC_NO);
                }
                return keycode_to_action(KC_RGUI);
    2fc6:	87 ee       	ldi	r24, 0xE7	; 231
    2fc8:	1d c0       	rjmp	.+58     	; 0x3004 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    2fca:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <keymap_config>
    2fce:	83 ff       	sbrs	r24, 3
    2fd0:	f6 cf       	rjmp	.-20     	; 0x2fbe <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(KC_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    2fd2:	86 ee       	ldi	r24, 0xE6	; 230
    2fd4:	17 c0       	rjmp	.+46     	; 0x3004 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(KC_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    2fd6:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <keymap_config>
    2fda:	85 ff       	sbrs	r24, 5
    2fdc:	06 c0       	rjmp	.+12     	; 0x2fea <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    2fde:	89 e2       	ldi	r24, 0x29	; 41
    2fe0:	11 c0       	rjmp	.+34     	; 0x3004 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    2fe2:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <keymap_config>
    2fe6:	85 ff       	sbrs	r24, 5
    2fe8:	fa cf       	rjmp	.-12     	; 0x2fde <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    2fea:	85 e3       	ldi	r24, 0x35	; 53
    2fec:	0b c0       	rjmp	.+22     	; 0x3004 <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    2fee:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <keymap_config>
    2ff2:	86 ff       	sbrs	r24, 6
    2ff4:	06 c0       	rjmp	.+12     	; 0x3002 <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    2ff6:	8a e2       	ldi	r24, 0x2A	; 42
    2ff8:	05 c0       	rjmp	.+10     	; 0x3004 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    2ffa:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <keymap_config>
    2ffe:	86 ff       	sbrs	r24, 6
    3000:	fa cf       	rjmp	.-12     	; 0x2ff6 <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    3002:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    3004:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <keycode_to_action>
    }
}
    3008:	08 95       	ret

0000300a <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    300a:	bf 92       	push	r11
    300c:	cf 92       	push	r12
    300e:	df 92       	push	r13
    3010:	ef 92       	push	r14
    3012:	ff 92       	push	r15
    3014:	0f 93       	push	r16
    3016:	1f 93       	push	r17
    3018:	cf 93       	push	r28
    301a:	df 93       	push	r29
    301c:	ec 01       	movw	r28, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    301e:	b1 2c       	mov	r11, r1
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3020:	01 e0       	ldi	r16, 0x01	; 1
    3022:	10 e0       	ldi	r17, 0x00	; 0
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
    3024:	8b 2d       	mov	r24, r11
    3026:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <matrix_get_row>
    302a:	7c 01       	movw	r14, r24
    302c:	c1 2c       	mov	r12, r1
    302e:	d1 2c       	mov	r13, r1
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3030:	c8 01       	movw	r24, r16
    3032:	0c 2c       	mov	r0, r12
    3034:	02 c0       	rjmp	.+4      	; 0x303a <scan_key+0x30>
    3036:	88 0f       	add	r24, r24
    3038:	99 1f       	adc	r25, r25
    303a:	0a 94       	dec	r0
    303c:	e2 f7       	brpl	.-8      	; 0x3036 <scan_key+0x2c>
    303e:	8e 21       	and	r24, r14
    3040:	9f 21       	and	r25, r15
    3042:	89 2b       	or	r24, r25
    3044:	a9 f0       	breq	.+42     	; 0x3070 <scan_key+0x66>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    3046:	6c 2d       	mov	r22, r12
    3048:	7b 2d       	mov	r23, r11
    304a:	80 e0       	ldi	r24, 0x00	; 0
    304c:	0e 94 92 17 	call	0x2f24	; 0x2f24 <action_for_key>
                if (action.code == code ||
    3050:	8c 17       	cp	r24, r28
    3052:	9d 07       	cpc	r25, r29
    3054:	59 f0       	breq	.+22     	; 0x306c <scan_key+0x62>
    3056:	29 2f       	mov	r18, r25
    3058:	20 7e       	andi	r18, 0xE0	; 224
    305a:	39 2f       	mov	r19, r25
    305c:	30 7c       	andi	r19, 0xC0	; 192
    305e:	11 f0       	breq	.+4      	; 0x3064 <scan_key+0x5a>
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
    3060:	20 3a       	cpi	r18, 0xA0	; 160
    3062:	31 f4       	brne	.+12     	; 0x3070 <scan_key+0x66>
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	c8 17       	cp	r28, r24
    3068:	d9 07       	cpc	r29, r25
    306a:	11 f4       	brne	.+4      	; 0x3070 <scan_key+0x66>
                     action.key.code == code)) {
                    return true;
    306c:	81 e0       	ldi	r24, 0x01	; 1
    306e:	0c c0       	rjmp	.+24     	; 0x3088 <scan_key+0x7e>
    3070:	8f ef       	ldi	r24, 0xFF	; 255
    3072:	c8 1a       	sub	r12, r24
    3074:	d8 0a       	sbc	r13, r24

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    3076:	8a e0       	ldi	r24, 0x0A	; 10
    3078:	c8 16       	cp	r12, r24
    307a:	d1 04       	cpc	r13, r1
    307c:	c9 f6       	brne	.-78     	; 0x3030 <scan_key+0x26>
    }
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    307e:	b3 94       	inc	r11
    3080:	8a e0       	ldi	r24, 0x0A	; 10
    3082:	b8 12       	cpse	r11, r24
    3084:	cf cf       	rjmp	.-98     	; 0x3024 <scan_key+0x1a>
                    return true;
                }
            }
        }
    }
    return false;
    3086:	80 e0       	ldi	r24, 0x00	; 0
}
    3088:	df 91       	pop	r29
    308a:	cf 91       	pop	r28
    308c:	1f 91       	pop	r17
    308e:	0f 91       	pop	r16
    3090:	ff 90       	pop	r15
    3092:	ef 90       	pop	r14
    3094:	df 90       	pop	r13
    3096:	cf 90       	pop	r12
    3098:	bf 90       	pop	r11
    309a:	08 95       	ret

0000309c <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    309c:	cf 93       	push	r28
    309e:	df 93       	push	r29
    30a0:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    30a2:	8c e2       	ldi	r24, 0x2C	; 44
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	0e 94 05 18 	call	0x300a	; 0x300a <scan_key>
    30aa:	88 23       	and	r24, r24
    30ac:	29 f0       	breq	.+10     	; 0x30b8 <bootmagic_scan_key+0x1c>

    return scan_key(code);
    30ae:	ce 01       	movw	r24, r28
}
    30b0:	df 91       	pop	r29
    30b2:	cf 91       	pop	r28

bool bootmagic_scan_key(uint16_t code)
{
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;

    return scan_key(code);
    30b4:	0c 94 05 18 	jmp	0x300a	; 0x300a <scan_key>
}
    30b8:	80 e0       	ldi	r24, 0x00	; 0
    30ba:	df 91       	pop	r29
    30bc:	cf 91       	pop	r28
    30be:	08 95       	ret

000030c0 <bootmagic>:
#include "hook.h"

keymap_config_t keymap_config;

void bootmagic(void)
{
    30c0:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    30c2:	0e 94 c0 19 	call	0x3380	; 0x3380 <eeconfig_is_enabled>
    30c6:	81 11       	cpse	r24, r1
    30c8:	02 c0       	rjmp	.+4      	; 0x30ce <bootmagic+0xe>
        eeconfig_init();
    30ca:	0e 94 a6 19 	call	0x334c	; 0x334c <eeconfig_init>
#include "hook.h"

keymap_config_t keymap_config;

void bootmagic(void)
{
    30ce:	c5 e6       	ldi	r28, 0x65	; 101
    30d0:	c1 50       	subi	r28, 0x01	; 1
    }

    /* do scans in case of bounce */
    print("bootmagic scan: ... ");
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); wait_ms(10); }
    30d2:	49 f0       	breq	.+18     	; 0x30e6 <bootmagic+0x26>
    30d4:	0e 94 00 02 	call	0x400	; 0x400 <matrix_scan>
    30d8:	8f e3       	ldi	r24, 0x3F	; 63
    30da:	9c e9       	ldi	r25, 0x9C	; 156
    30dc:	01 97       	sbiw	r24, 0x01	; 1
    30de:	f1 f7       	brne	.-4      	; 0x30dc <bootmagic+0x1c>
    30e0:	00 c0       	rjmp	.+0      	; 0x30e2 <bootmagic+0x22>
    30e2:	00 00       	nop
    30e4:	f5 cf       	rjmp	.-22     	; 0x30d0 <bootmagic+0x10>
    print("done.\n");

    /* bootmagic skip */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    30e6:	89 e2       	ldi	r24, 0x29	; 41
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	0e 94 4e 18 	call	0x309c	; 0x309c <bootmagic_scan_key>
    30ee:	81 11       	cpse	r24, r1
    30f0:	2b c1       	rjmp	.+598    	; 0x3348 <bootmagic+0x288>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    30f2:	8a e2       	ldi	r24, 0x2A	; 42
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	0e 94 4e 18 	call	0x309c	; 0x309c <bootmagic_scan_key>
    30fa:	81 11       	cpse	r24, r1
        eeconfig_init();
    30fc:	0e 94 a6 19 	call	0x334c	; 0x334c <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    3100:	85 e0       	ldi	r24, 0x05	; 5
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	0e 94 4e 18 	call	0x309c	; 0x309c <bootmagic_scan_key>
    3108:	81 11       	cpse	r24, r1
        bootloader_jump();
    310a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <bootloader_jump>
    }

    /* user-defined checks */
    hook_bootmagic();
    310e:	0e 94 11 16 	call	0x2c22	; 0x2c22 <hook_bootmagic>

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    3112:	0e 94 cb 19 	call	0x3396	; 0x3396 <eeconfig_read_debug>
    3116:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <debug_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    311a:	87 e0       	ldi	r24, 0x07	; 7
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	0e 94 4e 18 	call	0x309c	; 0x309c <bootmagic_scan_key>
    3122:	88 23       	and	r24, r24
    3124:	c1 f1       	breq	.+112    	; 0x3196 <bootmagic+0xd6>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    3126:	8b e1       	ldi	r24, 0x1B	; 27
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	0e 94 4e 18 	call	0x309c	; 0x309c <bootmagic_scan_key>
    312e:	88 23       	and	r24, r24
    3130:	51 f0       	breq	.+20     	; 0x3146 <bootmagic+0x86>
            debug_config.matrix = !debug_config.matrix;
    3132:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <debug_config>
    3136:	81 fb       	bst	r24, 1
    3138:	22 27       	eor	r18, r18
    313a:	20 f9       	bld	r18, 0
    313c:	91 e0       	ldi	r25, 0x01	; 1
    313e:	92 27       	eor	r25, r18
    3140:	90 fb       	bst	r25, 0
    3142:	81 f9       	bld	r24, 1
    3144:	0f c0       	rjmp	.+30     	; 0x3164 <bootmagic+0xa4>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    3146:	8e e0       	ldi	r24, 0x0E	; 14
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	0e 94 4e 18 	call	0x309c	; 0x309c <bootmagic_scan_key>
    314e:	88 23       	and	r24, r24
    3150:	61 f0       	breq	.+24     	; 0x316a <bootmagic+0xaa>
            debug_config.keyboard = !debug_config.keyboard;
    3152:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <debug_config>
    3156:	82 fb       	bst	r24, 2
    3158:	22 27       	eor	r18, r18
    315a:	20 f9       	bld	r18, 0
    315c:	91 e0       	ldi	r25, 0x01	; 1
    315e:	92 27       	eor	r25, r18
    3160:	90 fb       	bst	r25, 0
    3162:	82 f9       	bld	r24, 2
    3164:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <debug_config>
    3168:	16 c0       	rjmp	.+44     	; 0x3196 <bootmagic+0xd6>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    316a:	80 e1       	ldi	r24, 0x10	; 16
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	0e 94 4e 18 	call	0x309c	; 0x309c <bootmagic_scan_key>
    3172:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <debug_config>
    3176:	88 23       	and	r24, r24
    3178:	41 f0       	breq	.+16     	; 0x318a <bootmagic+0xca>
            debug_config.mouse = !debug_config.mouse;
    317a:	93 fb       	bst	r25, 3
    317c:	22 27       	eor	r18, r18
    317e:	20 f9       	bld	r18, 0
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	82 27       	eor	r24, r18
    3184:	80 fb       	bst	r24, 0
    3186:	93 f9       	bld	r25, 3
    3188:	04 c0       	rjmp	.+8      	; 0x3192 <bootmagic+0xd2>
        } else {
            debug_config.enable = !debug_config.enable;
    318a:	89 2f       	mov	r24, r25
    318c:	80 95       	com	r24
    318e:	80 fb       	bst	r24, 0
    3190:	90 f9       	bld	r25, 0
    3192:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <debug_config>
        }
    }
    eeconfig_write_debug(debug_config.raw);
    3196:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <debug_config>
    319a:	0e 94 cf 19 	call	0x339e	; 0x339e <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    319e:	0e 94 dd 19 	call	0x33ba	; 0x33ba <eeconfig_read_keymap>
    31a2:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    31a6:	80 ee       	ldi	r24, 0xE0	; 224
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	0e 94 4e 18 	call	0x309c	; 0x309c <bootmagic_scan_key>
    31ae:	88 23       	and	r24, r24
    31b0:	41 f0       	breq	.+16     	; 0x31c2 <bootmagic+0x102>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    31b2:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <keymap_config>
    31b6:	98 2f       	mov	r25, r24
    31b8:	90 95       	com	r25
    31ba:	90 fb       	bst	r25, 0
    31bc:	80 f9       	bld	r24, 0
    31be:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    31c2:	89 e3       	ldi	r24, 0x39	; 57
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	0e 94 4e 18 	call	0x309c	; 0x309c <bootmagic_scan_key>
    31ca:	88 23       	and	r24, r24
    31cc:	59 f0       	breq	.+22     	; 0x31e4 <bootmagic+0x124>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    31ce:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <keymap_config>
    31d2:	81 fb       	bst	r24, 1
    31d4:	22 27       	eor	r18, r18
    31d6:	20 f9       	bld	r18, 0
    31d8:	91 e0       	ldi	r25, 0x01	; 1
    31da:	92 27       	eor	r25, r18
    31dc:	90 fb       	bst	r25, 0
    31de:	81 f9       	bld	r24, 1
    31e0:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    31e4:	82 ee       	ldi	r24, 0xE2	; 226
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	0e 94 4e 18 	call	0x309c	; 0x309c <bootmagic_scan_key>
    31ec:	88 23       	and	r24, r24
    31ee:	59 f0       	breq	.+22     	; 0x3206 <bootmagic+0x146>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    31f0:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <keymap_config>
    31f4:	82 fb       	bst	r24, 2
    31f6:	22 27       	eor	r18, r18
    31f8:	20 f9       	bld	r18, 0
    31fa:	91 e0       	ldi	r25, 0x01	; 1
    31fc:	92 27       	eor	r25, r18
    31fe:	90 fb       	bst	r25, 0
    3200:	82 f9       	bld	r24, 2
    3202:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    3206:	86 ee       	ldi	r24, 0xE6	; 230
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	0e 94 4e 18 	call	0x309c	; 0x309c <bootmagic_scan_key>
    320e:	88 23       	and	r24, r24
    3210:	59 f0       	breq	.+22     	; 0x3228 <bootmagic+0x168>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    3212:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <keymap_config>
    3216:	83 fb       	bst	r24, 3
    3218:	22 27       	eor	r18, r18
    321a:	20 f9       	bld	r18, 0
    321c:	91 e0       	ldi	r25, 0x01	; 1
    321e:	92 27       	eor	r25, r18
    3220:	90 fb       	bst	r25, 0
    3222:	83 f9       	bld	r24, 3
    3224:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    3228:	83 ee       	ldi	r24, 0xE3	; 227
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	0e 94 4e 18 	call	0x309c	; 0x309c <bootmagic_scan_key>
    3230:	88 23       	and	r24, r24
    3232:	59 f0       	breq	.+22     	; 0x324a <bootmagic+0x18a>
        keymap_config.no_gui = !keymap_config.no_gui;
    3234:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <keymap_config>
    3238:	84 fb       	bst	r24, 4
    323a:	22 27       	eor	r18, r18
    323c:	20 f9       	bld	r18, 0
    323e:	91 e0       	ldi	r25, 0x01	; 1
    3240:	92 27       	eor	r25, r18
    3242:	90 fb       	bst	r25, 0
    3244:	84 f9       	bld	r24, 4
    3246:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    324a:	85 e3       	ldi	r24, 0x35	; 53
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	0e 94 4e 18 	call	0x309c	; 0x309c <bootmagic_scan_key>
    3252:	88 23       	and	r24, r24
    3254:	59 f0       	breq	.+22     	; 0x326c <bootmagic+0x1ac>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    3256:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <keymap_config>
    325a:	85 fb       	bst	r24, 5
    325c:	22 27       	eor	r18, r18
    325e:	20 f9       	bld	r18, 0
    3260:	91 e0       	ldi	r25, 0x01	; 1
    3262:	92 27       	eor	r25, r18
    3264:	90 fb       	bst	r25, 0
    3266:	85 f9       	bld	r24, 5
    3268:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    326c:	81 e3       	ldi	r24, 0x31	; 49
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	0e 94 4e 18 	call	0x309c	; 0x309c <bootmagic_scan_key>
    3274:	88 23       	and	r24, r24
    3276:	59 f0       	breq	.+22     	; 0x328e <bootmagic+0x1ce>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    3278:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <keymap_config>
    327c:	86 fb       	bst	r24, 6
    327e:	22 27       	eor	r18, r18
    3280:	20 f9       	bld	r18, 0
    3282:	91 e0       	ldi	r25, 0x01	; 1
    3284:	92 27       	eor	r25, r18
    3286:	90 fb       	bst	r25, 0
    3288:	86 f9       	bld	r24, 6
    328a:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    328e:	81 e1       	ldi	r24, 0x11	; 17
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	0e 94 4e 18 	call	0x309c	; 0x309c <bootmagic_scan_key>
    3296:	88 23       	and	r24, r24
    3298:	59 f0       	breq	.+22     	; 0x32b0 <bootmagic+0x1f0>
        keymap_config.nkro = !keymap_config.nkro;
    329a:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <keymap_config>
    329e:	87 fb       	bst	r24, 7
    32a0:	22 27       	eor	r18, r18
    32a2:	20 f9       	bld	r18, 0
    32a4:	91 e0       	ldi	r25, 0x01	; 1
    32a6:	92 27       	eor	r25, r18
    32a8:	90 fb       	bst	r25, 0
    32aa:	87 f9       	bld	r24, 7
    32ac:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <keymap_config>
    }
    eeconfig_write_keymap(keymap_config.raw);
    32b0:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <keymap_config>
    32b4:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    32b8:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <keymap_config>
    32bc:	87 fb       	bst	r24, 7
    32be:	88 27       	eor	r24, r24
    32c0:	80 f9       	bld	r24, 0
    32c2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <keyboard_nkro>
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    32c6:	87 e2       	ldi	r24, 0x27	; 39
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	0e 94 4e 18 	call	0x309c	; 0x309c <bootmagic_scan_key>
    32ce:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    32d0:	8e e1       	ldi	r24, 0x1E	; 30
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	0e 94 4e 18 	call	0x309c	; 0x309c <bootmagic_scan_key>
    32d8:	81 11       	cpse	r24, r1
    32da:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    32dc:	8f e1       	ldi	r24, 0x1F	; 31
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	0e 94 4e 18 	call	0x309c	; 0x309c <bootmagic_scan_key>
    32e4:	81 11       	cpse	r24, r1
    32e6:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    32e8:	80 e2       	ldi	r24, 0x20	; 32
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	0e 94 4e 18 	call	0x309c	; 0x309c <bootmagic_scan_key>
    32f0:	81 11       	cpse	r24, r1
    32f2:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    32f4:	81 e2       	ldi	r24, 0x21	; 33
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	0e 94 4e 18 	call	0x309c	; 0x309c <bootmagic_scan_key>
    32fc:	81 11       	cpse	r24, r1
    32fe:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    3300:	82 e2       	ldi	r24, 0x22	; 34
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	0e 94 4e 18 	call	0x309c	; 0x309c <bootmagic_scan_key>
    3308:	81 11       	cpse	r24, r1
    330a:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    330c:	83 e2       	ldi	r24, 0x23	; 35
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	0e 94 4e 18 	call	0x309c	; 0x309c <bootmagic_scan_key>
    3314:	81 11       	cpse	r24, r1
    3316:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    3318:	84 e2       	ldi	r24, 0x24	; 36
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	0e 94 4e 18 	call	0x309c	; 0x309c <bootmagic_scan_key>
    3320:	88 23       	and	r24, r24
    3322:	11 f0       	breq	.+4      	; 0x3328 <bootmagic+0x268>
    3324:	c0 68       	ori	r28, 0x80	; 128
    3326:	02 c0       	rjmp	.+4      	; 0x332c <bootmagic+0x26c>
    if (default_layer) {
    3328:	cc 23       	and	r28, r28
    332a:	29 f0       	breq	.+10     	; 0x3336 <bootmagic+0x276>
        eeconfig_write_default_layer(default_layer);
    332c:	8c 2f       	mov	r24, r28
    332e:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    3332:	6c 2f       	mov	r22, r28
    3334:	03 c0       	rjmp	.+6      	; 0x333c <bootmagic+0x27c>
    } else {
        default_layer = eeconfig_read_default_layer();
    3336:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    333a:	68 2f       	mov	r22, r24
    333c:	70 e0       	ldi	r23, 0x00	; 0
    333e:	80 e0       	ldi	r24, 0x00	; 0
    3340:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    3342:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    3344:	0c 94 7f 13 	jmp	0x26fe	; 0x26fe <default_layer_set>
    }
}
    3348:	cf 91       	pop	r28
    334a:	08 95       	ret

0000334c <eeconfig_init>:
    eeprom_write_word(EECONFIG_MAGIC, EECONFIG_MAGIC_NUMBER);
}

void eeconfig_disable(void)
{
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
    334c:	6d ee       	ldi	r22, 0xED	; 237
    334e:	7e ef       	ldi	r23, 0xFE	; 254
    3350:	80 e0       	ldi	r24, 0x00	; 0
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	0e 94 1c 1b 	call	0x3638	; 0x3638 <eeprom_write_word>
    3358:	60 e0       	ldi	r22, 0x00	; 0
    335a:	82 e0       	ldi	r24, 0x02	; 2
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	0e 94 0e 1b 	call	0x361c	; 0x361c <eeprom_write_byte>
    3362:	60 e0       	ldi	r22, 0x00	; 0
    3364:	83 e0       	ldi	r24, 0x03	; 3
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	0e 94 0e 1b 	call	0x361c	; 0x361c <eeprom_write_byte>
    336c:	60 e0       	ldi	r22, 0x00	; 0
    336e:	84 e0       	ldi	r24, 0x04	; 4
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	0e 94 0e 1b 	call	0x361c	; 0x361c <eeprom_write_byte>
    3376:	60 e0       	ldi	r22, 0x00	; 0
    3378:	85 e0       	ldi	r24, 0x05	; 5
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	0c 94 0e 1b 	jmp	0x361c	; 0x361c <eeprom_write_byte>

00003380 <eeconfig_is_enabled>:
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    3380:	80 e0       	ldi	r24, 0x00	; 0
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	0e 94 08 1b 	call	0x3610	; 0x3610 <eeprom_read_word>
    3388:	21 e0       	ldi	r18, 0x01	; 1
    338a:	8d 3e       	cpi	r24, 0xED	; 237
    338c:	9e 4f       	sbci	r25, 0xFE	; 254
    338e:	09 f0       	breq	.+2      	; 0x3392 <eeconfig_is_enabled+0x12>
    3390:	20 e0       	ldi	r18, 0x00	; 0
}
    3392:	82 2f       	mov	r24, r18
    3394:	08 95       	ret

00003396 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    3396:	82 e0       	ldi	r24, 0x02	; 2
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	0c 94 00 1b 	jmp	0x3600	; 0x3600 <eeprom_read_byte>

0000339e <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    339e:	68 2f       	mov	r22, r24
    33a0:	82 e0       	ldi	r24, 0x02	; 2
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	0c 94 0e 1b 	jmp	0x361c	; 0x361c <eeprom_write_byte>

000033a8 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    33a8:	83 e0       	ldi	r24, 0x03	; 3
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	0c 94 00 1b 	jmp	0x3600	; 0x3600 <eeprom_read_byte>

000033b0 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    33b0:	68 2f       	mov	r22, r24
    33b2:	83 e0       	ldi	r24, 0x03	; 3
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	0c 94 0e 1b 	jmp	0x361c	; 0x361c <eeprom_write_byte>

000033ba <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    33ba:	84 e0       	ldi	r24, 0x04	; 4
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	0c 94 00 1b 	jmp	0x3600	; 0x3600 <eeprom_read_byte>

000033c2 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    33c2:	68 2f       	mov	r22, r24
    33c4:	84 e0       	ldi	r24, 0x04	; 4
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	0c 94 0e 1b 	jmp	0x361c	; 0x361c <eeprom_write_byte>

000033cc <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    33cc:	0f 93       	push	r16
    33ce:	1f 93       	push	r17
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    33d0:	8b 31       	cpi	r24, 0x1B	; 27
    33d2:	09 f4       	brne	.+2      	; 0x33d6 <command_common+0xa>
    33d4:	73 c0       	rjmp	.+230    	; 0x34bc <command_common+0xf0>
    33d6:	a0 f5       	brcc	.+104    	; 0x3440 <command_common+0x74>
    33d8:	8e 30       	cpi	r24, 0x0E	; 14
    33da:	09 f4       	brne	.+2      	; 0x33de <command_common+0x12>
    33dc:	82 c0       	rjmp	.+260    	; 0x34e2 <command_common+0x116>
    33de:	c0 f4       	brcc	.+48     	; 0x3410 <command_common+0x44>
    33e0:	87 30       	cpi	r24, 0x07	; 7
    33e2:	09 f4       	brne	.+2      	; 0x33e6 <command_common+0x1a>
    33e4:	60 c0       	rjmp	.+192    	; 0x34a6 <command_common+0xda>
    33e6:	68 f4       	brcc	.+26     	; 0x3402 <command_common+0x36>
    33e8:	86 30       	cpi	r24, 0x06	; 6
    33ea:	09 f0       	breq	.+2      	; 0x33ee <command_common+0x22>
    33ec:	a8 c0       	rjmp	.+336    	; 0x353e <command_common+0x172>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    33ee:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <debug_config>
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    33f2:	81 7f       	andi	r24, 0xF1	; 241
    33f4:	8e 7f       	andi	r24, 0xFE	; 254
    33f6:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <debug_config>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
    33fa:	81 e0       	ldi	r24, 0x01	; 1
    33fc:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <command_state>
            break;
    3400:	9f c0       	rjmp	.+318    	; 0x3540 <command_common+0x174>
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    3402:	88 30       	cpi	r24, 0x08	; 8
    3404:	09 f4       	brne	.+2      	; 0x3408 <command_common+0x3c>
    3406:	4a c0       	rjmp	.+148    	; 0x349c <command_common+0xd0>
    3408:	8b 30       	cpi	r24, 0x0B	; 11
    340a:	09 f4       	brne	.+2      	; 0x340e <command_common+0x42>
    340c:	96 c0       	rjmp	.+300    	; 0x353a <command_common+0x16e>
    340e:	97 c0       	rjmp	.+302    	; 0x353e <command_common+0x172>
    3410:	81 31       	cpi	r24, 0x11	; 17
    3412:	09 f4       	brne	.+2      	; 0x3416 <command_common+0x4a>
    3414:	70 c0       	rjmp	.+224    	; 0x34f6 <command_common+0x12a>
    3416:	68 f4       	brcc	.+26     	; 0x3432 <command_common+0x66>
    3418:	80 31       	cpi	r24, 0x10	; 16
    341a:	09 f0       	breq	.+2      	; 0x341e <command_common+0x52>
    341c:	90 c0       	rjmp	.+288    	; 0x353e <command_common+0x172>
            } else {
                print("\nkeyboard: off\n");
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    341e:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <debug_config>
    3422:	83 fb       	bst	r24, 3
    3424:	22 27       	eor	r18, r18
    3426:	20 f9       	bld	r18, 0
    3428:	91 e0       	ldi	r25, 0x01	; 1
    342a:	92 27       	eor	r25, r18
    342c:	90 fb       	bst	r25, 0
    342e:	83 f9       	bld	r24, 3
    3430:	4e c0       	rjmp	.+156    	; 0x34ce <command_common+0x102>
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    3432:	86 31       	cpi	r24, 0x16	; 22
    3434:	09 f4       	brne	.+2      	; 0x3438 <command_common+0x6c>
    3436:	81 c0       	rjmp	.+258    	; 0x353a <command_common+0x16e>
    3438:	89 31       	cpi	r24, 0x19	; 25
    343a:	09 f4       	brne	.+2      	; 0x343e <command_common+0x72>
    343c:	7e c0       	rjmp	.+252    	; 0x353a <command_common+0x16e>
    343e:	7f c0       	rjmp	.+254    	; 0x353e <command_common+0x172>
    3440:	85 33       	cpi	r24, 0x35	; 53
    3442:	09 f4       	brne	.+2      	; 0x3446 <command_common+0x7a>
    3444:	61 c0       	rjmp	.+194    	; 0x3508 <command_common+0x13c>
    3446:	68 f4       	brcc	.+26     	; 0x3462 <command_common+0x96>
    3448:	87 32       	cpi	r24, 0x27	; 39
    344a:	09 f4       	brne	.+2      	; 0x344e <command_common+0x82>
    344c:	5d c0       	rjmp	.+186    	; 0x3508 <command_common+0x13c>
    344e:	28 f4       	brcc	.+10     	; 0x345a <command_common+0x8e>
    3450:	8e 31       	cpi	r24, 0x1E	; 30
    3452:	08 f4       	brcc	.+2      	; 0x3456 <command_common+0x8a>
    3454:	74 c0       	rjmp	.+232    	; 0x353e <command_common+0x172>
#endif

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    3456:	8d 51       	subi	r24, 0x1D	; 29
    3458:	5d c0       	rjmp	.+186    	; 0x3514 <command_common+0x148>
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    345a:	89 32       	cpi	r24, 0x29	; 41
    345c:	09 f4       	brne	.+2      	; 0x3460 <command_common+0x94>
    345e:	54 c0       	rjmp	.+168    	; 0x3508 <command_common+0x13c>
    3460:	6e c0       	rjmp	.+220    	; 0x353e <command_common+0x172>
    3462:	83 34       	cpi	r24, 0x43	; 67
    3464:	38 f4       	brcc	.+14     	; 0x3474 <command_common+0xa8>
    3466:	8a 33       	cpi	r24, 0x3A	; 58
    3468:	08 f0       	brcs	.+2      	; 0x346c <command_common+0xa0>
    346a:	53 c0       	rjmp	.+166    	; 0x3512 <command_common+0x146>
    346c:	88 33       	cpi	r24, 0x38	; 56
    346e:	09 f4       	brne	.+2      	; 0x3472 <command_common+0xa6>
    3470:	64 c0       	rjmp	.+200    	; 0x353a <command_common+0x16e>
    3472:	65 c0       	rjmp	.+202    	; 0x353e <command_common+0x172>
    3474:	83 34       	cpi	r24, 0x43	; 67
    3476:	09 f4       	brne	.+2      	; 0x347a <command_common+0xae>
    3478:	47 c0       	rjmp	.+142    	; 0x3508 <command_common+0x13c>
    347a:	88 34       	cpi	r24, 0x48	; 72
    347c:	09 f0       	breq	.+2      	; 0x3480 <command_common+0xb4>
    347e:	5f c0       	rjmp	.+190    	; 0x353e <command_common+0x172>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    3480:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <clear_keyboard>
    3484:	0f ef       	ldi	r16, 0xFF	; 255
    3486:	13 ed       	ldi	r17, 0xD3	; 211
    3488:	20 e3       	ldi	r18, 0x30	; 48
    348a:	01 50       	subi	r16, 0x01	; 1
    348c:	10 40       	sbci	r17, 0x00	; 0
    348e:	20 40       	sbci	r18, 0x00	; 0
    3490:	e1 f7       	brne	.-8      	; 0x348a <command_common+0xbe>
    3492:	00 c0       	rjmp	.+0      	; 0x3494 <command_common+0xc8>
    3494:	00 00       	nop
            print("\n\nbootloader... ");
            wait_ms(1000);
            bootloader_jump(); // not return
    3496:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <bootloader_jump>
    349a:	4f c0       	rjmp	.+158    	; 0x353a <command_common+0x16e>
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    349c:	0e 94 cb 19 	call	0x3396	; 0x3396 <eeconfig_read_debug>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    print(".mouse: "); print_dec(dc.mouse); print("\n");

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    34a0:	0e 94 dd 19 	call	0x33ba	; 0x33ba <eeconfig_read_keymap>
    34a4:	4a c0       	rjmp	.+148    	; 0x353a <command_common+0x16e>
            print("\n\nbootloader... ");
            wait_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    34a6:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <debug_config>
    34aa:	89 2f       	mov	r24, r25
    34ac:	81 70       	andi	r24, 0x01	; 1
    34ae:	90 ff       	sbrs	r25, 0
    34b0:	12 c0       	rjmp	.+36     	; 0x34d6 <command_common+0x10a>
                print("\ndebug: off\n");
                debug_matrix   = false;
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    34b2:	91 7f       	andi	r25, 0xF1	; 241
    34b4:	9e 7f       	andi	r25, 0xFE	; 254
    34b6:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <debug_config>
    34ba:	42 c0       	rjmp	.+132    	; 0x3540 <command_common+0x174>
                print("\ndebug: on\n");
                debug_enable   = true;
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    34bc:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <debug_config>
    34c0:	81 fb       	bst	r24, 1
    34c2:	22 27       	eor	r18, r18
    34c4:	20 f9       	bld	r18, 0
    34c6:	91 e0       	ldi	r25, 0x01	; 1
    34c8:	92 27       	eor	r25, r18
    34ca:	90 fb       	bst	r25, 0
    34cc:	81 f9       	bld	r24, 1
            } else {
                print("\nmatrix: off\n");
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    34ce:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <debug_config>
            if (debug_keyboard) {
    34d2:	99 23       	and	r25, r25
    34d4:	91 f1       	breq	.+100    	; 0x353a <command_common+0x16e>
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
            } else {
                print("\ndebug: on\n");
                debug_enable   = true;
    34d6:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <debug_config>
    34da:	81 60       	ori	r24, 0x01	; 1
    34dc:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <debug_config>
    34e0:	2c c0       	rjmp	.+88     	; 0x353a <command_common+0x16e>
            } else {
                print("\nmatrix: off\n");
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    34e2:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <debug_config>
    34e6:	82 fb       	bst	r24, 2
    34e8:	22 27       	eor	r18, r18
    34ea:	20 f9       	bld	r18, 0
    34ec:	91 e0       	ldi	r25, 0x01	; 1
    34ee:	92 27       	eor	r25, r18
    34f0:	90 fb       	bst	r25, 0
    34f2:	82 f9       	bld	r24, 2
    34f4:	ec cf       	rjmp	.-40     	; 0x34ce <command_common+0x102>
#   endif
#endif
            break;
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    34f6:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    34fa:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <keyboard_nkro>
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	89 27       	eor	r24, r25
    3502:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <keyboard_nkro>
    3506:	19 c0       	rjmp	.+50     	; 0x353a <command_common+0x16e>
#endif

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    3508:	61 e0       	ldi	r22, 0x01	; 1
    350a:	70 e0       	ldi	r23, 0x00	; 0
    350c:	80 e0       	ldi	r24, 0x00	; 0
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	10 c0       	rjmp	.+32     	; 0x3532 <command_common+0x166>
    3512:	89 53       	subi	r24, 0x39	; 57
    3514:	41 e0       	ldi	r20, 0x01	; 1
    3516:	50 e0       	ldi	r21, 0x00	; 0
    3518:	60 e0       	ldi	r22, 0x00	; 0
    351a:	70 e0       	ldi	r23, 0x00	; 0
    351c:	8a 01       	movw	r16, r20
    351e:	9b 01       	movw	r18, r22
    3520:	04 c0       	rjmp	.+8      	; 0x352a <command_common+0x15e>
    3522:	00 0f       	add	r16, r16
    3524:	11 1f       	adc	r17, r17
    3526:	22 1f       	adc	r18, r18
    3528:	33 1f       	adc	r19, r19
    352a:	8a 95       	dec	r24
    352c:	d2 f7       	brpl	.-12     	; 0x3522 <command_common+0x156>
    352e:	c9 01       	movw	r24, r18
    3530:	b8 01       	movw	r22, r16
    3532:	0e 94 7f 13 	call	0x26fe	; 0x26fe <default_layer_set>
    clear_keyboard();
    3536:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <clear_keyboard>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    353a:	81 e0       	ldi	r24, 0x01	; 1
    353c:	01 c0       	rjmp	.+2      	; 0x3540 <command_common+0x174>
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
            break;
        default:
            print("?");
            return false;
    353e:	80 e0       	ldi	r24, 0x00	; 0
    }
    return true;
}
    3540:	1f 91       	pop	r17
    3542:	0f 91       	pop	r16
    3544:	08 95       	ret

00003546 <command_console_extra>:
bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    (void)code;
    return false;
}
    3546:	80 e0       	ldi	r24, 0x00	; 0
    3548:	08 95       	ret

0000354a <command_extra>:
    354a:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <command_console_extra>

0000354e <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    354e:	cf 93       	push	r28
    3550:	c8 2f       	mov	r28, r24
    switch (command_state) {
    3552:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <command_state>
    3556:	88 23       	and	r24, r24
    3558:	19 f0       	breq	.+6      	; 0x3560 <command_proc+0x12>
    355a:	81 30       	cpi	r24, 0x01	; 1
    355c:	49 f0       	breq	.+18     	; 0x3570 <command_proc+0x22>
    355e:	31 c0       	rjmp	.+98     	; 0x35c2 <command_proc+0x74>
        case ONESHOT:
            if (!IS_COMMAND())
    3560:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    3564:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    3568:	80 81       	ld	r24, Z
    356a:	82 32       	cpi	r24, 0x22	; 34
    356c:	61 f5       	brne	.+88     	; 0x35c6 <command_proc+0x78>
    356e:	07 c0       	rjmp	.+14     	; 0x357e <command_proc+0x30>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    3570:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    3574:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    3578:	80 81       	ld	r24, Z
    357a:	82 32       	cpi	r24, 0x22	; 34
    357c:	61 f4       	brne	.+24     	; 0x3596 <command_proc+0x48>
                return (command_extra(code) || command_common(code));
    357e:	8c 2f       	mov	r24, r28
    3580:	0e 94 a5 1a 	call	0x354a	; 0x354a <command_extra>
    3584:	81 11       	cpse	r24, r1
    3586:	04 c0       	rjmp	.+8      	; 0x3590 <command_proc+0x42>
    3588:	8c 2f       	mov	r24, r28
    358a:	0e 94 e6 19 	call	0x33cc	; 0x33cc <command_common>
    358e:	17 c0       	rjmp	.+46     	; 0x35be <command_proc+0x70>
    3590:	81 e0       	ldi	r24, 0x01	; 1
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	14 c0       	rjmp	.+40     	; 0x35be <command_proc+0x70>
            else
                return (command_console_extra(code) || command_console(code));
    3596:	8c 2f       	mov	r24, r28
    3598:	0e 94 a3 1a 	call	0x3546	; 0x3546 <command_console_extra>
    359c:	81 11       	cpse	r24, r1
    359e:	0e c0       	rjmp	.+28     	; 0x35bc <command_proc+0x6e>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    35a0:	c4 31       	cpi	r28, 0x14	; 20
    35a2:	49 f0       	breq	.+18     	; 0x35b6 <command_proc+0x68>
    35a4:	18 f4       	brcc	.+6      	; 0x35ac <command_proc+0x5e>
    35a6:	cb 30       	cpi	r28, 0x0B	; 11
    35a8:	49 f0       	breq	.+18     	; 0x35bc <command_proc+0x6e>
    35aa:	0f c0       	rjmp	.+30     	; 0x35ca <command_proc+0x7c>
    35ac:	c9 32       	cpi	r28, 0x29	; 41
    35ae:	19 f0       	breq	.+6      	; 0x35b6 <command_proc+0x68>
    35b0:	c8 33       	cpi	r28, 0x38	; 56
    35b2:	21 f0       	breq	.+8      	; 0x35bc <command_proc+0x6e>
    35b4:	0a c0       	rjmp	.+20     	; 0x35ca <command_proc+0x7c>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    35b6:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <command_state>
    35ba:	07 c0       	rjmp	.+14     	; 0x35ca <command_proc+0x7c>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    35bc:	81 e0       	ldi	r24, 0x01	; 1
    35be:	81 70       	andi	r24, 0x01	; 1
    35c0:	06 c0       	rjmp	.+12     	; 0x35ce <command_proc+0x80>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    35c2:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <command_state>
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    35c6:	80 e0       	ldi	r24, 0x00	; 0
    35c8:	02 c0       	rjmp	.+4      	; 0x35ce <command_proc+0x80>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    35ca:	80 e0       	ldi	r24, 0x00	; 0
    35cc:	f8 cf       	rjmp	.-16     	; 0x35be <command_proc+0x70>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    35ce:	cf 91       	pop	r28
    35d0:	08 95       	ret

000035d2 <__mulhi3>:
    35d2:	00 24       	eor	r0, r0
    35d4:	55 27       	eor	r21, r21
    35d6:	04 c0       	rjmp	.+8      	; 0x35e0 <__mulhi3+0xe>
    35d8:	08 0e       	add	r0, r24
    35da:	59 1f       	adc	r21, r25
    35dc:	88 0f       	add	r24, r24
    35de:	99 1f       	adc	r25, r25
    35e0:	00 97       	sbiw	r24, 0x00	; 0
    35e2:	29 f0       	breq	.+10     	; 0x35ee <__mulhi3+0x1c>
    35e4:	76 95       	lsr	r23
    35e6:	67 95       	ror	r22
    35e8:	b8 f3       	brcs	.-18     	; 0x35d8 <__mulhi3+0x6>
    35ea:	71 05       	cpc	r23, r1
    35ec:	b9 f7       	brne	.-18     	; 0x35dc <__mulhi3+0xa>
    35ee:	80 2d       	mov	r24, r0
    35f0:	95 2f       	mov	r25, r21
    35f2:	08 95       	ret

000035f4 <__tablejump2__>:
    35f4:	ee 0f       	add	r30, r30
    35f6:	ff 1f       	adc	r31, r31
    35f8:	05 90       	lpm	r0, Z+
    35fa:	f4 91       	lpm	r31, Z
    35fc:	e0 2d       	mov	r30, r0
    35fe:	09 94       	ijmp

00003600 <eeprom_read_byte>:
    3600:	f9 99       	sbic	0x1f, 1	; 31
    3602:	fe cf       	rjmp	.-4      	; 0x3600 <eeprom_read_byte>
    3604:	92 bd       	out	0x22, r25	; 34
    3606:	81 bd       	out	0x21, r24	; 33
    3608:	f8 9a       	sbi	0x1f, 0	; 31
    360a:	99 27       	eor	r25, r25
    360c:	80 b5       	in	r24, 0x20	; 32
    360e:	08 95       	ret

00003610 <eeprom_read_word>:
    3610:	a8 e1       	ldi	r26, 0x18	; 24
    3612:	b0 e0       	ldi	r27, 0x00	; 0
    3614:	42 e0       	ldi	r20, 0x02	; 2
    3616:	50 e0       	ldi	r21, 0x00	; 0
    3618:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <eeprom_read_blraw>

0000361c <eeprom_write_byte>:
    361c:	26 2f       	mov	r18, r22

0000361e <eeprom_write_r18>:
    361e:	f9 99       	sbic	0x1f, 1	; 31
    3620:	fe cf       	rjmp	.-4      	; 0x361e <eeprom_write_r18>
    3622:	1f ba       	out	0x1f, r1	; 31
    3624:	92 bd       	out	0x22, r25	; 34
    3626:	81 bd       	out	0x21, r24	; 33
    3628:	20 bd       	out	0x20, r18	; 32
    362a:	0f b6       	in	r0, 0x3f	; 63
    362c:	f8 94       	cli
    362e:	fa 9a       	sbi	0x1f, 2	; 31
    3630:	f9 9a       	sbi	0x1f, 1	; 31
    3632:	0f be       	out	0x3f, r0	; 63
    3634:	01 96       	adiw	r24, 0x01	; 1
    3636:	08 95       	ret

00003638 <eeprom_write_word>:
    3638:	0e 94 0e 1b 	call	0x361c	; 0x361c <eeprom_write_byte>
    363c:	27 2f       	mov	r18, r23
    363e:	0c 94 0f 1b 	jmp	0x361e	; 0x361e <eeprom_write_r18>

00003642 <eeprom_read_block>:
    3642:	dc 01       	movw	r26, r24
    3644:	cb 01       	movw	r24, r22

00003646 <eeprom_read_blraw>:
    3646:	fc 01       	movw	r30, r24
    3648:	f9 99       	sbic	0x1f, 1	; 31
    364a:	fe cf       	rjmp	.-4      	; 0x3648 <eeprom_read_blraw+0x2>
    364c:	06 c0       	rjmp	.+12     	; 0x365a <eeprom_read_blraw+0x14>
    364e:	f2 bd       	out	0x22, r31	; 34
    3650:	e1 bd       	out	0x21, r30	; 33
    3652:	f8 9a       	sbi	0x1f, 0	; 31
    3654:	31 96       	adiw	r30, 0x01	; 1
    3656:	00 b4       	in	r0, 0x20	; 32
    3658:	0d 92       	st	X+, r0
    365a:	41 50       	subi	r20, 0x01	; 1
    365c:	50 40       	sbci	r21, 0x00	; 0
    365e:	b8 f7       	brcc	.-18     	; 0x364e <eeprom_read_blraw+0x8>
    3660:	08 95       	ret

00003662 <_exit>:
    3662:	f8 94       	cli

00003664 <__stop_program>:
    3664:	ff cf       	rjmp	.-2      	; 0x3664 <__stop_program>
