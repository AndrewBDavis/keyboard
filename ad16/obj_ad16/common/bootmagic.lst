   1               		.file	"bootmagic.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.scan_key,"ax",@progbits
  12               	scan_key:
  13               	.LFB99:
  14               		.file 1 "../../tmk_core/common/bootmagic.c"
   1:../../tmk_core/common/bootmagic.c **** #include <stdint.h>
   2:../../tmk_core/common/bootmagic.c **** #include <stdbool.h>
   3:../../tmk_core/common/bootmagic.c **** #include "wait.h"
   4:../../tmk_core/common/bootmagic.c **** #include "matrix.h"
   5:../../tmk_core/common/bootmagic.c **** #include "bootloader.h"
   6:../../tmk_core/common/bootmagic.c **** #include "debug.h"
   7:../../tmk_core/common/bootmagic.c **** #include "keymap.h"
   8:../../tmk_core/common/bootmagic.c **** #include "actionmap.h"
   9:../../tmk_core/common/bootmagic.c **** #include "host.h"
  10:../../tmk_core/common/bootmagic.c **** #include "action_layer.h"
  11:../../tmk_core/common/bootmagic.c **** #include "eeconfig.h"
  12:../../tmk_core/common/bootmagic.c **** #include "bootmagic.h"
  13:../../tmk_core/common/bootmagic.c **** #include "hook.h"
  14:../../tmk_core/common/bootmagic.c **** 
  15:../../tmk_core/common/bootmagic.c **** keymap_config_t keymap_config;
  16:../../tmk_core/common/bootmagic.c **** 
  17:../../tmk_core/common/bootmagic.c **** void bootmagic(void)
  18:../../tmk_core/common/bootmagic.c **** {
  19:../../tmk_core/common/bootmagic.c ****     /* check signature */
  20:../../tmk_core/common/bootmagic.c ****     if (!eeconfig_is_enabled()) {
  21:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  22:../../tmk_core/common/bootmagic.c ****     }
  23:../../tmk_core/common/bootmagic.c **** 
  24:../../tmk_core/common/bootmagic.c ****     /* do scans in case of bounce */
  25:../../tmk_core/common/bootmagic.c ****     print("bootmagic scan: ... ");
  26:../../tmk_core/common/bootmagic.c ****     uint8_t scan = 100;
  27:../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); wait_ms(10); }
  28:../../tmk_core/common/bootmagic.c ****     print("done.\n");
  29:../../tmk_core/common/bootmagic.c **** 
  30:../../tmk_core/common/bootmagic.c ****     /* bootmagic skip */
  31:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
  32:../../tmk_core/common/bootmagic.c ****         return;
  33:../../tmk_core/common/bootmagic.c ****     }
  34:../../tmk_core/common/bootmagic.c **** 
  35:../../tmk_core/common/bootmagic.c ****     /* eeconfig clear */
  36:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
  37:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  38:../../tmk_core/common/bootmagic.c ****     }
  39:../../tmk_core/common/bootmagic.c **** 
  40:../../tmk_core/common/bootmagic.c ****     /* bootloader */
  41:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
  42:../../tmk_core/common/bootmagic.c ****         bootloader_jump();
  43:../../tmk_core/common/bootmagic.c ****     }
  44:../../tmk_core/common/bootmagic.c **** 
  45:../../tmk_core/common/bootmagic.c ****     /* user-defined checks */
  46:../../tmk_core/common/bootmagic.c ****     hook_bootmagic();
  47:../../tmk_core/common/bootmagic.c **** 
  48:../../tmk_core/common/bootmagic.c ****     /* debug enable */
  49:../../tmk_core/common/bootmagic.c ****     debug_config.raw = eeconfig_read_debug();
  50:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
  51:../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
  52:../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
  53:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
  54:../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
  55:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
  56:../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
  57:../../tmk_core/common/bootmagic.c ****         } else {
  58:../../tmk_core/common/bootmagic.c ****             debug_config.enable = !debug_config.enable;
  59:../../tmk_core/common/bootmagic.c ****         }
  60:../../tmk_core/common/bootmagic.c ****     }
  61:../../tmk_core/common/bootmagic.c ****     eeconfig_write_debug(debug_config.raw);
  62:../../tmk_core/common/bootmagic.c **** 
  63:../../tmk_core/common/bootmagic.c ****     /* keymap config */
  64:../../tmk_core/common/bootmagic.c ****     keymap_config.raw = eeconfig_read_keymap();
  65:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
  66:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
  67:../../tmk_core/common/bootmagic.c ****     }
  68:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
  69:../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
  70:../../tmk_core/common/bootmagic.c ****     }
  71:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
  72:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
  73:../../tmk_core/common/bootmagic.c ****     }
  74:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
  75:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
  76:../../tmk_core/common/bootmagic.c ****     }
  77:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
  78:../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
  79:../../tmk_core/common/bootmagic.c ****     }
  80:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
  81:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
  82:../../tmk_core/common/bootmagic.c ****     }
  83:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
  84:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
  85:../../tmk_core/common/bootmagic.c ****     }
  86:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
  87:../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
  88:../../tmk_core/common/bootmagic.c ****     }
  89:../../tmk_core/common/bootmagic.c ****     eeconfig_write_keymap(keymap_config.raw);
  90:../../tmk_core/common/bootmagic.c **** 
  91:../../tmk_core/common/bootmagic.c **** #ifdef NKRO_ENABLE
  92:../../tmk_core/common/bootmagic.c ****     keyboard_nkro = keymap_config.nkro;
  93:../../tmk_core/common/bootmagic.c **** #endif
  94:../../tmk_core/common/bootmagic.c **** 
  95:../../tmk_core/common/bootmagic.c ****     /* default layer */
  96:../../tmk_core/common/bootmagic.c ****     uint8_t default_layer = 0;
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
  99:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 100:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 101:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 102:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 103:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 104:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 105:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 106:../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 107:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 108:../../tmk_core/common/bootmagic.c ****     } else {
 109:../../tmk_core/common/bootmagic.c ****         default_layer = eeconfig_read_default_layer();
 110:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 111:../../tmk_core/common/bootmagic.c ****     }
 112:../../tmk_core/common/bootmagic.c **** }
 113:../../tmk_core/common/bootmagic.c **** 
 114:../../tmk_core/common/bootmagic.c **** static bool scan_key(uint16_t code)
 115:../../tmk_core/common/bootmagic.c **** {
  15               		.loc 1 115 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 CF92      		push r12
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 12, -2
  22 0002 DF92      		push r13
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 13, -3
  26 0004 EF92      		push r14
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 14, -4
  30 0006 FF92      		push r15
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 15, -5
  34 0008 0F93      		push r16
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 16, -6
  38 000a 1F93      		push r17
  39               	.LCFI5:
  40               		.cfi_def_cfa_offset 8
  41               		.cfi_offset 17, -7
  42 000c CF93      		push r28
  43               	.LCFI6:
  44               		.cfi_def_cfa_offset 9
  45               		.cfi_offset 28, -8
  46               	/* prologue: function */
  47               	/* frame size = 0 */
  48               	/* stack size = 7 */
  49               	.L__stack_usage = 7
  50 000e 6C01      		movw r12,r24
  51               	.LVL1:
  52               	.LBB4:
 116:../../tmk_core/common/bootmagic.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
  53               		.loc 1 116 0
  54 0010 C0E0      		ldi r28,0
  55               	.LVL2:
  56               	.L8:
  57               	.LBB5:
 117:../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
  58               		.loc 1 117 0
  59 0012 8C2F      		mov r24,r28
  60               	.LVL3:
  61 0014 0E94 0000 		call matrix_get_row
  62               	.LVL4:
  63 0018 00E0      		ldi r16,0
  64 001a 10E0      		ldi r17,0
  65               	.LBB6:
 118:../../tmk_core/common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 119:../../tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1<<c)) {
  66               		.loc 1 119 0
  67 001c E82E      		mov r14,r24
  68 001e F12C      		mov r15,__zero_reg__
  69               	.LVL5:
  70               	.L7:
  71 0020 C701      		movw r24,r14
  72               	.LVL6:
  73 0022 002E      		mov r0,r16
  74 0024 00C0      		rjmp 2f
  75               		1:
  76 0026 9595      		asr r25
  77 0028 8795      		ror r24
  78               		2:
  79 002a 0A94      		dec r0
  80 002c 02F4      		brpl 1b
  81 002e 80FF      		sbrs r24,0
  82 0030 00C0      		rjmp .L2
  83               	.LBB7:
 120:../../tmk_core/common/bootmagic.c ****                 // read key from Layer 0
 121:../../tmk_core/common/bootmagic.c ****                 action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
  84               		.loc 1 121 0
  85 0032 602F      		mov r22,r16
  86 0034 7C2F      		mov r23,r28
  87 0036 80E0      		ldi r24,0
  88 0038 0E94 0000 		call action_for_key
  89               	.LVL7:
 122:../../tmk_core/common/bootmagic.c ****                 if (action.code == code ||
  90               		.loc 1 122 0
  91 003c 8C15      		cp r24,r12
  92 003e 9D05      		cpc r25,r13
  93 0040 01F0      		breq .L3
  94               		.loc 1 122 0 is_stmt 0 discriminator 1
  95 0042 292F      		mov r18,r25
  96 0044 207E      		andi r18,lo8(-32)
  97 0046 392F      		mov r19,r25
  98 0048 307C      		andi r19,lo8(-64)
  99 004a 01F0      		breq .L4
 123:../../tmk_core/common/bootmagic.c ****                     ((action.kind.id == ACT_LMODS ||
 124:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_RMODS ||
 125:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_LMODS_TAP ||
 126:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_RMODS_TAP ||
 100               		.loc 1 126 0 is_stmt 1
 101 004c 203A      		cpi r18,lo8(-96)
 102 004e 01F4      		brne .L2
 103               	.L4:
 127:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_LAYER_TAP ||
 128:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_LAYER_TAP_EXT) &&
 104               		.loc 1 128 0
 105 0050 90E0      		ldi r25,0
 106 0052 C816      		cp r12,r24
 107 0054 D906      		cpc r13,r25
 108               	.LVL8:
 109 0056 01F4      		brne .L2
 110               	.LVL9:
 111               	.L3:
 129:../../tmk_core/common/bootmagic.c ****                      action.key.code == code)) {
 130:../../tmk_core/common/bootmagic.c ****                     return true;
 112               		.loc 1 130 0
 113 0058 81E0      		ldi r24,lo8(1)
 114               	.LVL10:
 115 005a 00C0      		rjmp .L6
 116               	.LVL11:
 117               	.L2:
 118 005c 0F5F      		subi r16,-1
 119 005e 1F4F      		sbci r17,-1
 120               	.LVL12:
 121               	.LBE7:
 118:../../tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1<<c)) {
 122               		.loc 1 118 0 discriminator 2
 123 0060 0430      		cpi r16,4
 124 0062 1105      		cpc r17,__zero_reg__
 125 0064 01F4      		brne .L7
 126               	.LBE6:
 127               	.LBE5:
 116:../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 128               		.loc 1 116 0 discriminator 2
 129 0066 CF5F      		subi r28,lo8(-(1))
 130               	.LVL13:
 131 0068 C430      		cpi r28,lo8(4)
 132 006a 01F4      		brne .L8
 133               	.LBE4:
 131:../../tmk_core/common/bootmagic.c ****                 }
 132:../../tmk_core/common/bootmagic.c ****             }
 133:../../tmk_core/common/bootmagic.c ****         }
 134:../../tmk_core/common/bootmagic.c ****     }
 135:../../tmk_core/common/bootmagic.c ****     return false;
 134               		.loc 1 135 0
 135 006c 80E0      		ldi r24,0
 136               	.LVL14:
 137               	.L6:
 138               	/* epilogue start */
 136:../../tmk_core/common/bootmagic.c **** }
 139               		.loc 1 136 0
 140 006e CF91      		pop r28
 141               	.LVL15:
 142 0070 1F91      		pop r17
 143 0072 0F91      		pop r16
 144 0074 FF90      		pop r15
 145 0076 EF90      		pop r14
 146               	.LVL16:
 147 0078 DF90      		pop r13
 148 007a CF90      		pop r12
 149               	.LVL17:
 150 007c 0895      		ret
 151               		.cfi_endproc
 152               	.LFE99:
 154               		.section	.text.bootmagic_scan_key,"ax",@progbits
 155               	.global	bootmagic_scan_key
 157               	bootmagic_scan_key:
 158               	.LFB100:
 137:../../tmk_core/common/bootmagic.c **** 
 138:../../tmk_core/common/bootmagic.c **** bool bootmagic_scan_key(uint16_t code)
 139:../../tmk_core/common/bootmagic.c **** {
 159               		.loc 1 139 0
 160               		.cfi_startproc
 161               	.LVL18:
 162 0000 CF93      		push r28
 163               	.LCFI7:
 164               		.cfi_def_cfa_offset 3
 165               		.cfi_offset 28, -2
 166 0002 DF93      		push r29
 167               	.LCFI8:
 168               		.cfi_def_cfa_offset 4
 169               		.cfi_offset 29, -3
 170               	/* prologue: function */
 171               	/* frame size = 0 */
 172               	/* stack size = 2 */
 173               	.L__stack_usage = 2
 174 0004 EC01      		movw r28,r24
 140:../../tmk_core/common/bootmagic.c ****     if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
 175               		.loc 1 140 0
 176 0006 8CE2      		ldi r24,lo8(44)
 177 0008 90E0      		ldi r25,0
 178               	.LVL19:
 179 000a 0E94 0000 		call scan_key
 180               	.LVL20:
 181 000e 8823      		tst r24
 182 0010 01F0      		breq .L19
 141:../../tmk_core/common/bootmagic.c **** 
 142:../../tmk_core/common/bootmagic.c ****     return scan_key(code);
 183               		.loc 1 142 0
 184 0012 CE01      		movw r24,r28
 185               	/* epilogue start */
 143:../../tmk_core/common/bootmagic.c **** }
 186               		.loc 1 143 0
 187 0014 DF91      		pop r29
 188 0016 CF91      		pop r28
 189               	.LVL21:
 142:../../tmk_core/common/bootmagic.c **** }
 190               		.loc 1 142 0
 191 0018 0C94 0000 		jmp scan_key
 192               	.LVL22:
 193               	.L19:
 194               		.loc 1 143 0
 195 001c 80E0      		ldi r24,0
 196               	/* epilogue start */
 197 001e DF91      		pop r29
 198 0020 CF91      		pop r28
 199               	.LVL23:
 200 0022 0895      		ret
 201               		.cfi_endproc
 202               	.LFE100:
 204               		.section	.text.bootmagic,"ax",@progbits
 205               	.global	bootmagic
 207               	bootmagic:
 208               	.LFB98:
  18:../../tmk_core/common/bootmagic.c ****     /* check signature */
 209               		.loc 1 18 0
 210               		.cfi_startproc
 211 0000 CF93      		push r28
 212               	.LCFI9:
 213               		.cfi_def_cfa_offset 3
 214               		.cfi_offset 28, -2
 215               	/* prologue: function */
 216               	/* frame size = 0 */
 217               	/* stack size = 1 */
 218               	.L__stack_usage = 1
  20:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 219               		.loc 1 20 0
 220 0002 0E94 0000 		call eeconfig_is_enabled
 221               	.LVL24:
 222 0006 8111      		cpse r24,__zero_reg__
 223 0008 00C0      		rjmp .L21
  21:../../tmk_core/common/bootmagic.c ****     }
 224               		.loc 1 21 0
 225 000a 0E94 0000 		call eeconfig_init
 226               	.LVL25:
 227               	.L21:
  18:../../tmk_core/common/bootmagic.c ****     /* check signature */
 228               		.loc 1 18 0 discriminator 1
 229 000e C5E6      		ldi r28,lo8(101)
 230               	.L22:
 231               	.LVL26:
 232 0010 C150      		subi r28,lo8(-(-1))
 233               	.LVL27:
  27:../../tmk_core/common/bootmagic.c ****     print("done.\n");
 234               		.loc 1 27 0 discriminator 1
 235 0012 01F0      		breq .L102
 236               	.LVL28:
  27:../../tmk_core/common/bootmagic.c ****     print("done.\n");
 237               		.loc 1 27 0 is_stmt 0 discriminator 2
 238 0014 0E94 0000 		call matrix_scan
 239               	.LVL29:
 240               	.LBB8:
 241               	.LBB9:
 242               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 243               		.loc 2 187 0 is_stmt 1 discriminator 2
 244 0018 8FE3      		ldi r24,lo8(-25537)
 245 001a 9CE9      		ldi r25,hi8(-25537)
 246 001c 0197      	1:	sbiw r24,1
 247 001e 01F4      		brne 1b
 248 0020 00C0      		rjmp .
 249 0022 0000      		nop
 250 0024 00C0      		rjmp .L22
 251               	.LVL30:
 252               	.L102:
 253               	.LBE9:
 254               	.LBE8:
  31:../../tmk_core/common/bootmagic.c ****         return;
 255               		.loc 1 31 0
 256 0026 89E2      		ldi r24,lo8(41)
 257 0028 90E0      		ldi r25,0
 258 002a 0E94 0000 		call bootmagic_scan_key
 259               	.LVL31:
 260 002e 8111      		cpse r24,__zero_reg__
 261 0030 00C0      		rjmp .L20
  36:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 262               		.loc 1 36 0
 263 0032 8AE2      		ldi r24,lo8(42)
 264 0034 90E0      		ldi r25,0
 265 0036 0E94 0000 		call bootmagic_scan_key
 266               	.LVL32:
 267 003a 8111      		cpse r24,__zero_reg__
  37:../../tmk_core/common/bootmagic.c ****     }
 268               		.loc 1 37 0
 269 003c 0E94 0000 		call eeconfig_init
 270               	.LVL33:
 271               	.L25:
  41:../../tmk_core/common/bootmagic.c ****         bootloader_jump();
 272               		.loc 1 41 0
 273 0040 85E0      		ldi r24,lo8(5)
 274 0042 90E0      		ldi r25,0
 275 0044 0E94 0000 		call bootmagic_scan_key
 276               	.LVL34:
 277 0048 8111      		cpse r24,__zero_reg__
  42:../../tmk_core/common/bootmagic.c ****     }
 278               		.loc 1 42 0
 279 004a 0E94 0000 		call bootloader_jump
 280               	.LVL35:
 281               	.L26:
  46:../../tmk_core/common/bootmagic.c **** 
 282               		.loc 1 46 0
 283 004e 0E94 0000 		call hook_bootmagic
 284               	.LVL36:
  49:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
 285               		.loc 1 49 0
 286 0052 0E94 0000 		call eeconfig_read_debug
 287               	.LVL37:
 288 0056 8093 0000 		sts debug_config,r24
  50:../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
 289               		.loc 1 50 0
 290 005a 87E0      		ldi r24,lo8(7)
 291 005c 90E0      		ldi r25,0
 292 005e 0E94 0000 		call bootmagic_scan_key
 293               	.LVL38:
 294 0062 8823      		tst r24
 295 0064 01F0      		breq .L27
  51:../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
 296               		.loc 1 51 0
 297 0066 8BE1      		ldi r24,lo8(27)
 298 0068 90E0      		ldi r25,0
 299 006a 0E94 0000 		call bootmagic_scan_key
 300               	.LVL39:
 301 006e 8823      		tst r24
 302 0070 01F0      		breq .L28
  52:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
 303               		.loc 1 52 0
 304 0072 8091 0000 		lds r24,debug_config
 305 0076 81FB      		bst r24,1
 306 0078 2227      		clr r18
 307 007a 20F9      		bld r18,0
 308 007c 91E0      		ldi r25,lo8(1)
 309 007e 9227      		eor r25,r18
 310 0080 90FB      		bst r25,0
 311 0082 81F9      		bld r24,1
 312 0084 00C0      		rjmp .L99
 313               	.L28:
  53:../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
 314               		.loc 1 53 0
 315 0086 8EE0      		ldi r24,lo8(14)
 316 0088 90E0      		ldi r25,0
 317 008a 0E94 0000 		call bootmagic_scan_key
 318               	.LVL40:
 319 008e 8823      		tst r24
 320 0090 01F0      		breq .L29
  54:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
 321               		.loc 1 54 0
 322 0092 8091 0000 		lds r24,debug_config
 323 0096 82FB      		bst r24,2
 324 0098 2227      		clr r18
 325 009a 20F9      		bld r18,0
 326 009c 91E0      		ldi r25,lo8(1)
 327 009e 9227      		eor r25,r18
 328 00a0 90FB      		bst r25,0
 329 00a2 82F9      		bld r24,2
 330               	.L99:
 331 00a4 8093 0000 		sts debug_config,r24
 332 00a8 00C0      		rjmp .L27
 333               	.L29:
  55:../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
 334               		.loc 1 55 0
 335 00aa 80E1      		ldi r24,lo8(16)
 336 00ac 90E0      		ldi r25,0
 337 00ae 0E94 0000 		call bootmagic_scan_key
 338               	.LVL41:
 339 00b2 9091 0000 		lds r25,debug_config
 340 00b6 8823      		tst r24
 341 00b8 01F0      		breq .L30
  56:../../tmk_core/common/bootmagic.c ****         } else {
 342               		.loc 1 56 0
 343 00ba 93FB      		bst r25,3
 344 00bc 2227      		clr r18
 345 00be 20F9      		bld r18,0
 346 00c0 81E0      		ldi r24,lo8(1)
 347 00c2 8227      		eor r24,r18
 348 00c4 80FB      		bst r24,0
 349 00c6 93F9      		bld r25,3
 350 00c8 00C0      		rjmp .L100
 351               	.L30:
  58:../../tmk_core/common/bootmagic.c ****         }
 352               		.loc 1 58 0
 353 00ca 892F      		mov r24,r25
 354 00cc 8095      		com r24
 355 00ce 80FB      		bst r24,0
 356 00d0 90F9      		bld r25,0
 357               	.L100:
 358 00d2 9093 0000 		sts debug_config,r25
 359               	.L27:
  61:../../tmk_core/common/bootmagic.c **** 
 360               		.loc 1 61 0
 361 00d6 8091 0000 		lds r24,debug_config
 362 00da 0E94 0000 		call eeconfig_write_debug
 363               	.LVL42:
  64:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
 364               		.loc 1 64 0
 365 00de 0E94 0000 		call eeconfig_read_keymap
 366               	.LVL43:
 367 00e2 8093 0000 		sts keymap_config,r24
  65:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
 368               		.loc 1 65 0
 369 00e6 80EE      		ldi r24,lo8(-32)
 370 00e8 90E0      		ldi r25,0
 371 00ea 0E94 0000 		call bootmagic_scan_key
 372               	.LVL44:
 373 00ee 8823      		tst r24
 374 00f0 01F0      		breq .L31
  66:../../tmk_core/common/bootmagic.c ****     }
 375               		.loc 1 66 0
 376 00f2 8091 0000 		lds r24,keymap_config
 377 00f6 982F      		mov r25,r24
 378 00f8 9095      		com r25
 379 00fa 90FB      		bst r25,0
 380 00fc 80F9      		bld r24,0
 381 00fe 8093 0000 		sts keymap_config,r24
 382               	.L31:
  68:../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
 383               		.loc 1 68 0
 384 0102 89E3      		ldi r24,lo8(57)
 385 0104 90E0      		ldi r25,0
 386 0106 0E94 0000 		call bootmagic_scan_key
 387               	.LVL45:
 388 010a 8823      		tst r24
 389 010c 01F0      		breq .L32
  69:../../tmk_core/common/bootmagic.c ****     }
 390               		.loc 1 69 0
 391 010e 8091 0000 		lds r24,keymap_config
 392 0112 81FB      		bst r24,1
 393 0114 2227      		clr r18
 394 0116 20F9      		bld r18,0
 395 0118 91E0      		ldi r25,lo8(1)
 396 011a 9227      		eor r25,r18
 397 011c 90FB      		bst r25,0
 398 011e 81F9      		bld r24,1
 399 0120 8093 0000 		sts keymap_config,r24
 400               	.L32:
  71:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 401               		.loc 1 71 0
 402 0124 82EE      		ldi r24,lo8(-30)
 403 0126 90E0      		ldi r25,0
 404 0128 0E94 0000 		call bootmagic_scan_key
 405               	.LVL46:
 406 012c 8823      		tst r24
 407 012e 01F0      		breq .L33
  72:../../tmk_core/common/bootmagic.c ****     }
 408               		.loc 1 72 0
 409 0130 8091 0000 		lds r24,keymap_config
 410 0134 82FB      		bst r24,2
 411 0136 2227      		clr r18
 412 0138 20F9      		bld r18,0
 413 013a 91E0      		ldi r25,lo8(1)
 414 013c 9227      		eor r25,r18
 415 013e 90FB      		bst r25,0
 416 0140 82F9      		bld r24,2
 417 0142 8093 0000 		sts keymap_config,r24
 418               	.L33:
  74:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
 419               		.loc 1 74 0
 420 0146 86EE      		ldi r24,lo8(-26)
 421 0148 90E0      		ldi r25,0
 422 014a 0E94 0000 		call bootmagic_scan_key
 423               	.LVL47:
 424 014e 8823      		tst r24
 425 0150 01F0      		breq .L34
  75:../../tmk_core/common/bootmagic.c ****     }
 426               		.loc 1 75 0
 427 0152 8091 0000 		lds r24,keymap_config
 428 0156 83FB      		bst r24,3
 429 0158 2227      		clr r18
 430 015a 20F9      		bld r18,0
 431 015c 91E0      		ldi r25,lo8(1)
 432 015e 9227      		eor r25,r18
 433 0160 90FB      		bst r25,0
 434 0162 83F9      		bld r24,3
 435 0164 8093 0000 		sts keymap_config,r24
 436               	.L34:
  77:../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
 437               		.loc 1 77 0
 438 0168 83EE      		ldi r24,lo8(-29)
 439 016a 90E0      		ldi r25,0
 440 016c 0E94 0000 		call bootmagic_scan_key
 441               	.LVL48:
 442 0170 8823      		tst r24
 443 0172 01F0      		breq .L35
  78:../../tmk_core/common/bootmagic.c ****     }
 444               		.loc 1 78 0
 445 0174 8091 0000 		lds r24,keymap_config
 446 0178 84FB      		bst r24,4
 447 017a 2227      		clr r18
 448 017c 20F9      		bld r18,0
 449 017e 91E0      		ldi r25,lo8(1)
 450 0180 9227      		eor r25,r18
 451 0182 90FB      		bst r25,0
 452 0184 84F9      		bld r24,4
 453 0186 8093 0000 		sts keymap_config,r24
 454               	.L35:
  80:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
 455               		.loc 1 80 0
 456 018a 85E3      		ldi r24,lo8(53)
 457 018c 90E0      		ldi r25,0
 458 018e 0E94 0000 		call bootmagic_scan_key
 459               	.LVL49:
 460 0192 8823      		tst r24
 461 0194 01F0      		breq .L36
  81:../../tmk_core/common/bootmagic.c ****     }
 462               		.loc 1 81 0
 463 0196 8091 0000 		lds r24,keymap_config
 464 019a 85FB      		bst r24,5
 465 019c 2227      		clr r18
 466 019e 20F9      		bld r18,0
 467 01a0 91E0      		ldi r25,lo8(1)
 468 01a2 9227      		eor r25,r18
 469 01a4 90FB      		bst r25,0
 470 01a6 85F9      		bld r24,5
 471 01a8 8093 0000 		sts keymap_config,r24
 472               	.L36:
  83:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
 473               		.loc 1 83 0
 474 01ac 81E3      		ldi r24,lo8(49)
 475 01ae 90E0      		ldi r25,0
 476 01b0 0E94 0000 		call bootmagic_scan_key
 477               	.LVL50:
 478 01b4 8823      		tst r24
 479 01b6 01F0      		breq .L37
  84:../../tmk_core/common/bootmagic.c ****     }
 480               		.loc 1 84 0
 481 01b8 8091 0000 		lds r24,keymap_config
 482 01bc 86FB      		bst r24,6
 483 01be 2227      		clr r18
 484 01c0 20F9      		bld r18,0
 485 01c2 91E0      		ldi r25,lo8(1)
 486 01c4 9227      		eor r25,r18
 487 01c6 90FB      		bst r25,0
 488 01c8 86F9      		bld r24,6
 489 01ca 8093 0000 		sts keymap_config,r24
 490               	.L37:
  86:../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
 491               		.loc 1 86 0
 492 01ce 81E1      		ldi r24,lo8(17)
 493 01d0 90E0      		ldi r25,0
 494 01d2 0E94 0000 		call bootmagic_scan_key
 495               	.LVL51:
 496 01d6 8823      		tst r24
 497 01d8 01F0      		breq .L38
  87:../../tmk_core/common/bootmagic.c ****     }
 498               		.loc 1 87 0
 499 01da 8091 0000 		lds r24,keymap_config
 500 01de 87FB      		bst r24,7
 501 01e0 2227      		clr r18
 502 01e2 20F9      		bld r18,0
 503 01e4 91E0      		ldi r25,lo8(1)
 504 01e6 9227      		eor r25,r18
 505 01e8 90FB      		bst r25,0
 506 01ea 87F9      		bld r24,7
 507 01ec 8093 0000 		sts keymap_config,r24
 508               	.L38:
  89:../../tmk_core/common/bootmagic.c **** 
 509               		.loc 1 89 0
 510 01f0 8091 0000 		lds r24,keymap_config
 511 01f4 0E94 0000 		call eeconfig_write_keymap
 512               	.LVL52:
  92:../../tmk_core/common/bootmagic.c **** #endif
 513               		.loc 1 92 0
 514 01f8 8091 0000 		lds r24,keymap_config
 515 01fc 87FB      		bst r24,7
 516 01fe 8827      		clr r24
 517 0200 80F9      		bld r24,0
 518 0202 8093 0000 		sts keyboard_nkro,r24
 519               	.LVL53:
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
 520               		.loc 1 97 0
 521 0206 87E2      		ldi r24,lo8(39)
 522 0208 90E0      		ldi r25,0
 523 020a 0E94 0000 		call bootmagic_scan_key
 524               	.LVL54:
 525 020e C82F      		mov r28,r24
 526               	.LVL55:
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 527               		.loc 1 98 0
 528 0210 8EE1      		ldi r24,lo8(30)
 529 0212 90E0      		ldi r25,0
 530               	.LVL56:
 531 0214 0E94 0000 		call bootmagic_scan_key
 532               	.LVL57:
 533 0218 8111      		cpse r24,__zero_reg__
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 534               		.loc 1 98 0 is_stmt 0 discriminator 1
 535 021a C260      		ori r28,lo8(2)
 536               	.LVL58:
 537               	.L39:
  99:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 538               		.loc 1 99 0 is_stmt 1
 539 021c 8FE1      		ldi r24,lo8(31)
 540 021e 90E0      		ldi r25,0
 541 0220 0E94 0000 		call bootmagic_scan_key
 542               	.LVL59:
 543 0224 8111      		cpse r24,__zero_reg__
  99:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 544               		.loc 1 99 0 is_stmt 0 discriminator 1
 545 0226 C460      		ori r28,lo8(4)
 546               	.LVL60:
 547               	.L40:
 100:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 548               		.loc 1 100 0 is_stmt 1
 549 0228 80E2      		ldi r24,lo8(32)
 550 022a 90E0      		ldi r25,0
 551 022c 0E94 0000 		call bootmagic_scan_key
 552               	.LVL61:
 553 0230 8111      		cpse r24,__zero_reg__
 100:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 554               		.loc 1 100 0 is_stmt 0 discriminator 1
 555 0232 C860      		ori r28,lo8(8)
 556               	.LVL62:
 557               	.L41:
 101:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 558               		.loc 1 101 0 is_stmt 1
 559 0234 81E2      		ldi r24,lo8(33)
 560 0236 90E0      		ldi r25,0
 561 0238 0E94 0000 		call bootmagic_scan_key
 562               	.LVL63:
 563 023c 8111      		cpse r24,__zero_reg__
 101:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 564               		.loc 1 101 0 is_stmt 0 discriminator 1
 565 023e C061      		ori r28,lo8(16)
 566               	.LVL64:
 567               	.L42:
 102:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 568               		.loc 1 102 0 is_stmt 1
 569 0240 82E2      		ldi r24,lo8(34)
 570 0242 90E0      		ldi r25,0
 571 0244 0E94 0000 		call bootmagic_scan_key
 572               	.LVL65:
 573 0248 8111      		cpse r24,__zero_reg__
 102:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 574               		.loc 1 102 0 is_stmt 0 discriminator 1
 575 024a C062      		ori r28,lo8(32)
 576               	.LVL66:
 577               	.L43:
 103:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 578               		.loc 1 103 0 is_stmt 1
 579 024c 83E2      		ldi r24,lo8(35)
 580 024e 90E0      		ldi r25,0
 581 0250 0E94 0000 		call bootmagic_scan_key
 582               	.LVL67:
 583 0254 8111      		cpse r24,__zero_reg__
 103:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 584               		.loc 1 103 0 is_stmt 0 discriminator 1
 585 0256 C064      		ori r28,lo8(64)
 586               	.LVL68:
 587               	.L44:
 104:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 588               		.loc 1 104 0 is_stmt 1
 589 0258 84E2      		ldi r24,lo8(36)
 590 025a 90E0      		ldi r25,0
 591 025c 0E94 0000 		call bootmagic_scan_key
 592               	.LVL69:
 593 0260 8823      		tst r24
 594 0262 01F0      		breq .L45
 104:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 595               		.loc 1 104 0 is_stmt 0 discriminator 1
 596 0264 C068      		ori r28,lo8(-128)
 597               	.LVL70:
 598 0266 00C0      		rjmp .L46
 599               	.L45:
 105:../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 600               		.loc 1 105 0 is_stmt 1
 601 0268 CC23      		tst r28
 602 026a 01F0      		breq .L47
 603               	.L46:
 106:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 604               		.loc 1 106 0
 605 026c 8C2F      		mov r24,r28
 606 026e 0E94 0000 		call eeconfig_write_default_layer
 607               	.LVL71:
 107:../../tmk_core/common/bootmagic.c ****     } else {
 608               		.loc 1 107 0
 609 0272 6C2F      		mov r22,r28
 610 0274 00C0      		rjmp .L101
 611               	.L47:
 109:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 612               		.loc 1 109 0
 613 0276 0E94 0000 		call eeconfig_read_default_layer
 614               	.LVL72:
 110:../../tmk_core/common/bootmagic.c ****     }
 615               		.loc 1 110 0
 616 027a 682F      		mov r22,r24
 617               	.LVL73:
 618               	.L101:
 619 027c 70E0      		ldi r23,0
 620 027e 80E0      		ldi r24,0
 621 0280 90E0      		ldi r25,0
 622               	/* epilogue start */
 112:../../tmk_core/common/bootmagic.c **** 
 623               		.loc 1 112 0
 624 0282 CF91      		pop r28
 110:../../tmk_core/common/bootmagic.c ****     }
 625               		.loc 1 110 0
 626 0284 0C94 0000 		jmp default_layer_set
 627               	.LVL74:
 628               	.L20:
 629               	/* epilogue start */
 112:../../tmk_core/common/bootmagic.c **** 
 630               		.loc 1 112 0
 631 0288 CF91      		pop r28
 632               	.LVL75:
 633 028a 0895      		ret
 634               		.cfi_endproc
 635               	.LFE98:
 637               		.comm	keymap_config,1,1
 638               		.text
 639               	.Letext0:
 640               		.file 3 "/usr/lib/avr/include/stdint.h"
 641               		.file 4 "../../tmk_core/common/matrix.h"
 642               		.file 5 "../../tmk_core/common/debug.h"
 643               		.file 6 "../../tmk_core/common/keyboard.h"
 644               		.file 7 "../../tmk_core/common/keycode.h"
 645               		.file 8 "../../tmk_core/common/action_code.h"
 646               		.file 9 "../../tmk_core/common/keymap.h"
 647               		.file 10 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 648               		.file 11 "../../tmk_core/common/host.h"
 649               		.file 12 "../../tmk_core/common/action.h"
 650               		.file 13 "../../tmk_core/common/eeconfig.h"
 651               		.file 14 "../../tmk_core/common/bootloader.h"
 652               		.file 15 "../../tmk_core/common/hook.h"
 653               		.file 16 "../../tmk_core/common/action_layer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 bootmagic.c
     /tmp/ccepP2Cp.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccepP2Cp.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccepP2Cp.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccepP2Cp.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccepP2Cp.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccepP2Cp.s:12     .text.scan_key:0000000000000000 scan_key
     /tmp/ccepP2Cp.s:157    .text.bootmagic_scan_key:0000000000000000 bootmagic_scan_key
     /tmp/ccepP2Cp.s:207    .text.bootmagic:0000000000000000 bootmagic
                            *COM*:0000000000000001 keymap_config

UNDEFINED SYMBOLS
matrix_get_row
action_for_key
eeconfig_is_enabled
eeconfig_init
matrix_scan
bootloader_jump
hook_bootmagic
eeconfig_read_debug
debug_config
eeconfig_write_debug
eeconfig_read_keymap
eeconfig_write_keymap
keyboard_nkro
eeconfig_write_default_layer
eeconfig_read_default_layer
default_layer_set
__do_clear_bss
