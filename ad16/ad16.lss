
ad16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  0000341e  000034b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000341e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000be  0080011e  0080011e  000034d0  2**0
                  ALLOC
  3 .noinit       00000004  008001dc  008001dc  000034d0  2**0
                  ALLOC
  4 .stabstr      00000073  00000000  00000000  000034d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003543  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003554  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000898  00000000  00000000  00003594  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000de37  00000000  00000000  00003e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003996  00000000  00000000  00011c63  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000066a5  00000000  00000000  000155f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001584  00000000  00000000  0001bca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003e36  00000000  00000000  0001d224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000070b9  00000000  00000000  0002105a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000009c8  00000000  00000000  00028113  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 04 01 	jmp	0x208	; 0x208 <__ctors_end>
       4:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
       8:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
       c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      10:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      14:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      18:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      1c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      20:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      24:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      28:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      2c:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__vector_11>
      30:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <__vector_12>
      34:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__vector_13>
      38:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      3c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      40:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      44:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      48:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      4c:	0c 94 e2 15 	jmp	0x2bc4	; 0x2bc4 <__vector_19>
      50:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      54:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      58:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      5c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      60:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      64:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      68:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      6c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      70:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      74:	56 07       	cpc	r21, r22
      76:	78 07       	cpc	r23, r24
      78:	6b 08       	sbc	r6, r11
      7a:	78 07       	cpc	r23, r24
      7c:	6b 08       	sbc	r6, r11
      7e:	bd 07       	cpc	r27, r29
      80:	e0 07       	cpc	r30, r16
      82:	6b 08       	sbc	r6, r11
      84:	35 08       	sbc	r3, r5
      86:	48 08       	sbc	r4, r8
      88:	4f 0b       	sbc	r20, r31
      8a:	4f 0b       	sbc	r20, r31
      8c:	79 0b       	sbc	r23, r25
      8e:	79 0b       	sbc	r23, r25
      90:	d4 0b       	sbc	r29, r20
      92:	3d 0e       	add	r3, r29
      94:	3d 0e       	add	r3, r29
      96:	3d 0e       	add	r3, r29
      98:	08 0c       	add	r0, r8
      9a:	3d 0e       	add	r3, r29
      9c:	f3 0c       	add	r15, r3
      9e:	f3 0c       	add	r15, r3
      a0:	b9 0d       	add	r27, r9
      a2:	ce 0d       	add	r28, r14
      a4:	3d 0e       	add	r3, r29
      a6:	2a 0e       	add	r2, r26

000000a8 <__trampolines_end>:
      a8:	02 8a       	std	Z+18, r0	; 0x12
      aa:	01 d4       	rcall	.+2050   	; 0x8ae <Endpoint_Write_Stream_LE+0x16>

000000ac <keymaps>:
      ac:	5f 60 61 54 5c 5d 5e 56 59 5a 5b 55 62 63 c0 54     _`aT\]^VYZ[Ubc.T
      bc:	53 52 01 01 50 51 01 01 01 51 01 01 c1 c2 01 c3     SR..PQ...Q......

000000cc <ProductString>:
      cc:	14 03 56 00 6f 00 79 00 61 00 67 00 65 00 72 00     ..V.o.y.a.g.e.r.
      dc:	31 00 36 00 00 00                                   1.6...

000000e2 <ManufacturerString>:
      e2:	0a 03 61 00 69 00 30 00 33 00 00 00                 ..a.i.0.3...

000000ee <LanguageString>:
      ee:	04 03 09 04                                         ....

000000f2 <ConfigurationDescriptor>:
      f2:	09 02 54 00 03 01 00 a0 32 09 04 00 00 01 03 01     ..T.....2.......
     102:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
     112:	00 0a 09 04 01 00 01 03 00 00 00 09 21 11 01 00     ............!...
     122:	01 22 36 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."6.............
     132:	03 00 00 00 09 21 11 01 00 01 22 39 00 07 05 83     .....!...."9....
     142:	03 20 00 01                                         . ..

00000146 <DeviceDescriptor>:
     146:	12 01 10 01 00 00 00 08 ae fe 46 88 01 00 01 02     ..........F.....
     156:	00 01                                               ..

00000158 <NKROReport>:
     158:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     168:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     178:	91 02 95 01 75 03 91 01 05 07 19 00 29 f7 15 00     ....u.......)...
     188:	25 01 95 f8 75 01 81 02 c0                          %...u....

00000191 <ExtrakeyReport>:
     191:	05 01 09 80 a1 01 85 02 16 81 00 26 b7 00 1a 81     ...........&....
     1a1:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     1b1:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     1c1:	10 95 01 81 00 c0                                   ......

000001c7 <KeyboardReport>:
     1c7:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     1d7:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     1e7:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     1f7:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....
     207:	00                                                  .

00000208 <__ctors_end>:
     208:	11 24       	eor	r1, r1
     20a:	1f be       	out	0x3f, r1	; 63
     20c:	cf ef       	ldi	r28, 0xFF	; 255
     20e:	d4 e0       	ldi	r29, 0x04	; 4
     210:	de bf       	out	0x3e, r29	; 62
     212:	cd bf       	out	0x3d, r28	; 61

00000214 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     214:	04 b6       	in	r0, 0x34	; 52
     216:	03 fe       	sbrs	r0, 3
     218:	27 c0       	rjmp	.+78     	; 0x268 <__do_copy_data>
     21a:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <__bss_end>
     21e:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <__bss_end+0x1>
     222:	a0 91 de 01 	lds	r26, 0x01DE	; 0x8001de <__bss_end+0x2>
     226:	b0 91 df 01 	lds	r27, 0x01DF	; 0x8001df <__bss_end+0x3>
     22a:	87 30       	cpi	r24, 0x07	; 7
     22c:	90 4b       	sbci	r25, 0xB0	; 176
     22e:	a7 40       	sbci	r26, 0x07	; 7
     230:	b0 4b       	sbci	r27, 0xB0	; 176
     232:	d1 f4       	brne	.+52     	; 0x268 <__do_copy_data>
        reset_key = 0;
     234:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <__bss_end>
     238:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <__bss_end+0x1>
     23c:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <__bss_end+0x2>
     240:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <__bss_end+0x3>

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     244:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     246:	84 b7       	in	r24, 0x34	; 52
     248:	87 7f       	andi	r24, 0xF7	; 247
     24a:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	f8 94       	cli
     250:	a8 95       	wdr
     252:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     256:	88 61       	ori	r24, 0x18	; 24
     258:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     25c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     260:	0f be       	out	0x3f, r0	; 63
        wdt_disable();

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     262:	e0 e0       	ldi	r30, 0x00	; 0
     264:	f8 e3       	ldi	r31, 0x38	; 56
     266:	09 95       	icall

00000268 <__do_copy_data>:
     268:	11 e0       	ldi	r17, 0x01	; 1
     26a:	a0 e0       	ldi	r26, 0x00	; 0
     26c:	b1 e0       	ldi	r27, 0x01	; 1
     26e:	ee e1       	ldi	r30, 0x1E	; 30
     270:	f4 e3       	ldi	r31, 0x34	; 52
     272:	02 c0       	rjmp	.+4      	; 0x278 <__do_copy_data+0x10>
     274:	05 90       	lpm	r0, Z+
     276:	0d 92       	st	X+, r0
     278:	ae 31       	cpi	r26, 0x1E	; 30
     27a:	b1 07       	cpc	r27, r17
     27c:	d9 f7       	brne	.-10     	; 0x274 <__do_copy_data+0xc>

0000027e <__do_clear_bss>:
     27e:	21 e0       	ldi	r18, 0x01	; 1
     280:	ae e1       	ldi	r26, 0x1E	; 30
     282:	b1 e0       	ldi	r27, 0x01	; 1
     284:	01 c0       	rjmp	.+2      	; 0x288 <.do_clear_bss_start>

00000286 <.do_clear_bss_loop>:
     286:	1d 92       	st	X+, r1

00000288 <.do_clear_bss_start>:
     288:	ac 3d       	cpi	r26, 0xDC	; 220
     28a:	b2 07       	cpc	r27, r18
     28c:	e1 f7       	brne	.-8      	; 0x286 <.do_clear_bss_loop>
     28e:	0e 94 91 03 	call	0x722	; 0x722 <main>
     292:	0c 94 0d 1a 	jmp	0x341a	; 0x341a <_exit>

00000296 <__bad_interrupt>:
     296:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000029a <unselect_rows>:

inline
bool matrix_is_on(uint8_t row, uint8_t col)
{
    return (matrix[row] & ((matrix_row_t)1<<col));
}
     29a:	84 b1       	in	r24, 0x04	; 4
     29c:	8f 79       	andi	r24, 0x9F	; 159
     29e:	84 b9       	out	0x04, r24	; 4
     2a0:	85 b1       	in	r24, 0x05	; 5
     2a2:	8f 79       	andi	r24, 0x9F	; 159
     2a4:	85 b9       	out	0x05, r24	; 5
     2a6:	8a b1       	in	r24, 0x0a	; 10
     2a8:	8f 7c       	andi	r24, 0xCF	; 207
     2aa:	8a b9       	out	0x0a, r24	; 10
     2ac:	8b b1       	in	r24, 0x0b	; 11
     2ae:	8f 7c       	andi	r24, 0xCF	; 207
     2b0:	8b b9       	out	0x0b, r24	; 11
     2b2:	08 95       	ret

000002b4 <matrix_init>:
     2b4:	0e 94 4d 01 	call	0x29a	; 0x29a <unselect_rows>
     2b8:	84 b1       	in	r24, 0x04	; 4
     2ba:	89 7f       	andi	r24, 0xF9	; 249
     2bc:	84 b9       	out	0x04, r24	; 4
     2be:	85 b1       	in	r24, 0x05	; 5
     2c0:	86 60       	ori	r24, 0x06	; 6
     2c2:	85 b9       	out	0x05, r24	; 5
     2c4:	8a b1       	in	r24, 0x0a	; 10
     2c6:	83 7f       	andi	r24, 0xF3	; 243
     2c8:	8a b9       	out	0x0a, r24	; 10
     2ca:	8b b1       	in	r24, 0x0b	; 11
     2cc:	8c 60       	ori	r24, 0x0C	; 12
     2ce:	8b b9       	out	0x0b, r24	; 11
     2d0:	a2 e2       	ldi	r26, 0x22	; 34
     2d2:	b1 e0       	ldi	r27, 0x01	; 1
     2d4:	1c 92       	st	X, r1
     2d6:	ee e1       	ldi	r30, 0x1E	; 30
     2d8:	f1 e0       	ldi	r31, 0x01	; 1
     2da:	10 82       	st	Z, r1
     2dc:	11 96       	adiw	r26, 0x01	; 1
     2de:	1c 92       	st	X, r1
     2e0:	11 97       	sbiw	r26, 0x01	; 1
     2e2:	11 82       	std	Z+1, r1	; 0x01
     2e4:	12 96       	adiw	r26, 0x02	; 2
     2e6:	1c 92       	st	X, r1
     2e8:	12 97       	sbiw	r26, 0x02	; 2
     2ea:	12 82       	std	Z+2, r1	; 0x02
     2ec:	13 96       	adiw	r26, 0x03	; 3
     2ee:	1c 92       	st	X, r1
     2f0:	13 82       	std	Z+3, r1	; 0x03
     2f2:	08 95       	ret

000002f4 <matrix_scan>:
     2f4:	ff 92       	push	r15
     2f6:	0f 93       	push	r16
     2f8:	1f 93       	push	r17
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	0e e1       	ldi	r16, 0x1E	; 30
     300:	11 e0       	ldi	r17, 0x01	; 1
     302:	c0 e0       	ldi	r28, 0x00	; 0
     304:	d1 e0       	ldi	r29, 0x01	; 1
     306:	85 e0       	ldi	r24, 0x05	; 5
     308:	f8 2e       	mov	r15, r24
     30a:	c2 30       	cpi	r28, 0x02	; 2
     30c:	51 f0       	breq	.+20     	; 0x322 <matrix_scan+0x2e>
     30e:	c3 30       	cpi	r28, 0x03	; 3
     310:	59 f0       	breq	.+22     	; 0x328 <matrix_scan+0x34>
     312:	c1 30       	cpi	r28, 0x01	; 1
     314:	19 f0       	breq	.+6      	; 0x31c <matrix_scan+0x28>
     316:	25 9a       	sbi	0x04, 5	; 4
     318:	2d 98       	cbi	0x05, 5	; 5
     31a:	08 c0       	rjmp	.+16     	; 0x32c <matrix_scan+0x38>
     31c:	26 9a       	sbi	0x04, 6	; 4
     31e:	2e 98       	cbi	0x05, 6	; 5
     320:	05 c0       	rjmp	.+10     	; 0x32c <matrix_scan+0x38>
     322:	54 9a       	sbi	0x0a, 4	; 10
     324:	5c 98       	cbi	0x0b, 4	; 11
     326:	02 c0       	rjmp	.+4      	; 0x32c <matrix_scan+0x38>
     328:	55 9a       	sbi	0x0a, 5	; 10
     32a:	5d 98       	cbi	0x0b, 5	; 11
     32c:	80 ea       	ldi	r24, 0xA0	; 160
     32e:	8a 95       	dec	r24
     330:	f1 f7       	brne	.-4      	; 0x32e <matrix_scan+0x3a>
     332:	83 b1       	in	r24, 0x03	; 3
     334:	86 95       	lsr	r24
     336:	81 70       	andi	r24, 0x01	; 1
     338:	8d 27       	eor	r24, r29
     33a:	1a 99       	sbic	0x03, 2	; 3
     33c:	02 c0       	rjmp	.+4      	; 0x342 <matrix_scan+0x4e>
     33e:	92 e0       	ldi	r25, 0x02	; 2
     340:	01 c0       	rjmp	.+2      	; 0x344 <matrix_scan+0x50>
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	89 2b       	or	r24, r25
     346:	4a 99       	sbic	0x09, 2	; 9
     348:	02 c0       	rjmp	.+4      	; 0x34e <matrix_scan+0x5a>
     34a:	94 e0       	ldi	r25, 0x04	; 4
     34c:	01 c0       	rjmp	.+2      	; 0x350 <matrix_scan+0x5c>
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	89 2b       	or	r24, r25
     352:	4b 99       	sbic	0x09, 3	; 9
     354:	02 c0       	rjmp	.+4      	; 0x35a <matrix_scan+0x66>
     356:	98 e0       	ldi	r25, 0x08	; 8
     358:	01 c0       	rjmp	.+2      	; 0x35c <matrix_scan+0x68>
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	89 2b       	or	r24, r25
     35e:	f8 01       	movw	r30, r16
     360:	90 81       	ld	r25, Z
     362:	98 17       	cp	r25, r24
     364:	19 f0       	breq	.+6      	; 0x36c <matrix_scan+0x78>
     366:	80 83       	st	Z, r24
     368:	f0 92 00 01 	sts	0x0100, r15	; 0x800100 <__data_start>
     36c:	0e 94 4d 01 	call	0x29a	; 0x29a <unselect_rows>
     370:	cf 5f       	subi	r28, 0xFF	; 255
     372:	0f 5f       	subi	r16, 0xFF	; 255
     374:	1f 4f       	sbci	r17, 0xFF	; 255
     376:	c4 30       	cpi	r28, 0x04	; 4
     378:	41 f6       	brne	.-112    	; 0x30a <matrix_scan+0x16>
     37a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     37e:	88 23       	and	r24, r24
     380:	e1 f0       	breq	.+56     	; 0x3ba <matrix_scan+0xc6>
     382:	81 50       	subi	r24, 0x01	; 1
     384:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     388:	88 23       	and	r24, r24
     38a:	39 f0       	breq	.+14     	; 0x39a <matrix_scan+0xa6>
     38c:	8f e9       	ldi	r24, 0x9F	; 159
     38e:	9f e0       	ldi	r25, 0x0F	; 15
     390:	01 97       	sbiw	r24, 0x01	; 1
     392:	f1 f7       	brne	.-4      	; 0x390 <matrix_scan+0x9c>
     394:	00 c0       	rjmp	.+0      	; 0x396 <matrix_scan+0xa2>
     396:	00 00       	nop
     398:	10 c0       	rjmp	.+32     	; 0x3ba <matrix_scan+0xc6>
     39a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     39e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <matrix>
     3a2:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <__data_end+0x1>
     3a6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <matrix+0x1>
     3aa:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end+0x2>
     3ae:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <matrix+0x2>
     3b2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__data_end+0x3>
     3b6:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <matrix+0x3>
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	df 91       	pop	r29
     3be:	cf 91       	pop	r28
     3c0:	1f 91       	pop	r17
     3c2:	0f 91       	pop	r16
     3c4:	ff 90       	pop	r15
     3c6:	08 95       	ret

000003c8 <matrix_get_row>:

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
     3c8:	e8 2f       	mov	r30, r24
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	ee 5d       	subi	r30, 0xDE	; 222
     3ce:	fe 4f       	sbci	r31, 0xFE	; 254
}
     3d0:	80 81       	ld	r24, Z
     3d2:	08 95       	ret

000003d4 <matrix_print>:

void matrix_print(void)
{
     3d4:	08 95       	ret

000003d6 <backlight_set>:
#include <avr/io.h>
#include "backlight.h"


void backlight_set(uint8_t level) {
    DDRB |= (1<<7);
     3d6:	27 9a       	sbi	0x04, 7	; 4

    if (level) { // Backlight on
     3d8:	88 23       	and	r24, r24
     3da:	11 f0       	breq	.+4      	; 0x3e0 <backlight_set+0xa>
        PORTB |= (1<<7);
     3dc:	2f 9a       	sbi	0x05, 7	; 5
     3de:	08 95       	ret
    } else { // Backlight off
        PORTB &= ~(1<<7);
     3e0:	2f 98       	cbi	0x05, 7	; 5
     3e2:	08 95       	ret

000003e4 <led_set>:
#include "stdint.h"
#include "led.h"


void led_set(uint8_t usb_led)
{
     3e4:	08 95       	ret

000003e6 <keyboard_leds>:
{
#ifdef LUFA_DEBUG_SUART
    xmit(c);
#endif
    return 0;
}
     3e6:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <keyboard_led_stats>
     3ea:	08 95       	ret

000003ec <send_mouse>:
     3ec:	08 95       	ret

000003ee <send_consumer>:
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	00 d0       	rcall	.+0      	; 0x3f4 <send_consumer+0x6>
     3f4:	1f 92       	push	r1
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
     3fa:	20 91 d1 01 	lds	r18, 0x01D1	; 0x8001d1 <USB_DeviceState>
     3fe:	24 30       	cpi	r18, 0x04	; 4
     400:	21 f5       	brne	.+72     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     402:	23 e0       	ldi	r18, 0x03	; 3
     404:	29 83       	std	Y+1, r18	; 0x01
     406:	9b 83       	std	Y+3, r25	; 0x03
     408:	8a 83       	std	Y+2, r24	; 0x02
     40a:	82 e0       	ldi	r24, 0x02	; 2
     40c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     410:	8f ef       	ldi	r24, 0xFF	; 255
     412:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     416:	81 50       	subi	r24, 0x01	; 1
     418:	95 fd       	sbrc	r25, 5
     41a:	06 c0       	rjmp	.+12     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     41c:	95 ed       	ldi	r25, 0xD5	; 213
     41e:	9a 95       	dec	r25
     420:	f1 f7       	brne	.-4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     422:	00 00       	nop
     424:	81 11       	cpse	r24, r1
     426:	f5 cf       	rjmp	.-22     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     428:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     42c:	85 ff       	sbrs	r24, 5
     42e:	0d c0       	rjmp	.+26     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     430:	40 e0       	ldi	r20, 0x00	; 0
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	63 e0       	ldi	r22, 0x03	; 3
     436:	70 e0       	ldi	r23, 0x00	; 0
     438:	ce 01       	movw	r24, r28
     43a:	01 96       	adiw	r24, 0x01	; 1
     43c:	0e 94 4c 04 	call	0x898	; 0x898 <Endpoint_Write_Stream_LE>
     440:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     444:	8e 77       	andi	r24, 0x7E	; 126
     446:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     44a:	0f 90       	pop	r0
     44c:	0f 90       	pop	r0
     44e:	0f 90       	pop	r0
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <send_system>:
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	00 d0       	rcall	.+0      	; 0x45c <send_system+0x6>
     45c:	1f 92       	push	r1
     45e:	cd b7       	in	r28, 0x3d	; 61
     460:	de b7       	in	r29, 0x3e	; 62
     462:	9c 01       	movw	r18, r24
     464:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <USB_DeviceState>
     468:	84 30       	cpi	r24, 0x04	; 4
     46a:	19 f5       	brne	.+70     	; 0x4b2 <send_system+0x5c>
     46c:	92 e0       	ldi	r25, 0x02	; 2
     46e:	99 83       	std	Y+1, r25	; 0x01
     470:	3b 83       	std	Y+3, r19	; 0x03
     472:	2a 83       	std	Y+2, r18	; 0x02
     474:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     478:	8f ef       	ldi	r24, 0xFF	; 255
     47a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     47e:	81 50       	subi	r24, 0x01	; 1
     480:	95 fd       	sbrc	r25, 5
     482:	06 c0       	rjmp	.+12     	; 0x490 <send_system+0x3a>
     484:	95 ed       	ldi	r25, 0xD5	; 213
     486:	9a 95       	dec	r25
     488:	f1 f7       	brne	.-4      	; 0x486 <send_system+0x30>
     48a:	00 00       	nop
     48c:	81 11       	cpse	r24, r1
     48e:	f5 cf       	rjmp	.-22     	; 0x47a <send_system+0x24>
     490:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     494:	85 ff       	sbrs	r24, 5
     496:	0d c0       	rjmp	.+26     	; 0x4b2 <send_system+0x5c>
     498:	40 e0       	ldi	r20, 0x00	; 0
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	63 e0       	ldi	r22, 0x03	; 3
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	ce 01       	movw	r24, r28
     4a2:	01 96       	adiw	r24, 0x01	; 1
     4a4:	0e 94 4c 04 	call	0x898	; 0x898 <Endpoint_Write_Stream_LE>
     4a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     4ac:	8e 77       	andi	r24, 0x7E	; 126
     4ae:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	08 95       	ret

000004be <send_keyboard>:
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	20 91 d1 01 	lds	r18, 0x01D1	; 0x8001d1 <USB_DeviceState>
     4c6:	24 30       	cpi	r18, 0x04	; 4
     4c8:	09 f0       	breq	.+2      	; 0x4cc <send_keyboard+0xe>
     4ca:	48 c0       	rjmp	.+144    	; 0x55c <__stack+0x5d>
     4cc:	ec 01       	movw	r28, r24
     4ce:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <keyboard_protocol>
     4d2:	88 23       	and	r24, r24
     4d4:	e1 f0       	breq	.+56     	; 0x50e <__stack+0xf>
     4d6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <keyboard_nkro>
     4da:	88 23       	and	r24, r24
     4dc:	c1 f0       	breq	.+48     	; 0x50e <__stack+0xf>
     4de:	83 e0       	ldi	r24, 0x03	; 3
     4e0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     4e4:	8f ef       	ldi	r24, 0xFF	; 255
     4e6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     4ea:	81 50       	subi	r24, 0x01	; 1
     4ec:	95 fd       	sbrc	r25, 5
     4ee:	06 c0       	rjmp	.+12     	; 0x4fc <send_keyboard+0x3e>
     4f0:	9a e2       	ldi	r25, 0x2A	; 42
     4f2:	9a 95       	dec	r25
     4f4:	f1 f7       	brne	.-4      	; 0x4f2 <send_keyboard+0x34>
     4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <send_keyboard+0x3a>
     4f8:	81 11       	cpse	r24, r1
     4fa:	f5 cf       	rjmp	.-22     	; 0x4e6 <send_keyboard+0x28>
     4fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     500:	85 ff       	sbrs	r24, 5
     502:	2c c0       	rjmp	.+88     	; 0x55c <__stack+0x5d>
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	60 e2       	ldi	r22, 0x20	; 32
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	17 c0       	rjmp	.+46     	; 0x53c <__stack+0x3d>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     514:	8f ef       	ldi	r24, 0xFF	; 255
     516:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     51a:	81 50       	subi	r24, 0x01	; 1
     51c:	95 fd       	sbrc	r25, 5
     51e:	06 c0       	rjmp	.+12     	; 0x52c <__stack+0x2d>
     520:	95 ed       	ldi	r25, 0xD5	; 213
     522:	9a 95       	dec	r25
     524:	f1 f7       	brne	.-4      	; 0x522 <__stack+0x23>
     526:	00 00       	nop
     528:	81 11       	cpse	r24, r1
     52a:	f5 cf       	rjmp	.-22     	; 0x516 <__stack+0x17>
     52c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     530:	85 ff       	sbrs	r24, 5
     532:	14 c0       	rjmp	.+40     	; 0x55c <__stack+0x5d>
     534:	40 e0       	ldi	r20, 0x00	; 0
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	68 e0       	ldi	r22, 0x08	; 8
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	ce 01       	movw	r24, r28
     53e:	0e 94 4c 04 	call	0x898	; 0x898 <Endpoint_Write_Stream_LE>
     542:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     546:	8e 77       	andi	r24, 0x7E	; 126
     548:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     54c:	80 e2       	ldi	r24, 0x20	; 32
     54e:	fe 01       	movw	r30, r28
     550:	a7 e2       	ldi	r26, 0x27	; 39
     552:	b1 e0       	ldi	r27, 0x01	; 1
     554:	01 90       	ld	r0, Z+
     556:	0d 92       	st	X+, r0
     558:	8a 95       	dec	r24
     55a:	e1 f7       	brne	.-8      	; 0x554 <__stack+0x55>
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	08 95       	ret

00000562 <EVENT_USB_Device_Reset>:
     562:	08 95       	ret

00000564 <EVENT_USB_Device_ConfigurationChanged>:
     564:	42 e0       	ldi	r20, 0x02	; 2
     566:	61 ec       	ldi	r22, 0xC1	; 193
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Endpoint_ConfigureEndpoint_Prv>
     56e:	42 e0       	ldi	r20, 0x02	; 2
     570:	61 ec       	ldi	r22, 0xC1	; 193
     572:	82 e0       	ldi	r24, 0x02	; 2
     574:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Endpoint_ConfigureEndpoint_Prv>
     578:	42 e2       	ldi	r20, 0x22	; 34
     57a:	61 ec       	ldi	r22, 0xC1	; 193
     57c:	83 e0       	ldi	r24, 0x03	; 3
     57e:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <Endpoint_ConfigureEndpoint_Prv>

00000582 <EVENT_USB_Device_ControlRequest>:
     582:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <USB_ControlRequest+0x1>
     586:	83 30       	cpi	r24, 0x03	; 3
     588:	09 f4       	brne	.+2      	; 0x58c <EVENT_USB_Device_ControlRequest+0xa>
     58a:	55 c0       	rjmp	.+170    	; 0x636 <EVENT_USB_Device_ControlRequest+0xb4>
     58c:	30 f4       	brcc	.+12     	; 0x59a <EVENT_USB_Device_ControlRequest+0x18>
     58e:	81 30       	cpi	r24, 0x01	; 1
     590:	71 f0       	breq	.+28     	; 0x5ae <EVENT_USB_Device_ControlRequest+0x2c>
     592:	82 30       	cpi	r24, 0x02	; 2
     594:	09 f4       	brne	.+2      	; 0x598 <EVENT_USB_Device_ControlRequest+0x16>
     596:	8e c0       	rjmp	.+284    	; 0x6b4 <EVENT_USB_Device_ControlRequest+0x132>
     598:	08 95       	ret
     59a:	8a 30       	cpi	r24, 0x0A	; 10
     59c:	09 f4       	brne	.+2      	; 0x5a0 <EVENT_USB_Device_ControlRequest+0x1e>
     59e:	7a c0       	rjmp	.+244    	; 0x694 <EVENT_USB_Device_ControlRequest+0x112>
     5a0:	8b 30       	cpi	r24, 0x0B	; 11
     5a2:	09 f4       	brne	.+2      	; 0x5a6 <EVENT_USB_Device_ControlRequest+0x24>
     5a4:	60 c0       	rjmp	.+192    	; 0x666 <EVENT_USB_Device_ControlRequest+0xe4>
     5a6:	89 30       	cpi	r24, 0x09	; 9
     5a8:	09 f0       	breq	.+2      	; 0x5ac <EVENT_USB_Device_ControlRequest+0x2a>
     5aa:	9c c0       	rjmp	.+312    	; 0x6e4 <EVENT_USB_Device_ControlRequest+0x162>
     5ac:	20 c0       	rjmp	.+64     	; 0x5ee <EVENT_USB_Device_ControlRequest+0x6c>
     5ae:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <USB_ControlRequest>
     5b2:	81 3a       	cpi	r24, 0xA1	; 161
     5b4:	09 f0       	breq	.+2      	; 0x5b8 <EVENT_USB_Device_ControlRequest+0x36>
     5b6:	96 c0       	rjmp	.+300    	; 0x6e4 <EVENT_USB_Device_ControlRequest+0x162>
     5b8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     5bc:	87 7f       	andi	r24, 0xF7	; 247
     5be:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     5c2:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <USB_ControlRequest+0x4>
     5c6:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <USB_ControlRequest+0x5>
     5ca:	89 2b       	or	r24, r25
     5cc:	21 f4       	brne	.+8      	; 0x5d6 <EVENT_USB_Device_ControlRequest+0x54>
     5ce:	60 e2       	ldi	r22, 0x20	; 32
     5d0:	87 e2       	ldi	r24, 0x27	; 39
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	03 c0       	rjmp	.+6      	; 0x5dc <EVENT_USB_Device_ControlRequest+0x5a>
     5d6:	60 e0       	ldi	r22, 0x00	; 0
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	0e 94 97 04 	call	0x92e	; 0x92e <Endpoint_Write_Control_Stream_LE>
     5e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     5e6:	8b 77       	andi	r24, 0x7B	; 123
     5e8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     5ec:	08 95       	ret
     5ee:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <USB_ControlRequest>
     5f2:	81 32       	cpi	r24, 0x21	; 33
     5f4:	09 f0       	breq	.+2      	; 0x5f8 <EVENT_USB_Device_ControlRequest+0x76>
     5f6:	76 c0       	rjmp	.+236    	; 0x6e4 <EVENT_USB_Device_ControlRequest+0x162>
     5f8:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <USB_ControlRequest+0x4>
     5fc:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <USB_ControlRequest+0x5>
     600:	00 97       	sbiw	r24, 0x00	; 0
     602:	19 f0       	breq	.+6      	; 0x60a <EVENT_USB_Device_ControlRequest+0x88>
     604:	02 97       	sbiw	r24, 0x02	; 2
     606:	09 f0       	breq	.+2      	; 0x60a <EVENT_USB_Device_ControlRequest+0x88>
     608:	6d c0       	rjmp	.+218    	; 0x6e4 <EVENT_USB_Device_ControlRequest+0x162>
     60a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     60e:	87 7f       	andi	r24, 0xF7	; 247
     610:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     614:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     618:	82 fd       	sbrc	r24, 2
     61a:	05 c0       	rjmp	.+10     	; 0x626 <EVENT_USB_Device_ControlRequest+0xa4>
     61c:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <USB_DeviceState>
     620:	81 11       	cpse	r24, r1
     622:	f8 cf       	rjmp	.-16     	; 0x614 <EVENT_USB_Device_ControlRequest+0x92>
     624:	5f c0       	rjmp	.+190    	; 0x6e4 <EVENT_USB_Device_ControlRequest+0x162>
     626:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     62a:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <keyboard_led_stats>
     62e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     632:	8b 77       	andi	r24, 0x7B	; 123
     634:	53 c0       	rjmp	.+166    	; 0x6dc <EVENT_USB_Device_ControlRequest+0x15a>
     636:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <USB_ControlRequest>
     63a:	81 3a       	cpi	r24, 0xA1	; 161
     63c:	09 f0       	breq	.+2      	; 0x640 <EVENT_USB_Device_ControlRequest+0xbe>
     63e:	52 c0       	rjmp	.+164    	; 0x6e4 <EVENT_USB_Device_ControlRequest+0x162>
     640:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <USB_ControlRequest+0x4>
     644:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <USB_ControlRequest+0x5>
     648:	89 2b       	or	r24, r25
     64a:	09 f0       	breq	.+2      	; 0x64e <EVENT_USB_Device_ControlRequest+0xcc>
     64c:	4b c0       	rjmp	.+150    	; 0x6e4 <EVENT_USB_Device_ControlRequest+0x162>
     64e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     652:	87 7f       	andi	r24, 0xF7	; 247
     654:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     658:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     65c:	80 ff       	sbrs	r24, 0
     65e:	fc cf       	rjmp	.-8      	; 0x658 <EVENT_USB_Device_ControlRequest+0xd6>
     660:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <keyboard_protocol>
     664:	36 c0       	rjmp	.+108    	; 0x6d2 <EVENT_USB_Device_ControlRequest+0x150>
     666:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <USB_ControlRequest>
     66a:	81 32       	cpi	r24, 0x21	; 33
     66c:	d9 f5       	brne	.+118    	; 0x6e4 <EVENT_USB_Device_ControlRequest+0x162>
     66e:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <USB_ControlRequest+0x4>
     672:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <USB_ControlRequest+0x5>
     676:	89 2b       	or	r24, r25
     678:	a9 f5       	brne	.+106    	; 0x6e4 <EVENT_USB_Device_ControlRequest+0x162>
     67a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     67e:	87 7f       	andi	r24, 0xF7	; 247
     680:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     684:	0e 94 85 05 	call	0xb0a	; 0xb0a <Endpoint_ClearStatusStage>
     688:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <USB_ControlRequest+0x2>
     68c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <keyboard_protocol>
     690:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <clear_keyboard>
     694:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <USB_ControlRequest>
     698:	81 32       	cpi	r24, 0x21	; 33
     69a:	21 f5       	brne	.+72     	; 0x6e4 <EVENT_USB_Device_ControlRequest+0x162>
     69c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     6a0:	87 7f       	andi	r24, 0xF7	; 247
     6a2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     6a6:	0e 94 85 05 	call	0xb0a	; 0xb0a <Endpoint_ClearStatusStage>
     6aa:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <USB_ControlRequest+0x3>
     6ae:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <keyboard_idle>
     6b2:	08 95       	ret
     6b4:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <USB_ControlRequest>
     6b8:	81 3a       	cpi	r24, 0xA1	; 161
     6ba:	a1 f4       	brne	.+40     	; 0x6e4 <EVENT_USB_Device_ControlRequest+0x162>
     6bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     6c0:	87 7f       	andi	r24, 0xF7	; 247
     6c2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     6c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     6ca:	80 ff       	sbrs	r24, 0
     6cc:	fc cf       	rjmp	.-8      	; 0x6c6 <EVENT_USB_Device_ControlRequest+0x144>
     6ce:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <keyboard_idle>
     6d2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     6d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     6da:	8e 77       	andi	r24, 0x7E	; 126
     6dc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     6e0:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <Endpoint_ClearStatusStage>
     6e4:	08 95       	ret

000006e6 <hook_late_init>:
/* hooks */
__attribute__((weak))
void hook_early_init(void) {}

__attribute__((weak))
void hook_late_init(void) {}
     6e6:	08 95       	ret

000006e8 <hook_early_init>:
     6e8:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <hook_late_init>

000006ec <hook_usb_suspend_entry>:
void hook_usb_suspend_entry(void)
{
    // Turn LED off to save power
    // Set 0 with putting aside status before suspend and restore
    // it after wakeup, then LED is updated at keyboard_task() in main loop
    _led_stats = keyboard_led_stats;
     6ec:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <keyboard_led_stats>
     6f0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <_led_stats>
    keyboard_led_stats = 0;
     6f4:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <keyboard_led_stats>
    led_set(keyboard_led_stats);
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <led_set>

    matrix_clear();
     6fe:	0e 94 65 09 	call	0x12ca	; 0x12ca <matrix_clear>
    clear_keyboard();
     702:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <clear_keyboard>

00000706 <EVENT_USB_Device_Suspend>:
void EVENT_USB_Device_Suspend()
{
#ifdef LUFA_DEBUG
    print("[S]");
#endif
    hook_usb_suspend_entry();
     706:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <hook_usb_suspend_entry>

0000070a <hook_usb_suspend_loop>:
}

__attribute__((weak))
void hook_usb_suspend_loop(void)
{
    suspend_power_down();
     70a:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <suspend_power_down>
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
     70e:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <USB_Device_RemoteWakeupEnabled>
     712:	88 23       	and	r24, r24
     714:	29 f0       	breq	.+10     	; 0x720 <hook_usb_suspend_loop+0x16>
     716:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <suspend_wakeup_condition>
     71a:	81 11       	cpse	r24, r1
        USB_Device_SendRemoteWakeup();
     71c:	0c 94 36 04 	jmp	0x86c	; 0x86c <USB_Device_SendRemoteWakeup>
     720:	08 95       	ret

00000722 <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
     722:	84 b7       	in	r24, 0x34	; 52
     724:	87 7f       	andi	r24, 0xF7	; 247
     726:	84 bf       	out	0x34, r24	; 52
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	a8 95       	wdr
     72e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     732:	88 61       	ori	r24, 0x18	; 24
     734:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     738:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     73c:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	80 e8       	ldi	r24, 0x80	; 128
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	f8 94       	cli
     746:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
     74a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
     74e:	0f be       	out	0x3f, r0	; 63
    SUART_OUT_PORT |= (1<<SUART_OUT_BIT);
#endif
    print_set_sendchar(sendchar);
    print("\r\ninit\n");

    hook_early_init();
     750:	0e 94 74 03 	call	0x6e8	; 0x6e8 <hook_early_init>
    keyboard_setup();
     754:	0e 94 cc 08 	call	0x1198	; 0x1198 <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
     758:	0e 94 d7 05 	call	0xbae	; 0xbae <USB_Disable>

    USB_Init();
     75c:	0e 94 2a 06 	call	0xc54	; 0xc54 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     760:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     764:	84 60       	ori	r24, 0x04	; 4
     766:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    print("\r\ninit\n");

    hook_early_init();
    keyboard_setup();
    setup_usb();
    sei();
     76a:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
     76c:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <USB_DeviceState>
     770:	84 30       	cpi	r24, 0x04	; 4
     772:	e1 f7       	brne	.-8      	; 0x76c <main+0x4a>
     774:	81 ed       	ldi	r24, 0xD1	; 209
     776:	97 e0       	ldi	r25, 0x07	; 7
     778:	01 97       	sbiw	r24, 0x01	; 1
    }

    /* wait for Console startup */
    // TODO: long delay often works anyhoo but proper startup would be better
    uint16_t delay = 2000;
    while (delay--) {
     77a:	39 f0       	breq	.+14     	; 0x78a <main+0x68>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     77c:	ef e9       	ldi	r30, 0x9F	; 159
     77e:	ff e0       	ldi	r31, 0x0F	; 15
     780:	31 97       	sbiw	r30, 0x01	; 1
     782:	f1 f7       	brne	.-4      	; 0x780 <main+0x5e>
     784:	00 c0       	rjmp	.+0      	; 0x786 <main+0x64>
     786:	00 00       	nop
     788:	f7 cf       	rjmp	.-18     	; 0x778 <main+0x56>
    }

    print("USB configured.\n");

    /* init modules */
    keyboard_init();
     78a:	0e 94 ce 08 	call	0x119c	; 0x119c <keyboard_init>
    host_set_driver(&lufa_driver);
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	0e 94 84 08 	call	0x1108	; 0x1108 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    hook_late_init();
     796:	0e 94 73 03 	call	0x6e6	; 0x6e6 <hook_late_init>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
     79a:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <USB_DeviceState>
     79e:	85 30       	cpi	r24, 0x05	; 5
     7a0:	19 f4       	brne	.+6      	; 0x7a8 <main+0x86>
#ifdef LUFA_DEBUG
            print("[s]");
#endif
            hook_usb_suspend_loop();
     7a2:	0e 94 85 03 	call	0x70a	; 0x70a <hook_usb_suspend_loop>
     7a6:	f9 cf       	rjmp	.-14     	; 0x79a <main+0x78>
        }

        keyboard_task();
     7a8:	0e 94 d6 08 	call	0x11ac	; 0x11ac <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
     7ac:	f6 cf       	rjmp	.-20     	; 0x79a <main+0x78>

000007ae <hook_usb_wakeup>:
}

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
     7ae:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <suspend_wakeup_init>
    // Restore LED status
    // BIOS/grub won't recognize/enumerate if led_set() takes long(around 40ms?)
    // Converters fall into the case and miss wakeup event(timeout to reply?) in the end.
    //led_set(host_keyboard_leds());
    // Instead, restore stats and update at keyboard_task() in main loop
    keyboard_led_stats = _led_stats;
     7b2:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <_led_stats>
     7b6:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <keyboard_led_stats>
     7ba:	08 95       	ret

000007bc <EVENT_USB_Device_WakeUp>:
void EVENT_USB_Device_WakeUp()
{
#ifdef LUFA_DEBUG
    print("[W]");
#endif
    hook_usb_wakeup();
     7bc:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <hook_usb_wakeup>

000007c0 <CALLBACK_USB_GetDescriptor>:
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
     7c0:	29 2f       	mov	r18, r25
     7c2:	33 27       	eor	r19, r19
     7c4:	23 30       	cpi	r18, 0x03	; 3
     7c6:	31 05       	cpc	r19, r1
     7c8:	c9 f0       	breq	.+50     	; 0x7fc <CALLBACK_USB_GetDescriptor+0x3c>
     7ca:	60 f4       	brcc	.+24     	; 0x7e4 <CALLBACK_USB_GetDescriptor+0x24>
     7cc:	21 30       	cpi	r18, 0x01	; 1
     7ce:	31 05       	cpc	r19, r1
     7d0:	81 f0       	breq	.+32     	; 0x7f2 <CALLBACK_USB_GetDescriptor+0x32>
     7d2:	22 30       	cpi	r18, 0x02	; 2
     7d4:	31 05       	cpc	r19, r1
     7d6:	09 f0       	breq	.+2      	; 0x7da <CALLBACK_USB_GetDescriptor+0x1a>
     7d8:	41 c0       	rjmp	.+130    	; 0x85c <CALLBACK_USB_GetDescriptor+0x9c>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
     7da:	84 e5       	ldi	r24, 0x54	; 84
     7dc:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
     7de:	22 ef       	ldi	r18, 0xF2	; 242
     7e0:	30 e0       	ldi	r19, 0x00	; 0
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
     7e2:	40 c0       	rjmp	.+128    	; 0x864 <CALLBACK_USB_GetDescriptor+0xa4>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
     7e4:	21 32       	cpi	r18, 0x21	; 33
     7e6:	31 05       	cpc	r19, r1
     7e8:	e1 f0       	breq	.+56     	; 0x822 <CALLBACK_USB_GetDescriptor+0x62>
     7ea:	22 32       	cpi	r18, 0x22	; 34
     7ec:	31 05       	cpc	r19, r1
     7ee:	31 f1       	breq	.+76     	; 0x83c <CALLBACK_USB_GetDescriptor+0x7c>
     7f0:	35 c0       	rjmp	.+106    	; 0x85c <CALLBACK_USB_GetDescriptor+0x9c>
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
     7f2:	82 e1       	ldi	r24, 0x12	; 18
     7f4:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
     7f6:	26 e4       	ldi	r18, 0x46	; 70
     7f8:	31 e0       	ldi	r19, 0x01	; 1
     7fa:	34 c0       	rjmp	.+104    	; 0x864 <CALLBACK_USB_GetDescriptor+0xa4>
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
     7fc:	99 27       	eor	r25, r25
     7fe:	81 30       	cpi	r24, 0x01	; 1
     800:	91 05       	cpc	r25, r1
     802:	49 f0       	breq	.+18     	; 0x816 <CALLBACK_USB_GetDescriptor+0x56>
     804:	28 f0       	brcs	.+10     	; 0x810 <CALLBACK_USB_GetDescriptor+0x50>
     806:	02 97       	sbiw	r24, 0x02	; 2
     808:	49 f5       	brne	.+82     	; 0x85c <CALLBACK_USB_GetDescriptor+0x9c>
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
     80a:	ec ec       	ldi	r30, 0xCC	; 204
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	05 c0       	rjmp	.+10     	; 0x81a <CALLBACK_USB_GetDescriptor+0x5a>
        case DTYPE_String:
            switch (DescriptorIndex )
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
     810:	ee ee       	ldi	r30, 0xEE	; 238
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	02 c0       	rjmp	.+4      	; 0x81a <CALLBACK_USB_GetDescriptor+0x5a>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     816:	e2 ee       	ldi	r30, 0xE2	; 226
     818:	f0 e0       	ldi	r31, 0x00	; 0
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
     81a:	84 91       	lpm	r24, Z
     81c:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
     81e:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
     820:	21 c0       	rjmp	.+66     	; 0x864 <CALLBACK_USB_GetDescriptor+0xa4>
     822:	63 30       	cpi	r22, 0x03	; 3
     824:	d8 f4       	brcc	.+54     	; 0x85c <CALLBACK_USB_GetDescriptor+0x9c>
     826:	e6 2f       	mov	r30, r22
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	ee 0f       	add	r30, r30
     82c:	ff 1f       	adc	r31, r31
     82e:	e8 5e       	subi	r30, 0xE8	; 232
     830:	fe 4f       	sbci	r31, 0xFE	; 254
     832:	20 81       	ld	r18, Z
     834:	31 81       	ldd	r19, Z+1	; 0x01
     836:	89 e0       	ldi	r24, 0x09	; 9
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	14 c0       	rjmp	.+40     	; 0x864 <CALLBACK_USB_GetDescriptor+0xa4>
     83c:	63 30       	cpi	r22, 0x03	; 3
     83e:	70 f4       	brcc	.+28     	; 0x85c <CALLBACK_USB_GetDescriptor+0x9c>
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	fb 01       	movw	r30, r22
     844:	ee 0f       	add	r30, r30
     846:	ff 1f       	adc	r31, r31
     848:	ee 5e       	subi	r30, 0xEE	; 238
     84a:	fe 4f       	sbci	r31, 0xFE	; 254
     84c:	20 81       	ld	r18, Z
     84e:	31 81       	ldd	r19, Z+1	; 0x01
     850:	fb 01       	movw	r30, r22
     852:	e1 5f       	subi	r30, 0xF1	; 241
     854:	fe 4f       	sbci	r31, 0xFE	; 254
     856:	80 81       	ld	r24, Z
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	04 c0       	rjmp	.+8      	; 0x864 <CALLBACK_USB_GetDescriptor+0xa4>
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	20 e0       	ldi	r18, 0x00	; 0
     862:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
     864:	fa 01       	movw	r30, r20
     866:	31 83       	std	Z+1, r19	; 0x01
     868:	20 83       	st	Z, r18
    return Size;
}
     86a:	08 95       	ret

0000086c <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     86c:	84 e0       	ldi	r24, 0x04	; 4
     86e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     870:	86 e0       	ldi	r24, 0x06	; 6
     872:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     874:	09 b4       	in	r0, 0x29	; 41
     876:	00 fe       	sbrs	r0, 0
     878:	fd cf       	rjmp	.-6      	; 0x874 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     87a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     87e:	8f 7d       	andi	r24, 0xDF	; 223
     880:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
     884:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
     888:	82 60       	ori	r24, 0x02	; 2
     88a:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
	while (UDCON & (1 << RMWKUP));
     88e:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
     892:	81 fd       	sbrc	r24, 1
     894:	fc cf       	rjmp	.-8      	; 0x88e <USB_Device_SendRemoteWakeup+0x22>
}
     896:	08 95       	ret

00000898 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     898:	cf 92       	push	r12
     89a:	df 92       	push	r13
     89c:	ef 92       	push	r14
     89e:	ff 92       	push	r15
     8a0:	0f 93       	push	r16
     8a2:	1f 93       	push	r17
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	ec 01       	movw	r28, r24
     8aa:	8b 01       	movw	r16, r22
     8ac:	7a 01       	movw	r14, r20
     8ae:	0e 94 a4 05 	call	0xb48	; 0xb48 <Endpoint_WaitUntilReady>
     8b2:	81 11       	cpse	r24, r1
     8b4:	33 c0       	rjmp	.+102    	; 0x91c <Endpoint_Write_Stream_LE+0x84>
     8b6:	e1 14       	cp	r14, r1
     8b8:	f1 04       	cpc	r15, r1
     8ba:	39 f0       	breq	.+14     	; 0x8ca <Endpoint_Write_Stream_LE+0x32>
     8bc:	f7 01       	movw	r30, r14
     8be:	80 81       	ld	r24, Z
     8c0:	91 81       	ldd	r25, Z+1	; 0x01
     8c2:	08 1b       	sub	r16, r24
     8c4:	19 0b       	sbc	r17, r25
     8c6:	c8 0f       	add	r28, r24
     8c8:	d9 1f       	adc	r29, r25
     8ca:	c1 2c       	mov	r12, r1
     8cc:	d1 2c       	mov	r13, r1
     8ce:	01 15       	cp	r16, r1
     8d0:	11 05       	cpc	r17, r1
     8d2:	19 f1       	breq	.+70     	; 0x91a <Endpoint_Write_Stream_LE+0x82>
     8d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     8d8:	85 fd       	sbrc	r24, 5
     8da:	16 c0       	rjmp	.+44     	; 0x908 <Endpoint_Write_Stream_LE+0x70>
     8dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     8e0:	8e 77       	andi	r24, 0x7E	; 126
     8e2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     8e6:	e1 14       	cp	r14, r1
     8e8:	f1 04       	cpc	r15, r1
     8ea:	49 f0       	breq	.+18     	; 0x8fe <Endpoint_Write_Stream_LE+0x66>
     8ec:	f7 01       	movw	r30, r14
     8ee:	80 81       	ld	r24, Z
     8f0:	91 81       	ldd	r25, Z+1	; 0x01
     8f2:	c8 0e       	add	r12, r24
     8f4:	d9 1e       	adc	r13, r25
     8f6:	d1 82       	std	Z+1, r13	; 0x01
     8f8:	c0 82       	st	Z, r12
     8fa:	85 e0       	ldi	r24, 0x05	; 5
     8fc:	0f c0       	rjmp	.+30     	; 0x91c <Endpoint_Write_Stream_LE+0x84>
     8fe:	0e 94 a4 05 	call	0xb48	; 0xb48 <Endpoint_WaitUntilReady>
     902:	88 23       	and	r24, r24
     904:	21 f3       	breq	.-56     	; 0x8ce <Endpoint_Write_Stream_LE+0x36>
     906:	0a c0       	rjmp	.+20     	; 0x91c <Endpoint_Write_Stream_LE+0x84>
     908:	89 91       	ld	r24, Y+
     90a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     90e:	01 50       	subi	r16, 0x01	; 1
     910:	11 09       	sbc	r17, r1
     912:	ff ef       	ldi	r31, 0xFF	; 255
     914:	cf 1a       	sub	r12, r31
     916:	df 0a       	sbc	r13, r31
     918:	da cf       	rjmp	.-76     	; 0x8ce <Endpoint_Write_Stream_LE+0x36>
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	1f 91       	pop	r17
     922:	0f 91       	pop	r16
     924:	ff 90       	pop	r15
     926:	ef 90       	pop	r14
     928:	df 90       	pop	r13
     92a:	cf 90       	pop	r12
     92c:	08 95       	ret

0000092e <Endpoint_Write_Control_Stream_LE>:
     92e:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <USB_ControlRequest+0x6>
     932:	30 91 d9 01 	lds	r19, 0x01D9	; 0x8001d9 <USB_ControlRequest+0x7>
     936:	26 17       	cp	r18, r22
     938:	37 07       	cpc	r19, r23
     93a:	48 f0       	brcs	.+18     	; 0x94e <Endpoint_Write_Control_Stream_LE+0x20>
     93c:	61 15       	cp	r22, r1
     93e:	71 05       	cpc	r23, r1
     940:	39 f4       	brne	.+14     	; 0x950 <Endpoint_Write_Control_Stream_LE+0x22>
     942:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     946:	2e 77       	andi	r18, 0x7E	; 126
     948:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     94c:	01 c0       	rjmp	.+2      	; 0x950 <Endpoint_Write_Control_Stream_LE+0x22>
     94e:	b9 01       	movw	r22, r18
     950:	fc 01       	movw	r30, r24
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	61 15       	cp	r22, r1
     956:	71 05       	cpc	r23, r1
     958:	61 f1       	breq	.+88     	; 0x9b2 <Endpoint_Write_Control_Stream_LE+0x84>
     95a:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <USB_DeviceState>
     95e:	88 23       	and	r24, r24
     960:	d9 f1       	breq	.+118    	; 0x9d8 <Endpoint_Write_Control_Stream_LE+0xaa>
     962:	85 30       	cpi	r24, 0x05	; 5
     964:	d9 f1       	breq	.+118    	; 0x9dc <Endpoint_Write_Control_Stream_LE+0xae>
     966:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     96a:	83 fd       	sbrc	r24, 3
     96c:	39 c0       	rjmp	.+114    	; 0x9e0 <Endpoint_Write_Control_Stream_LE+0xb2>
     96e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     972:	82 fd       	sbrc	r24, 2
     974:	2b c0       	rjmp	.+86     	; 0x9cc <Endpoint_Write_Control_Stream_LE+0x9e>
     976:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     97a:	80 ff       	sbrs	r24, 0
     97c:	eb cf       	rjmp	.-42     	; 0x954 <Endpoint_Write_Control_Stream_LE+0x26>
     97e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	61 15       	cp	r22, r1
     986:	71 05       	cpc	r23, r1
     988:	51 f0       	breq	.+20     	; 0x99e <Endpoint_Write_Control_Stream_LE+0x70>
     98a:	88 30       	cpi	r24, 0x08	; 8
     98c:	91 05       	cpc	r25, r1
     98e:	38 f4       	brcc	.+14     	; 0x99e <Endpoint_Write_Control_Stream_LE+0x70>
     990:	21 91       	ld	r18, Z+
     992:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     996:	61 50       	subi	r22, 0x01	; 1
     998:	71 09       	sbc	r23, r1
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	f3 cf       	rjmp	.-26     	; 0x984 <Endpoint_Write_Control_Stream_LE+0x56>
     99e:	21 e0       	ldi	r18, 0x01	; 1
     9a0:	08 97       	sbiw	r24, 0x08	; 8
     9a2:	09 f0       	breq	.+2      	; 0x9a6 <Endpoint_Write_Control_Stream_LE+0x78>
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     9aa:	8e 77       	andi	r24, 0x7E	; 126
     9ac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     9b0:	d1 cf       	rjmp	.-94     	; 0x954 <Endpoint_Write_Control_Stream_LE+0x26>
     9b2:	21 11       	cpse	r18, r1
     9b4:	d2 cf       	rjmp	.-92     	; 0x95a <Endpoint_Write_Control_Stream_LE+0x2c>
     9b6:	0a c0       	rjmp	.+20     	; 0x9cc <Endpoint_Write_Control_Stream_LE+0x9e>
     9b8:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <USB_DeviceState>
     9bc:	88 23       	and	r24, r24
     9be:	61 f0       	breq	.+24     	; 0x9d8 <Endpoint_Write_Control_Stream_LE+0xaa>
     9c0:	85 30       	cpi	r24, 0x05	; 5
     9c2:	61 f0       	breq	.+24     	; 0x9dc <Endpoint_Write_Control_Stream_LE+0xae>
     9c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     9c8:	83 fd       	sbrc	r24, 3
     9ca:	0a c0       	rjmp	.+20     	; 0x9e0 <Endpoint_Write_Control_Stream_LE+0xb2>
     9cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     9d0:	82 ff       	sbrs	r24, 2
     9d2:	f2 cf       	rjmp	.-28     	; 0x9b8 <Endpoint_Write_Control_Stream_LE+0x8a>
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	08 95       	ret
     9d8:	82 e0       	ldi	r24, 0x02	; 2
     9da:	08 95       	ret
     9dc:	83 e0       	ldi	r24, 0x03	; 3
     9de:	08 95       	ret
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	08 95       	ret

000009e4 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     9e4:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <USB_ControlRequest+0x6>
     9e8:	30 91 d9 01 	lds	r19, 0x01D9	; 0x8001d9 <USB_ControlRequest+0x7>
     9ec:	26 17       	cp	r18, r22
     9ee:	37 07       	cpc	r19, r23
     9f0:	48 f0       	brcs	.+18     	; 0xa04 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     9f2:	61 15       	cp	r22, r1
     9f4:	71 05       	cpc	r23, r1
     9f6:	39 f4       	brne	.+14     	; 0xa06 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9f8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     9fc:	2e 77       	andi	r18, 0x7E	; 126
     9fe:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     a02:	01 c0       	rjmp	.+2      	; 0xa06 <Endpoint_Write_Control_PStream_LE+0x22>
     a04:	b9 01       	movw	r22, r18
     a06:	fc 01       	movw	r30, r24
     a08:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     a0a:	61 15       	cp	r22, r1
     a0c:	71 05       	cpc	r23, r1
     a0e:	79 f1       	breq	.+94     	; 0xa6e <Endpoint_Write_Control_PStream_LE+0x8a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a10:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a14:	88 23       	and	r24, r24
     a16:	09 f4       	brne	.+2      	; 0xa1a <Endpoint_Write_Control_PStream_LE+0x36>
     a18:	3d c0       	rjmp	.+122    	; 0xa94 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a1a:	85 30       	cpi	r24, 0x05	; 5
     a1c:	09 f4       	brne	.+2      	; 0xa20 <Endpoint_Write_Control_PStream_LE+0x3c>
     a1e:	3c c0       	rjmp	.+120    	; 0xa98 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a20:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     a24:	83 fd       	sbrc	r24, 3
     a26:	3a c0       	rjmp	.+116    	; 0xa9c <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a28:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     a2c:	82 fd       	sbrc	r24, 2
     a2e:	2c c0       	rjmp	.+88     	; 0xa88 <Endpoint_Write_Control_PStream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a30:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  break;

		if (Endpoint_IsINReady())
     a34:	80 ff       	sbrs	r24, 0
     a36:	e9 cf       	rjmp	.-46     	; 0xa0a <Endpoint_Write_Control_PStream_LE+0x26>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     a38:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     a3c:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     a3e:	61 15       	cp	r22, r1
     a40:	71 05       	cpc	r23, r1
     a42:	59 f0       	breq	.+22     	; 0xa5a <Endpoint_Write_Control_PStream_LE+0x76>
     a44:	88 30       	cpi	r24, 0x08	; 8
     a46:	91 05       	cpc	r25, r1
     a48:	40 f4       	brcc	.+16     	; 0xa5a <Endpoint_Write_Control_PStream_LE+0x76>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     a4a:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a4c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     a50:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     a52:	61 50       	subi	r22, 0x01	; 1
     a54:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     a56:	01 96       	adiw	r24, 0x01	; 1
     a58:	f2 cf       	rjmp	.-28     	; 0xa3e <Endpoint_Write_Control_PStream_LE+0x5a>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     a5a:	21 e0       	ldi	r18, 0x01	; 1
     a5c:	08 97       	sbiw	r24, 0x08	; 8
     a5e:	09 f0       	breq	.+2      	; 0xa62 <Endpoint_Write_Control_PStream_LE+0x7e>
     a60:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a62:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     a66:	8e 77       	andi	r24, 0x7E	; 126
     a68:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     a6c:	ce cf       	rjmp	.-100    	; 0xa0a <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     a6e:	21 11       	cpse	r18, r1
     a70:	cf cf       	rjmp	.-98     	; 0xa10 <Endpoint_Write_Control_PStream_LE+0x2c>
     a72:	0a c0       	rjmp	.+20     	; 0xa88 <Endpoint_Write_Control_PStream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a74:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a78:	88 23       	and	r24, r24
     a7a:	61 f0       	breq	.+24     	; 0xa94 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a7c:	85 30       	cpi	r24, 0x05	; 5
     a7e:	61 f0       	breq	.+24     	; 0xa98 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a80:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     a84:	83 fd       	sbrc	r24, 3
     a86:	0a c0       	rjmp	.+20     	; 0xa9c <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a88:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     a8c:	82 ff       	sbrs	r24, 2
     a8e:	f2 cf       	rjmp	.-28     	; 0xa74 <Endpoint_Write_Control_PStream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     a98:	83 e0       	ldi	r24, 0x03	; 3
     a9a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     a9c:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     a9e:	08 95       	ret

00000aa0 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     aa0:	98 2f       	mov	r25, r24
     aa2:	95 30       	cpi	r25, 0x05	; 5
     aa4:	68 f5       	brcc	.+90     	; 0xb00 <Endpoint_ConfigureEndpoint_Prv+0x60>
     aa6:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     aaa:	98 17       	cp	r25, r24
     aac:	39 f0       	breq	.+14     	; 0xabc <Endpoint_ConfigureEndpoint_Prv+0x1c>
     aae:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     ab2:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     ab6:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     aba:	03 c0       	rjmp	.+6      	; 0xac2 <Endpoint_ConfigureEndpoint_Prv+0x22>
     abc:	24 2f       	mov	r18, r20
     abe:	76 2f       	mov	r23, r22
     ac0:	50 e0       	ldi	r21, 0x00	; 0
     ac2:	21 fd       	sbrc	r18, 1
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <Endpoint_ConfigureEndpoint_Prv+0x2a>
     ac6:	9f 5f       	subi	r25, 0xFF	; 255
     ac8:	ec cf       	rjmp	.-40     	; 0xaa2 <Endpoint_ConfigureEndpoint_Prv+0x2>
     aca:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     ace:	3e 7f       	andi	r19, 0xFE	; 254
     ad0:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     ad4:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     ad8:	3d 7f       	andi	r19, 0xFD	; 253
     ada:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     ade:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     ae2:	31 60       	ori	r19, 0x01	; 1
     ae4:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     ae8:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     aec:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     af0:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     af4:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
     af8:	27 fd       	sbrc	r18, 7
     afa:	e5 cf       	rjmp	.-54     	; 0xac6 <Endpoint_ConfigureEndpoint_Prv+0x26>
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	08 95       	ret
     b00:	8f 70       	andi	r24, 0x0F	; 15
     b02:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	08 95       	ret

00000b0a <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     b0a:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <USB_ControlRequest>
     b0e:	87 ff       	sbrs	r24, 7
     b10:	11 c0       	rjmp	.+34     	; 0xb34 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b12:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     b16:	82 fd       	sbrc	r24, 2
     b18:	05 c0       	rjmp	.+10     	; 0xb24 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     b1a:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <USB_DeviceState>
     b1e:	81 11       	cpse	r24, r1
     b20:	f8 cf       	rjmp	.-16     	; 0xb12 <Endpoint_ClearStatusStage+0x8>
     b22:	11 c0       	rjmp	.+34     	; 0xb46 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     b28:	8b 77       	andi	r24, 0x7B	; 123
     b2a:	0b c0       	rjmp	.+22     	; 0xb42 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     b2c:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <USB_DeviceState>
     b30:	88 23       	and	r24, r24
     b32:	49 f0       	breq	.+18     	; 0xb46 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b34:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     b38:	80 ff       	sbrs	r24, 0
     b3a:	f8 cf       	rjmp	.-16     	; 0xb2c <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b3c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     b40:	8e 77       	andi	r24, 0x7E	; 126
     b42:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     b46:	08 95       	ret

00000b48 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     b48:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
     b4c:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
     b50:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     b52:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     b56:	84 2f       	mov	r24, r20
     b58:	81 70       	andi	r24, 0x01	; 1
     b5a:	40 ff       	sbrs	r20, 0
     b5c:	23 c0       	rjmp	.+70     	; 0xba4 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b5e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     b62:	80 fd       	sbrc	r24, 0
     b64:	1d c0       	rjmp	.+58     	; 0xba0 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b66:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b6a:	88 23       	and	r24, r24
     b6c:	99 f0       	breq	.+38     	; 0xb94 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b6e:	85 30       	cpi	r24, 0x05	; 5
     b70:	99 f0       	breq	.+38     	; 0xb98 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     b72:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     b76:	85 fd       	sbrc	r24, 5
     b78:	11 c0       	rjmp	.+34     	; 0xb9c <Endpoint_WaitUntilReady+0x54>
     b7a:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
     b7e:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b82:	24 17       	cp	r18, r20
     b84:	35 07       	cpc	r19, r21
     b86:	29 f3       	breq	.-54     	; 0xb52 <Endpoint_WaitUntilReady+0xa>
     b88:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     b8a:	11 f0       	breq	.+4      	; 0xb90 <Endpoint_WaitUntilReady+0x48>
     b8c:	9a 01       	movw	r18, r20
     b8e:	e1 cf       	rjmp	.-62     	; 0xb52 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     b90:	84 e0       	ldi	r24, 0x04	; 4
     b92:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     b94:	82 e0       	ldi	r24, 0x02	; 2
     b96:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     b98:	83 e0       	ldi	r24, 0x03	; 3
     b9a:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ba4:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     ba8:	42 ff       	sbrs	r20, 2
     baa:	dd cf       	rjmp	.-70     	; 0xb66 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     bac:	08 95       	ret

00000bae <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     bae:	0e 94 34 06 	call	0xc68	; 0xc68 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     bb2:	0e 94 37 06 	call	0xc6e	; 0xc6e <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     bb6:	e0 ee       	ldi	r30, 0xE0	; 224
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	81 60       	ori	r24, 0x01	; 1
     bbe:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     bc0:	e8 ed       	ldi	r30, 0xD8	; 216
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	8f 77       	andi	r24, 0x7F	; 127
     bc8:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     bca:	19 bc       	out	0x29, r1	; 41
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
			#else
				REGCR  |=  (1 << REGDIS);
     bcc:	e3 e6       	ldi	r30, 0x63	; 99
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	81 60       	ori	r24, 0x01	; 1
     bd4:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     bd6:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <USB_IsInitialized>
     bda:	08 95       	ret

00000bdc <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     bdc:	0e 94 34 06 	call	0xc68	; 0xc68 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     be0:	0e 94 37 06 	call	0xc6e	; 0xc6e <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     be4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     be8:	8f 77       	andi	r24, 0x7F	; 127
     bea:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON |=  (1 << USBE);
     bee:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     bf2:	80 68       	ori	r24, 0x80	; 128
     bf4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     bf8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     bfc:	8f 7d       	andi	r24, 0xDF	; 223
     bfe:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c02:	84 e0       	ldi	r24, 0x04	; 4
     c04:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c06:	86 e0       	ldi	r24, 0x06	; 6
     c08:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     c0a:	09 b4       	in	r0, 0x29	; 41
     c0c:	00 fe       	sbrs	r0, 0
     c0e:	fd cf       	rjmp	.-6      	; 0xc0a <USB_ResetInterface+0x2e>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     c10:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
     c14:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     c18:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     c1c:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <USB_Device_CurrentlySelfPowered>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     c20:	42 e0       	ldi	r20, 0x02	; 2
     c22:	60 e0       	ldi	r22, 0x00	; 0
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     c2a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     c2e:	8e 7f       	andi	r24, 0xFE	; 254
     c30:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     c34:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     c38:	81 60       	ori	r24, 0x01	; 1
     c3a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     c3e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     c42:	88 60       	ori	r24, 0x08	; 8
     c44:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c48:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
     c4c:	8e 7f       	andi	r24, 0xFE	; 254
     c4e:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
     c52:	08 95       	ret

00000c54 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     c54:	e3 e6       	ldi	r30, 0x63	; 99
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	8e 7f       	andi	r24, 0xFE	; 254
     c5c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <USB_IsInitialized>

	USB_ResetInterface();
     c64:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <USB_ResetInterface>

00000c68 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     c68:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     c6c:	08 95       	ret

00000c6e <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     c6e:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     c72:	08 95       	ret

00000c74 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c74:	1f 92       	push	r1
     c76:	0f 92       	push	r0
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	0f 92       	push	r0
     c7c:	11 24       	eor	r1, r1
     c7e:	2f 93       	push	r18
     c80:	3f 93       	push	r19
     c82:	4f 93       	push	r20
     c84:	5f 93       	push	r21
     c86:	6f 93       	push	r22
     c88:	7f 93       	push	r23
     c8a:	8f 93       	push	r24
     c8c:	9f 93       	push	r25
     c8e:	af 93       	push	r26
     c90:	bf 93       	push	r27
     c92:	ef 93       	push	r30
     c94:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     c96:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     c9a:	82 ff       	sbrs	r24, 2
     c9c:	0b c0       	rjmp	.+22     	; 0xcb4 <__vector_11+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     c9e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     ca2:	82 ff       	sbrs	r24, 2
     ca4:	07 c0       	rjmp	.+14     	; 0xcb4 <__vector_11+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     ca6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     caa:	8b 7f       	andi	r24, 0xFB	; 251
     cac:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     cb0:	0e 94 83 08 	call	0x1106	; 0x1106 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     cb4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     cb8:	80 ff       	sbrs	r24, 0
     cba:	19 c0       	rjmp	.+50     	; 0xcee <__vector_11+0x7a>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     cbc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     cc0:	80 ff       	sbrs	r24, 0
     cc2:	15 c0       	rjmp	.+42     	; 0xcee <__vector_11+0x7a>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     cc4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     cc8:	8e 7f       	andi	r24, 0xFE	; 254
     cca:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     cce:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     cd2:	80 61       	ori	r24, 0x10	; 16
     cd4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     cd8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     cdc:	80 62       	ori	r24, 0x20	; 32
     cde:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     ce2:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     ce4:	85 e0       	ldi	r24, 0x05	; 5
     ce6:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
     cea:	0e 94 83 03 	call	0x706	; 0x706 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     cee:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     cf2:	84 ff       	sbrs	r24, 4
     cf4:	30 c0       	rjmp	.+96     	; 0xd56 <__vector_11+0xe2>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     cf6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     cfa:	84 ff       	sbrs	r24, 4
     cfc:	2c c0       	rjmp	.+88     	; 0xd56 <__vector_11+0xe2>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     cfe:	84 e0       	ldi	r24, 0x04	; 4
     d00:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     d02:	86 e0       	ldi	r24, 0x06	; 6
     d04:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     d06:	09 b4       	in	r0, 0x29	; 41
     d08:	00 fe       	sbrs	r0, 0
     d0a:	fd cf       	rjmp	.-6      	; 0xd06 <__vector_11+0x92>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     d0c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     d10:	8f 7d       	andi	r24, 0xDF	; 223
     d12:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     d16:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     d1a:	8f 7e       	andi	r24, 0xEF	; 239
     d1c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     d20:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     d24:	8f 7e       	andi	r24, 0xEF	; 239
     d26:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     d2a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     d2e:	81 60       	ori	r24, 0x01	; 1
     d30:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     d34:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <USB_Device_ConfigurationNumber>
     d38:	88 23       	and	r24, r24
     d3a:	11 f0       	breq	.+4      	; 0xd40 <__vector_11+0xcc>
		  USB_DeviceState = DEVICE_STATE_Configured;
     d3c:	84 e0       	ldi	r24, 0x04	; 4
     d3e:	07 c0       	rjmp	.+14     	; 0xd4e <__vector_11+0xda>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     d40:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     d44:	87 fd       	sbrc	r24, 7
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <__vector_11+0xd8>
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	01 c0       	rjmp	.+2      	; 0xd4e <__vector_11+0xda>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     d52:	0e 94 de 03 	call	0x7bc	; 0x7bc <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     d56:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     d5a:	83 ff       	sbrs	r24, 3
     d5c:	29 c0       	rjmp	.+82     	; 0xdb0 <__vector_11+0x13c>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     d5e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     d62:	83 ff       	sbrs	r24, 3
     d64:	25 c0       	rjmp	.+74     	; 0xdb0 <__vector_11+0x13c>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     d66:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     d6a:	87 7f       	andi	r24, 0xF7	; 247
     d6c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     d70:	82 e0       	ldi	r24, 0x02	; 2
     d72:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     d76:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     d7a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     d7e:	8e 7f       	andi	r24, 0xFE	; 254
     d80:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     d84:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     d88:	8e 7f       	andi	r24, 0xFE	; 254
     d8a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     d8e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     d92:	80 61       	ori	r24, 0x10	; 16
     d94:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     d98:	42 e0       	ldi	r20, 0x02	; 2
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     da2:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     da6:	88 60       	ori	r24, 0x08	; 8
     da8:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     dac:	0e 94 b1 02 	call	0x562	; 0x562 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     db0:	ff 91       	pop	r31
     db2:	ef 91       	pop	r30
     db4:	bf 91       	pop	r27
     db6:	af 91       	pop	r26
     db8:	9f 91       	pop	r25
     dba:	8f 91       	pop	r24
     dbc:	7f 91       	pop	r23
     dbe:	6f 91       	pop	r22
     dc0:	5f 91       	pop	r21
     dc2:	4f 91       	pop	r20
     dc4:	3f 91       	pop	r19
     dc6:	2f 91       	pop	r18
     dc8:	0f 90       	pop	r0
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	0f 90       	pop	r0
     dce:	1f 90       	pop	r1
     dd0:	18 95       	reti

00000dd2 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     dd2:	1f 92       	push	r1
     dd4:	0f 92       	push	r0
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	0f 92       	push	r0
     dda:	11 24       	eor	r1, r1
     ddc:	2f 93       	push	r18
     dde:	3f 93       	push	r19
     de0:	4f 93       	push	r20
     de2:	5f 93       	push	r21
     de4:	6f 93       	push	r22
     de6:	7f 93       	push	r23
     de8:	8f 93       	push	r24
     dea:	9f 93       	push	r25
     dec:	af 93       	push	r26
     dee:	bf 93       	push	r27
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	ef 93       	push	r30
     df6:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     df8:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     dfc:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     dfe:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     e02:	d8 2f       	mov	r29, r24
     e04:	d1 70       	andi	r29, 0x01	; 1
     e06:	80 fd       	sbrc	r24, 0
     e08:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e0a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     e0e:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     e12:	87 7f       	andi	r24, 0xF7	; 247
     e14:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     e18:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     e1a:	0e 94 2d 07 	call	0xe5a	; 0xe5a <USB_Device_ProcessControlRequest>
     e1e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     e22:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     e26:	88 60       	ori	r24, 0x08	; 8
     e28:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     e2c:	cd 2b       	or	r28, r29
     e2e:	cf 70       	andi	r28, 0x0F	; 15
     e30:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     e34:	ff 91       	pop	r31
     e36:	ef 91       	pop	r30
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	bf 91       	pop	r27
     e3e:	af 91       	pop	r26
     e40:	9f 91       	pop	r25
     e42:	8f 91       	pop	r24
     e44:	7f 91       	pop	r23
     e46:	6f 91       	pop	r22
     e48:	5f 91       	pop	r21
     e4a:	4f 91       	pop	r20
     e4c:	3f 91       	pop	r19
     e4e:	2f 91       	pop	r18
     e50:	0f 90       	pop	r0
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	0f 90       	pop	r0
     e56:	1f 90       	pop	r1
     e58:	18 95       	reti

00000e5a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     e5a:	1f 93       	push	r17
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	aa 97       	sbiw	r28, 0x2a	; 42
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	e2 ed       	ldi	r30, 0xD2	; 210
     e72:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     e74:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     e78:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     e7a:	21 e0       	ldi	r18, 0x01	; 1
     e7c:	ea 3d       	cpi	r30, 0xDA	; 218
     e7e:	f2 07       	cpc	r31, r18
     e80:	c9 f7       	brne	.-14     	; 0xe74 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     e82:	0e 94 c1 02 	call	0x582	; 0x582 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e86:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	if (Endpoint_IsSETUPReceived())
     e8a:	83 ff       	sbrs	r24, 3
     e8c:	24 c1       	rjmp	.+584    	; 0x10d6 <USB_Device_ProcessControlRequest+0x27c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     e8e:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
     e92:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <USB_ControlRequest+0x1>
     e96:	49 2f       	mov	r20, r25
     e98:	50 e0       	ldi	r21, 0x00	; 0
     e9a:	4a 30       	cpi	r20, 0x0A	; 10
     e9c:	51 05       	cpc	r21, r1
     e9e:	08 f0       	brcs	.+2      	; 0xea2 <USB_Device_ProcessControlRequest+0x48>
     ea0:	1a c1       	rjmp	.+564    	; 0x10d6 <USB_Device_ProcessControlRequest+0x27c>
     ea2:	fa 01       	movw	r30, r20
     ea4:	e6 5c       	subi	r30, 0xC6	; 198
     ea6:	ff 4f       	sbci	r31, 0xFF	; 255
     ea8:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     eac:	80 38       	cpi	r24, 0x80	; 128
     eae:	81 f0       	breq	.+32     	; 0xed0 <USB_Device_ProcessControlRequest+0x76>
     eb0:	82 38       	cpi	r24, 0x82	; 130
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <USB_Device_ProcessControlRequest+0x5c>
     eb4:	10 c1       	rjmp	.+544    	; 0x10d6 <USB_Device_ProcessControlRequest+0x27c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     eb6:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <USB_ControlRequest+0x4>
     eba:	8f 70       	andi	r24, 0x0F	; 15
     ebc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     ec0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     ec4:	85 fb       	bst	r24, 5
     ec6:	88 27       	eor	r24, r24
     ec8:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     eca:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     ece:	06 c0       	rjmp	.+12     	; 0xedc <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     ed0:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     ed4:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <USB_Device_RemoteWakeupEnabled>
     ed8:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     eda:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     edc:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     ee0:	97 7f       	andi	r25, 0xF7	; 247
     ee2:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     ee6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
     eea:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     eee:	c8 c0       	rjmp	.+400    	; 0x1080 <USB_Device_ProcessControlRequest+0x226>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ef0:	28 2f       	mov	r18, r24
     ef2:	2d 7f       	andi	r18, 0xFD	; 253
     ef4:	09 f0       	breq	.+2      	; 0xef8 <USB_Device_ProcessControlRequest+0x9e>
     ef6:	ef c0       	rjmp	.+478    	; 0x10d6 <USB_Device_ProcessControlRequest+0x27c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     ef8:	88 23       	and	r24, r24
     efa:	19 f0       	breq	.+6      	; 0xf02 <USB_Device_ProcessControlRequest+0xa8>
     efc:	82 30       	cpi	r24, 0x02	; 2
     efe:	61 f0       	breq	.+24     	; 0xf18 <USB_Device_ProcessControlRequest+0xbe>
     f00:	ea c0       	rjmp	.+468    	; 0x10d6 <USB_Device_ProcessControlRequest+0x27c>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     f02:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <USB_ControlRequest+0x2>
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	09 f0       	breq	.+2      	; 0xf0c <USB_Device_ProcessControlRequest+0xb2>
     f0a:	e5 c0       	rjmp	.+458    	; 0x10d6 <USB_Device_ProcessControlRequest+0x27c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     f0c:	93 30       	cpi	r25, 0x03	; 3
     f0e:	09 f0       	breq	.+2      	; 0xf12 <USB_Device_ProcessControlRequest+0xb8>
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <USB_Device_RemoteWakeupEnabled>
     f16:	2b c0       	rjmp	.+86     	; 0xf6e <USB_Device_ProcessControlRequest+0x114>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     f18:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <USB_ControlRequest+0x2>
     f1c:	81 11       	cpse	r24, r1
     f1e:	27 c0       	rjmp	.+78     	; 0xf6e <USB_Device_ProcessControlRequest+0x114>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     f20:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <USB_ControlRequest+0x4>
     f24:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     f26:	09 f4       	brne	.+2      	; 0xf2a <USB_Device_ProcessControlRequest+0xd0>
     f28:	d6 c0       	rjmp	.+428    	; 0x10d6 <USB_Device_ProcessControlRequest+0x27c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f2a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     f2e:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     f32:	20 ff       	sbrs	r18, 0
     f34:	1c c0       	rjmp	.+56     	; 0xf6e <USB_Device_ProcessControlRequest+0x114>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     f36:	93 30       	cpi	r25, 0x03	; 3
     f38:	21 f4       	brne	.+8      	; 0xf42 <USB_Device_ProcessControlRequest+0xe8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     f3a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     f3e:	80 62       	ori	r24, 0x20	; 32
     f40:	14 c0       	rjmp	.+40     	; 0xf6a <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     f42:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     f46:	90 61       	ori	r25, 0x10	; 16
     f48:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     f4c:	21 e0       	ldi	r18, 0x01	; 1
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	a9 01       	movw	r20, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <USB_Device_ProcessControlRequest+0xfe>
     f54:	44 0f       	add	r20, r20
     f56:	55 1f       	adc	r21, r21
     f58:	8a 95       	dec	r24
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <USB_Device_ProcessControlRequest+0xfa>
     f5c:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UERST = 0;
     f60:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     f64:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     f68:	88 60       	ori	r24, 0x08	; 8
     f6a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f6e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     f76:	87 7f       	andi	r24, 0xF7	; 247
     f78:	86 c0       	rjmp	.+268    	; 0x1086 <USB_Device_ProcessControlRequest+0x22c>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     f7a:	81 11       	cpse	r24, r1
     f7c:	ac c0       	rjmp	.+344    	; 0x10d6 <USB_Device_ProcessControlRequest+0x27c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     f7e:	10 91 d4 01 	lds	r17, 0x01D4	; 0x8001d4 <USB_ControlRequest+0x2>
     f82:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     f84:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
     f88:	80 78       	andi	r24, 0x80	; 128
     f8a:	81 2b       	or	r24, r17
     f8c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
     f90:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     f94:	87 7f       	andi	r24, 0xF7	; 247
     f96:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     f9a:	0e 94 85 05 	call	0xb0a	; 0xb0a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f9e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	while (!(Endpoint_IsINReady()));
     fa2:	80 ff       	sbrs	r24, 0
     fa4:	fc cf       	rjmp	.-8      	; 0xf9e <USB_Device_ProcessControlRequest+0x144>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     fa6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
     faa:	80 68       	ori	r24, 0x80	; 128
     fac:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     fb0:	11 11       	cpse	r17, r1
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <USB_Device_ProcessControlRequest+0x15e>
     fb4:	82 e0       	ldi	r24, 0x02	; 2
     fb6:	01 c0       	rjmp	.+2      	; 0xfba <USB_Device_ProcessControlRequest+0x160>
     fb8:	83 e0       	ldi	r24, 0x03	; 3
     fba:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <USB_DeviceState>
     fbe:	8b c0       	rjmp	.+278    	; 0x10d6 <USB_Device_ProcessControlRequest+0x27c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     fc0:	80 58       	subi	r24, 0x80	; 128
     fc2:	82 30       	cpi	r24, 0x02	; 2
     fc4:	08 f0       	brcs	.+2      	; 0xfc8 <USB_Device_ProcessControlRequest+0x16e>
     fc6:	87 c0       	rjmp	.+270    	; 0x10d6 <USB_Device_ProcessControlRequest+0x27c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     fc8:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <USB_ControlRequest+0x2>
     fcc:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <USB_ControlRequest+0x3>
     fd0:	8c 3d       	cpi	r24, 0xDC	; 220
     fd2:	53 e0       	ldi	r21, 0x03	; 3
     fd4:	95 07       	cpc	r25, r21
     fd6:	79 f5       	brne	.+94     	; 0x1036 <USB_Device_ProcessControlRequest+0x1dc>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     fd8:	83 e0       	ldi	r24, 0x03	; 3
     fda:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     fdc:	8a e2       	ldi	r24, 0x2A	; 42
     fde:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     fe0:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     fe2:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     fe4:	de 01       	movw	r26, r28
     fe6:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     fe8:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     fea:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     fec:	51 e2       	ldi	r21, 0x21	; 33
     fee:	e3 2f       	mov	r30, r19
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
     ff6:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     ff8:	20 ff       	sbrs	r18, 0
     ffa:	03 c0       	rjmp	.+6      	; 0x1002 <USB_Device_ProcessControlRequest+0x1a8>
					{
						SerialByte >>= 4;
     ffc:	e2 95       	swap	r30
     ffe:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1000:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1002:	ef 70       	andi	r30, 0x0F	; 15
    1004:	8e 2f       	mov	r24, r30
    1006:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1008:	ea 30       	cpi	r30, 0x0A	; 10
    100a:	10 f0       	brcs	.+4      	; 0x1010 <USB_Device_ProcessControlRequest+0x1b6>
    100c:	c7 96       	adiw	r24, 0x37	; 55
    100e:	01 c0       	rjmp	.+2      	; 0x1012 <USB_Device_ProcessControlRequest+0x1b8>
    1010:	c0 96       	adiw	r24, 0x30	; 48
    1012:	8d 93       	st	X+, r24
    1014:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1016:	2f 5f       	subi	r18, 0xFF	; 255
    1018:	24 31       	cpi	r18, 0x14	; 20
    101a:	49 f7       	brne	.-46     	; 0xfee <USB_Device_ProcessControlRequest+0x194>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    101c:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    101e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1022:	87 7f       	andi	r24, 0xF7	; 247
    1024:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1028:	6a e2       	ldi	r22, 0x2A	; 42
    102a:	70 e0       	ldi	r23, 0x00	; 0
    102c:	ce 01       	movw	r24, r28
    102e:	01 96       	adiw	r24, 0x01	; 1
    1030:	0e 94 97 04 	call	0x92e	; 0x92e <Endpoint_Write_Control_Stream_LE>
    1034:	14 c0       	rjmp	.+40     	; 0x105e <USB_Device_ProcessControlRequest+0x204>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1036:	ae 01       	movw	r20, r28
    1038:	4f 5f       	subi	r20, 0xFF	; 255
    103a:	5f 4f       	sbci	r21, 0xFF	; 255
    103c:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <USB_ControlRequest+0x4>
    1040:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <CALLBACK_USB_GetDescriptor>
    1044:	bc 01       	movw	r22, r24
    1046:	89 2b       	or	r24, r25
    1048:	09 f4       	brne	.+2      	; 0x104c <USB_Device_ProcessControlRequest+0x1f2>
    104a:	45 c0       	rjmp	.+138    	; 0x10d6 <USB_Device_ProcessControlRequest+0x27c>
    104c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1050:	97 7f       	andi	r25, 0xF7	; 247
    1052:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	9a 81       	ldd	r25, Y+2	; 0x02
    105a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    105e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1062:	8b 77       	andi	r24, 0x7B	; 123
    1064:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1068:	36 c0       	rjmp	.+108    	; 0x10d6 <USB_Device_ProcessControlRequest+0x27c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    106a:	80 38       	cpi	r24, 0x80	; 128
    106c:	a1 f5       	brne	.+104    	; 0x10d6 <USB_Device_ProcessControlRequest+0x27c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    106e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1072:	87 7f       	andi	r24, 0xF7	; 247
    1074:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1078:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    107c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1080:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1084:	8e 77       	andi	r24, 0x7E	; 126
    1086:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    108a:	0e 94 85 05 	call	0xb0a	; 0xb0a <Endpoint_ClearStatusStage>
    108e:	23 c0       	rjmp	.+70     	; 0x10d6 <USB_Device_ProcessControlRequest+0x27c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1090:	81 11       	cpse	r24, r1
    1092:	21 c0       	rjmp	.+66     	; 0x10d6 <USB_Device_ProcessControlRequest+0x27c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1094:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <USB_ControlRequest+0x2>
    1098:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <USB_ControlRequest+0x3>
    109c:	99 27       	eor	r25, r25
    109e:	02 97       	sbiw	r24, 0x02	; 2
    10a0:	d4 f4       	brge	.+52     	; 0x10d6 <USB_Device_ProcessControlRequest+0x27c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10a2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    10a6:	87 7f       	andi	r24, 0xF7	; 247
    10a8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    10ac:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <USB_ControlRequest+0x2>
    10b0:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    10b4:	0e 94 85 05 	call	0xb0a	; 0xb0a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    10b8:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <USB_Device_ConfigurationNumber>
    10bc:	81 11       	cpse	r24, r1
    10be:	06 c0       	rjmp	.+12     	; 0x10cc <USB_Device_ProcessControlRequest+0x272>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    10c0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    10c4:	87 fd       	sbrc	r24, 7
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <USB_Device_ProcessControlRequest+0x272>
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <USB_Device_ProcessControlRequest+0x274>
    10cc:	84 e0       	ldi	r24, 0x04	; 4
    10ce:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    10d2:	0e 94 b2 02 	call	0x564	; 0x564 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    10d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    10da:	83 ff       	sbrs	r24, 3
    10dc:	0a c0       	rjmp	.+20     	; 0x10f2 <USB_Device_ProcessControlRequest+0x298>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    10e2:	87 7f       	andi	r24, 0xF7	; 247
    10e4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    10e8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
    10ec:	80 62       	ori	r24, 0x20	; 32
    10ee:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    10f2:	aa 96       	adiw	r28, 0x2a	; 42
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	de bf       	out	0x3e, r29	; 62
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	cd bf       	out	0x3d, r28	; 61
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	1f 91       	pop	r17
    1104:	08 95       	ret

00001106 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1106:	08 95       	ret

00001108 <host_set_driver>:
}

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    (*driver->send_mouse)(report);
    1108:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <driver+0x1>
    110c:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <driver>
    1110:	08 95       	ret

00001112 <host_keyboard_leds>:
    1112:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <driver>
    1116:	f0 91 4e 01 	lds	r31, 0x014E	; 0x80014e <driver+0x1>
    111a:	30 97       	sbiw	r30, 0x00	; 0
    111c:	21 f0       	breq	.+8      	; 0x1126 <host_keyboard_leds+0x14>
    111e:	01 90       	ld	r0, Z+
    1120:	f0 81       	ld	r31, Z
    1122:	e0 2d       	mov	r30, r0
    1124:	09 94       	ijmp
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	08 95       	ret

0000112a <host_keyboard_send>:
    112a:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <driver>
    112e:	f0 91 4e 01 	lds	r31, 0x014E	; 0x80014e <driver+0x1>
    1132:	30 97       	sbiw	r30, 0x00	; 0
    1134:	21 f0       	breq	.+8      	; 0x113e <host_keyboard_send+0x14>
    1136:	02 80       	ldd	r0, Z+2	; 0x02
    1138:	f3 81       	ldd	r31, Z+3	; 0x03
    113a:	e0 2d       	mov	r30, r0
    113c:	09 94       	ijmp
    113e:	08 95       	ret

00001140 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    1140:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <last_system_report>
    1144:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <last_system_report+0x1>
    1148:	28 17       	cp	r18, r24
    114a:	39 07       	cpc	r19, r25
    114c:	71 f0       	breq	.+28     	; 0x116a <host_system_send+0x2a>
    last_system_report = report;
    114e:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <last_system_report+0x1>
    1152:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <last_system_report>

    if (!driver) return;
    1156:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <driver>
    115a:	f0 91 4e 01 	lds	r31, 0x014E	; 0x80014e <driver+0x1>
    115e:	30 97       	sbiw	r30, 0x00	; 0
    1160:	21 f0       	breq	.+8      	; 0x116a <host_system_send+0x2a>
    (*driver->send_system)(report);
    1162:	06 80       	ldd	r0, Z+6	; 0x06
    1164:	f7 81       	ldd	r31, Z+7	; 0x07
    1166:	e0 2d       	mov	r30, r0
    1168:	09 94       	ijmp
    116a:	08 95       	ret

0000116c <host_consumer_send>:
    }
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    116c:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <last_consumer_report>
    1170:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <last_consumer_report+0x1>
    1174:	28 17       	cp	r18, r24
    1176:	39 07       	cpc	r19, r25
    1178:	71 f0       	breq	.+28     	; 0x1196 <host_consumer_send+0x2a>
    last_consumer_report = report;
    117a:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <last_consumer_report+0x1>
    117e:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <last_consumer_report>

    if (!driver) return;
    1182:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <driver>
    1186:	f0 91 4e 01 	lds	r31, 0x014E	; 0x80014e <driver+0x1>
    118a:	30 97       	sbiw	r30, 0x00	; 0
    118c:	21 f0       	breq	.+8      	; 0x1196 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    118e:	00 84       	ldd	r0, Z+8	; 0x08
    1190:	f1 85       	ldd	r31, Z+9	; 0x09
    1192:	e0 2d       	mov	r30, r0
    1194:	09 94       	ijmp
    1196:	08 95       	ret

00001198 <keyboard_setup>:
#endif


void keyboard_setup(void)
{
    matrix_setup();
    1198:	0c 94 66 09 	jmp	0x12cc	; 0x12cc <matrix_setup>

0000119c <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    119c:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <timer_init>
    matrix_init();
    11a0:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    11a4:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <bootmagic>
#endif

#ifdef BACKLIGHT_ENABLE
    backlight_init();
    11a8:	0c 94 34 19 	jmp	0x3268	; 0x3268 <backlight_init>

000011ac <keyboard_task>:
/*
 * Do keyboard routine jobs: scan matrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    11ac:	bf 92       	push	r11
    11ae:	cf 92       	push	r12
    11b0:	df 92       	push	r13
    11b2:	ef 92       	push	r14
    11b4:	ff 92       	push	r15
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <keyboard_task+0x14>
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <keyboard_task+0x16>
    11c2:	1f 92       	push	r1
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    11c8:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <matrix_scan>
    11cc:	00 e5       	ldi	r16, 0x50	; 80
    11ce:	11 e0       	ldi	r17, 0x01	; 1
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    11d0:	f1 2c       	mov	r15, r1
        matrix_row = matrix_get_row(r);
    11d2:	8f 2d       	mov	r24, r15
    11d4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <matrix_get_row>
    11d8:	b8 2e       	mov	r11, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    11da:	f8 01       	movw	r30, r16
    11dc:	c0 80       	ld	r12, Z
    11de:	c8 26       	eor	r12, r24
        if (matrix_change) {
    11e0:	39 f4       	brne	.+14     	; 0x11f0 <keyboard_task+0x44>
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    11e2:	f3 94       	inc	r15
    11e4:	0f 5f       	subi	r16, 0xFF	; 255
    11e6:	1f 4f       	sbci	r17, 0xFF	; 255
    11e8:	f4 e0       	ldi	r31, 0x04	; 4
    11ea:	ff 12       	cpse	r15, r31
    11ec:	f2 cf       	rjmp	.-28     	; 0x11d2 <keyboard_task+0x26>
    11ee:	30 c0       	rjmp	.+96     	; 0x1250 <keyboard_task+0xa4>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    11f0:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <debug_config>
    11f4:	81 fd       	sbrc	r24, 1
    11f6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <matrix_print>
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    11fa:	d1 2c       	mov	r13, r1
    11fc:	ee 24       	eor	r14, r14
    11fe:	e3 94       	inc	r14
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            matrix_row_t col_mask = 1;
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
                if (matrix_change & col_mask) {
    1200:	8c 2d       	mov	r24, r12
    1202:	8e 21       	and	r24, r14
    1204:	f9 f0       	breq	.+62     	; 0x1244 <keyboard_task+0x98>
                    keyevent_t e = (keyevent_t){
    1206:	d9 82       	std	Y+1, r13	; 0x01
    1208:	fa 82       	std	Y+2, r15	; 0x02
    120a:	91 e0       	ldi	r25, 0x01	; 1
    120c:	8b 2d       	mov	r24, r11
    120e:	8e 21       	and	r24, r14
    1210:	09 f4       	brne	.+2      	; 0x1214 <keyboard_task+0x68>
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	9b 83       	std	Y+3, r25	; 0x03
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & col_mask),
                        .time = (timer_read() | 1) /* time should not be 0 */
    1216:	0e 94 d6 15 	call	0x2bac	; 0x2bac <timer_read>
#endif
            if (debug_matrix) matrix_print();
            matrix_row_t col_mask = 1;
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
                if (matrix_change & col_mask) {
                    keyevent_t e = (keyevent_t){
    121a:	81 60       	ori	r24, 0x01	; 1
    121c:	78 2f       	mov	r23, r24
    121e:	9d 83       	std	Y+5, r25	; 0x05
    1220:	8c 83       	std	Y+4, r24	; 0x04
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & col_mask),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    };
                    action_exec(e);
    1222:	49 81       	ldd	r20, Y+1	; 0x01
    1224:	5a 81       	ldd	r21, Y+2	; 0x02
    1226:	6b 81       	ldd	r22, Y+3	; 0x03
    1228:	8d 81       	ldd	r24, Y+5	; 0x05
    122a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <action_exec>
                    hook_matrix_change(e);
    122e:	49 81       	ldd	r20, Y+1	; 0x01
    1230:	5a 81       	ldd	r21, Y+2	; 0x02
    1232:	6b 81       	ldd	r22, Y+3	; 0x03
    1234:	7c 81       	ldd	r23, Y+4	; 0x04
    1236:	8d 81       	ldd	r24, Y+5	; 0x05
    1238:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= col_mask;
    123c:	f8 01       	movw	r30, r16
    123e:	80 81       	ld	r24, Z
    1240:	8e 25       	eor	r24, r14
    1242:	80 83       	st	Z, r24
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            matrix_row_t col_mask = 1;
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
    1244:	d3 94       	inc	r13
    1246:	ee 0c       	add	r14, r14
    1248:	f4 e0       	ldi	r31, 0x04	; 4
    124a:	df 12       	cpse	r13, r31
    124c:	d9 cf       	rjmp	.-78     	; 0x1200 <keyboard_task+0x54>
    124e:	c9 cf       	rjmp	.-110    	; 0x11e2 <keyboard_task+0x36>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    1250:	8f ef       	ldi	r24, 0xFF	; 255
    1252:	89 83       	std	Y+1, r24	; 0x01
    1254:	8a 83       	std	Y+2, r24	; 0x02
    1256:	1b 82       	std	Y+3, r1	; 0x03
    1258:	0e 94 d6 15 	call	0x2bac	; 0x2bac <timer_read>
    125c:	81 60       	ori	r24, 0x01	; 1
    125e:	78 2f       	mov	r23, r24
    1260:	9d 83       	std	Y+5, r25	; 0x05
    1262:	8c 83       	std	Y+4, r24	; 0x04
    1264:	49 81       	ldd	r20, Y+1	; 0x01
    1266:	5a 81       	ldd	r21, Y+2	; 0x02
    1268:	6b 81       	ldd	r22, Y+3	; 0x03
    126a:	8d 81       	ldd	r24, Y+5	; 0x05
    126c:	0e 94 69 09 	call	0x12d2	; 0x12d2 <action_exec>

//MATRIX_LOOP_END:

    hook_keyboard_loop();
    1270:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <hook_keyboard_loop>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    1274:	0e 94 89 08 	call	0x1112	; 0x1112 <host_keyboard_leds>
    1278:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <led_status.4900>
    127c:	89 17       	cp	r24, r25
    127e:	a1 f0       	breq	.+40     	; 0x12a8 <keyboard_task+0xfc>
        led_status = host_keyboard_leds();
    1280:	0e 94 89 08 	call	0x1112	; 0x1112 <host_keyboard_leds>
    1284:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <led_status.4900>
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    }
}
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	1f 91       	pop	r17
    1298:	0f 91       	pop	r16
    129a:	ff 90       	pop	r15
    129c:	ef 90       	pop	r14
    129e:	df 90       	pop	r13
    12a0:	cf 90       	pop	r12
    12a2:	bf 90       	pop	r11

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    12a4:	0c 94 5e 15 	jmp	0x2abc	; 0x2abc <hook_keyboard_leds_change>
    }
}
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	ff 90       	pop	r15
    12bc:	ef 90       	pop	r14
    12be:	df 90       	pop	r13
    12c0:	cf 90       	pop	r12
    12c2:	bf 90       	pop	r11
    12c4:	08 95       	ret

000012c6 <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    12c6:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <led_set>

000012ca <matrix_clear>:
    12ca:	08 95       	ret

000012cc <matrix_setup>:
    12cc:	08 95       	ret

000012ce <matrix_power_up>:
    12ce:	08 95       	ret

000012d0 <matrix_power_down>:
    return false;
}
#endif

__attribute__ ((weak)) void matrix_power_up(void) {}
__attribute__ ((weak)) void matrix_power_down(void) {}
    12d0:	08 95       	ret

000012d2 <action_exec>:
}

void type_code(uint8_t code)
{
    register_code(code);
    unregister_code(code);
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	2b 97       	sbiw	r28, 0x0b	; 11
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	94 2f       	mov	r25, r20
    12e8:	4f 83       	std	Y+7, r20	; 0x07
    12ea:	25 2f       	mov	r18, r21
    12ec:	58 87       	std	Y+8, r21	; 0x08
    12ee:	69 87       	std	Y+9, r22	; 0x09
    12f0:	7a 87       	std	Y+10, r23	; 0x0a
    12f2:	8b 87       	std	Y+11, r24	; 0x0b
    12f4:	4a 85       	ldd	r20, Y+10	; 0x0a
    12f6:	5b 85       	ldd	r21, Y+11	; 0x0b
    12f8:	45 2b       	or	r20, r21
    12fa:	31 f0       	breq	.+12     	; 0x1308 <action_exec+0x36>
    12fc:	2f 3f       	cpi	r18, 0xFF	; 255
    12fe:	31 f4       	brne	.+12     	; 0x130c <action_exec+0x3a>
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	9f 3f       	cpi	r25, 0xFF	; 255
    1304:	19 f4       	brne	.+6      	; 0x130c <action_exec+0x3a>
    1306:	03 c0       	rjmp	.+6      	; 0x130e <action_exec+0x3c>
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	01 c0       	rjmp	.+2      	; 0x130e <action_exec+0x3c>
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	80 fd       	sbrc	r24, 0
    1310:	07 c0       	rjmp	.+14     	; 0x1320 <action_exec+0x4e>
    1312:	4f 81       	ldd	r20, Y+7	; 0x07
    1314:	58 85       	ldd	r21, Y+8	; 0x08
    1316:	69 85       	ldd	r22, Y+9	; 0x09
    1318:	7a 85       	ldd	r23, Y+10	; 0x0a
    131a:	8b 85       	ldd	r24, Y+11	; 0x0b
    131c:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <hook_matrix_change>
    1320:	de 01       	movw	r26, r28
    1322:	11 96       	adiw	r26, 0x01	; 1
    1324:	86 e0       	ldi	r24, 0x06	; 6
    1326:	fd 01       	movw	r30, r26
    1328:	11 92       	st	Z+, r1
    132a:	8a 95       	dec	r24
    132c:	e9 f7       	brne	.-6      	; 0x1328 <action_exec+0x56>
    132e:	85 e0       	ldi	r24, 0x05	; 5
    1330:	fe 01       	movw	r30, r28
    1332:	37 96       	adiw	r30, 0x07	; 7
    1334:	01 90       	ld	r0, Z+
    1336:	0d 92       	st	X+, r0
    1338:	8a 95       	dec	r24
    133a:	e1 f7       	brne	.-8      	; 0x1334 <action_exec+0x62>
    133c:	49 81       	ldd	r20, Y+1	; 0x01
    133e:	5a 81       	ldd	r21, Y+2	; 0x02
    1340:	6b 81       	ldd	r22, Y+3	; 0x03
    1342:	7c 81       	ldd	r23, Y+4	; 0x04
    1344:	8d 81       	ldd	r24, Y+5	; 0x05
    1346:	9e 81       	ldd	r25, Y+6	; 0x06
    1348:	0e 94 77 11 	call	0x22ee	; 0x22ee <action_tapping_process>
    134c:	2b 96       	adiw	r28, 0x0b	; 11
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	08 95       	ret

0000135e <register_code>:
    135e:	88 23       	and	r24, r24
    1360:	09 f4       	brne	.+2      	; 0x1364 <register_code+0x6>
    1362:	df c0       	rjmp	.+446    	; 0x1522 <register_code+0x1c4>
    1364:	82 38       	cpi	r24, 0x82	; 130
    1366:	a1 f4       	brne	.+40     	; 0x1390 <register_code+0x32>
    1368:	0e 94 89 08 	call	0x1112	; 0x1112 <host_keyboard_leds>
    136c:	81 fd       	sbrc	r24, 1
    136e:	d9 c0       	rjmp	.+434    	; 0x1522 <register_code+0x1c4>
    1370:	89 e3       	ldi	r24, 0x39	; 57
    1372:	0e 94 69 14 	call	0x28d2	; 0x28d2 <add_key>
    1376:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <send_keyboard_report>
    137a:	2f ef       	ldi	r18, 0xFF	; 255
    137c:	81 ee       	ldi	r24, 0xE1	; 225
    137e:	94 e0       	ldi	r25, 0x04	; 4
    1380:	21 50       	subi	r18, 0x01	; 1
    1382:	80 40       	sbci	r24, 0x00	; 0
    1384:	90 40       	sbci	r25, 0x00	; 0
    1386:	e1 f7       	brne	.-8      	; 0x1380 <register_code+0x22>
    1388:	00 c0       	rjmp	.+0      	; 0x138a <register_code+0x2c>
    138a:	00 00       	nop
    138c:	89 e3       	ldi	r24, 0x39	; 57
    138e:	15 c0       	rjmp	.+42     	; 0x13ba <register_code+0x5c>
    1390:	83 38       	cpi	r24, 0x83	; 131
    1392:	b9 f4       	brne	.+46     	; 0x13c2 <register_code+0x64>
    1394:	0e 94 89 08 	call	0x1112	; 0x1112 <host_keyboard_leds>
    1398:	80 fd       	sbrc	r24, 0
    139a:	c3 c0       	rjmp	.+390    	; 0x1522 <register_code+0x1c4>
    139c:	83 e5       	ldi	r24, 0x53	; 83
    139e:	0e 94 69 14 	call	0x28d2	; 0x28d2 <add_key>
    13a2:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <send_keyboard_report>
    13a6:	2f ef       	ldi	r18, 0xFF	; 255
    13a8:	81 ee       	ldi	r24, 0xE1	; 225
    13aa:	94 e0       	ldi	r25, 0x04	; 4
    13ac:	21 50       	subi	r18, 0x01	; 1
    13ae:	80 40       	sbci	r24, 0x00	; 0
    13b0:	90 40       	sbci	r25, 0x00	; 0
    13b2:	e1 f7       	brne	.-8      	; 0x13ac <register_code+0x4e>
    13b4:	00 c0       	rjmp	.+0      	; 0x13b6 <register_code+0x58>
    13b6:	00 00       	nop
    13b8:	83 e5       	ldi	r24, 0x53	; 83
    13ba:	0e 94 a8 14 	call	0x2950	; 0x2950 <del_key>
    13be:	0c 94 26 15 	jmp	0x2a4c	; 0x2a4c <send_keyboard_report>
    13c2:	84 38       	cpi	r24, 0x84	; 132
    13c4:	a1 f4       	brne	.+40     	; 0x13ee <register_code+0x90>
    13c6:	0e 94 89 08 	call	0x1112	; 0x1112 <host_keyboard_leds>
    13ca:	82 fd       	sbrc	r24, 2
    13cc:	aa c0       	rjmp	.+340    	; 0x1522 <register_code+0x1c4>
    13ce:	87 e4       	ldi	r24, 0x47	; 71
    13d0:	0e 94 69 14 	call	0x28d2	; 0x28d2 <add_key>
    13d4:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <send_keyboard_report>
    13d8:	2f ef       	ldi	r18, 0xFF	; 255
    13da:	81 ee       	ldi	r24, 0xE1	; 225
    13dc:	94 e0       	ldi	r25, 0x04	; 4
    13de:	21 50       	subi	r18, 0x01	; 1
    13e0:	80 40       	sbci	r24, 0x00	; 0
    13e2:	90 40       	sbci	r25, 0x00	; 0
    13e4:	e1 f7       	brne	.-8      	; 0x13de <register_code+0x80>
    13e6:	00 c0       	rjmp	.+0      	; 0x13e8 <register_code+0x8a>
    13e8:	00 00       	nop
    13ea:	87 e4       	ldi	r24, 0x47	; 71
    13ec:	e6 cf       	rjmp	.-52     	; 0x13ba <register_code+0x5c>
    13ee:	9c ef       	ldi	r25, 0xFC	; 252
    13f0:	98 0f       	add	r25, r24
    13f2:	91 3a       	cpi	r25, 0xA1	; 161
    13f4:	18 f4       	brcc	.+6      	; 0x13fc <register_code+0x9e>
    13f6:	0e 94 69 14 	call	0x28d2	; 0x28d2 <add_key>
    13fa:	e1 cf       	rjmp	.-62     	; 0x13be <register_code+0x60>
    13fc:	90 e2       	ldi	r25, 0x20	; 32
    13fe:	98 0f       	add	r25, r24
    1400:	98 30       	cpi	r25, 0x08	; 8
    1402:	50 f4       	brcc	.+20     	; 0x1418 <register_code+0xba>
    1404:	87 70       	andi	r24, 0x07	; 7
    1406:	91 e0       	ldi	r25, 0x01	; 1
    1408:	01 c0       	rjmp	.+2      	; 0x140c <register_code+0xae>
    140a:	99 0f       	add	r25, r25
    140c:	8a 95       	dec	r24
    140e:	ea f7       	brpl	.-6      	; 0x140a <register_code+0xac>
    1410:	89 2f       	mov	r24, r25
    1412:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <add_mods>
    1416:	d3 cf       	rjmp	.-90     	; 0x13be <register_code+0x60>
    1418:	9b e5       	ldi	r25, 0x5B	; 91
    141a:	98 0f       	add	r25, r24
    141c:	93 30       	cpi	r25, 0x03	; 3
    141e:	70 f4       	brcc	.+28     	; 0x143c <register_code+0xde>
    1420:	85 3a       	cpi	r24, 0xA5	; 165
    1422:	29 f0       	breq	.+10     	; 0x142e <register_code+0xd0>
    1424:	86 3a       	cpi	r24, 0xA6	; 166
    1426:	31 f0       	breq	.+12     	; 0x1434 <register_code+0xd6>
    1428:	83 e8       	ldi	r24, 0x83	; 131
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	05 c0       	rjmp	.+10     	; 0x1438 <register_code+0xda>
    142e:	81 e8       	ldi	r24, 0x81	; 129
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <register_code+0xda>
    1434:	82 e8       	ldi	r24, 0x82	; 130
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <host_system_send>
    143c:	98 e5       	ldi	r25, 0x58	; 88
    143e:	98 0f       	add	r25, r24
    1440:	95 31       	cpi	r25, 0x15	; 21
    1442:	08 f0       	brcs	.+2      	; 0x1446 <register_code+0xe8>
    1444:	6e c0       	rjmp	.+220    	; 0x1522 <register_code+0x1c4>
    1446:	88 3a       	cpi	r24, 0xA8	; 168
    1448:	61 f1       	breq	.+88     	; 0x14a2 <register_code+0x144>
    144a:	89 3a       	cpi	r24, 0xA9	; 169
    144c:	69 f1       	breq	.+90     	; 0x14a8 <register_code+0x14a>
    144e:	8a 3a       	cpi	r24, 0xAA	; 170
    1450:	71 f1       	breq	.+92     	; 0x14ae <register_code+0x150>
    1452:	8b 3a       	cpi	r24, 0xAB	; 171
    1454:	79 f1       	breq	.+94     	; 0x14b4 <register_code+0x156>
    1456:	8c 3a       	cpi	r24, 0xAC	; 172
    1458:	81 f1       	breq	.+96     	; 0x14ba <register_code+0x15c>
    145a:	8d 3a       	cpi	r24, 0xAD	; 173
    145c:	89 f1       	breq	.+98     	; 0x14c0 <register_code+0x162>
    145e:	8e 3a       	cpi	r24, 0xAE	; 174
    1460:	91 f1       	breq	.+100    	; 0x14c6 <register_code+0x168>
    1462:	8f 3a       	cpi	r24, 0xAF	; 175
    1464:	99 f1       	breq	.+102    	; 0x14cc <register_code+0x16e>
    1466:	81 3b       	cpi	r24, 0xB1	; 177
    1468:	a1 f1       	breq	.+104    	; 0x14d2 <register_code+0x174>
    146a:	80 3b       	cpi	r24, 0xB0	; 176
    146c:	a9 f1       	breq	.+106    	; 0x14d8 <register_code+0x17a>
    146e:	82 3b       	cpi	r24, 0xB2	; 178
    1470:	b1 f1       	breq	.+108    	; 0x14de <register_code+0x180>
    1472:	83 3b       	cpi	r24, 0xB3	; 179
    1474:	b9 f1       	breq	.+110    	; 0x14e4 <register_code+0x186>
    1476:	84 3b       	cpi	r24, 0xB4	; 180
    1478:	c1 f1       	breq	.+112    	; 0x14ea <register_code+0x18c>
    147a:	85 3b       	cpi	r24, 0xB5	; 181
    147c:	c9 f1       	breq	.+114    	; 0x14f0 <register_code+0x192>
    147e:	86 3b       	cpi	r24, 0xB6	; 182
    1480:	d1 f1       	breq	.+116    	; 0x14f6 <register_code+0x198>
    1482:	87 3b       	cpi	r24, 0xB7	; 183
    1484:	d9 f1       	breq	.+118    	; 0x14fc <register_code+0x19e>
    1486:	88 3b       	cpi	r24, 0xB8	; 184
    1488:	e1 f1       	breq	.+120    	; 0x1502 <register_code+0x1a4>
    148a:	89 3b       	cpi	r24, 0xB9	; 185
    148c:	e9 f1       	breq	.+122    	; 0x1508 <register_code+0x1aa>
    148e:	8a 3b       	cpi	r24, 0xBA	; 186
    1490:	f1 f1       	breq	.+124    	; 0x150e <register_code+0x1b0>
    1492:	8b 3b       	cpi	r24, 0xBB	; 187
    1494:	f9 f1       	breq	.+126    	; 0x1514 <register_code+0x1b6>
    1496:	8c 3b       	cpi	r24, 0xBC	; 188
    1498:	09 f4       	brne	.+2      	; 0x149c <register_code+0x13e>
    149a:	3f c0       	rjmp	.+126    	; 0x151a <register_code+0x1bc>
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	3e c0       	rjmp	.+124    	; 0x151e <register_code+0x1c0>
    14a2:	82 ee       	ldi	r24, 0xE2	; 226
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	3b c0       	rjmp	.+118    	; 0x151e <register_code+0x1c0>
    14a8:	89 ee       	ldi	r24, 0xE9	; 233
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	38 c0       	rjmp	.+112    	; 0x151e <register_code+0x1c0>
    14ae:	8a ee       	ldi	r24, 0xEA	; 234
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	35 c0       	rjmp	.+106    	; 0x151e <register_code+0x1c0>
    14b4:	85 eb       	ldi	r24, 0xB5	; 181
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	32 c0       	rjmp	.+100    	; 0x151e <register_code+0x1c0>
    14ba:	86 eb       	ldi	r24, 0xB6	; 182
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	2f c0       	rjmp	.+94     	; 0x151e <register_code+0x1c0>
    14c0:	83 eb       	ldi	r24, 0xB3	; 179
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	2c c0       	rjmp	.+88     	; 0x151e <register_code+0x1c0>
    14c6:	84 eb       	ldi	r24, 0xB4	; 180
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	29 c0       	rjmp	.+82     	; 0x151e <register_code+0x1c0>
    14cc:	87 eb       	ldi	r24, 0xB7	; 183
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	26 c0       	rjmp	.+76     	; 0x151e <register_code+0x1c0>
    14d2:	8c ec       	ldi	r24, 0xCC	; 204
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	23 c0       	rjmp	.+70     	; 0x151e <register_code+0x1c0>
    14d8:	8d ec       	ldi	r24, 0xCD	; 205
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	20 c0       	rjmp	.+64     	; 0x151e <register_code+0x1c0>
    14de:	83 e8       	ldi	r24, 0x83	; 131
    14e0:	91 e0       	ldi	r25, 0x01	; 1
    14e2:	1d c0       	rjmp	.+58     	; 0x151e <register_code+0x1c0>
    14e4:	8a e8       	ldi	r24, 0x8A	; 138
    14e6:	91 e0       	ldi	r25, 0x01	; 1
    14e8:	1a c0       	rjmp	.+52     	; 0x151e <register_code+0x1c0>
    14ea:	82 e9       	ldi	r24, 0x92	; 146
    14ec:	91 e0       	ldi	r25, 0x01	; 1
    14ee:	17 c0       	rjmp	.+46     	; 0x151e <register_code+0x1c0>
    14f0:	84 e9       	ldi	r24, 0x94	; 148
    14f2:	91 e0       	ldi	r25, 0x01	; 1
    14f4:	14 c0       	rjmp	.+40     	; 0x151e <register_code+0x1c0>
    14f6:	81 e2       	ldi	r24, 0x21	; 33
    14f8:	92 e0       	ldi	r25, 0x02	; 2
    14fa:	11 c0       	rjmp	.+34     	; 0x151e <register_code+0x1c0>
    14fc:	83 e2       	ldi	r24, 0x23	; 35
    14fe:	92 e0       	ldi	r25, 0x02	; 2
    1500:	0e c0       	rjmp	.+28     	; 0x151e <register_code+0x1c0>
    1502:	84 e2       	ldi	r24, 0x24	; 36
    1504:	92 e0       	ldi	r25, 0x02	; 2
    1506:	0b c0       	rjmp	.+22     	; 0x151e <register_code+0x1c0>
    1508:	85 e2       	ldi	r24, 0x25	; 37
    150a:	92 e0       	ldi	r25, 0x02	; 2
    150c:	08 c0       	rjmp	.+16     	; 0x151e <register_code+0x1c0>
    150e:	86 e2       	ldi	r24, 0x26	; 38
    1510:	92 e0       	ldi	r25, 0x02	; 2
    1512:	05 c0       	rjmp	.+10     	; 0x151e <register_code+0x1c0>
    1514:	87 e2       	ldi	r24, 0x27	; 39
    1516:	92 e0       	ldi	r25, 0x02	; 2
    1518:	02 c0       	rjmp	.+4      	; 0x151e <register_code+0x1c0>
    151a:	8a e2       	ldi	r24, 0x2A	; 42
    151c:	92 e0       	ldi	r25, 0x02	; 2
    151e:	0c 94 b6 08 	jmp	0x116c	; 0x116c <host_consumer_send>
    1522:	08 95       	ret

00001524 <unregister_code>:
    1524:	88 23       	and	r24, r24
    1526:	09 f4       	brne	.+2      	; 0x152a <unregister_code+0x6>
    1528:	66 c0       	rjmp	.+204    	; 0x15f6 <unregister_code+0xd2>
    152a:	82 38       	cpi	r24, 0x82	; 130
    152c:	a1 f4       	brne	.+40     	; 0x1556 <unregister_code+0x32>
    152e:	0e 94 89 08 	call	0x1112	; 0x1112 <host_keyboard_leds>
    1532:	81 ff       	sbrs	r24, 1
    1534:	60 c0       	rjmp	.+192    	; 0x15f6 <unregister_code+0xd2>
    1536:	89 e3       	ldi	r24, 0x39	; 57
    1538:	0e 94 69 14 	call	0x28d2	; 0x28d2 <add_key>
    153c:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <send_keyboard_report>
    1540:	2f ef       	ldi	r18, 0xFF	; 255
    1542:	81 ee       	ldi	r24, 0xE1	; 225
    1544:	94 e0       	ldi	r25, 0x04	; 4
    1546:	21 50       	subi	r18, 0x01	; 1
    1548:	80 40       	sbci	r24, 0x00	; 0
    154a:	90 40       	sbci	r25, 0x00	; 0
    154c:	e1 f7       	brne	.-8      	; 0x1546 <unregister_code+0x22>
    154e:	00 c0       	rjmp	.+0      	; 0x1550 <unregister_code+0x2c>
    1550:	00 00       	nop
    1552:	89 e3       	ldi	r24, 0x39	; 57
    1554:	15 c0       	rjmp	.+42     	; 0x1580 <unregister_code+0x5c>
    1556:	83 38       	cpi	r24, 0x83	; 131
    1558:	b9 f4       	brne	.+46     	; 0x1588 <unregister_code+0x64>
    155a:	0e 94 89 08 	call	0x1112	; 0x1112 <host_keyboard_leds>
    155e:	80 ff       	sbrs	r24, 0
    1560:	4a c0       	rjmp	.+148    	; 0x15f6 <unregister_code+0xd2>
    1562:	83 e5       	ldi	r24, 0x53	; 83
    1564:	0e 94 69 14 	call	0x28d2	; 0x28d2 <add_key>
    1568:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <send_keyboard_report>
    156c:	2f ef       	ldi	r18, 0xFF	; 255
    156e:	81 ee       	ldi	r24, 0xE1	; 225
    1570:	94 e0       	ldi	r25, 0x04	; 4
    1572:	21 50       	subi	r18, 0x01	; 1
    1574:	80 40       	sbci	r24, 0x00	; 0
    1576:	90 40       	sbci	r25, 0x00	; 0
    1578:	e1 f7       	brne	.-8      	; 0x1572 <unregister_code+0x4e>
    157a:	00 c0       	rjmp	.+0      	; 0x157c <unregister_code+0x58>
    157c:	00 00       	nop
    157e:	83 e5       	ldi	r24, 0x53	; 83
    1580:	0e 94 a8 14 	call	0x2950	; 0x2950 <del_key>
    1584:	0c 94 26 15 	jmp	0x2a4c	; 0x2a4c <send_keyboard_report>
    1588:	84 38       	cpi	r24, 0x84	; 132
    158a:	a1 f4       	brne	.+40     	; 0x15b4 <unregister_code+0x90>
    158c:	0e 94 89 08 	call	0x1112	; 0x1112 <host_keyboard_leds>
    1590:	82 ff       	sbrs	r24, 2
    1592:	31 c0       	rjmp	.+98     	; 0x15f6 <unregister_code+0xd2>
    1594:	87 e4       	ldi	r24, 0x47	; 71
    1596:	0e 94 69 14 	call	0x28d2	; 0x28d2 <add_key>
    159a:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <send_keyboard_report>
    159e:	2f ef       	ldi	r18, 0xFF	; 255
    15a0:	81 ee       	ldi	r24, 0xE1	; 225
    15a2:	94 e0       	ldi	r25, 0x04	; 4
    15a4:	21 50       	subi	r18, 0x01	; 1
    15a6:	80 40       	sbci	r24, 0x00	; 0
    15a8:	90 40       	sbci	r25, 0x00	; 0
    15aa:	e1 f7       	brne	.-8      	; 0x15a4 <unregister_code+0x80>
    15ac:	00 c0       	rjmp	.+0      	; 0x15ae <unregister_code+0x8a>
    15ae:	00 00       	nop
    15b0:	87 e4       	ldi	r24, 0x47	; 71
    15b2:	e6 cf       	rjmp	.-52     	; 0x1580 <unregister_code+0x5c>
    15b4:	9c ef       	ldi	r25, 0xFC	; 252
    15b6:	98 0f       	add	r25, r24
    15b8:	91 3a       	cpi	r25, 0xA1	; 161
    15ba:	10 f3       	brcs	.-60     	; 0x1580 <unregister_code+0x5c>
    15bc:	90 e2       	ldi	r25, 0x20	; 32
    15be:	98 0f       	add	r25, r24
    15c0:	98 30       	cpi	r25, 0x08	; 8
    15c2:	50 f4       	brcc	.+20     	; 0x15d8 <unregister_code+0xb4>
    15c4:	87 70       	andi	r24, 0x07	; 7
    15c6:	91 e0       	ldi	r25, 0x01	; 1
    15c8:	01 c0       	rjmp	.+2      	; 0x15cc <unregister_code+0xa8>
    15ca:	99 0f       	add	r25, r25
    15cc:	8a 95       	dec	r24
    15ce:	ea f7       	brpl	.-6      	; 0x15ca <unregister_code+0xa6>
    15d0:	89 2f       	mov	r24, r25
    15d2:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <del_mods>
    15d6:	d6 cf       	rjmp	.-84     	; 0x1584 <unregister_code+0x60>
    15d8:	9b e5       	ldi	r25, 0x5B	; 91
    15da:	98 0f       	add	r25, r24
    15dc:	93 30       	cpi	r25, 0x03	; 3
    15de:	20 f4       	brcc	.+8      	; 0x15e8 <unregister_code+0xc4>
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <host_system_send>
    15e8:	88 5a       	subi	r24, 0xA8	; 168
    15ea:	85 31       	cpi	r24, 0x15	; 21
    15ec:	20 f4       	brcc	.+8      	; 0x15f6 <unregister_code+0xd2>
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	0c 94 b6 08 	jmp	0x116c	; 0x116c <host_consumer_send>
    15f6:	08 95       	ret

000015f8 <register_mods>:
}

void register_mods(uint8_t mods)
{
    if (mods) {
    15f8:	88 23       	and	r24, r24
    15fa:	21 f0       	breq	.+8      	; 0x1604 <register_mods+0xc>
        add_mods(mods);
    15fc:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <add_mods>
        send_keyboard_report();
    1600:	0c 94 26 15 	jmp	0x2a4c	; 0x2a4c <send_keyboard_report>
    1604:	08 95       	ret

00001606 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    1606:	88 23       	and	r24, r24
    1608:	21 f0       	breq	.+8      	; 0x1612 <unregister_mods+0xc>
        del_mods(mods);
    160a:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <del_mods>
        send_keyboard_report();
    160e:	0c 94 26 15 	jmp	0x2a4c	; 0x2a4c <send_keyboard_report>
    1612:	08 95       	ret

00001614 <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    1614:	cf 92       	push	r12
    1616:	df 92       	push	r13
    1618:	ef 92       	push	r14
    161a:	ff 92       	push	r15
    161c:	0f 93       	push	r16
    161e:	1f 93       	push	r17
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
    1624:	00 d0       	rcall	.+0      	; 0x1626 <process_action+0x12>
    1626:	00 d0       	rcall	.+0      	; 0x1628 <process_action+0x14>
    1628:	1f 92       	push	r1
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	6c 01       	movw	r12, r24
    keyevent_t event = record->event;
    1630:	85 e0       	ldi	r24, 0x05	; 5
    1632:	f6 01       	movw	r30, r12
    1634:	de 01       	movw	r26, r28
    1636:	11 96       	adiw	r26, 0x01	; 1
    1638:	01 90       	ld	r0, Z+
    163a:	0d 92       	st	X+, r0
    163c:	8a 95       	dec	r24
    163e:	e1 f7       	brne	.-8      	; 0x1638 <process_action+0x24>
    1640:	f6 01       	movw	r30, r12
    1642:	40 81       	ld	r20, Z
    1644:	51 81       	ldd	r21, Z+1	; 0x01
    1646:	23 81       	ldd	r18, Z+3	; 0x03
    1648:	34 81       	ldd	r19, Z+4	; 0x04

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    164a:	21 15       	cp	r18, r1
    164c:	31 05       	cpc	r19, r1
    164e:	31 f0       	breq	.+12     	; 0x165c <process_action+0x48>
    1650:	5f 3f       	cpi	r21, 0xFF	; 255
    1652:	31 f4       	brne	.+12     	; 0x1660 <process_action+0x4c>
    1654:	91 e0       	ldi	r25, 0x01	; 1
    1656:	4f 3f       	cpi	r20, 0xFF	; 255
    1658:	19 f4       	brne	.+6      	; 0x1660 <process_action+0x4c>
    165a:	03 c0       	rjmp	.+6      	; 0x1662 <process_action+0x4e>
    165c:	91 e0       	ldi	r25, 0x01	; 1
    165e:	01 c0       	rjmp	.+2      	; 0x1662 <process_action+0x4e>
    1660:	90 e0       	ldi	r25, 0x00	; 0
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
#endif

    if (IS_NOEVENT(event)) { return; }
    1662:	90 fd       	sbrc	r25, 0
    1664:	0a c3       	rjmp	.+1556   	; 0x1c7a <process_action+0x666>
#endif
}

void process_action(keyrecord_t *record)
{
    keyevent_t event = record->event;
    1666:	f6 01       	movw	r30, r12
    1668:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    166a:	e5 80       	ldd	r14, Z+5	; 0x05
    166c:	e2 94       	swap	r14
    166e:	8f e0       	ldi	r24, 0x0F	; 15
    1670:	e8 22       	and	r14, r24
#endif

    if (IS_NOEVENT(event)) { return; }

    action_t action = layer_switch_get_action(event);
    1672:	72 2f       	mov	r23, r18
    1674:	3d 83       	std	Y+5, r19	; 0x05
    1676:	2c 83       	std	Y+4, r18	; 0x04
    1678:	6f 2d       	mov	r22, r15
    167a:	8d 81       	ldd	r24, Y+5	; 0x05
    167c:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <layer_switch_get_action>
    1680:	8c 01       	movw	r16, r24
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    1682:	0e 94 df 13 	call	0x27be	; 0x27be <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    1686:	0e 94 cf 12 	call	0x259e	; 0x259e <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    168a:	e1 2f       	mov	r30, r17
    168c:	e2 95       	swap	r30
    168e:	ef 70       	andi	r30, 0x0F	; 15
    1690:	8e 2f       	mov	r24, r30
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	fc 01       	movw	r30, r24
    1696:	ec 5b       	subi	r30, 0xBC	; 188
    1698:	ff 4f       	sbci	r31, 0xFF	; 255
    169a:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    169e:	81 2f       	mov	r24, r17
    16a0:	80 7f       	andi	r24, 0xF0	; 240
    16a2:	1f 70       	andi	r17, 0x0F	; 15
    16a4:	88 23       	and	r24, r24
    16a6:	11 f0       	breq	.+4      	; 0x16ac <process_action+0x98>
    16a8:	12 95       	swap	r17
    16aa:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    16ac:	ff 20       	and	r15, r15
    16ae:	49 f0       	breq	.+18     	; 0x16c2 <process_action+0xae>
                    if (mods) {
    16b0:	11 23       	and	r17, r17
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <process_action+0xa2>
    16b4:	3b c2       	rjmp	.+1142   	; 0x1b2c <process_action+0x518>
                        add_weak_mods(mods);
    16b6:	81 2f       	mov	r24, r17
    16b8:	0e 94 ff 14 	call	0x29fe	; 0x29fe <add_weak_mods>
                        send_keyboard_report();
    16bc:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <send_keyboard_report>
    16c0:	35 c2       	rjmp	.+1130   	; 0x1b2c <process_action+0x518>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    16c2:	80 2f       	mov	r24, r16
    16c4:	0e 94 92 0a 	call	0x1524	; 0x1524 <unregister_code>
                    if (mods) {
    16c8:	11 23       	and	r17, r17
    16ca:	09 f4       	brne	.+2      	; 0x16ce <process_action+0xba>
    16cc:	d6 c2       	rjmp	.+1452   	; 0x1c7a <process_action+0x666>
                        del_weak_mods(mods);
    16ce:	81 2f       	mov	r24, r17
    16d0:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	1f 91       	pop	r17
    16e4:	0f 91       	pop	r16
    16e6:	ff 90       	pop	r15
    16e8:	ef 90       	pop	r14
    16ea:	df 90       	pop	r13
    16ec:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    16ee:	0c 94 26 15 	jmp	0x2a4c	; 0x2a4c <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    16f2:	81 2f       	mov	r24, r17
    16f4:	80 7f       	andi	r24, 0xF0	; 240
    16f6:	1f 70       	andi	r17, 0x0F	; 15
    16f8:	80 32       	cpi	r24, 0x20	; 32
    16fa:	11 f0       	breq	.+4      	; 0x1700 <process_action+0xec>
    16fc:	12 95       	swap	r17
    16fe:	10 7f       	andi	r17, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.key.code) {
    1700:	00 23       	and	r16, r16
    1702:	19 f0       	breq	.+6      	; 0x170a <process_action+0xf6>
    1704:	01 30       	cpi	r16, 0x01	; 1
    1706:	09 f1       	breq	.+66     	; 0x174a <process_action+0x136>
    1708:	2b c0       	rjmp	.+86     	; 0x1760 <process_action+0x14c>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    170a:	ff 20       	and	r15, r15
    170c:	a9 f0       	breq	.+42     	; 0x1738 <process_action+0x124>
                            if (tap_count == 0) {
    170e:	ee 20       	and	r14, r14
    1710:	59 f1       	breq	.+86     	; 0x1768 <process_action+0x154>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    1712:	f1 e0       	ldi	r31, 0x01	; 1
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    1714:	81 2f       	mov	r24, r17
                        // Oneshot modifier
                        if (event.pressed) {
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    1716:	ef 12       	cpse	r14, r31
    1718:	28 c0       	rjmp	.+80     	; 0x176a <process_action+0x156>
            break;
#endif
        default:
            break;
    }
}
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	1f 91       	pop	r17
    172a:	0f 91       	pop	r16
    172c:	ff 90       	pop	r15
    172e:	ef 90       	pop	r14
    1730:	df 90       	pop	r13
    1732:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    1734:	0c 94 0f 15 	jmp	0x2a1e	; 0x2a1e <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    1738:	ee 20       	and	r14, r14
    173a:	21 f0       	breq	.+8      	; 0x1744 <process_action+0x130>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	e8 16       	cp	r14, r24
    1740:	09 f4       	brne	.+2      	; 0x1744 <process_action+0x130>
    1742:	9b c2       	rjmp	.+1334   	; 0x1c7a <process_action+0x666>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    1744:	0e 94 12 15 	call	0x2a24	; 0x2a24 <clear_oneshot_mods>
    1748:	2d c0       	rjmp	.+90     	; 0x17a4 <process_action+0x190>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    174a:	ff 20       	and	r15, r15
    174c:	e9 f0       	breq	.+58     	; 0x1788 <process_action+0x174>
                            if (tap_count <= TAPPING_TOGGLE) {
    174e:	e5 e0       	ldi	r30, 0x05	; 5
    1750:	ee 15       	cp	r30, r14
    1752:	08 f4       	brcc	.+2      	; 0x1756 <process_action+0x142>
    1754:	92 c2       	rjmp	.+1316   	; 0x1c7a <process_action+0x666>
                                if (mods & get_mods()) {
    1756:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <get_mods>
    175a:	81 23       	and	r24, r17
    175c:	29 f0       	breq	.+10     	; 0x1768 <process_action+0x154>
    175e:	22 c0       	rjmp	.+68     	; 0x17a4 <process_action+0x190>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    1760:	ff 20       	and	r15, r15
    1762:	f1 f0       	breq	.+60     	; 0x17a0 <process_action+0x18c>
                            if (tap_count > 0) {
    1764:	e1 10       	cpse	r14, r1
    1766:	15 c0       	rjmp	.+42     	; 0x1792 <process_action+0x17e>
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    1768:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	1f 91       	pop	r17
    177a:	0f 91       	pop	r16
    177c:	ff 90       	pop	r15
    177e:	ef 90       	pop	r14
    1780:	df 90       	pop	r13
    1782:	cf 90       	pop	r12
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    1784:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <register_mods>
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    1788:	f4 e0       	ldi	r31, 0x04	; 4
    178a:	fe 15       	cp	r31, r14
    178c:	08 f4       	brcc	.+2      	; 0x1790 <process_action+0x17c>
    178e:	75 c2       	rjmp	.+1258   	; 0x1c7a <process_action+0x666>
    1790:	09 c0       	rjmp	.+18     	; 0x17a4 <process_action+0x190>
                        }
                        break;
                    default:
                        if (event.pressed) {
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
    1792:	f6 01       	movw	r30, r12
    1794:	85 81       	ldd	r24, Z+5	; 0x05
    1796:	80 ff       	sbrs	r24, 0
    1798:	c9 c1       	rjmp	.+914    	; 0x1b2c <process_action+0x518>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    179a:	8f 70       	andi	r24, 0x0F	; 15
    179c:	85 83       	std	Z+5, r24	; 0x05
    179e:	e4 cf       	rjmp	.-56     	; 0x1768 <process_action+0x154>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    17a0:	e1 10       	cpse	r14, r1
    17a2:	d7 c1       	rjmp	.+942    	; 0x1b52 <process_action+0x53e>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    17a4:	81 2f       	mov	r24, r17
    17a6:	4a c1       	rjmp	.+660    	; 0x1a3c <process_action+0x428>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    17a8:	81 2f       	mov	r24, r17
    17aa:	86 95       	lsr	r24
    17ac:	86 95       	lsr	r24
    17ae:	83 70       	andi	r24, 0x03	; 3
    17b0:	19 f0       	breq	.+6      	; 0x17b8 <process_action+0x1a4>
    17b2:	81 30       	cpi	r24, 0x01	; 1
    17b4:	b9 f0       	breq	.+46     	; 0x17e4 <process_action+0x1d0>
    17b6:	61 c2       	rjmp	.+1218   	; 0x1c7a <process_action+0x666>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    17b8:	ff 20       	and	r15, r15
    17ba:	19 f0       	breq	.+6      	; 0x17c2 <process_action+0x1ae>
                        host_system_send(action.usage.code);
    17bc:	c8 01       	movw	r24, r16
    17be:	93 70       	andi	r25, 0x03	; 3
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <process_action+0x1b2>
                    } else {
                        host_system_send(0);
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	1f 91       	pop	r17
    17d6:	0f 91       	pop	r16
    17d8:	ff 90       	pop	r15
    17da:	ef 90       	pop	r14
    17dc:	df 90       	pop	r13
    17de:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    17e0:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    17e4:	ff 20       	and	r15, r15
    17e6:	19 f0       	breq	.+6      	; 0x17ee <process_action+0x1da>
                        host_consumer_send(action.usage.code);
    17e8:	c8 01       	movw	r24, r16
    17ea:	93 70       	andi	r25, 0x03	; 3
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <process_action+0x1de>
                    } else {
                        host_consumer_send(0);
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	1f 91       	pop	r17
    1802:	0f 91       	pop	r16
    1804:	ff 90       	pop	r15
    1806:	ef 90       	pop	r14
    1808:	df 90       	pop	r13
    180a:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    180c:	0c 94 b6 08 	jmp	0x116c	; 0x116c <host_consumer_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    1810:	81 2f       	mov	r24, r17
    1812:	83 70       	andi	r24, 0x03	; 3
    1814:	09 f0       	breq	.+2      	; 0x1818 <process_action+0x204>
    1816:	70 c0       	rjmp	.+224    	; 0x18f8 <process_action+0x2e4>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    1818:	f1 10       	cpse	r15, r1
    181a:	2f c2       	rjmp	.+1118   	; 0x1c7a <process_action+0x666>
                    uint8_t shift = action.layer_bitop.part*4;
    181c:	20 2f       	mov	r18, r16
    181e:	22 95       	swap	r18
    1820:	26 95       	lsr	r18
    1822:	27 70       	andi	r18, 0x07	; 7
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    1824:	22 0f       	add	r18, r18
    1826:	22 0f       	add	r18, r18
    1828:	60 2f       	mov	r22, r16
    182a:	6f 70       	andi	r22, 0x0F	; 15
    182c:	86 2f       	mov	r24, r22
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	a0 e0       	ldi	r26, 0x00	; 0
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	6c 01       	movw	r12, r24
    1836:	7d 01       	movw	r14, r26
    1838:	02 2e       	mov	r0, r18
    183a:	04 c0       	rjmp	.+8      	; 0x1844 <process_action+0x230>
    183c:	cc 0c       	add	r12, r12
    183e:	dd 1c       	adc	r13, r13
    1840:	ee 1c       	adc	r14, r14
    1842:	ff 1c       	adc	r15, r15
    1844:	0a 94       	dec	r0
    1846:	d2 f7       	brpl	.-12     	; 0x183c <process_action+0x228>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    1848:	04 ff       	sbrs	r16, 4
    184a:	12 c0       	rjmp	.+36     	; 0x1870 <process_action+0x25c>
    184c:	8f e0       	ldi	r24, 0x0F	; 15
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	a0 e0       	ldi	r26, 0x00	; 0
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	04 c0       	rjmp	.+8      	; 0x185e <process_action+0x24a>
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	aa 1f       	adc	r26, r26
    185c:	bb 1f       	adc	r27, r27
    185e:	2a 95       	dec	r18
    1860:	d2 f7       	brpl	.-12     	; 0x1856 <process_action+0x242>
    1862:	bc 01       	movw	r22, r24
    1864:	cd 01       	movw	r24, r26
    1866:	60 95       	com	r22
    1868:	70 95       	com	r23
    186a:	80 95       	com	r24
    186c:	90 95       	com	r25
    186e:	03 c0       	rjmp	.+6      	; 0x1876 <process_action+0x262>
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	70 e0       	ldi	r23, 0x00	; 0
    1874:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    1876:	16 95       	lsr	r17
    1878:	16 95       	lsr	r17
    187a:	13 70       	andi	r17, 0x03	; 3
    187c:	12 30       	cpi	r17, 0x02	; 2
    187e:	b1 f0       	breq	.+44     	; 0x18ac <process_action+0x298>
    1880:	40 f5       	brcc	.+80     	; 0x18d2 <process_action+0x2be>
    1882:	6c 29       	or	r22, r12
    1884:	7d 29       	or	r23, r13
    1886:	8e 29       	or	r24, r14
    1888:	9f 29       	or	r25, r15
    188a:	11 30       	cpi	r17, 0x01	; 1
    188c:	31 f1       	breq	.+76     	; 0x18da <process_action+0x2c6>
            break;
#endif
        default:
            break;
    }
}
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	ff 90       	pop	r15
    18a2:	ef 90       	pop	r14
    18a4:	df 90       	pop	r13
    18a6:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    18a8:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    18ac:	6c 29       	or	r22, r12
    18ae:	7d 29       	or	r23, r13
    18b0:	8e 29       	or	r24, r14
    18b2:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	df 91       	pop	r29
    18c0:	cf 91       	pop	r28
    18c2:	1f 91       	pop	r17
    18c4:	0f 91       	pop	r16
    18c6:	ff 90       	pop	r15
    18c8:	ef 90       	pop	r14
    18ca:	df 90       	pop	r13
    18cc:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    18ce:	0c 94 0e 13 	jmp	0x261c	; 0x261c <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    18d2:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <default_layer_and>
    18d6:	c7 01       	movw	r24, r14
    18d8:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	1f 91       	pop	r17
    18ea:	0f 91       	pop	r16
    18ec:	ff 90       	pop	r15
    18ee:	ef 90       	pop	r14
    18f0:	df 90       	pop	r13
    18f2:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    18f4:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    18f8:	ff 20       	and	r15, r15
    18fa:	19 f0       	breq	.+6      	; 0x1902 <process_action+0x2ee>
    18fc:	81 2f       	mov	r24, r17
    18fe:	81 70       	andi	r24, 0x01	; 1
    1900:	01 c0       	rjmp	.+2      	; 0x1904 <process_action+0x2f0>
    1902:	86 95       	lsr	r24
    1904:	88 23       	and	r24, r24
    1906:	09 f4       	brne	.+2      	; 0x190a <process_action+0x2f6>
    1908:	b8 c1       	rjmp	.+880    	; 0x1c7a <process_action+0x666>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    190a:	20 2f       	mov	r18, r16
    190c:	22 95       	swap	r18
    190e:	26 95       	lsr	r18
    1910:	27 70       	andi	r18, 0x07	; 7
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    1912:	22 0f       	add	r18, r18
    1914:	22 0f       	add	r18, r18
    1916:	60 2f       	mov	r22, r16
    1918:	6f 70       	andi	r22, 0x0F	; 15
    191a:	86 2f       	mov	r24, r22
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	a0 e0       	ldi	r26, 0x00	; 0
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	6c 01       	movw	r12, r24
    1924:	7d 01       	movw	r14, r26
    1926:	02 2e       	mov	r0, r18
    1928:	04 c0       	rjmp	.+8      	; 0x1932 <process_action+0x31e>
    192a:	cc 0c       	add	r12, r12
    192c:	dd 1c       	adc	r13, r13
    192e:	ee 1c       	adc	r14, r14
    1930:	ff 1c       	adc	r15, r15
    1932:	0a 94       	dec	r0
    1934:	d2 f7       	brpl	.-12     	; 0x192a <process_action+0x316>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    1936:	04 ff       	sbrs	r16, 4
    1938:	12 c0       	rjmp	.+36     	; 0x195e <process_action+0x34a>
    193a:	8f e0       	ldi	r24, 0x0F	; 15
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	a0 e0       	ldi	r26, 0x00	; 0
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	04 c0       	rjmp	.+8      	; 0x194c <process_action+0x338>
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	aa 1f       	adc	r26, r26
    194a:	bb 1f       	adc	r27, r27
    194c:	2a 95       	dec	r18
    194e:	d2 f7       	brpl	.-12     	; 0x1944 <process_action+0x330>
    1950:	bc 01       	movw	r22, r24
    1952:	cd 01       	movw	r24, r26
    1954:	60 95       	com	r22
    1956:	70 95       	com	r23
    1958:	80 95       	com	r24
    195a:	90 95       	com	r25
    195c:	03 c0       	rjmp	.+6      	; 0x1964 <process_action+0x350>
    195e:	60 e0       	ldi	r22, 0x00	; 0
    1960:	70 e0       	ldi	r23, 0x00	; 0
    1962:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    1964:	16 95       	lsr	r17
    1966:	16 95       	lsr	r17
    1968:	13 70       	andi	r17, 0x03	; 3
    196a:	12 30       	cpi	r17, 0x02	; 2
    196c:	b1 f0       	breq	.+44     	; 0x199a <process_action+0x386>
    196e:	40 f5       	brcc	.+80     	; 0x19c0 <process_action+0x3ac>
    1970:	6c 29       	or	r22, r12
    1972:	7d 29       	or	r23, r13
    1974:	8e 29       	or	r24, r14
    1976:	9f 29       	or	r25, r15
    1978:	11 30       	cpi	r17, 0x01	; 1
    197a:	31 f1       	breq	.+76     	; 0x19c8 <process_action+0x3b4>
            break;
#endif
        default:
            break;
    }
}
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	1f 91       	pop	r17
    198c:	0f 91       	pop	r16
    198e:	ff 90       	pop	r15
    1990:	ef 90       	pop	r14
    1992:	df 90       	pop	r13
    1994:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    1996:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    199a:	6c 29       	or	r22, r12
    199c:	7d 29       	or	r23, r13
    199e:	8e 29       	or	r24, r14
    19a0:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	df 91       	pop	r29
    19ae:	cf 91       	pop	r28
    19b0:	1f 91       	pop	r17
    19b2:	0f 91       	pop	r16
    19b4:	ff 90       	pop	r15
    19b6:	ef 90       	pop	r14
    19b8:	df 90       	pop	r13
    19ba:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    19bc:	0c 94 cd 13 	jmp	0x279a	; 0x279a <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    19c0:	0e 94 bb 13 	call	0x2776	; 0x2776 <layer_and>
    19c4:	c7 01       	movw	r24, r14
    19c6:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	1f 91       	pop	r17
    19d8:	0f 91       	pop	r16
    19da:	ff 90       	pop	r15
    19dc:	ef 90       	pop	r14
    19de:	df 90       	pop	r13
    19e0:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    19e2:	0c 94 a9 13 	jmp	0x2752	; 0x2752 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    19e6:	00 3f       	cpi	r16, 0xF0	; 240
    19e8:	c1 f1       	breq	.+112    	; 0x1a5a <process_action+0x446>
    19ea:	28 f4       	brcc	.+10     	; 0x19f6 <process_action+0x3e2>
    19ec:	80 e4       	ldi	r24, 0x40	; 64
    19ee:	80 0f       	add	r24, r16
    19f0:	80 32       	cpi	r24, 0x20	; 32
    19f2:	50 f0       	brcs	.+20     	; 0x1a08 <process_action+0x3f4>
    19f4:	96 c0       	rjmp	.+300    	; 0x1b22 <process_action+0x50e>
    19f6:	02 3f       	cpi	r16, 0xF2	; 242
    19f8:	09 f4       	brne	.+2      	; 0x19fc <process_action+0x3e8>
    19fa:	5e c0       	rjmp	.+188    	; 0x1ab8 <process_action+0x4a4>
    19fc:	08 f4       	brcc	.+2      	; 0x1a00 <process_action+0x3ec>
    19fe:	49 c0       	rjmp	.+146    	; 0x1a92 <process_action+0x47e>
    1a00:	03 3f       	cpi	r16, 0xF3	; 243
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <process_action+0x3f2>
    1a04:	6c c0       	rjmp	.+216    	; 0x1ade <process_action+0x4ca>
    1a06:	8d c0       	rjmp	.+282    	; 0x1b22 <process_action+0x50e>
    1a08:	f0 2f       	mov	r31, r16
    1a0a:	f0 71       	andi	r31, 0x10	; 16
    1a0c:	ef 2e       	mov	r14, r31
    1a0e:	81 2f       	mov	r24, r17
    1a10:	8f 71       	andi	r24, 0x1F	; 31
                case 0xc0 ... 0xdf:
                    /* layer On/Off with modifiers */
                    if (event.pressed) {
    1a12:	ff 20       	and	r15, r15
    1a14:	51 f0       	breq	.+20     	; 0x1a2a <process_action+0x416>
                        layer_on(action.layer_tap.val);
    1a16:	0e 94 42 13 	call	0x2684	; 0x2684 <layer_on>
                        register_mods((action.layer_tap.code & 0x10) ?
    1a1a:	80 2f       	mov	r24, r16
    1a1c:	ee 20       	and	r14, r14
    1a1e:	19 f0       	breq	.+6      	; 0x1a26 <process_action+0x412>
    1a20:	82 95       	swap	r24
    1a22:	80 7f       	andi	r24, 0xF0	; 240
    1a24:	a2 ce       	rjmp	.-700    	; 0x176a <process_action+0x156>
    1a26:	8f 70       	andi	r24, 0x0F	; 15
    1a28:	a0 ce       	rjmp	.-704    	; 0x176a <process_action+0x156>
                                (action.layer_tap.code & 0x0f) << 4 :
                                (action.layer_tap.code & 0x0f));
                    } else {
                        layer_off(action.layer_tap.val);
    1a2a:	0e 94 63 13 	call	0x26c6	; 0x26c6 <layer_off>
                        unregister_mods((action.layer_tap.code & 0x10) ?
    1a2e:	80 2f       	mov	r24, r16
    1a30:	ee 20       	and	r14, r14
    1a32:	19 f0       	breq	.+6      	; 0x1a3a <process_action+0x426>
    1a34:	82 95       	swap	r24
    1a36:	80 7f       	andi	r24, 0xF0	; 240
    1a38:	01 c0       	rjmp	.+2      	; 0x1a3c <process_action+0x428>
    1a3a:	8f 70       	andi	r24, 0x0F	; 15
            break;
#endif
        default:
            break;
    }
}
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	1f 91       	pop	r17
    1a4c:	0f 91       	pop	r16
    1a4e:	ff 90       	pop	r15
    1a50:	ef 90       	pop	r14
    1a52:	df 90       	pop	r13
    1a54:	cf 90       	pop	r12
                        register_mods((action.layer_tap.code & 0x10) ?
                                (action.layer_tap.code & 0x0f) << 4 :
                                (action.layer_tap.code & 0x0f));
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods((action.layer_tap.code & 0x10) ?
    1a56:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <unregister_mods>
                                (action.layer_tap.code & 0x0f));
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    1a5a:	ff 20       	and	r15, r15
    1a5c:	a9 f0       	breq	.+42     	; 0x1a88 <process_action+0x474>
                        if (tap_count < TAPPING_TOGGLE) {
    1a5e:	84 e0       	ldi	r24, 0x04	; 4
    1a60:	8e 15       	cp	r24, r14
    1a62:	08 f4       	brcc	.+2      	; 0x1a66 <process_action+0x452>
    1a64:	0a c1       	rjmp	.+532    	; 0x1c7a <process_action+0x666>
                            layer_invert(action.layer_tap.val);
    1a66:	81 2f       	mov	r24, r17
    1a68:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	df 91       	pop	r29
    1a76:	cf 91       	pop	r28
    1a78:	1f 91       	pop	r17
    1a7a:	0f 91       	pop	r16
    1a7c:	ff 90       	pop	r15
    1a7e:	ef 90       	pop	r14
    1a80:	df 90       	pop	r13
    1a82:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    1a84:	0c 94 88 13 	jmp	0x2710	; 0x2710 <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    1a88:	e5 e0       	ldi	r30, 0x05	; 5
    1a8a:	ee 15       	cp	r30, r14
    1a8c:	08 f4       	brcc	.+2      	; 0x1a90 <process_action+0x47c>
    1a8e:	f5 c0       	rjmp	.+490    	; 0x1c7a <process_action+0x666>
    1a90:	ea cf       	rjmp	.-44     	; 0x1a66 <process_action+0x452>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    1a92:	ff 20       	and	r15, r15
    1a94:	99 f0       	breq	.+38     	; 0x1abc <process_action+0x4a8>
    1a96:	81 2f       	mov	r24, r17
    1a98:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	1f 91       	pop	r17
    1aaa:	0f 91       	pop	r16
    1aac:	ff 90       	pop	r15
    1aae:	ef 90       	pop	r14
    1ab0:	df 90       	pop	r13
    1ab2:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    1ab4:	0c 94 42 13 	jmp	0x2684	; 0x2684 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    1ab8:	ff 20       	and	r15, r15
    1aba:	69 f3       	breq	.-38     	; 0x1a96 <process_action+0x482>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    1abc:	81 2f       	mov	r24, r17
    1abe:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	1f 91       	pop	r17
    1ad0:	0f 91       	pop	r16
    1ad2:	ff 90       	pop	r15
    1ad4:	ef 90       	pop	r14
    1ad6:	df 90       	pop	r13
    1ad8:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    1ada:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    1ade:	ff 20       	and	r15, r15
    1ae0:	89 f0       	breq	.+34     	; 0x1b04 <process_action+0x4f0>
    1ae2:	81 2f       	mov	r24, r17
    1ae4:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	df 91       	pop	r29
    1af2:	cf 91       	pop	r28
    1af4:	1f 91       	pop	r17
    1af6:	0f 91       	pop	r16
    1af8:	ff 90       	pop	r15
    1afa:	ef 90       	pop	r14
    1afc:	df 90       	pop	r13
    1afe:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    1b00:	0c 94 2d 13 	jmp	0x265a	; 0x265a <layer_move>
            break;
#endif
        default:
            break;
    }
}
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	1f 91       	pop	r17
    1b14:	0f 91       	pop	r16
    1b16:	ff 90       	pop	r15
    1b18:	ef 90       	pop	r14
    1b1a:	df 90       	pop	r13
    1b1c:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    1b1e:	0c 94 28 13 	jmp	0x2650	; 0x2650 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    1b22:	ff 20       	and	r15, r15
    1b24:	99 f0       	breq	.+38     	; 0x1b4c <process_action+0x538>
                        if (tap_count > 0) {
    1b26:	ee 20       	and	r14, r14
    1b28:	09 f4       	brne	.+2      	; 0x1b2c <process_action+0x518>
    1b2a:	b5 cf       	rjmp	.-150    	; 0x1a96 <process_action+0x482>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    1b2c:	80 2f       	mov	r24, r16
            break;
#endif
        default:
            break;
    }
}
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	df 91       	pop	r29
    1b3a:	cf 91       	pop	r28
    1b3c:	1f 91       	pop	r17
    1b3e:	0f 91       	pop	r16
    1b40:	ff 90       	pop	r15
    1b42:	ef 90       	pop	r14
    1b44:	df 90       	pop	r13
    1b46:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    1b48:	0c 94 af 09 	jmp	0x135e	; 0x135e <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    1b4c:	ee 20       	and	r14, r14
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <process_action+0x53e>
    1b50:	b5 cf       	rjmp	.-150    	; 0x1abc <process_action+0x4a8>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    1b52:	80 2f       	mov	r24, r16
            break;
#endif
        default:
            break;
    }
}
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	df 91       	pop	r29
    1b60:	cf 91       	pop	r28
    1b62:	1f 91       	pop	r17
    1b64:	0f 91       	pop	r16
    1b66:	ff 90       	pop	r15
    1b68:	ef 90       	pop	r14
    1b6a:	df 90       	pop	r13
    1b6c:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    1b6e:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    1b72:	41 2f       	mov	r20, r17
    1b74:	4f 70       	andi	r20, 0x0F	; 15
    1b76:	60 2f       	mov	r22, r16
    1b78:	c6 01       	movw	r24, r12
    1b7a:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	1f 91       	pop	r17
    1b8e:	0f 91       	pop	r16
    1b90:	ff 90       	pop	r15
    1b92:	ef 90       	pop	r14
    1b94:	df 90       	pop	r13
    1b96:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    1b98:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <action_macro_play>
            break;
#endif
#ifdef BACKLIGHT_ENABLE
        case ACT_BACKLIGHT:
            if (!event.pressed) {
    1b9c:	f1 10       	cpse	r15, r1
    1b9e:	6d c0       	rjmp	.+218    	; 0x1c7a <process_action+0x666>
                switch (action.backlight.opt) {
    1ba0:	1f 70       	andi	r17, 0x0F	; 15
    1ba2:	12 30       	cpi	r17, 0x02	; 2
    1ba4:	c9 f1       	breq	.+114    	; 0x1c18 <process_action+0x604>
    1ba6:	a0 f4       	brcc	.+40     	; 0x1bd0 <process_action+0x5bc>
    1ba8:	11 23       	and	r17, r17
    1baa:	39 f1       	breq	.+78     	; 0x1bfa <process_action+0x5e6>
    1bac:	11 30       	cpi	r17, 0x01	; 1
    1bae:	09 f0       	breq	.+2      	; 0x1bb2 <process_action+0x59e>
    1bb0:	64 c0       	rjmp	.+200    	; 0x1c7a <process_action+0x666>
            break;
#endif
        default:
            break;
    }
}
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	1f 91       	pop	r17
    1bc2:	0f 91       	pop	r16
    1bc4:	ff 90       	pop	r15
    1bc6:	ef 90       	pop	r14
    1bc8:	df 90       	pop	r13
    1bca:	cf 90       	pop	r12
                switch (action.backlight.opt) {
                    case BACKLIGHT_INCREASE:
                        backlight_increase();
                        break;
                    case BACKLIGHT_DECREASE:
                        backlight_decrease();
    1bcc:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <backlight_decrease>
            break;
#endif
#ifdef BACKLIGHT_ENABLE
        case ACT_BACKLIGHT:
            if (!event.pressed) {
                switch (action.backlight.opt) {
    1bd0:	13 30       	cpi	r17, 0x03	; 3
    1bd2:	89 f1       	breq	.+98     	; 0x1c36 <process_action+0x622>
    1bd4:	14 30       	cpi	r17, 0x04	; 4
    1bd6:	09 f0       	breq	.+2      	; 0x1bda <process_action+0x5c6>
    1bd8:	50 c0       	rjmp	.+160    	; 0x1c7a <process_action+0x666>
                        break;
                    case BACKLIGHT_STEP:
                        backlight_step();
                        break;
                    case BACKLIGHT_LEVEL:
                        backlight_level(action.backlight.level);
    1bda:	80 2f       	mov	r24, r16
            break;
#endif
        default:
            break;
    }
}
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	1f 91       	pop	r17
    1bec:	0f 91       	pop	r16
    1bee:	ff 90       	pop	r15
    1bf0:	ef 90       	pop	r14
    1bf2:	df 90       	pop	r13
    1bf4:	cf 90       	pop	r12
                        break;
                    case BACKLIGHT_STEP:
                        backlight_step();
                        break;
                    case BACKLIGHT_LEVEL:
                        backlight_level(action.backlight.level);
    1bf6:	0c 94 a8 19 	jmp	0x3350	; 0x3350 <backlight_level>
            break;
#endif
        default:
            break;
    }
}
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	df 91       	pop	r29
    1c06:	cf 91       	pop	r28
    1c08:	1f 91       	pop	r17
    1c0a:	0f 91       	pop	r16
    1c0c:	ff 90       	pop	r15
    1c0e:	ef 90       	pop	r14
    1c10:	df 90       	pop	r13
    1c12:	cf 90       	pop	r12
#ifdef BACKLIGHT_ENABLE
        case ACT_BACKLIGHT:
            if (!event.pressed) {
                switch (action.backlight.opt) {
                    case BACKLIGHT_INCREASE:
                        backlight_increase();
    1c14:	0c 94 45 19 	jmp	0x328a	; 0x328a <backlight_increase>
            break;
#endif
        default:
            break;
    }
}
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	1f 91       	pop	r17
    1c28:	0f 91       	pop	r16
    1c2a:	ff 90       	pop	r15
    1c2c:	ef 90       	pop	r14
    1c2e:	df 90       	pop	r13
    1c30:	cf 90       	pop	r12
                        break;
                    case BACKLIGHT_DECREASE:
                        backlight_decrease();
                        break;
                    case BACKLIGHT_TOGGLE:
                        backlight_toggle();
    1c32:	0c 94 72 19 	jmp	0x32e4	; 0x32e4 <backlight_toggle>
            break;
#endif
        default:
            break;
    }
}
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	df 91       	pop	r29
    1c42:	cf 91       	pop	r28
    1c44:	1f 91       	pop	r17
    1c46:	0f 91       	pop	r16
    1c48:	ff 90       	pop	r15
    1c4a:	ef 90       	pop	r14
    1c4c:	df 90       	pop	r13
    1c4e:	cf 90       	pop	r12
                        break;
                    case BACKLIGHT_TOGGLE:
                        backlight_toggle();
                        break;
                    case BACKLIGHT_STEP:
                        backlight_step();
    1c50:	0c 94 85 19 	jmp	0x330a	; 0x330a <backlight_step>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    1c54:	41 2f       	mov	r20, r17
    1c56:	4f 70       	andi	r20, 0x0F	; 15
    1c58:	60 2f       	mov	r22, r16
    1c5a:	c6 01       	movw	r24, r12
            break;
#endif
        default:
            break;
    }
}
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	df 91       	pop	r29
    1c68:	cf 91       	pop	r28
    1c6a:	1f 91       	pop	r17
    1c6c:	0f 91       	pop	r16
    1c6e:	ff 90       	pop	r15
    1c70:	ef 90       	pop	r14
    1c72:	df 90       	pop	r13
    1c74:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    1c76:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <action_function>
            break;
#endif
        default:
            break;
    }
}
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	df 91       	pop	r29
    1c86:	cf 91       	pop	r28
    1c88:	1f 91       	pop	r17
    1c8a:	0f 91       	pop	r16
    1c8c:	ff 90       	pop	r15
    1c8e:	ef 90       	pop	r14
    1c90:	df 90       	pop	r13
    1c92:	cf 90       	pop	r12
    1c94:	08 95       	ret

00001c96 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    1c96:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <clear_weak_mods>
    clear_keys();
    1c9a:	0e 94 db 14 	call	0x29b6	; 0x29b6 <clear_keys>
    send_keyboard_report();
    1c9e:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    mousekey_send();
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	0e 94 a0 08 	call	0x1140	; 0x1140 <host_system_send>
    host_consumer_send(0);
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	0c 94 b6 08 	jmp	0x116c	; 0x116c <host_consumer_send>

00001cb2 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    1cb2:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <clear_mods>
    clear_keyboard_but_mods();
    1cb6:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <clear_keyboard_but_mods>

00001cba <is_tap_key>:
    host_consumer_send(0);
#endif
}

bool is_tap_key(keyevent_t event)
{
    1cba:	1f 93       	push	r17
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	00 d0       	rcall	.+0      	; 0x1cc2 <is_tap_key+0x8>
    1cc2:	00 d0       	rcall	.+0      	; 0x1cc4 <is_tap_key+0xa>
    1cc4:	1f 92       	push	r1
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	94 2f       	mov	r25, r20
    1ccc:	49 83       	std	Y+1, r20	; 0x01
    1cce:	25 2f       	mov	r18, r21
    1cd0:	5a 83       	std	Y+2, r21	; 0x02
    1cd2:	6b 83       	std	Y+3, r22	; 0x03
    1cd4:	7c 83       	std	Y+4, r23	; 0x04
    1cd6:	8d 83       	std	Y+5, r24	; 0x05
    1cd8:	4c 81       	ldd	r20, Y+4	; 0x04
    1cda:	5d 81       	ldd	r21, Y+5	; 0x05
    1cdc:	45 2b       	or	r20, r21
    1cde:	31 f0       	breq	.+12     	; 0x1cec <is_tap_key+0x32>
    1ce0:	2f 3f       	cpi	r18, 0xFF	; 255
    1ce2:	31 f4       	brne	.+12     	; 0x1cf0 <is_tap_key+0x36>
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ce8:	19 f4       	brne	.+6      	; 0x1cf0 <is_tap_key+0x36>
    1cea:	03 c0       	rjmp	.+6      	; 0x1cf2 <is_tap_key+0x38>
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	01 c0       	rjmp	.+2      	; 0x1cf2 <is_tap_key+0x38>
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    if (IS_NOEVENT(event)) { return false; }
    1cf2:	18 2f       	mov	r17, r24
    1cf4:	11 70       	andi	r17, 0x01	; 1
    1cf6:	80 fd       	sbrc	r24, 0
    1cf8:	31 c0       	rjmp	.+98     	; 0x1d5c <is_tap_key+0xa2>

    action_t action = layer_switch_get_action(event);
    1cfa:	49 81       	ldd	r20, Y+1	; 0x01
    1cfc:	5a 81       	ldd	r21, Y+2	; 0x02
    1cfe:	6b 81       	ldd	r22, Y+3	; 0x03
    1d00:	7c 81       	ldd	r23, Y+4	; 0x04
    1d02:	8d 81       	ldd	r24, Y+5	; 0x05
    1d04:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <layer_switch_get_action>

    switch (action.kind.id) {
    1d08:	29 2f       	mov	r18, r25
    1d0a:	22 95       	swap	r18
    1d0c:	2f 70       	andi	r18, 0x0F	; 15
    1d0e:	2c 30       	cpi	r18, 0x0C	; 12
    1d10:	30 f4       	brcc	.+12     	; 0x1d1e <is_tap_key+0x64>
    1d12:	2a 30       	cpi	r18, 0x0A	; 10
    1d14:	a0 f4       	brcc	.+40     	; 0x1d3e <is_tap_key+0x84>
    1d16:	22 50       	subi	r18, 0x02	; 2
    1d18:	22 30       	cpi	r18, 0x02	; 2
    1d1a:	30 f0       	brcs	.+12     	; 0x1d28 <is_tap_key+0x6e>
    1d1c:	22 c0       	rjmp	.+68     	; 0x1d62 <is_tap_key+0xa8>
    1d1e:	2c 30       	cpi	r18, 0x0C	; 12
    1d20:	c9 f0       	breq	.+50     	; 0x1d54 <is_tap_key+0x9a>
    1d22:	2f 30       	cpi	r18, 0x0F	; 15
    1d24:	b9 f0       	breq	.+46     	; 0x1d54 <is_tap_key+0x9a>
    1d26:	1d c0       	rjmp	.+58     	; 0x1d62 <is_tap_key+0xa8>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            switch (action.key.code) {
    1d28:	85 3a       	cpi	r24, 0xA5	; 165
    1d2a:	28 f4       	brcc	.+10     	; 0x1d36 <is_tap_key+0x7c>
    1d2c:	84 30       	cpi	r24, 0x04	; 4
    1d2e:	c0 f4       	brcc	.+48     	; 0x1d60 <is_tap_key+0xa6>
    1d30:	82 30       	cpi	r24, 0x02	; 2
    1d32:	28 f4       	brcc	.+10     	; 0x1d3e <is_tap_key+0x84>
    1d34:	15 c0       	rjmp	.+42     	; 0x1d60 <is_tap_key+0xa6>
    1d36:	90 e2       	ldi	r25, 0x20	; 32
    1d38:	98 0f       	add	r25, r24
    1d3a:	98 30       	cpi	r25, 0x08	; 8
    1d3c:	88 f0       	brcs	.+34     	; 0x1d60 <is_tap_key+0xa6>
                case KC_LCTRL ... KC_RGUI:              // tap key
                    return true;
            }
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    1d3e:	88 3e       	cpi	r24, 0xE8	; 232
    1d40:	30 f4       	brcc	.+12     	; 0x1d4e <is_tap_key+0x94>
    1d42:	80 3e       	cpi	r24, 0xE0	; 224
    1d44:	68 f4       	brcc	.+26     	; 0x1d60 <is_tap_key+0xa6>
    1d46:	84 50       	subi	r24, 0x04	; 4
    1d48:	81 3a       	cpi	r24, 0xA1	; 161
    1d4a:	58 f4       	brcc	.+22     	; 0x1d62 <is_tap_key+0xa8>
    1d4c:	09 c0       	rjmp	.+18     	; 0x1d60 <is_tap_key+0xa6>
    1d4e:	80 3f       	cpi	r24, 0xF0	; 240
    1d50:	41 f4       	brne	.+16     	; 0x1d62 <is_tap_key+0xa8>
    1d52:	06 c0       	rjmp	.+12     	; 0x1d60 <is_tap_key+0xa6>
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    1d54:	93 fb       	bst	r25, 3
    1d56:	11 27       	eor	r17, r17
    1d58:	10 f9       	bld	r17, 0
    1d5a:	03 c0       	rjmp	.+6      	; 0x1d62 <is_tap_key+0xa8>
#endif
}

bool is_tap_key(keyevent_t event)
{
    if (IS_NOEVENT(event)) { return false; }
    1d5c:	10 e0       	ldi	r17, 0x00	; 0
    1d5e:	01 c0       	rjmp	.+2      	; 0x1d62 <is_tap_key+0xa8>
            switch (action.key.code) {
                case MODS_ONESHOT:
                case MODS_TAP_TOGGLE:
                case KC_A ... KC_EXSEL:                 // tap key
                case KC_LCTRL ... KC_RGUI:              // tap key
                    return true;
    1d60:	11 e0       	ldi	r17, 0x01	; 1
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    1d62:	81 2f       	mov	r24, r17
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	df 91       	pop	r29
    1d70:	cf 91       	pop	r28
    1d72:	1f 91       	pop	r17
    1d74:	08 95       	ret

00001d76 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    1d76:	cf 93       	push	r28
    1d78:	df 93       	push	r29
    1d7a:	00 d0       	rcall	.+0      	; 0x1d7c <debug_event+0x6>
    1d7c:	00 d0       	rcall	.+0      	; 0x1d7e <debug_event+0x8>
    1d7e:	1f 92       	push	r1
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	df 91       	pop	r29
    1d90:	cf 91       	pop	r28
    1d92:	08 95       	ret

00001d94 <debug_record>:

void debug_record(keyrecord_t record)
{
    1d94:	cf 93       	push	r28
    1d96:	df 93       	push	r29
    1d98:	00 d0       	rcall	.+0      	; 0x1d9a <debug_record+0x6>
    1d9a:	00 d0       	rcall	.+0      	; 0x1d9c <debug_record+0x8>
    1d9c:	00 d0       	rcall	.+0      	; 0x1d9e <debug_record+0xa>
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    1da2:	26 96       	adiw	r28, 0x06	; 6
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	de bf       	out	0x3e, r29	; 62
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	cd bf       	out	0x3d, r28	; 61
    1dae:	df 91       	pop	r29
    1db0:	cf 91       	pop	r28
    1db2:	08 95       	ret

00001db4 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    1db4:	cf 93       	push	r28
    1db6:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    1db8:	c0 91 54 01 	lds	r28, 0x0154	; 0x800154 <waiting_buffer_tail>
    1dbc:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <waiting_buffer_head>
    1dc0:	c8 17       	cp	r28, r24
    1dc2:	a1 f0       	breq	.+40     	; 0x1dec <debug_waiting_buffer+0x38>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    1dc4:	d0 e0       	ldi	r29, 0x00	; 0
    1dc6:	ce 01       	movw	r24, r28
    1dc8:	66 e0       	ldi	r22, 0x06	; 6
    1dca:	70 e0       	ldi	r23, 0x00	; 0
    1dcc:	0e 94 c5 19 	call	0x338a	; 0x338a <__mulhi3>
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	ea 5a       	subi	r30, 0xAA	; 170
    1dd4:	fe 4f       	sbci	r31, 0xFE	; 254
    1dd6:	40 81       	ld	r20, Z
    1dd8:	51 81       	ldd	r21, Z+1	; 0x01
    1dda:	62 81       	ldd	r22, Z+2	; 0x02
    1ddc:	73 81       	ldd	r23, Z+3	; 0x03
    1dde:	84 81       	ldd	r24, Z+4	; 0x04
    1de0:	95 81       	ldd	r25, Z+5	; 0x05
    1de2:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    1de6:	21 96       	adiw	r28, 0x01	; 1
    1de8:	c7 70       	andi	r28, 0x07	; 7
    1dea:	e8 cf       	rjmp	.-48     	; 0x1dbc <debug_waiting_buffer+0x8>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    1dec:	df 91       	pop	r29
    1dee:	cf 91       	pop	r28
    1df0:	08 95       	ret

00001df2 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    1df2:	40 91 86 01 	lds	r20, 0x0186	; 0x800186 <tapping_key>
    1df6:	50 91 87 01 	lds	r21, 0x0187	; 0x800187 <tapping_key+0x1>
    1dfa:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <tapping_key+0x2>
    1dfe:	70 91 89 01 	lds	r23, 0x0189	; 0x800189 <tapping_key+0x3>
    1e02:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <tapping_key+0x4>
    1e06:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <tapping_key+0x5>
    1e0a:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <debug_record>

00001e0e <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    1e0e:	1f 93       	push	r17
    1e10:	cf 93       	push	r28
    1e12:	df 93       	push	r29
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    1e14:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <tapping_key+0x5>
    1e18:	82 95       	swap	r24
    1e1a:	8f 70       	andi	r24, 0x0F	; 15
    1e1c:	09 f0       	breq	.+2      	; 0x1e20 <waiting_buffer_scan_tap+0x12>
    1e1e:	66 c0       	rjmp	.+204    	; 0x1eec <waiting_buffer_scan_tap+0xde>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    1e20:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <tapping_key+0x2>
    1e24:	88 23       	and	r24, r24
    1e26:	09 f4       	brne	.+2      	; 0x1e2a <waiting_buffer_scan_tap+0x1c>
    1e28:	61 c0       	rjmp	.+194    	; 0x1eec <waiting_buffer_scan_tap+0xde>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    1e2a:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <waiting_buffer_tail>
    1e2e:	10 91 55 01 	lds	r17, 0x0155	; 0x800155 <waiting_buffer_head>
    1e32:	c0 91 86 01 	lds	r28, 0x0186	; 0x800186 <tapping_key>
    1e36:	d0 91 87 01 	lds	r29, 0x0187	; 0x800187 <tapping_key+0x1>
    1e3a:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <tapping_key+0x3>
    1e3e:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <tapping_key+0x4>
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	cf 3f       	cpi	r28, 0xFF	; 255
    1e46:	09 f0       	breq	.+2      	; 0x1e4a <waiting_buffer_scan_tap+0x3c>
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	48 2f       	mov	r20, r24
    1e4c:	21 17       	cp	r18, r17
    1e4e:	09 f4       	brne	.+2      	; 0x1e52 <waiting_buffer_scan_tap+0x44>
    1e50:	4d c0       	rjmp	.+154    	; 0x1eec <waiting_buffer_scan_tap+0xde>
    1e52:	30 97       	sbiw	r30, 0x00	; 0
    1e54:	21 f0       	breq	.+8      	; 0x1e5e <waiting_buffer_scan_tap+0x50>
    1e56:	df 3f       	cpi	r29, 0xFF	; 255
    1e58:	21 f0       	breq	.+8      	; 0x1e62 <waiting_buffer_scan_tap+0x54>
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	03 c0       	rjmp	.+6      	; 0x1e64 <waiting_buffer_scan_tap+0x56>
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	01 c0       	rjmp	.+2      	; 0x1e64 <waiting_buffer_scan_tap+0x56>
    1e62:	84 2f       	mov	r24, r20
    1e64:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    1e66:	80 fd       	sbrc	r24, 0
    1e68:	3d c0       	rjmp	.+122    	; 0x1ee4 <waiting_buffer_scan_tap+0xd6>
    1e6a:	c9 01       	movw	r24, r18
    1e6c:	66 e0       	ldi	r22, 0x06	; 6
    1e6e:	70 e0       	ldi	r23, 0x00	; 0
    1e70:	0e 94 c5 19 	call	0x338a	; 0x338a <__mulhi3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	aa 5a       	subi	r26, 0xAA	; 170
    1e78:	be 4f       	sbci	r27, 0xFE	; 254
    1e7a:	11 96       	adiw	r26, 0x01	; 1
    1e7c:	8c 91       	ld	r24, X
    1e7e:	11 97       	sbiw	r26, 0x01	; 1
    1e80:	8d 13       	cpse	r24, r29
    1e82:	30 c0       	rjmp	.+96     	; 0x1ee4 <waiting_buffer_scan_tap+0xd6>
    1e84:	8c 91       	ld	r24, X
    1e86:	8c 13       	cpse	r24, r28
    1e88:	2d c0       	rjmp	.+90     	; 0x1ee4 <waiting_buffer_scan_tap+0xd6>
    1e8a:	12 96       	adiw	r26, 0x02	; 2
    1e8c:	8c 91       	ld	r24, X
    1e8e:	12 97       	sbiw	r26, 0x02	; 2
    1e90:	81 11       	cpse	r24, r1
    1e92:	28 c0       	rjmp	.+80     	; 0x1ee4 <waiting_buffer_scan_tap+0xd6>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    1e94:	13 96       	adiw	r26, 0x03	; 3
    1e96:	8d 91       	ld	r24, X+
    1e98:	9c 91       	ld	r25, X
    1e9a:	14 97       	sbiw	r26, 0x04	; 4
    1e9c:	8e 17       	cp	r24, r30
    1e9e:	9f 07       	cpc	r25, r31
    1ea0:	08 f4       	brcc	.+2      	; 0x1ea4 <waiting_buffer_scan_tap+0x96>
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	8e 1b       	sub	r24, r30
    1ea6:	9f 0b       	sbc	r25, r31
    1ea8:	88 3c       	cpi	r24, 0xC8	; 200
    1eaa:	91 05       	cpc	r25, r1
    1eac:	d8 f4       	brcc	.+54     	; 0x1ee4 <waiting_buffer_scan_tap+0xd6>
            tapping_key.tap.count = 1;
    1eae:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <tapping_key+0x5>
    1eb2:	8f 70       	andi	r24, 0x0F	; 15
    1eb4:	80 61       	ori	r24, 0x10	; 16
    1eb6:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <tapping_key+0x5>
            waiting_buffer[i].tap.count = 1;
    1eba:	c9 01       	movw	r24, r18
    1ebc:	66 e0       	ldi	r22, 0x06	; 6
    1ebe:	70 e0       	ldi	r23, 0x00	; 0
    1ec0:	0e 94 c5 19 	call	0x338a	; 0x338a <__mulhi3>
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	e5 5a       	subi	r30, 0xA5	; 165
    1ec8:	fe 4f       	sbci	r31, 0xFE	; 254
    1eca:	90 81       	ld	r25, Z
    1ecc:	9f 70       	andi	r25, 0x0F	; 15
    1ece:	90 61       	ori	r25, 0x10	; 16
    1ed0:	90 83       	st	Z, r25
            process_action(&tapping_key);
    1ed2:	86 e8       	ldi	r24, 0x86	; 134
    1ed4:	91 e0       	ldi	r25, 0x01	; 1
    1ed6:	0e 94 0a 0b 	call	0x1614	; 0x1614 <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	1f 91       	pop	r17
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    1ee0:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    1ee4:	2f 5f       	subi	r18, 0xFF	; 255
    1ee6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee8:	27 70       	andi	r18, 0x07	; 7
    1eea:	b0 cf       	rjmp	.-160    	; 0x1e4c <waiting_buffer_scan_tap+0x3e>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    1eec:	df 91       	pop	r29
    1eee:	cf 91       	pop	r28
    1ef0:	1f 91       	pop	r17
    1ef2:	08 95       	ret

00001ef4 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    1ef4:	af 92       	push	r10
    1ef6:	bf 92       	push	r11
    1ef8:	cf 92       	push	r12
    1efa:	df 92       	push	r13
    1efc:	ef 92       	push	r14
    1efe:	ff 92       	push	r15
    1f00:	0f 93       	push	r16
    1f02:	1f 93       	push	r17
    1f04:	cf 93       	push	r28
    1f06:	df 93       	push	r29
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	61 97       	sbiw	r28, 0x11	; 17
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	7c 01       	movw	r14, r24
    keyevent_t event = keyp->event;
    1f1a:	85 e0       	ldi	r24, 0x05	; 5
    1f1c:	f7 01       	movw	r30, r14
    1f1e:	de 01       	movw	r26, r28
    1f20:	1d 96       	adiw	r26, 0x0d	; 13
    1f22:	01 90       	ld	r0, Z+
    1f24:	0d 92       	st	X+, r0
    1f26:	8a 95       	dec	r24
    1f28:	e1 f7       	brne	.-8      	; 0x1f22 <process_tapping+0x2e>
    1f2a:	d7 01       	movw	r26, r14
    1f2c:	4c 91       	ld	r20, X
    1f2e:	11 96       	adiw	r26, 0x01	; 1
    1f30:	2c 91       	ld	r18, X
    1f32:	11 97       	sbiw	r26, 0x01	; 1
    1f34:	12 96       	adiw	r26, 0x02	; 2
    1f36:	dc 90       	ld	r13, X
    1f38:	12 97       	sbiw	r26, 0x02	; 2
    1f3a:	13 96       	adiw	r26, 0x03	; 3
    1f3c:	0d 91       	ld	r16, X+
    1f3e:	1c 91       	ld	r17, X
    1f40:	14 97       	sbiw	r26, 0x04	; 4
    1f42:	50 91 86 01 	lds	r21, 0x0186	; 0x800186 <tapping_key>
    1f46:	60 91 87 01 	lds	r22, 0x0187	; 0x800187 <tapping_key+0x1>
    1f4a:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <tapping_key+0x3>
    1f4e:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <tapping_key+0x4>
    1f52:	00 97       	sbiw	r24, 0x00	; 0
    1f54:	31 f0       	breq	.+12     	; 0x1f62 <process_tapping+0x6e>
    1f56:	6f 3f       	cpi	r22, 0xFF	; 255
    1f58:	31 f4       	brne	.+12     	; 0x1f66 <process_tapping+0x72>
    1f5a:	31 e0       	ldi	r19, 0x01	; 1
    1f5c:	5f 3f       	cpi	r21, 0xFF	; 255
    1f5e:	19 f4       	brne	.+6      	; 0x1f66 <process_tapping+0x72>
    1f60:	03 c0       	rjmp	.+6      	; 0x1f68 <process_tapping+0x74>
    1f62:	31 e0       	ldi	r19, 0x01	; 1
    1f64:	01 c0       	rjmp	.+2      	; 0x1f68 <process_tapping+0x74>
    1f66:	30 e0       	ldi	r19, 0x00	; 0

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    1f68:	b3 2f       	mov	r27, r19
    1f6a:	b1 70       	andi	r27, 0x01	; 1
    1f6c:	bb 2e       	mov	r11, r27
    1f6e:	30 fd       	sbrc	r19, 0
    1f70:	76 c1       	rjmp	.+748    	; 0x225e <process_tapping+0x36a>
    1f72:	a0 90 88 01 	lds	r10, 0x0188	; 0x800188 <tapping_key+0x2>
    1f76:	aa 20       	and	r10, r10
    1f78:	09 f4       	brne	.+2      	; 0x1f7c <process_tapping+0x88>
    1f7a:	d2 c0       	rjmp	.+420    	; 0x2120 <process_tapping+0x22c>
    1f7c:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <tapping_key+0x5>
        if (WITHIN_TAPPING_TERM(event)) {
    1f80:	08 17       	cp	r16, r24
    1f82:	19 07       	cpc	r17, r25
    1f84:	28 f0       	brcs	.+10     	; 0x1f90 <process_tapping+0x9c>
    1f86:	f8 01       	movw	r30, r16
    1f88:	e8 1b       	sub	r30, r24
    1f8a:	f9 0b       	sbc	r31, r25
    1f8c:	cf 01       	movw	r24, r30
    1f8e:	04 c0       	rjmp	.+8      	; 0x1f98 <process_tapping+0xa4>
    1f90:	80 95       	com	r24
    1f92:	90 95       	com	r25
    1f94:	80 0f       	add	r24, r16
    1f96:	91 1f       	adc	r25, r17
    1f98:	cc 24       	eor	r12, r12
    1f9a:	c3 94       	inc	r12
    1f9c:	88 3c       	cpi	r24, 0xC8	; 200
    1f9e:	91 05       	cpc	r25, r1
    1fa0:	88 f0       	brcs	.+34     	; 0x1fc4 <process_tapping+0xd0>
    1fa2:	c1 2c       	mov	r12, r1
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    1fa4:	30 7f       	andi	r19, 0xF0	; 240
    1fa6:	09 f0       	breq	.+2      	; 0x1faa <process_tapping+0xb6>
    1fa8:	a6 c0       	rjmp	.+332    	; 0x20f6 <process_tapping+0x202>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    1faa:	70 2f       	mov	r23, r16
    1fac:	19 8b       	std	Y+17, r17	; 0x11
    1fae:	08 8b       	std	Y+16, r16	; 0x10
    1fb0:	52 2f       	mov	r21, r18
    1fb2:	6d 2d       	mov	r22, r13
    1fb4:	89 89       	ldd	r24, Y+17	; 0x11
    1fb6:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <debug_event>
                process_action(&tapping_key);
    1fba:	86 e8       	ldi	r24, 0x86	; 134
    1fbc:	91 e0       	ldi	r25, 0x01	; 1
    1fbe:	0e 94 0a 0b 	call	0x1614	; 0x1614 <process_action>
    1fc2:	c3 c0       	rjmp	.+390    	; 0x214a <process_tapping+0x256>
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
    1fc4:	83 2f       	mov	r24, r19
    1fc6:	80 7f       	andi	r24, 0xF0	; 240
    1fc8:	09 f0       	breq	.+2      	; 0x1fcc <process_tapping+0xd8>
    1fca:	59 c0       	rjmp	.+178    	; 0x207e <process_tapping+0x18a>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    1fcc:	26 13       	cpse	r18, r22
    1fce:	15 c0       	rjmp	.+42     	; 0x1ffa <process_tapping+0x106>
    1fd0:	45 13       	cpse	r20, r21
    1fd2:	13 c0       	rjmp	.+38     	; 0x1ffa <process_tapping+0x106>
    1fd4:	cd 2c       	mov	r12, r13
    1fd6:	d1 10       	cpse	r13, r1
    1fd8:	10 c0       	rjmp	.+32     	; 0x1ffa <process_tapping+0x106>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    1fda:	3f 70       	andi	r19, 0x0F	; 15
    1fdc:	30 61       	ori	r19, 0x10	; 16
    1fde:	30 93 8b 01 	sts	0x018B, r19	; 0x80018b <tapping_key+0x5>
                    debug_tapping_key();
    1fe2:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <debug_tapping_key>
                    process_action(&tapping_key);
    1fe6:	86 e8       	ldi	r24, 0x86	; 134
    1fe8:	91 e0       	ldi	r25, 0x01	; 1
    1fea:	0e 94 0a 0b 	call	0x1614	; 0x1614 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    1fee:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <tapping_key+0x5>
    1ff2:	d7 01       	movw	r26, r14
    1ff4:	15 96       	adiw	r26, 0x05	; 5
    1ff6:	8c 93       	st	X, r24
                    // enqueue
                    return false;
    1ff8:	68 c1       	rjmp	.+720    	; 0x22ca <process_tapping+0x3d6>
    1ffa:	01 15       	cp	r16, r1
    1ffc:	11 05       	cpc	r17, r1
    1ffe:	31 f0       	breq	.+12     	; 0x200c <process_tapping+0x118>
    2000:	2f 3f       	cpi	r18, 0xFF	; 255
    2002:	31 f4       	brne	.+12     	; 0x2010 <process_tapping+0x11c>
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	4f 3f       	cpi	r20, 0xFF	; 255
    2008:	19 f4       	brne	.+6      	; 0x2010 <process_tapping+0x11c>
    200a:	03 c0       	rjmp	.+6      	; 0x2012 <process_tapping+0x11e>
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	01 c0       	rjmp	.+2      	; 0x2012 <process_tapping+0x11e>
    2010:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    2012:	80 fd       	sbrc	r24, 0
    2014:	03 c0       	rjmp	.+6      	; 0x201c <process_tapping+0x128>
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	8d 25       	eor	r24, r13
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <process_tapping+0x12c>
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	90 e0       	ldi	r25, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    2020:	b8 2f       	mov	r27, r24
    2022:	b1 70       	andi	r27, 0x01	; 1
    2024:	cb 2e       	mov	r12, r27
    2026:	80 ff       	sbrs	r24, 0
    2028:	1f c0       	rjmp	.+62     	; 0x2068 <process_tapping+0x174>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    202a:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <waiting_buffer_tail>
    202e:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <waiting_buffer_head>
    2032:	e3 17       	cp	r30, r19
    2034:	09 f4       	brne	.+2      	; 0x2038 <process_tapping+0x144>
    2036:	25 c1       	rjmp	.+586    	; 0x2282 <process_tapping+0x38e>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	cf 01       	movw	r24, r30
    203c:	66 e0       	ldi	r22, 0x06	; 6
    203e:	70 e0       	ldi	r23, 0x00	; 0
    2040:	0e 94 c5 19 	call	0x338a	; 0x338a <__mulhi3>
    2044:	dc 01       	movw	r26, r24
    2046:	aa 5a       	subi	r26, 0xAA	; 170
    2048:	be 4f       	sbci	r27, 0xFE	; 254
    204a:	11 96       	adiw	r26, 0x01	; 1
    204c:	8c 91       	ld	r24, X
    204e:	11 97       	sbiw	r26, 0x01	; 1
    2050:	28 13       	cpse	r18, r24
    2052:	07 c0       	rjmp	.+14     	; 0x2062 <process_tapping+0x16e>
    2054:	8c 91       	ld	r24, X
    2056:	48 13       	cpse	r20, r24
    2058:	04 c0       	rjmp	.+8      	; 0x2062 <process_tapping+0x16e>
    205a:	12 96       	adiw	r26, 0x02	; 2
    205c:	8c 91       	ld	r24, X
    205e:	d8 12       	cpse	r13, r24
    2060:	03 c0       	rjmp	.+6      	; 0x2068 <process_tapping+0x174>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2062:	31 96       	adiw	r30, 0x01	; 1
    2064:	e7 70       	andi	r30, 0x07	; 7
    2066:	e5 cf       	rjmp	.-54     	; 0x2032 <process_tapping+0x13e>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    2068:	cd 2c       	mov	r12, r13
    206a:	dd 20       	and	r13, r13
    206c:	09 f4       	brne	.+2      	; 0x2070 <process_tapping+0x17c>
    206e:	2d c1       	rjmp	.+602    	; 0x22ca <process_tapping+0x3d6>
                        tapping_key.tap.interrupted = true;
    2070:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <tapping_key+0x5>
    2074:	81 60       	ori	r24, 0x01	; 1
    2076:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <tapping_key+0x5>
                    }
                    // enqueue 
                    return false;
    207a:	c1 2c       	mov	r12, r1
    207c:	26 c1       	rjmp	.+588    	; 0x22ca <process_tapping+0x3d6>
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    207e:	26 13       	cpse	r18, r22
    2080:	08 c0       	rjmp	.+16     	; 0x2092 <process_tapping+0x19e>
    2082:	45 13       	cpse	r20, r21
    2084:	06 c0       	rjmp	.+12     	; 0x2092 <process_tapping+0x19e>
    2086:	d1 10       	cpse	r13, r1
    2088:	04 c0       	rjmp	.+8      	; 0x2092 <process_tapping+0x19e>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    208a:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <tapping_key+0x5>
    208e:	d7 01       	movw	r26, r14
    2090:	b9 c0       	rjmp	.+370    	; 0x2204 <process_tapping+0x310>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event) && event.pressed) {
    2092:	4d 87       	std	Y+13, r20	; 0x0d
    2094:	2e 87       	std	Y+14, r18	; 0x0e
    2096:	df 86       	std	Y+15, r13	; 0x0f
    2098:	70 2f       	mov	r23, r16
    209a:	19 8b       	std	Y+17, r17	; 0x11
    209c:	08 8b       	std	Y+16, r16	; 0x10
    209e:	52 2f       	mov	r21, r18
    20a0:	6d 2d       	mov	r22, r13
    20a2:	89 89       	ldd	r24, Y+17	; 0x11
    20a4:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <is_tap_key>
    20a8:	88 23       	and	r24, r24
    20aa:	a1 f1       	breq	.+104    	; 0x2114 <process_tapping+0x220>
    20ac:	dd 20       	and	r13, r13
    20ae:	91 f1       	breq	.+100    	; 0x2114 <process_tapping+0x220>
                    if (tapping_key.tap.count > 1) {
    20b0:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <tapping_key+0x5>
    20b4:	82 2f       	mov	r24, r18
    20b6:	82 95       	swap	r24
    20b8:	8f 70       	andi	r24, 0x0F	; 15
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	02 97       	sbiw	r24, 0x02	; 2
    20be:	74 f0       	brlt	.+28     	; 0x20dc <process_tapping+0x1e8>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    20c0:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <tapping_key>
    20c4:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <tapping_key+0x1>
    20c8:	98 87       	std	Y+8, r25	; 0x08
    20ca:	8f 83       	std	Y+7, r24	; 0x07
    20cc:	19 86       	std	Y+9, r1	; 0x09
    20ce:	1b 87       	std	Y+11, r17	; 0x0b
    20d0:	0a 87       	std	Y+10, r16	; 0x0a
    20d2:	2c 87       	std	Y+12, r18	; 0x0c
    20d4:	ce 01       	movw	r24, r28
    20d6:	07 96       	adiw	r24, 0x07	; 7
    20d8:	0e 94 0a 0b 	call	0x1614	; 0x1614 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
    20dc:	86 e0       	ldi	r24, 0x06	; 6
    20de:	f7 01       	movw	r30, r14
    20e0:	a6 e8       	ldi	r26, 0x86	; 134
    20e2:	b1 e0       	ldi	r27, 0x01	; 1
    20e4:	01 90       	ld	r0, Z+
    20e6:	0d 92       	st	X+, r0
    20e8:	8a 95       	dec	r24
    20ea:	e1 f7       	brne	.-8      	; 0x20e4 <process_tapping+0x1f0>
                    waiting_buffer_scan_tap();
    20ec:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <waiting_buffer_scan_tap>
                    debug_tapping_key();
    20f0:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <debug_tapping_key>
    20f4:	12 c0       	rjmp	.+36     	; 0x211a <process_tapping+0x226>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    20f6:	26 17       	cp	r18, r22
    20f8:	91 f1       	breq	.+100    	; 0x215e <process_tapping+0x26a>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event) && event.pressed) {
    20fa:	4d 87       	std	Y+13, r20	; 0x0d
    20fc:	2e 87       	std	Y+14, r18	; 0x0e
    20fe:	df 86       	std	Y+15, r13	; 0x0f
    2100:	70 2f       	mov	r23, r16
    2102:	19 8b       	std	Y+17, r17	; 0x11
    2104:	08 8b       	std	Y+16, r16	; 0x10
    2106:	52 2f       	mov	r21, r18
    2108:	6d 2d       	mov	r22, r13
    210a:	89 89       	ldd	r24, Y+17	; 0x11
    210c:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <is_tap_key>
    2110:	81 11       	cpse	r24, r1
    2112:	39 c0       	rjmp	.+114    	; 0x2186 <process_tapping+0x292>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    2114:	c7 01       	movw	r24, r14
    2116:	0e 94 0a 0b 	call	0x1614	; 0x1614 <process_action>
                    return true;
    211a:	cc 24       	eor	r12, r12
    211c:	c3 94       	inc	r12
    211e:	d5 c0       	rjmp	.+426    	; 0x22ca <process_tapping+0x3d6>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    2120:	08 17       	cp	r16, r24
    2122:	19 07       	cpc	r17, r25
    2124:	08 f4       	brcc	.+2      	; 0x2128 <process_tapping+0x234>
    2126:	47 c0       	rjmp	.+142    	; 0x21b6 <process_tapping+0x2c2>
    2128:	f8 01       	movw	r30, r16
    212a:	e8 1b       	sub	r30, r24
    212c:	f9 0b       	sbc	r31, r25
    212e:	cf 01       	movw	r24, r30
    2130:	88 3c       	cpi	r24, 0xC8	; 200
    2132:	91 05       	cpc	r25, r1
    2134:	08 f4       	brcc	.+2      	; 0x2138 <process_tapping+0x244>
    2136:	44 c0       	rjmp	.+136    	; 0x21c0 <process_tapping+0x2cc>
    2138:	c1 2c       	mov	r12, r1
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    213a:	70 2f       	mov	r23, r16
    213c:	19 8b       	std	Y+17, r17	; 0x11
    213e:	08 8b       	std	Y+16, r16	; 0x10
    2140:	52 2f       	mov	r21, r18
    2142:	6d 2d       	mov	r22, r13
    2144:	89 89       	ldd	r24, Y+17	; 0x11
    2146:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <debug_event>
        else {
            if (tapping_key.tap.count == 0) {
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
    214a:	e6 e8       	ldi	r30, 0x86	; 134
    214c:	f1 e0       	ldi	r31, 0x01	; 1
    214e:	86 e0       	ldi	r24, 0x06	; 6
    2150:	df 01       	movw	r26, r30
    2152:	1d 92       	st	X+, r1
    2154:	8a 95       	dec	r24
    2156:	e9 f7       	brne	.-6      	; 0x2152 <process_tapping+0x25e>
                debug_tapping_key();
    2158:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <debug_tapping_key>
                return false;
    215c:	b6 c0       	rjmp	.+364    	; 0x22ca <process_tapping+0x3d6>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    215e:	45 13       	cpse	r20, r21
    2160:	cc cf       	rjmp	.-104    	; 0x20fa <process_tapping+0x206>
    2162:	d1 10       	cpse	r13, r1
    2164:	ca cf       	rjmp	.-108    	; 0x20fa <process_tapping+0x206>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    2166:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <tapping_key+0x5>
    216a:	f7 01       	movw	r30, r14
    216c:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    216e:	c7 01       	movw	r24, r14
    2170:	0e 94 0a 0b 	call	0x1614	; 0x1614 <process_action>
                    tapping_key = (keyrecord_t){};
    2174:	86 e0       	ldi	r24, 0x06	; 6
    2176:	e6 e8       	ldi	r30, 0x86	; 134
    2178:	f1 e0       	ldi	r31, 0x01	; 1
    217a:	df 01       	movw	r26, r30
    217c:	1d 92       	st	X+, r1
    217e:	8a 95       	dec	r24
    2180:	e9 f7       	brne	.-6      	; 0x217c <process_tapping+0x288>
                    return true;
    2182:	ca 2c       	mov	r12, r10
    2184:	a2 c0       	rjmp	.+324    	; 0x22ca <process_tapping+0x3d6>
                }
                else if (is_tap_key(event) && event.pressed) {
    2186:	dd 20       	and	r13, r13
    2188:	29 f2       	breq	.-118    	; 0x2114 <process_tapping+0x220>
                    if (tapping_key.tap.count > 1) {
    218a:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <tapping_key+0x5>
    218e:	82 2f       	mov	r24, r18
    2190:	82 95       	swap	r24
    2192:	8f 70       	andi	r24, 0x0F	; 15
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	02 97       	sbiw	r24, 0x02	; 2
    2198:	0c f4       	brge	.+2      	; 0x219c <process_tapping+0x2a8>
    219a:	a0 cf       	rjmp	.-192    	; 0x20dc <process_tapping+0x1e8>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    219c:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <tapping_key>
    21a0:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <tapping_key+0x1>
    21a4:	9a 83       	std	Y+2, r25	; 0x02
    21a6:	89 83       	std	Y+1, r24	; 0x01
    21a8:	1b 82       	std	Y+3, r1	; 0x03
    21aa:	1d 83       	std	Y+5, r17	; 0x05
    21ac:	0c 83       	std	Y+4, r16	; 0x04
    21ae:	2e 83       	std	Y+6, r18	; 0x06
    21b0:	ce 01       	movw	r24, r28
    21b2:	01 96       	adiw	r24, 0x01	; 1
    21b4:	91 cf       	rjmp	.-222    	; 0x20d8 <process_tapping+0x1e4>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    21b6:	80 95       	com	r24
    21b8:	90 95       	com	r25
    21ba:	80 0f       	add	r24, r16
    21bc:	91 1f       	adc	r25, r17
    21be:	b8 cf       	rjmp	.-144    	; 0x2130 <process_tapping+0x23c>
            if (event.pressed) {
    21c0:	cd 2c       	mov	r12, r13
    21c2:	dd 20       	and	r13, r13
    21c4:	09 f4       	brne	.+2      	; 0x21c8 <process_tapping+0x2d4>
    21c6:	a6 cf       	rjmp	.-180    	; 0x2114 <process_tapping+0x220>
                if (IS_TAPPING_KEY(event.key)) {
    21c8:	26 13       	cpse	r18, r22
    21ca:	33 c0       	rjmp	.+102    	; 0x2232 <process_tapping+0x33e>
    21cc:	45 13       	cpse	r20, r21
    21ce:	31 c0       	rjmp	.+98     	; 0x2232 <process_tapping+0x33e>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    21d0:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <tapping_key+0x5>
    21d4:	20 fd       	sbrc	r18, 0
    21d6:	24 c0       	rjmp	.+72     	; 0x2220 <process_tapping+0x32c>
    21d8:	82 2f       	mov	r24, r18
    21da:	82 95       	swap	r24
    21dc:	8f 70       	andi	r24, 0x0F	; 15
    21de:	48 2f       	mov	r20, r24
    21e0:	50 e0       	ldi	r21, 0x00	; 0
    21e2:	41 15       	cp	r20, r1
    21e4:	51 05       	cpc	r21, r1
    21e6:	e1 f0       	breq	.+56     	; 0x2220 <process_tapping+0x32c>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    21e8:	d7 01       	movw	r26, r14
    21ea:	15 96       	adiw	r26, 0x05	; 5
    21ec:	2c 93       	st	X, r18
    21ee:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    21f0:	4f 30       	cpi	r20, 0x0F	; 15
    21f2:	51 05       	cpc	r21, r1
    21f4:	49 f0       	breq	.+18     	; 0x2208 <process_tapping+0x314>
    21f6:	8f 5f       	subi	r24, 0xFF	; 255
    21f8:	98 2f       	mov	r25, r24
    21fa:	92 95       	swap	r25
    21fc:	90 7f       	andi	r25, 0xF0	; 240
    21fe:	82 2f       	mov	r24, r18
    2200:	8f 70       	andi	r24, 0x0F	; 15
    2202:	89 2b       	or	r24, r25
    2204:	15 96       	adiw	r26, 0x05	; 5
    2206:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    2208:	c7 01       	movw	r24, r14
    220a:	0e 94 0a 0b 	call	0x1614	; 0x1614 <process_action>
                        tapping_key = *keyp;
    220e:	86 e0       	ldi	r24, 0x06	; 6
    2210:	f7 01       	movw	r30, r14
    2212:	a6 e8       	ldi	r26, 0x86	; 134
    2214:	b1 e0       	ldi	r27, 0x01	; 1
    2216:	01 90       	ld	r0, Z+
    2218:	0d 92       	st	X+, r0
    221a:	8a 95       	dec	r24
    221c:	e1 f7       	brne	.-8      	; 0x2216 <process_tapping+0x322>
    221e:	9c cf       	rjmp	.-200    	; 0x2158 <process_tapping+0x264>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    2220:	86 e0       	ldi	r24, 0x06	; 6
    2222:	f7 01       	movw	r30, r14
    2224:	a6 e8       	ldi	r26, 0x86	; 134
    2226:	b1 e0       	ldi	r27, 0x01	; 1
    2228:	01 90       	ld	r0, Z+
    222a:	0d 92       	st	X+, r0
    222c:	8a 95       	dec	r24
    222e:	e1 f7       	brne	.-8      	; 0x2228 <process_tapping+0x334>
                        return true;
    2230:	4c c0       	rjmp	.+152    	; 0x22ca <process_tapping+0x3d6>
                    }
                } else if (is_tap_key(event)) {
    2232:	4d 87       	std	Y+13, r20	; 0x0d
    2234:	2e 87       	std	Y+14, r18	; 0x0e
    2236:	df 86       	std	Y+15, r13	; 0x0f
    2238:	70 2f       	mov	r23, r16
    223a:	19 8b       	std	Y+17, r17	; 0x11
    223c:	08 8b       	std	Y+16, r16	; 0x10
    223e:	52 2f       	mov	r21, r18
    2240:	6d 2d       	mov	r22, r13
    2242:	89 89       	ldd	r24, Y+17	; 0x11
    2244:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <is_tap_key>
    2248:	81 11       	cpse	r24, r1
    224a:	48 cf       	rjmp	.-368    	; 0x20dc <process_tapping+0x1e8>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    224c:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <tapping_key+0x5>
    2250:	81 60       	ori	r24, 0x01	; 1
    2252:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <tapping_key+0x5>
                    process_action(keyp);
    2256:	c7 01       	movw	r24, r14
    2258:	0e 94 0a 0b 	call	0x1614	; 0x1614 <process_action>
                    return true;
    225c:	36 c0       	rjmp	.+108    	; 0x22ca <process_tapping+0x3d6>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event)) {
    225e:	dd 20       	and	r13, r13
    2260:	09 f4       	brne	.+2      	; 0x2264 <process_tapping+0x370>
    2262:	58 cf       	rjmp	.-336    	; 0x2114 <process_tapping+0x220>
    2264:	4d 87       	std	Y+13, r20	; 0x0d
    2266:	2e 87       	std	Y+14, r18	; 0x0e
    2268:	df 86       	std	Y+15, r13	; 0x0f
    226a:	70 2f       	mov	r23, r16
    226c:	19 8b       	std	Y+17, r17	; 0x11
    226e:	08 8b       	std	Y+16, r16	; 0x10
    2270:	52 2f       	mov	r21, r18
    2272:	6d 2d       	mov	r22, r13
    2274:	89 89       	ldd	r24, Y+17	; 0x11
    2276:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <is_tap_key>
    227a:	88 23       	and	r24, r24
    227c:	09 f4       	brne	.+2      	; 0x2280 <process_tapping+0x38c>
    227e:	4a cf       	rjmp	.-364    	; 0x2114 <process_tapping+0x220>
    2280:	2d cf       	rjmp	.-422    	; 0x20dc <process_tapping+0x1e8>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event);
    2282:	70 2f       	mov	r23, r16
    2284:	19 8b       	std	Y+17, r17	; 0x11
    2286:	08 8b       	std	Y+16, r16	; 0x10
    2288:	52 2f       	mov	r21, r18
    228a:	6d 2d       	mov	r22, r13
    228c:	89 89       	ldd	r24, Y+17	; 0x11
    228e:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <layer_switch_get_action>
                    switch (action.kind.id) {
    2292:	29 2f       	mov	r18, r25
    2294:	22 95       	swap	r18
    2296:	2f 70       	andi	r18, 0x0F	; 15
    2298:	22 30       	cpi	r18, 0x02	; 2
    229a:	28 f4       	brcc	.+10     	; 0x22a6 <process_tapping+0x3b2>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    229c:	9f 70       	andi	r25, 0x0F	; 15
    229e:	39 f0       	breq	.+14     	; 0x22ae <process_tapping+0x3ba>
    22a0:	81 11       	cpse	r24, r1
    22a2:	05 c0       	rjmp	.+10     	; 0x22ae <process_tapping+0x3ba>
    22a4:	0b c0       	rjmp	.+22     	; 0x22bc <process_tapping+0x3c8>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event);
                    switch (action.kind.id) {
    22a6:	24 30       	cpi	r18, 0x04	; 4
    22a8:	28 f4       	brcc	.+10     	; 0x22b4 <process_tapping+0x3c0>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    22aa:	9f 70       	andi	r25, 0x0F	; 15
    22ac:	49 f4       	brne	.+18     	; 0x22c0 <process_tapping+0x3cc>
                            if (IS_MOD(action.key.code)) return false;
    22ae:	80 5e       	subi	r24, 0xE0	; 224
    22b0:	88 30       	cpi	r24, 0x08	; 8
    22b2:	20 f0       	brcs	.+8      	; 0x22bc <process_tapping+0x3c8>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    22b4:	c7 01       	movw	r24, r14
    22b6:	0e 94 0a 0b 	call	0x1614	; 0x1614 <process_action>
                    return true;
    22ba:	bc 2c       	mov	r11, r12
    22bc:	cb 2c       	mov	r12, r11
    22be:	05 c0       	rjmp	.+10     	; 0x22ca <process_tapping+0x3d6>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    22c0:	f7 01       	movw	r30, r14
    22c2:	95 81       	ldd	r25, Z+5	; 0x05
    22c4:	90 7f       	andi	r25, 0xF0	; 240
    22c6:	99 f7       	brne	.-26     	; 0x22ae <process_tapping+0x3ba>
    22c8:	f9 cf       	rjmp	.-14     	; 0x22bc <process_tapping+0x3c8>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    22ca:	8c 2d       	mov	r24, r12
    22cc:	61 96       	adiw	r28, 0x11	; 17
    22ce:	0f b6       	in	r0, 0x3f	; 63
    22d0:	f8 94       	cli
    22d2:	de bf       	out	0x3e, r29	; 62
    22d4:	0f be       	out	0x3f, r0	; 63
    22d6:	cd bf       	out	0x3d, r28	; 61
    22d8:	df 91       	pop	r29
    22da:	cf 91       	pop	r28
    22dc:	1f 91       	pop	r17
    22de:	0f 91       	pop	r16
    22e0:	ff 90       	pop	r15
    22e2:	ef 90       	pop	r14
    22e4:	df 90       	pop	r13
    22e6:	cf 90       	pop	r12
    22e8:	bf 90       	pop	r11
    22ea:	af 90       	pop	r10
    22ec:	08 95       	ret

000022ee <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    22ee:	cf 93       	push	r28
    22f0:	df 93       	push	r29
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    22f6:	2c 97       	sbiw	r28, 0x0c	; 12
    22f8:	0f b6       	in	r0, 0x3f	; 63
    22fa:	f8 94       	cli
    22fc:	de bf       	out	0x3e, r29	; 62
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	cd bf       	out	0x3d, r28	; 61
    2302:	4f 83       	std	Y+7, r20	; 0x07
    2304:	58 87       	std	Y+8, r21	; 0x08
    2306:	69 87       	std	Y+9, r22	; 0x09
    2308:	7a 87       	std	Y+10, r23	; 0x0a
    230a:	8b 87       	std	Y+11, r24	; 0x0b
    230c:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    230e:	ce 01       	movw	r24, r28
    2310:	07 96       	adiw	r24, 0x07	; 7
    2312:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <process_tapping>
    2316:	88 23       	and	r24, r24
    2318:	d1 f0       	breq	.+52     	; 0x234e <action_tapping_process+0x60>
    231a:	9f 81       	ldd	r25, Y+7	; 0x07
    231c:	88 85       	ldd	r24, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    231e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2320:	3b 85       	ldd	r19, Y+11	; 0x0b
    2322:	23 2b       	or	r18, r19
    2324:	31 f0       	breq	.+12     	; 0x2332 <action_tapping_process+0x44>
    2326:	8f 3f       	cpi	r24, 0xFF	; 255
    2328:	31 f4       	brne	.+12     	; 0x2336 <action_tapping_process+0x48>
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	9f 3f       	cpi	r25, 0xFF	; 255
    232e:	19 f4       	brne	.+6      	; 0x2336 <action_tapping_process+0x48>
    2330:	03 c0       	rjmp	.+6      	; 0x2338 <action_tapping_process+0x4a>
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	01 c0       	rjmp	.+2      	; 0x2338 <action_tapping_process+0x4a>
    2336:	80 e0       	ldi	r24, 0x00	; 0
        if (!IS_NOEVENT(record.event)) {
    2338:	80 fd       	sbrc	r24, 0
    233a:	6f c0       	rjmp	.+222    	; 0x241a <action_tapping_process+0x12c>
            debug("processed: "); debug_record(record); debug("\n");
    233c:	4f 81       	ldd	r20, Y+7	; 0x07
    233e:	58 85       	ldd	r21, Y+8	; 0x08
    2340:	69 85       	ldd	r22, Y+9	; 0x09
    2342:	7a 85       	ldd	r23, Y+10	; 0x0a
    2344:	8b 85       	ldd	r24, Y+11	; 0x0b
    2346:	9c 85       	ldd	r25, Y+12	; 0x0c
    2348:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <debug_record>
    234c:	66 c0       	rjmp	.+204    	; 0x241a <action_tapping_process+0x12c>
    234e:	86 e0       	ldi	r24, 0x06	; 6
    2350:	fe 01       	movw	r30, r28
    2352:	37 96       	adiw	r30, 0x07	; 7
    2354:	de 01       	movw	r26, r28
    2356:	11 96       	adiw	r26, 0x01	; 1
    2358:	01 90       	ld	r0, Z+
    235a:	0d 92       	st	X+, r0
    235c:	8a 95       	dec	r24
    235e:	e1 f7       	brne	.-8      	; 0x2358 <action_tapping_process+0x6a>
    2360:	ff 81       	ldd	r31, Y+7	; 0x07
    2362:	e8 85       	ldd	r30, Y+8	; 0x08
    2364:	6a 85       	ldd	r22, Y+10	; 0x0a
    2366:	7b 85       	ldd	r23, Y+11	; 0x0b
    2368:	61 15       	cp	r22, r1
    236a:	71 05       	cpc	r23, r1
    236c:	31 f0       	breq	.+12     	; 0x237a <action_tapping_process+0x8c>
    236e:	ef 3f       	cpi	r30, 0xFF	; 255
    2370:	31 f4       	brne	.+12     	; 0x237e <action_tapping_process+0x90>
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	ff 3f       	cpi	r31, 0xFF	; 255
    2376:	19 f4       	brne	.+6      	; 0x237e <action_tapping_process+0x90>
    2378:	03 c0       	rjmp	.+6      	; 0x2380 <action_tapping_process+0x92>
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	01 c0       	rjmp	.+2      	; 0x2380 <action_tapping_process+0x92>
    237e:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    2380:	80 fd       	sbrc	r24, 0
    2382:	4b c0       	rjmp	.+150    	; 0x241a <action_tapping_process+0x12c>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    2384:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <waiting_buffer_head>
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	9c 01       	movw	r18, r24
    238c:	2f 5f       	subi	r18, 0xFF	; 255
    238e:	3f 4f       	sbci	r19, 0xFF	; 255
    2390:	27 70       	andi	r18, 0x07	; 7
    2392:	33 27       	eor	r19, r19
    2394:	40 91 54 01 	lds	r20, 0x0154	; 0x800154 <waiting_buffer_tail>
    2398:	50 e0       	ldi	r21, 0x00	; 0
    239a:	24 17       	cp	r18, r20
    239c:	35 07       	cpc	r19, r21
    239e:	09 f4       	brne	.+2      	; 0x23a2 <action_tapping_process+0xb4>
    23a0:	43 c0       	rjmp	.+134    	; 0x2428 <action_tapping_process+0x13a>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    23a2:	f9 83       	std	Y+1, r31	; 0x01
    23a4:	ea 83       	std	Y+2, r30	; 0x02
    23a6:	7d 83       	std	Y+5, r23	; 0x05
    23a8:	6c 83       	std	Y+4, r22	; 0x04
    23aa:	66 e0       	ldi	r22, 0x06	; 6
    23ac:	70 e0       	ldi	r23, 0x00	; 0
    23ae:	0e 94 c5 19 	call	0x338a	; 0x338a <__mulhi3>
    23b2:	dc 01       	movw	r26, r24
    23b4:	aa 5a       	subi	r26, 0xAA	; 170
    23b6:	be 4f       	sbci	r27, 0xFE	; 254
    23b8:	96 e0       	ldi	r25, 0x06	; 6
    23ba:	fe 01       	movw	r30, r28
    23bc:	31 96       	adiw	r30, 0x01	; 1
    23be:	01 90       	ld	r0, Z+
    23c0:	0d 92       	st	X+, r0
    23c2:	9a 95       	dec	r25
    23c4:	e1 f7       	brne	.-8      	; 0x23be <action_tapping_process+0xd0>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    23c6:	20 93 55 01 	sts	0x0155, r18	; 0x800155 <waiting_buffer_head>

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    23ca:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <debug_waiting_buffer>
    23ce:	25 c0       	rjmp	.+74     	; 0x241a <action_tapping_process+0x12c>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	66 e0       	ldi	r22, 0x06	; 6
    23d4:	70 e0       	ldi	r23, 0x00	; 0
    23d6:	0e 94 c5 19 	call	0x338a	; 0x338a <__mulhi3>
    23da:	8a 5a       	subi	r24, 0xAA	; 170
    23dc:	9e 4f       	sbci	r25, 0xFE	; 254
    23de:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <process_tapping>
    23e2:	88 23       	and	r24, r24
    23e4:	71 f1       	breq	.+92     	; 0x2442 <action_tapping_process+0x154>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    23e6:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <waiting_buffer_tail>
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	66 e0       	ldi	r22, 0x06	; 6
    23ee:	70 e0       	ldi	r23, 0x00	; 0
    23f0:	0e 94 c5 19 	call	0x338a	; 0x338a <__mulhi3>
    23f4:	fc 01       	movw	r30, r24
    23f6:	ea 5a       	subi	r30, 0xAA	; 170
    23f8:	fe 4f       	sbci	r31, 0xFE	; 254
    23fa:	40 81       	ld	r20, Z
    23fc:	51 81       	ldd	r21, Z+1	; 0x01
    23fe:	62 81       	ldd	r22, Z+2	; 0x02
    2400:	73 81       	ldd	r23, Z+3	; 0x03
    2402:	84 81       	ldd	r24, Z+4	; 0x04
    2404:	95 81       	ldd	r25, Z+5	; 0x05
    2406:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    240a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <waiting_buffer_tail>
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	01 96       	adiw	r24, 0x01	; 1
    2412:	87 70       	andi	r24, 0x07	; 7
    2414:	99 27       	eor	r25, r25
    2416:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <waiting_buffer_tail>
    241a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <waiting_buffer_tail>
    241e:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <waiting_buffer_head>
    2422:	89 13       	cpse	r24, r25
    2424:	d5 cf       	rjmp	.-86     	; 0x23d0 <action_tapping_process+0xe2>
    2426:	0d c0       	rjmp	.+26     	; 0x2442 <action_tapping_process+0x154>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    2428:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    242c:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <waiting_buffer_head>
    waiting_buffer_tail = 0;
    2430:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <waiting_buffer_tail>
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    2434:	e6 e8       	ldi	r30, 0x86	; 134
    2436:	f1 e0       	ldi	r31, 0x01	; 1
    2438:	86 e0       	ldi	r24, 0x06	; 6
    243a:	df 01       	movw	r26, r30
    243c:	1d 92       	st	X+, r1
    243e:	8a 95       	dec	r24
    2440:	e9 f7       	brne	.-6      	; 0x243c <action_tapping_process+0x14e>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    2442:	2c 96       	adiw	r28, 0x0c	; 12
    2444:	0f b6       	in	r0, 0x3f	; 63
    2446:	f8 94       	cli
    2448:	de bf       	out	0x3e, r29	; 62
    244a:	0f be       	out	0x3f, r0	; 63
    244c:	cd bf       	out	0x3d, r28	; 61
    244e:	df 91       	pop	r29
    2450:	cf 91       	pop	r28
    2452:	08 95       	ret

00002454 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    2454:	df 92       	push	r13
    2456:	ef 92       	push	r14
    2458:	ff 92       	push	r15
    245a:	0f 93       	push	r16
    245c:	1f 93       	push	r17
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    2464:	89 2b       	or	r24, r25
    2466:	09 f4       	brne	.+2      	; 0x246a <action_macro_play+0x16>
    2468:	88 c0       	rjmp	.+272    	; 0x257a <action_macro_play+0x126>
    246a:	e1 2c       	mov	r14, r1
    246c:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    246e:	dd 24       	eor	r13, r13
    2470:	d3 94       	inc	r13

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    2472:	ef 01       	movw	r28, r30
    2474:	21 96       	adiw	r28, 0x01	; 1
    2476:	84 91       	lpm	r24, Z
    2478:	85 37       	cpi	r24, 0x75	; 117
    247a:	09 f4       	brne	.+2      	; 0x247e <action_macro_play+0x2a>
    247c:	60 c0       	rjmp	.+192    	; 0x253e <action_macro_play+0xea>
    247e:	58 f4       	brcc	.+22     	; 0x2496 <action_macro_play+0x42>
    2480:	84 37       	cpi	r24, 0x74	; 116
    2482:	08 f0       	brcs	.+2      	; 0x2486 <action_macro_play+0x32>
    2484:	4e c0       	rjmp	.+156    	; 0x2522 <action_macro_play+0xce>
    2486:	84 30       	cpi	r24, 0x04	; 4
    2488:	08 f0       	brcs	.+2      	; 0x248c <action_macro_play+0x38>
    248a:	68 c0       	rjmp	.+208    	; 0x255c <action_macro_play+0x108>
    248c:	81 30       	cpi	r24, 0x01	; 1
    248e:	d1 f0       	breq	.+52     	; 0x24c4 <action_macro_play+0x70>
    2490:	82 30       	cpi	r24, 0x02	; 2
    2492:	71 f1       	breq	.+92     	; 0x24f0 <action_macro_play+0x9c>
    2494:	72 c0       	rjmp	.+228    	; 0x257a <action_macro_play+0x126>
    2496:	88 37       	cpi	r24, 0x78	; 120
    2498:	09 f4       	brne	.+2      	; 0x249c <action_macro_play+0x48>
    249a:	5b c0       	rjmp	.+182    	; 0x2552 <action_macro_play+0xfe>
    249c:	50 f4       	brcc	.+20     	; 0x24b2 <action_macro_play+0x5e>
    249e:	86 37       	cpi	r24, 0x76	; 118
    24a0:	09 f4       	brne	.+2      	; 0x24a4 <action_macro_play+0x50>
    24a2:	53 c0       	rjmp	.+166    	; 0x254a <action_macro_play+0xf6>
    24a4:	87 37       	cpi	r24, 0x77	; 119
    24a6:	09 f0       	breq	.+2      	; 0x24aa <action_macro_play+0x56>
    24a8:	68 c0       	rjmp	.+208    	; 0x257a <action_macro_play+0x126>
                break;
            case MOD_STORE:
                mod_storage = get_mods();
                break;
            case MOD_RESTORE:
                set_mods(mod_storage);
    24aa:	8e 2d       	mov	r24, r14
    24ac:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <set_mods>
    24b0:	52 c0       	rjmp	.+164    	; 0x2556 <action_macro_play+0x102>

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    24b2:	9c e7       	ldi	r25, 0x7C	; 124
    24b4:	98 0f       	add	r25, r24
    24b6:	90 37       	cpi	r25, 0x70	; 112
    24b8:	08 f0       	brcs	.+2      	; 0x24bc <action_macro_play+0x68>
    24ba:	5f c0       	rjmp	.+190    	; 0x257a <action_macro_play+0x126>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    24bc:	8f 77       	andi	r24, 0x7F	; 127
    24be:	0e 94 92 0a 	call	0x1524	; 0x1524 <unregister_code>
                break;
    24c2:	4e c0       	rjmp	.+156    	; 0x2560 <action_macro_play+0x10c>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    24c4:	8f 01       	movw	r16, r30
    24c6:	0e 5f       	subi	r16, 0xFE	; 254
    24c8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ca:	fe 01       	movw	r30, r28
    24cc:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    24ce:	90 e2       	ldi	r25, 0x20	; 32
    24d0:	98 0f       	add	r25, r24
    24d2:	98 30       	cpi	r25, 0x08	; 8
    24d4:	50 f4       	brcc	.+20     	; 0x24ea <action_macro_play+0x96>
                    add_weak_mods(MOD_BIT(macro));
    24d6:	87 70       	andi	r24, 0x07	; 7
    24d8:	fd 2d       	mov	r31, r13
    24da:	01 c0       	rjmp	.+2      	; 0x24de <action_macro_play+0x8a>
    24dc:	ff 0f       	add	r31, r31
    24de:	8a 95       	dec	r24
    24e0:	ea f7       	brpl	.-6      	; 0x24dc <action_macro_play+0x88>
    24e2:	8f 2f       	mov	r24, r31
    24e4:	0e 94 ff 14 	call	0x29fe	; 0x29fe <add_weak_mods>
    24e8:	15 c0       	rjmp	.+42     	; 0x2514 <action_macro_play+0xc0>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    24ea:	0e 94 af 09 	call	0x135e	; 0x135e <register_code>
    24ee:	14 c0       	rjmp	.+40     	; 0x2518 <action_macro_play+0xc4>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    24f0:	8f 01       	movw	r16, r30
    24f2:	0e 5f       	subi	r16, 0xFE	; 254
    24f4:	1f 4f       	sbci	r17, 0xFF	; 255
    24f6:	fe 01       	movw	r30, r28
    24f8:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    24fa:	90 e2       	ldi	r25, 0x20	; 32
    24fc:	98 0f       	add	r25, r24
    24fe:	98 30       	cpi	r25, 0x08	; 8
    2500:	68 f4       	brcc	.+26     	; 0x251c <action_macro_play+0xc8>
                    del_weak_mods(MOD_BIT(macro));
    2502:	87 70       	andi	r24, 0x07	; 7
    2504:	fd 2d       	mov	r31, r13
    2506:	01 c0       	rjmp	.+2      	; 0x250a <action_macro_play+0xb6>
    2508:	ff 0f       	add	r31, r31
    250a:	8a 95       	dec	r24
    250c:	ea f7       	brpl	.-6      	; 0x2508 <action_macro_play+0xb4>
    250e:	8f 2f       	mov	r24, r31
    2510:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <del_weak_mods>
                    send_keyboard_report();
    2514:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <send_keyboard_report>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    2518:	e8 01       	movw	r28, r16
    251a:	22 c0       	rjmp	.+68     	; 0x2560 <action_macro_play+0x10c>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                    send_keyboard_report();
                } else {
                    unregister_code(macro);
    251c:	0e 94 92 0a 	call	0x1524	; 0x1524 <unregister_code>
    2520:	fb cf       	rjmp	.-10     	; 0x2518 <action_macro_play+0xc4>
                }
                break;
            case WAIT:
                MACRO_READ();
    2522:	cf 01       	movw	r24, r30
    2524:	02 96       	adiw	r24, 0x02	; 2
    2526:	fe 01       	movw	r30, r28
    2528:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    252a:	cc 23       	and	r28, r28
    252c:	61 f0       	breq	.+24     	; 0x2546 <action_macro_play+0xf2>
    252e:	ef e9       	ldi	r30, 0x9F	; 159
    2530:	ff e0       	ldi	r31, 0x0F	; 15
    2532:	31 97       	sbiw	r30, 0x01	; 1
    2534:	f1 f7       	brne	.-4      	; 0x2532 <action_macro_play+0xde>
    2536:	00 c0       	rjmp	.+0      	; 0x2538 <action_macro_play+0xe4>
    2538:	00 00       	nop
    253a:	c1 50       	subi	r28, 0x01	; 1
    253c:	f6 cf       	rjmp	.-20     	; 0x252a <action_macro_play+0xd6>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    253e:	cf 01       	movw	r24, r30
    2540:	02 96       	adiw	r24, 0x02	; 2
    2542:	fe 01       	movw	r30, r28
    2544:	f4 90       	lpm	r15, Z
    2546:	ec 01       	movw	r28, r24
                dprintf("INTERVAL(%u)\n", interval);
                break;
    2548:	0b c0       	rjmp	.+22     	; 0x2560 <action_macro_play+0x10c>
            case MOD_STORE:
                mod_storage = get_mods();
    254a:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <get_mods>
    254e:	e8 2e       	mov	r14, r24
                break;
    2550:	07 c0       	rjmp	.+14     	; 0x2560 <action_macro_play+0x10c>
            case MOD_RESTORE:
                set_mods(mod_storage);
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    2552:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <clear_mods>
                send_keyboard_report();
    2556:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <send_keyboard_report>
                break;
    255a:	02 c0       	rjmp	.+4      	; 0x2560 <action_macro_play+0x10c>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    255c:	0e 94 af 09 	call	0x135e	; 0x135e <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    2560:	8f 2d       	mov	r24, r15
    2562:	88 23       	and	r24, r24
    2564:	41 f0       	breq	.+16     	; 0x2576 <action_macro_play+0x122>
    2566:	ef e9       	ldi	r30, 0x9F	; 159
    2568:	ff e0       	ldi	r31, 0x0F	; 15
    256a:	31 97       	sbiw	r30, 0x01	; 1
    256c:	f1 f7       	brne	.-4      	; 0x256a <action_macro_play+0x116>
    256e:	00 c0       	rjmp	.+0      	; 0x2570 <action_macro_play+0x11c>
    2570:	00 00       	nop
    2572:	81 50       	subi	r24, 0x01	; 1
    2574:	f6 cf       	rjmp	.-20     	; 0x2562 <action_macro_play+0x10e>
    2576:	fe 01       	movw	r30, r28
    2578:	7c cf       	rjmp	.-264    	; 0x2472 <action_macro_play+0x1e>
    }
}
    257a:	df 91       	pop	r29
    257c:	cf 91       	pop	r28
    257e:	1f 91       	pop	r17
    2580:	0f 91       	pop	r16
    2582:	ff 90       	pop	r15
    2584:	ef 90       	pop	r14
    2586:	df 90       	pop	r13
    2588:	08 95       	ret

0000258a <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    258a:	60 93 9c 01 	sts	0x019C, r22	; 0x80019c <layer_state>
    258e:	70 93 9d 01 	sts	0x019D, r23	; 0x80019d <layer_state+0x1>
    2592:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <layer_state+0x2>
    2596:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <layer_state+0x3>
    hook_layer_change(layer_state);
    259a:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <hook_layer_change>

0000259e <default_layer_debug>:
    259e:	08 95       	ret

000025a0 <default_layer_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    25a0:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <default_layer_state>
    25a4:	70 93 a1 01 	sts	0x01A1, r23	; 0x8001a1 <default_layer_state+0x1>
    25a8:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <default_layer_state+0x2>
    25ac:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    25b0:	0c 94 5c 15 	jmp	0x2ab8	; 0x2ab8 <hook_default_layer_change>

000025b4 <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    25b4:	0f 93       	push	r16
    25b6:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    25b8:	00 91 a0 01 	lds	r16, 0x01A0	; 0x8001a0 <default_layer_state>
    25bc:	10 91 a1 01 	lds	r17, 0x01A1	; 0x8001a1 <default_layer_state+0x1>
    25c0:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <default_layer_state+0x2>
    25c4:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <default_layer_state+0x3>
    25c8:	60 2b       	or	r22, r16
    25ca:	71 2b       	or	r23, r17
    25cc:	82 2b       	or	r24, r18
    25ce:	93 2b       	or	r25, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    25d0:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <default_layer_state>
    25d4:	70 93 a1 01 	sts	0x01A1, r23	; 0x8001a1 <default_layer_state+0x1>
    25d8:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <default_layer_state+0x2>
    25dc:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <default_layer_state+0x3>

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
    25e0:	1f 91       	pop	r17
    25e2:	0f 91       	pop	r16
static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    hook_default_layer_change(default_layer_state);
    25e4:	0c 94 5c 15 	jmp	0x2ab8	; 0x2ab8 <hook_default_layer_change>

000025e8 <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    25e8:	0f 93       	push	r16
    25ea:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    25ec:	00 91 a0 01 	lds	r16, 0x01A0	; 0x8001a0 <default_layer_state>
    25f0:	10 91 a1 01 	lds	r17, 0x01A1	; 0x8001a1 <default_layer_state+0x1>
    25f4:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <default_layer_state+0x2>
    25f8:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <default_layer_state+0x3>
    25fc:	60 23       	and	r22, r16
    25fe:	71 23       	and	r23, r17
    2600:	82 23       	and	r24, r18
    2602:	93 23       	and	r25, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    2604:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <default_layer_state>
    2608:	70 93 a1 01 	sts	0x01A1, r23	; 0x8001a1 <default_layer_state+0x1>
    260c:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <default_layer_state+0x2>
    2610:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <default_layer_state+0x3>
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
    2614:	1f 91       	pop	r17
    2616:	0f 91       	pop	r16
static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    hook_default_layer_change(default_layer_state);
    2618:	0c 94 5c 15 	jmp	0x2ab8	; 0x2ab8 <hook_default_layer_change>

0000261c <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    261c:	0f 93       	push	r16
    261e:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    2620:	00 91 a0 01 	lds	r16, 0x01A0	; 0x8001a0 <default_layer_state>
    2624:	10 91 a1 01 	lds	r17, 0x01A1	; 0x8001a1 <default_layer_state+0x1>
    2628:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <default_layer_state+0x2>
    262c:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <default_layer_state+0x3>
    2630:	60 27       	eor	r22, r16
    2632:	71 27       	eor	r23, r17
    2634:	82 27       	eor	r24, r18
    2636:	93 27       	eor	r25, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    2638:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <default_layer_state>
    263c:	70 93 a1 01 	sts	0x01A1, r23	; 0x8001a1 <default_layer_state+0x1>
    2640:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <default_layer_state+0x2>
    2644:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <default_layer_state+0x3>
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
}
    2648:	1f 91       	pop	r17
    264a:	0f 91       	pop	r16
static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    hook_default_layer_change(default_layer_state);
    264c:	0c 94 5c 15 	jmp	0x2ab8	; 0x2ab8 <hook_default_layer_change>

00002650 <layer_clear>:
#endif
}

void layer_clear(void)
{
    layer_state_set(0);
    2650:	60 e0       	ldi	r22, 0x00	; 0
    2652:	70 e0       	ldi	r23, 0x00	; 0
    2654:	cb 01       	movw	r24, r22
    2656:	0c 94 c5 12 	jmp	0x258a	; 0x258a <layer_state_set>

0000265a <layer_move>:
}

void layer_move(uint8_t layer)
{
    265a:	0f 93       	push	r16
    265c:	1f 93       	push	r17
    layer_state_set(1UL<<layer);
    265e:	41 e0       	ldi	r20, 0x01	; 1
    2660:	50 e0       	ldi	r21, 0x00	; 0
    2662:	60 e0       	ldi	r22, 0x00	; 0
    2664:	70 e0       	ldi	r23, 0x00	; 0
    2666:	8a 01       	movw	r16, r20
    2668:	9b 01       	movw	r18, r22
    266a:	04 c0       	rjmp	.+8      	; 0x2674 <layer_move+0x1a>
    266c:	00 0f       	add	r16, r16
    266e:	11 1f       	adc	r17, r17
    2670:	22 1f       	adc	r18, r18
    2672:	33 1f       	adc	r19, r19
    2674:	8a 95       	dec	r24
    2676:	d2 f7       	brpl	.-12     	; 0x266c <layer_move+0x12>
    2678:	c9 01       	movw	r24, r18
    267a:	b8 01       	movw	r22, r16
}
    267c:	1f 91       	pop	r17
    267e:	0f 91       	pop	r16
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    2680:	0c 94 c5 12 	jmp	0x258a	; 0x258a <layer_state_set>

00002684 <layer_on>:
}

void layer_on(uint8_t layer)
{
    2684:	0f 93       	push	r16
    2686:	1f 93       	push	r17
    layer_state_set(layer_state | (1UL<<layer));
    2688:	41 e0       	ldi	r20, 0x01	; 1
    268a:	50 e0       	ldi	r21, 0x00	; 0
    268c:	60 e0       	ldi	r22, 0x00	; 0
    268e:	70 e0       	ldi	r23, 0x00	; 0
    2690:	04 c0       	rjmp	.+8      	; 0x269a <layer_on+0x16>
    2692:	44 0f       	add	r20, r20
    2694:	55 1f       	adc	r21, r21
    2696:	66 1f       	adc	r22, r22
    2698:	77 1f       	adc	r23, r23
    269a:	8a 95       	dec	r24
    269c:	d2 f7       	brpl	.-12     	; 0x2692 <layer_on+0xe>
    269e:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <layer_state>
    26a2:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <layer_state+0x1>
    26a6:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <layer_state+0x2>
    26aa:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <layer_state+0x3>
    26ae:	8a 01       	movw	r16, r20
    26b0:	9b 01       	movw	r18, r22
    26b2:	08 2b       	or	r16, r24
    26b4:	19 2b       	or	r17, r25
    26b6:	2a 2b       	or	r18, r26
    26b8:	3b 2b       	or	r19, r27
    26ba:	c9 01       	movw	r24, r18
    26bc:	b8 01       	movw	r22, r16
}
    26be:	1f 91       	pop	r17
    26c0:	0f 91       	pop	r16
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    26c2:	0c 94 c5 12 	jmp	0x258a	; 0x258a <layer_state_set>

000026c6 <layer_off>:
}

void layer_off(uint8_t layer)
{
    26c6:	0f 93       	push	r16
    26c8:	1f 93       	push	r17
    layer_state_set(layer_state & ~(1UL<<layer));
    26ca:	41 e0       	ldi	r20, 0x01	; 1
    26cc:	50 e0       	ldi	r21, 0x00	; 0
    26ce:	60 e0       	ldi	r22, 0x00	; 0
    26d0:	70 e0       	ldi	r23, 0x00	; 0
    26d2:	04 c0       	rjmp	.+8      	; 0x26dc <layer_off+0x16>
    26d4:	44 0f       	add	r20, r20
    26d6:	55 1f       	adc	r21, r21
    26d8:	66 1f       	adc	r22, r22
    26da:	77 1f       	adc	r23, r23
    26dc:	8a 95       	dec	r24
    26de:	d2 f7       	brpl	.-12     	; 0x26d4 <layer_off+0xe>
    26e0:	40 95       	com	r20
    26e2:	50 95       	com	r21
    26e4:	60 95       	com	r22
    26e6:	70 95       	com	r23
    26e8:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <layer_state>
    26ec:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <layer_state+0x1>
    26f0:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <layer_state+0x2>
    26f4:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <layer_state+0x3>
    26f8:	8a 01       	movw	r16, r20
    26fa:	9b 01       	movw	r18, r22
    26fc:	08 23       	and	r16, r24
    26fe:	19 23       	and	r17, r25
    2700:	2a 23       	and	r18, r26
    2702:	3b 23       	and	r19, r27
    2704:	c9 01       	movw	r24, r18
    2706:	b8 01       	movw	r22, r16
}
    2708:	1f 91       	pop	r17
    270a:	0f 91       	pop	r16
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    270c:	0c 94 c5 12 	jmp	0x258a	; 0x258a <layer_state_set>

00002710 <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    2710:	0f 93       	push	r16
    2712:	1f 93       	push	r17
    layer_state_set(layer_state ^ (1UL<<layer));
    2714:	41 e0       	ldi	r20, 0x01	; 1
    2716:	50 e0       	ldi	r21, 0x00	; 0
    2718:	60 e0       	ldi	r22, 0x00	; 0
    271a:	70 e0       	ldi	r23, 0x00	; 0
    271c:	04 c0       	rjmp	.+8      	; 0x2726 <layer_invert+0x16>
    271e:	44 0f       	add	r20, r20
    2720:	55 1f       	adc	r21, r21
    2722:	66 1f       	adc	r22, r22
    2724:	77 1f       	adc	r23, r23
    2726:	8a 95       	dec	r24
    2728:	d2 f7       	brpl	.-12     	; 0x271e <layer_invert+0xe>
    272a:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <layer_state>
    272e:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <layer_state+0x1>
    2732:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <layer_state+0x2>
    2736:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <layer_state+0x3>
    273a:	8a 01       	movw	r16, r20
    273c:	9b 01       	movw	r18, r22
    273e:	08 27       	eor	r16, r24
    2740:	19 27       	eor	r17, r25
    2742:	2a 27       	eor	r18, r26
    2744:	3b 27       	eor	r19, r27
    2746:	c9 01       	movw	r24, r18
    2748:	b8 01       	movw	r22, r16
}
    274a:	1f 91       	pop	r17
    274c:	0f 91       	pop	r16
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    274e:	0c 94 c5 12 	jmp	0x258a	; 0x258a <layer_state_set>

00002752 <layer_or>:
}

void layer_or(uint32_t state)
{
    2752:	0f 93       	push	r16
    2754:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    2756:	00 91 9c 01 	lds	r16, 0x019C	; 0x80019c <layer_state>
    275a:	10 91 9d 01 	lds	r17, 0x019D	; 0x80019d <layer_state+0x1>
    275e:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <layer_state+0x2>
    2762:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <layer_state+0x3>
    2766:	60 2b       	or	r22, r16
    2768:	71 2b       	or	r23, r17
    276a:	82 2b       	or	r24, r18
    276c:	93 2b       	or	r25, r19
}
    276e:	1f 91       	pop	r17
    2770:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    2772:	0c 94 c5 12 	jmp	0x258a	; 0x258a <layer_state_set>

00002776 <layer_and>:
}
void layer_and(uint32_t state)
{
    2776:	0f 93       	push	r16
    2778:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    277a:	00 91 9c 01 	lds	r16, 0x019C	; 0x80019c <layer_state>
    277e:	10 91 9d 01 	lds	r17, 0x019D	; 0x80019d <layer_state+0x1>
    2782:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <layer_state+0x2>
    2786:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <layer_state+0x3>
    278a:	60 23       	and	r22, r16
    278c:	71 23       	and	r23, r17
    278e:	82 23       	and	r24, r18
    2790:	93 23       	and	r25, r19
}
    2792:	1f 91       	pop	r17
    2794:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    2796:	0c 94 c5 12 	jmp	0x258a	; 0x258a <layer_state_set>

0000279a <layer_xor>:
}
void layer_xor(uint32_t state)
{
    279a:	0f 93       	push	r16
    279c:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    279e:	00 91 9c 01 	lds	r16, 0x019C	; 0x80019c <layer_state>
    27a2:	10 91 9d 01 	lds	r17, 0x019D	; 0x80019d <layer_state+0x1>
    27a6:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <layer_state+0x2>
    27aa:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <layer_state+0x3>
    27ae:	60 27       	eor	r22, r16
    27b0:	71 27       	eor	r23, r17
    27b2:	82 27       	eor	r24, r18
    27b4:	93 27       	eor	r25, r19
}
    27b6:	1f 91       	pop	r17
    27b8:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    27ba:	0c 94 c5 12 	jmp	0x258a	; 0x258a <layer_state_set>

000027be <layer_debug>:
}

void layer_debug(void)
{
    27be:	08 95       	ret

000027c0 <layer_switch_get_action>:
#ifndef NO_TRACK_KEY_PRESS
/* record layer on where key is pressed */
static uint8_t layer_pressed[MATRIX_ROWS][MATRIX_COLS] = {};
#endif
action_t layer_switch_get_action(keyevent_t event)
{
    27c0:	8f 92       	push	r8
    27c2:	9f 92       	push	r9
    27c4:	af 92       	push	r10
    27c6:	bf 92       	push	r11
    27c8:	df 92       	push	r13
    27ca:	ef 92       	push	r14
    27cc:	ff 92       	push	r15
    27ce:	0f 93       	push	r16
    27d0:	1f 93       	push	r17
    27d2:	cf 93       	push	r28
    27d4:	df 93       	push	r29
    27d6:	00 d0       	rcall	.+0      	; 0x27d8 <layer_switch_get_action+0x18>
    27d8:	00 d0       	rcall	.+0      	; 0x27da <layer_switch_get_action+0x1a>
    27da:	1f 92       	push	r1
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
    27e0:	6b 83       	std	Y+3, r22	; 0x03
    27e2:	7c 83       	std	Y+4, r23	; 0x04
    27e4:	8d 83       	std	Y+5, r24	; 0x05
    27e6:	8a 01       	movw	r16, r20
    27e8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ea:	9d 81       	ldd	r25, Y+5	; 0x05
    27ec:	89 2b       	or	r24, r25
    27ee:	31 f0       	breq	.+12     	; 0x27fc <layer_switch_get_action+0x3c>
    27f0:	1f 3f       	cpi	r17, 0xFF	; 255
    27f2:	31 f4       	brne	.+12     	; 0x2800 <layer_switch_get_action+0x40>
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	4f 3f       	cpi	r20, 0xFF	; 255
    27f8:	19 f4       	brne	.+6      	; 0x2800 <layer_switch_get_action+0x40>
    27fa:	03 c0       	rjmp	.+6      	; 0x2802 <layer_switch_get_action+0x42>
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	01 c0       	rjmp	.+2      	; 0x2802 <layer_switch_get_action+0x42>
    2800:	80 e0       	ldi	r24, 0x00	; 0
    if (IS_NOEVENT(event)) return (action_t)ACTION_NO;
    2802:	80 ff       	sbrs	r24, 0
    2804:	03 c0       	rjmp	.+6      	; 0x280c <layer_switch_get_action+0x4c>
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	52 c0       	rjmp	.+164    	; 0x28b0 <layer_switch_get_action+0xf0>

    uint8_t layer = 0;
#ifndef NO_TRACK_KEY_PRESS
    if (event.pressed) {
    280c:	8b 81       	ldd	r24, Y+3	; 0x03
    280e:	88 23       	and	r24, r24
    2810:	09 f4       	brne	.+2      	; 0x2814 <layer_switch_get_action+0x54>
    2812:	3c c0       	rjmp	.+120    	; 0x288c <layer_switch_get_action+0xcc>
/* return layer effective for key at this time */
static uint8_t current_layer_for_key(keypos_t key)
{
#ifndef NO_ACTION_LAYER
    action_t action = ACTION_TRANSPARENT;
    uint32_t layers = layer_state | default_layer_state;
    2814:	80 90 9c 01 	lds	r8, 0x019C	; 0x80019c <layer_state>
    2818:	90 90 9d 01 	lds	r9, 0x019D	; 0x80019d <layer_state+0x1>
    281c:	a0 90 9e 01 	lds	r10, 0x019E	; 0x80019e <layer_state+0x2>
    2820:	b0 90 9f 01 	lds	r11, 0x019F	; 0x80019f <layer_state+0x3>
    2824:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <default_layer_state>
    2828:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <default_layer_state+0x1>
    282c:	a0 91 a2 01 	lds	r26, 0x01A2	; 0x8001a2 <default_layer_state+0x2>
    2830:	b0 91 a3 01 	lds	r27, 0x01A3	; 0x8001a3 <default_layer_state+0x3>
    2834:	88 2a       	or	r8, r24
    2836:	99 2a       	or	r9, r25
    2838:	aa 2a       	or	r10, r26
    283a:	bb 2a       	or	r11, r27
    283c:	2f e1       	ldi	r18, 0x1F	; 31
    283e:	e2 2e       	mov	r14, r18
    2840:	f1 2c       	mov	r15, r1
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    2842:	d5 01       	movw	r26, r10
    2844:	c4 01       	movw	r24, r8
    2846:	0e 2c       	mov	r0, r14
    2848:	04 c0       	rjmp	.+8      	; 0x2852 <layer_switch_get_action+0x92>
    284a:	b6 95       	lsr	r27
    284c:	a7 95       	ror	r26
    284e:	97 95       	ror	r25
    2850:	87 95       	ror	r24
    2852:	0a 94       	dec	r0
    2854:	d2 f7       	brpl	.-12     	; 0x284a <layer_switch_get_action+0x8a>
    2856:	80 fd       	sbrc	r24, 0
    2858:	06 c0       	rjmp	.+12     	; 0x2866 <layer_switch_get_action+0xa6>
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	e8 1a       	sub	r14, r24
    285e:	f1 08       	sbc	r15, r1
    2860:	80 f7       	brcc	.-32     	; 0x2842 <layer_switch_get_action+0x82>
                return i;
            }
        }
    }
    /* fall back to layer 0 */
    return 0;
    2862:	d1 2c       	mov	r13, r1
    2864:	07 c0       	rjmp	.+14     	; 0x2874 <layer_switch_get_action+0xb4>
    action_t action = ACTION_TRANSPARENT;
    uint32_t layers = layer_state | default_layer_state;
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
            action = action_for_key(i, key);
    2866:	de 2c       	mov	r13, r14
    2868:	b8 01       	movw	r22, r16
    286a:	8e 2d       	mov	r24, r14
    286c:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <action_for_key>
            if (action.code != (action_t)ACTION_TRANSPARENT.code) {
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	99 f3       	breq	.-26     	; 0x285a <layer_switch_get_action+0x9a>

    uint8_t layer = 0;
#ifndef NO_TRACK_KEY_PRESS
    if (event.pressed) {
        layer = current_layer_for_key(event.key);
        layer_pressed[event.key.row][event.key.col] = layer;
    2874:	e1 2f       	mov	r30, r17
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	ee 0f       	add	r30, r30
    287a:	ff 1f       	adc	r31, r31
    287c:	ee 0f       	add	r30, r30
    287e:	ff 1f       	adc	r31, r31
    2880:	e4 57       	subi	r30, 0x74	; 116
    2882:	fe 4f       	sbci	r31, 0xFE	; 254
    2884:	e0 0f       	add	r30, r16
    2886:	f1 1d       	adc	r31, r1
    2888:	d0 82       	st	Z, r13
    288a:	0b c0       	rjmp	.+22     	; 0x28a2 <layer_switch_get_action+0xe2>
    } else {
        layer = layer_pressed[event.key.row][event.key.col];
    288c:	e1 2f       	mov	r30, r17
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	ee 0f       	add	r30, r30
    2892:	ff 1f       	adc	r31, r31
    2894:	ee 0f       	add	r30, r30
    2896:	ff 1f       	adc	r31, r31
    2898:	e4 57       	subi	r30, 0x74	; 116
    289a:	fe 4f       	sbci	r31, 0xFE	; 254
    289c:	e0 0f       	add	r30, r16
    289e:	f1 1d       	adc	r31, r1
    28a0:	d0 80       	ld	r13, Z
    }
#else
    layer = current_layer_for_key(event.key);
#endif
    return action_for_key(layer, event.key);
    28a2:	09 83       	std	Y+1, r16	; 0x01
    28a4:	1a 83       	std	Y+2, r17	; 0x02
    28a6:	69 81       	ldd	r22, Y+1	; 0x01
    28a8:	7a 81       	ldd	r23, Y+2	; 0x02
    28aa:	8d 2d       	mov	r24, r13
    28ac:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <action_for_key>
}
    28b0:	0f 90       	pop	r0
    28b2:	0f 90       	pop	r0
    28b4:	0f 90       	pop	r0
    28b6:	0f 90       	pop	r0
    28b8:	0f 90       	pop	r0
    28ba:	df 91       	pop	r29
    28bc:	cf 91       	pop	r28
    28be:	1f 91       	pop	r17
    28c0:	0f 91       	pop	r16
    28c2:	ff 90       	pop	r15
    28c4:	ef 90       	pop	r14
    28c6:	df 90       	pop	r13
    28c8:	bf 90       	pop	r11
    28ca:	af 90       	pop	r10
    28cc:	9f 90       	pop	r9
    28ce:	8f 90       	pop	r8
    28d0:	08 95       	ret

000028d2 <add_key>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
    28d2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <keyboard_protocol>
    28d6:	99 23       	and	r25, r25
    28d8:	f1 f0       	breq	.+60     	; 0x2916 <add_key+0x44>
    28da:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <keyboard_nkro>
    28de:	99 23       	and	r25, r25
    28e0:	d1 f0       	breq	.+52     	; 0x2916 <add_key+0x44>
    28e2:	98 2f       	mov	r25, r24
    28e4:	96 95       	lsr	r25
    28e6:	96 95       	lsr	r25
    28e8:	96 95       	lsr	r25
    28ea:	9f 31       	cpi	r25, 0x1F	; 31
    28ec:	81 f1       	breq	.+96     	; 0x294e <add_key+0x7c>
    28ee:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    28f2:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    28f6:	e9 0f       	add	r30, r25
    28f8:	f1 1d       	adc	r31, r1
    28fa:	87 70       	andi	r24, 0x07	; 7
    28fc:	21 e0       	ldi	r18, 0x01	; 1
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	a9 01       	movw	r20, r18
    2902:	02 c0       	rjmp	.+4      	; 0x2908 <add_key+0x36>
    2904:	44 0f       	add	r20, r20
    2906:	55 1f       	adc	r21, r21
    2908:	8a 95       	dec	r24
    290a:	e2 f7       	brpl	.-8      	; 0x2904 <add_key+0x32>
    290c:	ca 01       	movw	r24, r20
    290e:	91 81       	ldd	r25, Z+1	; 0x01
    2910:	89 2b       	or	r24, r25
    2912:	81 83       	std	Z+1, r24	; 0x01
    2914:	08 95       	ret
    2916:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <keyboard_report>
    291a:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <keyboard_report+0x1>
    291e:	f9 01       	movw	r30, r18
    2920:	32 96       	adiw	r30, 0x02	; 2
    2922:	9f ef       	ldi	r25, 0xFF	; 255
    2924:	40 e0       	ldi	r20, 0x00	; 0
    2926:	51 91       	ld	r21, Z+
    2928:	85 17       	cp	r24, r21
    292a:	89 f0       	breq	.+34     	; 0x294e <add_key+0x7c>
    292c:	9f 3f       	cpi	r25, 0xFF	; 255
    292e:	19 f4       	brne	.+6      	; 0x2936 <add_key+0x64>
    2930:	51 11       	cpse	r21, r1
    2932:	01 c0       	rjmp	.+2      	; 0x2936 <add_key+0x64>
    2934:	94 2f       	mov	r25, r20
    2936:	4f 5f       	subi	r20, 0xFF	; 255
    2938:	4e 31       	cpi	r20, 0x1E	; 30
    293a:	a9 f7       	brne	.-22     	; 0x2926 <add_key+0x54>
    293c:	9f 3f       	cpi	r25, 0xFF	; 255
    293e:	39 f0       	breq	.+14     	; 0x294e <add_key+0x7c>
    2940:	f9 01       	movw	r30, r18
    2942:	e9 0f       	add	r30, r25
    2944:	f1 1d       	adc	r31, r1
    2946:	97 fd       	sbrc	r25, 7
    2948:	fa 95       	dec	r31
    294a:	82 83       	std	Z+2, r24	; 0x02
    294c:	08 95       	ret
    294e:	08 95       	ret

00002950 <del_key>:
    2950:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <keyboard_protocol>
    2954:	99 23       	and	r25, r25
    2956:	f9 f0       	breq	.+62     	; 0x2996 <del_key+0x46>
    2958:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <keyboard_nkro>
    295c:	99 23       	and	r25, r25
    295e:	d9 f0       	breq	.+54     	; 0x2996 <del_key+0x46>
    2960:	98 2f       	mov	r25, r24
    2962:	96 95       	lsr	r25
    2964:	96 95       	lsr	r25
    2966:	96 95       	lsr	r25
    2968:	9f 31       	cpi	r25, 0x1F	; 31
    296a:	21 f1       	breq	.+72     	; 0x29b4 <del_key+0x64>
    296c:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    2970:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    2974:	e9 0f       	add	r30, r25
    2976:	f1 1d       	adc	r31, r1
    2978:	87 70       	andi	r24, 0x07	; 7
    297a:	21 e0       	ldi	r18, 0x01	; 1
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	a9 01       	movw	r20, r18
    2980:	02 c0       	rjmp	.+4      	; 0x2986 <del_key+0x36>
    2982:	44 0f       	add	r20, r20
    2984:	55 1f       	adc	r21, r21
    2986:	8a 95       	dec	r24
    2988:	e2 f7       	brpl	.-8      	; 0x2982 <del_key+0x32>
    298a:	ca 01       	movw	r24, r20
    298c:	80 95       	com	r24
    298e:	91 81       	ldd	r25, Z+1	; 0x01
    2990:	89 23       	and	r24, r25
    2992:	81 83       	std	Z+1, r24	; 0x01
    2994:	08 95       	ret
    2996:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    299a:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    299e:	9f 01       	movw	r18, r30
    29a0:	22 5e       	subi	r18, 0xE2	; 226
    29a2:	3f 4f       	sbci	r19, 0xFF	; 255
    29a4:	92 81       	ldd	r25, Z+2	; 0x02
    29a6:	89 13       	cpse	r24, r25
    29a8:	01 c0       	rjmp	.+2      	; 0x29ac <del_key+0x5c>
    29aa:	12 82       	std	Z+2, r1	; 0x02
    29ac:	31 96       	adiw	r30, 0x01	; 1
    29ae:	e2 17       	cp	r30, r18
    29b0:	f3 07       	cpc	r31, r19
    29b2:	c1 f7       	brne	.-16     	; 0x29a4 <del_key+0x54>
    29b4:	08 95       	ret

000029b6 <clear_keys>:
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    29be:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    29c2:	e8 0f       	add	r30, r24
    29c4:	f9 1f       	adc	r31, r25
    29c6:	10 82       	st	Z, r1
    29c8:	01 96       	adiw	r24, 0x01	; 1
    29ca:	80 32       	cpi	r24, 0x20	; 32
    29cc:	91 05       	cpc	r25, r1
    29ce:	a9 f7       	brne	.-22     	; 0x29ba <clear_keys+0x4>
    29d0:	08 95       	ret

000029d2 <get_mods>:
    29d2:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <real_mods>
    29d6:	08 95       	ret

000029d8 <add_mods>:
    29d8:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <real_mods>
    29dc:	89 2b       	or	r24, r25
    29de:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <real_mods>
    29e2:	08 95       	ret

000029e4 <del_mods>:
    29e4:	80 95       	com	r24
    29e6:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <real_mods>
    29ea:	89 23       	and	r24, r25
    29ec:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <real_mods>
    29f0:	08 95       	ret

000029f2 <set_mods>:
    29f2:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <real_mods>
    29f6:	08 95       	ret

000029f8 <clear_mods>:
    29f8:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <real_mods>
    29fc:	08 95       	ret

000029fe <add_weak_mods>:
    29fe:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <weak_mods>
    2a02:	89 2b       	or	r24, r25
    2a04:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <weak_mods>
    2a08:	08 95       	ret

00002a0a <del_weak_mods>:
    2a0a:	80 95       	com	r24
    2a0c:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <weak_mods>
    2a10:	89 23       	and	r24, r25
    2a12:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <weak_mods>
    2a16:	08 95       	ret

00002a18 <clear_weak_mods>:
void clear_weak_mods(void) { weak_mods = 0; }
    2a18:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <weak_mods>
    2a1c:	08 95       	ret

00002a1e <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    2a1e:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <oneshot_mods>
    2a22:	08 95       	ret

00002a24 <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    2a24:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <oneshot_mods>
    2a28:	08 95       	ret

00002a2a <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    2a2a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <keyboard_report>
    2a2e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <keyboard_report+0x1>
    2a32:	fc 01       	movw	r30, r24
    2a34:	31 96       	adiw	r30, 0x01	; 1
    2a36:	9c 01       	movw	r18, r24
    2a38:	20 5e       	subi	r18, 0xE0	; 224
    2a3a:	3f 4f       	sbci	r19, 0xFF	; 255
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    2a3e:	91 91       	ld	r25, Z+
    2a40:	91 11       	cpse	r25, r1
            cnt++;
    2a42:	8f 5f       	subi	r24, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    2a44:	e2 17       	cp	r30, r18
    2a46:	f3 07       	cpc	r31, r19
    2a48:	d1 f7       	brne	.-12     	; 0x2a3e <has_anykey+0x14>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    2a4a:	08 95       	ret

00002a4c <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    2a4c:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    2a50:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    2a54:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <real_mods>
    2a58:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    2a5a:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    2a5e:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    2a62:	90 81       	ld	r25, Z
    2a64:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <weak_mods>
    2a68:	89 2b       	or	r24, r25
    2a6a:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    2a6c:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <oneshot_mods>
    2a70:	88 23       	and	r24, r24
    2a72:	61 f0       	breq	.+24     	; 0x2a8c <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    2a74:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    2a78:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    2a7c:	90 81       	ld	r25, Z
    2a7e:	89 2b       	or	r24, r25
    2a80:	80 83       	st	Z, r24
        if (has_anykey()) {
    2a82:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <has_anykey>
    2a86:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    2a88:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <oneshot_mods>
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    2a8c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <keyboard_report>
    2a90:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <keyboard_report+0x1>
    2a94:	0c 94 95 08 	jmp	0x112a	; 0x112a <host_keyboard_send>

00002a98 <hook_keyboard_loop>:
    2a98:	08 95       	ret

00002a9a <hook_matrix_change>:

__attribute__((weak))
void hook_keyboard_loop(void) {}

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    2a9a:	cf 93       	push	r28
    2a9c:	df 93       	push	r29
    2a9e:	00 d0       	rcall	.+0      	; 0x2aa0 <hook_matrix_change+0x6>
    2aa0:	00 d0       	rcall	.+0      	; 0x2aa2 <hook_matrix_change+0x8>
    2aa2:	1f 92       	push	r1
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    2aa8:	0f 90       	pop	r0
    2aaa:	0f 90       	pop	r0
    2aac:	0f 90       	pop	r0
    2aae:	0f 90       	pop	r0
    2ab0:	0f 90       	pop	r0
    2ab2:	df 91       	pop	r29
    2ab4:	cf 91       	pop	r28
    2ab6:	08 95       	ret

00002ab8 <hook_default_layer_change>:
    2ab8:	08 95       	ret

00002aba <hook_layer_change>:
void hook_default_layer_change(uint32_t default_layer_state) {
    (void)default_layer_state;
}

__attribute__((weak))
void hook_layer_change(uint32_t layer_state) {
    2aba:	08 95       	ret

00002abc <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    2abc:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <keyboard_set_leds>

00002ac0 <hook_bootmagic>:
}

__attribute__((weak))
void hook_bootmagic(void) {}
    2ac0:	08 95       	ret

00002ac2 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    2ac2:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <USB_DeviceState>
    2ac6:	84 30       	cpi	r24, 0x04	; 4
    2ac8:	21 f1       	breq	.+72     	; 0x2b12 <suspend_power_down+0x50>
#endif
    wdt_timeout = wdto;
    2aca:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <wdt_timeout>

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    2ace:	20 e4       	ldi	r18, 0x40	; 64
    2ad0:	88 e1       	ldi	r24, 0x18	; 24
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	0f b6       	in	r0, 0x3f	; 63
    2ad6:	f8 94       	cli
    2ad8:	a8 95       	wdr
    2ada:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    2ade:	0f be       	out	0x3f, r0	; 63
    2ae0:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    2ae4:	83 b7       	in	r24, 0x33	; 51
    2ae6:	81 7f       	andi	r24, 0xF1	; 241
    2ae8:	84 60       	ori	r24, 0x04	; 4
    2aea:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    2aec:	83 b7       	in	r24, 0x33	; 51
    2aee:	81 60       	ori	r24, 0x01	; 1
    2af0:	83 bf       	out	0x33, r24	; 51
    sei();
    2af2:	78 94       	sei
    sleep_cpu();
    2af4:	88 95       	sleep
    sleep_disable();
    2af6:	83 b7       	in	r24, 0x33	; 51
    2af8:	8e 7f       	andi	r24, 0xFE	; 254
    2afa:	83 bf       	out	0x33, r24	; 51
    2afc:	0f b6       	in	r0, 0x3f	; 63
    2afe:	f8 94       	cli
    2b00:	a8 95       	wdr
    2b02:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    2b06:	88 61       	ori	r24, 0x18	; 24
    2b08:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    2b0c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    2b10:	0f be       	out	0x3f, r0	; 63
    2b12:	08 95       	ret

00002b14 <suspend_wakeup_condition>:
    power_down(WDTO_15MS);
#endif
}

bool suspend_wakeup_condition(void)
{
    2b14:	cf 93       	push	r28
    matrix_power_up();
    2b16:	0e 94 67 09 	call	0x12ce	; 0x12ce <matrix_power_up>
    matrix_scan();
    2b1a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <matrix_scan>
    matrix_power_down();
    2b1e:	0e 94 68 09 	call	0x12d0	; 0x12d0 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2b22:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    2b24:	8c 2f       	mov	r24, r28
    2b26:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <matrix_get_row>
    2b2a:	81 11       	cpse	r24, r1
    2b2c:	04 c0       	rjmp	.+8      	; 0x2b36 <suspend_wakeup_condition+0x22>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2b2e:	cf 5f       	subi	r28, 0xFF	; 255
    2b30:	c4 30       	cpi	r28, 0x04	; 4
    2b32:	c1 f7       	brne	.-16     	; 0x2b24 <suspend_wakeup_condition+0x10>
    2b34:	01 c0       	rjmp	.+2      	; 0x2b38 <suspend_wakeup_condition+0x24>
        if (matrix_get_row(r)) return true;
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    2b38:	cf 91       	pop	r28
    2b3a:	08 95       	ret

00002b3c <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    matrix_clear();
    2b3c:	0e 94 65 09 	call	0x12ca	; 0x12ca <matrix_clear>
    clear_keyboard();
    2b40:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <clear_keyboard>
#ifdef BACKLIGHT_ENABLE
    backlight_init();
    2b44:	0c 94 34 19 	jmp	0x3268	; 0x3268 <backlight_init>

00002b48 <__vector_13>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    2b48:	1f 92       	push	r1
    2b4a:	0f 92       	push	r0
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	0f 92       	push	r0
    2b50:	11 24       	eor	r1, r1
    2b52:	8f 93       	push	r24
    2b54:	9f 93       	push	r25
    2b56:	af 93       	push	r26
    2b58:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    2b5a:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <wdt_timeout>
    2b5e:	81 11       	cpse	r24, r1
    2b60:	13 c0       	rjmp	.+38     	; 0x2b88 <__vector_13+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    2b62:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <timer_count>
    2b66:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <timer_count+0x1>
    2b6a:	a0 91 cb 01 	lds	r26, 0x01CB	; 0x8001cb <timer_count+0x2>
    2b6e:	b0 91 cc 01 	lds	r27, 0x01CC	; 0x8001cc <timer_count+0x3>
    2b72:	41 96       	adiw	r24, 0x11	; 17
    2b74:	a1 1d       	adc	r26, r1
    2b76:	b1 1d       	adc	r27, r1
    2b78:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <timer_count>
    2b7c:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <timer_count+0x1>
    2b80:	a0 93 cb 01 	sts	0x01CB, r26	; 0x8001cb <timer_count+0x2>
    2b84:	b0 93 cc 01 	sts	0x01CC, r27	; 0x8001cc <timer_count+0x3>
            break;
        default:
            ;
    }
}
    2b88:	bf 91       	pop	r27
    2b8a:	af 91       	pop	r26
    2b8c:	9f 91       	pop	r25
    2b8e:	8f 91       	pop	r24
    2b90:	0f 90       	pop	r0
    2b92:	0f be       	out	0x3f, r0	; 63
    2b94:	0f 90       	pop	r0
    2b96:	1f 90       	pop	r1
    2b98:	18 95       	reti

00002b9a <timer_init>:
    cli();
    t = timer_count;
    SREG = sreg;

    return TIMER_DIFF_32(t, last);
}
    2b9a:	82 e0       	ldi	r24, 0x02	; 2
    2b9c:	84 bd       	out	0x24, r24	; 36
    2b9e:	93 e0       	ldi	r25, 0x03	; 3
    2ba0:	95 bd       	out	0x25, r25	; 37
    2ba2:	9a ef       	ldi	r25, 0xFA	; 250
    2ba4:	97 bd       	out	0x27, r25	; 39
    2ba6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    2baa:	08 95       	ret

00002bac <timer_read>:
    2bac:	2f b7       	in	r18, 0x3f	; 63
    2bae:	f8 94       	cli
    2bb0:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <timer_count>
    2bb4:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <timer_count+0x1>
    2bb8:	a0 91 cb 01 	lds	r26, 0x01CB	; 0x8001cb <timer_count+0x2>
    2bbc:	b0 91 cc 01 	lds	r27, 0x01CC	; 0x8001cc <timer_count+0x3>
    2bc0:	2f bf       	out	0x3f, r18	; 63
    2bc2:	08 95       	ret

00002bc4 <__vector_19>:

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    2bc4:	1f 92       	push	r1
    2bc6:	0f 92       	push	r0
    2bc8:	0f b6       	in	r0, 0x3f	; 63
    2bca:	0f 92       	push	r0
    2bcc:	11 24       	eor	r1, r1
    2bce:	8f 93       	push	r24
    2bd0:	9f 93       	push	r25
    2bd2:	af 93       	push	r26
    2bd4:	bf 93       	push	r27
    timer_count++;
    2bd6:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <timer_count>
    2bda:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <timer_count+0x1>
    2bde:	a0 91 cb 01 	lds	r26, 0x01CB	; 0x8001cb <timer_count+0x2>
    2be2:	b0 91 cc 01 	lds	r27, 0x01CC	; 0x8001cc <timer_count+0x3>
    2be6:	01 96       	adiw	r24, 0x01	; 1
    2be8:	a1 1d       	adc	r26, r1
    2bea:	b1 1d       	adc	r27, r1
    2bec:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <timer_count>
    2bf0:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <timer_count+0x1>
    2bf4:	a0 93 cb 01 	sts	0x01CB, r26	; 0x8001cb <timer_count+0x2>
    2bf8:	b0 93 cc 01 	sts	0x01CC, r27	; 0x8001cc <timer_count+0x3>
}
    2bfc:	bf 91       	pop	r27
    2bfe:	af 91       	pop	r26
    2c00:	9f 91       	pop	r25
    2c02:	8f 91       	pop	r24
    2c04:	0f 90       	pop	r0
    2c06:	0f be       	out	0x3f, r0	; 63
    2c08:	0f 90       	pop	r0
    2c0a:	1f 90       	pop	r1
    2c0c:	18 95       	reti

00002c0e <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    2c0e:	0e 94 d7 05 	call	0xbae	; 0xbae <USB_Disable>
    cli();
    2c12:	f8 94       	cli
    2c14:	2f ef       	ldi	r18, 0xFF	; 255
    2c16:	87 ea       	ldi	r24, 0xA7	; 167
    2c18:	91 e6       	ldi	r25, 0x61	; 97
    2c1a:	21 50       	subi	r18, 0x01	; 1
    2c1c:	80 40       	sbci	r24, 0x00	; 0
    2c1e:	90 40       	sbci	r25, 0x00	; 0
    2c20:	e1 f7       	brne	.-8      	; 0x2c1a <bootloader_jump+0xc>
    2c22:	00 c0       	rjmp	.+0      	; 0x2c24 <bootloader_jump+0x16>
    2c24:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    2c26:	87 e0       	ldi	r24, 0x07	; 7
    2c28:	90 eb       	ldi	r25, 0xB0	; 176
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <__bss_end>
    2c30:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <__bss_end+0x1>
    2c34:	a0 93 de 01 	sts	0x01DE, r26	; 0x8001de <__bss_end+0x2>
    2c38:	b0 93 df 01 	sts	0x01DF, r27	; 0x8001df <__bss_end+0x3>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    2c3c:	9c e0       	ldi	r25, 0x0C	; 12
    2c3e:	88 e1       	ldi	r24, 0x18	; 24
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	a8 95       	wdr
    2c46:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    2c4a:	0f be       	out	0x3f, r0	; 63
    2c4c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    2c50:	ff cf       	rjmp	.-2      	; 0x2c50 <bootloader_jump+0x42>

00002c52 <keycode_to_action>:


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    2c52:	8d 3b       	cpi	r24, 0xBD	; 189
    2c54:	60 f4       	brcc	.+24     	; 0x2c6e <keycode_to_action+0x1c>
    2c56:	88 3a       	cpi	r24, 0xA8	; 168
    2c58:	90 f5       	brcc	.+100    	; 0x2cbe <keycode_to_action+0x6c>
    2c5a:	85 3a       	cpi	r24, 0xA5	; 165
    2c5c:	28 f5       	brcc	.+74     	; 0x2ca8 <keycode_to_action+0x56>
    2c5e:	84 30       	cpi	r24, 0x04	; 4
    2c60:	08 f5       	brcc	.+66     	; 0x2ca4 <keycode_to_action+0x52>
    2c62:	81 30       	cpi	r24, 0x01	; 1
    2c64:	09 f0       	breq	.+2      	; 0x2c68 <keycode_to_action+0x16>
    2c66:	86 c0       	rjmp	.+268    	; 0x2d74 <keycode_to_action+0x122>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            return (action_t)ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            return (action_t)ACTION_TRANSPARENT;
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	08 95       	ret


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    2c6e:	88 3e       	cpi	r24, 0xE8	; 232
    2c70:	98 f4       	brcc	.+38     	; 0x2c98 <keycode_to_action+0x46>
    2c72:	80 3e       	cpi	r24, 0xE0	; 224
    2c74:	b8 f4       	brcc	.+46     	; 0x2ca4 <keycode_to_action+0x52>
    2c76:	8f 3b       	cpi	r24, 0xBF	; 191
    2c78:	09 f0       	breq	.+2      	; 0x2c7c <keycode_to_action+0x2a>
    2c7a:	7c c0       	rjmp	.+248    	; 0x2d74 <keycode_to_action+0x122>
            break;
        case KC_TRNS:
            return (action_t)ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    2c7c:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <clear_keyboard>
    2c80:	2f ef       	ldi	r18, 0xFF	; 255
    2c82:	80 e7       	ldi	r24, 0x70	; 112
    2c84:	92 e0       	ldi	r25, 0x02	; 2
    2c86:	21 50       	subi	r18, 0x01	; 1
    2c88:	80 40       	sbci	r24, 0x00	; 0
    2c8a:	90 40       	sbci	r25, 0x00	; 0
    2c8c:	e1 f7       	brne	.-8      	; 0x2c86 <keycode_to_action+0x34>
    2c8e:	00 c0       	rjmp	.+0      	; 0x2c90 <keycode_to_action+0x3e>
    2c90:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    2c92:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <bootloader_jump>
    2c96:	6e c0       	rjmp	.+220    	; 0x2d74 <keycode_to_action+0x122>


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    2c98:	80 3f       	cpi	r24, 0xF0	; 240
    2c9a:	08 f4       	brcc	.+2      	; 0x2c9e <keycode_to_action+0x4c>
    2c9c:	6b c0       	rjmp	.+214    	; 0x2d74 <keycode_to_action+0x122>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            return (action_t)ACTION_MOUSEKEY(keycode);
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	90 65       	ori	r25, 0x50	; 80
    2ca2:	08 95       	ret
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            return (action_t)ACTION_KEY(keycode);
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	08 95       	ret
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            return (action_t)ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    2ca8:	85 3a       	cpi	r24, 0xA5	; 165
    2caa:	21 f0       	breq	.+8      	; 0x2cb4 <keycode_to_action+0x62>
    2cac:	86 3a       	cpi	r24, 0xA6	; 166
    2cae:	21 f0       	breq	.+8      	; 0x2cb8 <keycode_to_action+0x66>
    2cb0:	33 e8       	ldi	r19, 0x83	; 131
    2cb2:	03 c0       	rjmp	.+6      	; 0x2cba <keycode_to_action+0x68>
    2cb4:	31 e8       	ldi	r19, 0x81	; 129
    2cb6:	01 c0       	rjmp	.+2      	; 0x2cba <keycode_to_action+0x68>
    2cb8:	32 e8       	ldi	r19, 0x82	; 130
    2cba:	20 e4       	ldi	r18, 0x40	; 64
    2cbc:	58 c0       	rjmp	.+176    	; 0x2d6e <keycode_to_action+0x11c>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    2cbe:	88 3a       	cpi	r24, 0xA8	; 168
    2cc0:	51 f1       	breq	.+84     	; 0x2d16 <keycode_to_action+0xc4>
    2cc2:	89 3a       	cpi	r24, 0xA9	; 169
    2cc4:	59 f1       	breq	.+86     	; 0x2d1c <keycode_to_action+0xca>
    2cc6:	8a 3a       	cpi	r24, 0xAA	; 170
    2cc8:	59 f1       	breq	.+86     	; 0x2d20 <keycode_to_action+0xce>
    2cca:	8b 3a       	cpi	r24, 0xAB	; 171
    2ccc:	59 f1       	breq	.+86     	; 0x2d24 <keycode_to_action+0xd2>
    2cce:	8c 3a       	cpi	r24, 0xAC	; 172
    2cd0:	59 f1       	breq	.+86     	; 0x2d28 <keycode_to_action+0xd6>
    2cd2:	8d 3a       	cpi	r24, 0xAD	; 173
    2cd4:	59 f1       	breq	.+86     	; 0x2d2c <keycode_to_action+0xda>
    2cd6:	8e 3a       	cpi	r24, 0xAE	; 174
    2cd8:	59 f1       	breq	.+86     	; 0x2d30 <keycode_to_action+0xde>
    2cda:	8f 3a       	cpi	r24, 0xAF	; 175
    2cdc:	59 f1       	breq	.+86     	; 0x2d34 <keycode_to_action+0xe2>
    2cde:	81 3b       	cpi	r24, 0xB1	; 177
    2ce0:	59 f1       	breq	.+86     	; 0x2d38 <keycode_to_action+0xe6>
    2ce2:	80 3b       	cpi	r24, 0xB0	; 176
    2ce4:	59 f1       	breq	.+86     	; 0x2d3c <keycode_to_action+0xea>
    2ce6:	82 3b       	cpi	r24, 0xB2	; 178
    2ce8:	59 f1       	breq	.+86     	; 0x2d40 <keycode_to_action+0xee>
    2cea:	83 3b       	cpi	r24, 0xB3	; 179
    2cec:	59 f1       	breq	.+86     	; 0x2d44 <keycode_to_action+0xf2>
    2cee:	84 3b       	cpi	r24, 0xB4	; 180
    2cf0:	59 f1       	breq	.+86     	; 0x2d48 <keycode_to_action+0xf6>
    2cf2:	85 3b       	cpi	r24, 0xB5	; 181
    2cf4:	59 f1       	breq	.+86     	; 0x2d4c <keycode_to_action+0xfa>
    2cf6:	86 3b       	cpi	r24, 0xB6	; 182
    2cf8:	61 f1       	breq	.+88     	; 0x2d52 <keycode_to_action+0x100>
    2cfa:	87 3b       	cpi	r24, 0xB7	; 183
    2cfc:	61 f1       	breq	.+88     	; 0x2d56 <keycode_to_action+0x104>
    2cfe:	88 3b       	cpi	r24, 0xB8	; 184
    2d00:	61 f1       	breq	.+88     	; 0x2d5a <keycode_to_action+0x108>
    2d02:	89 3b       	cpi	r24, 0xB9	; 185
    2d04:	61 f1       	breq	.+88     	; 0x2d5e <keycode_to_action+0x10c>
    2d06:	8a 3b       	cpi	r24, 0xBA	; 186
    2d08:	61 f1       	breq	.+88     	; 0x2d62 <keycode_to_action+0x110>
    2d0a:	8b 3b       	cpi	r24, 0xBB	; 187
    2d0c:	61 f1       	breq	.+88     	; 0x2d66 <keycode_to_action+0x114>
    2d0e:	8c 3b       	cpi	r24, 0xBC	; 188
    2d10:	61 f1       	breq	.+88     	; 0x2d6a <keycode_to_action+0x118>
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	01 c0       	rjmp	.+2      	; 0x2d18 <keycode_to_action+0xc6>
    2d16:	32 ee       	ldi	r19, 0xE2	; 226
    2d18:	24 e4       	ldi	r18, 0x44	; 68
    2d1a:	29 c0       	rjmp	.+82     	; 0x2d6e <keycode_to_action+0x11c>
    2d1c:	39 ee       	ldi	r19, 0xE9	; 233
    2d1e:	fc cf       	rjmp	.-8      	; 0x2d18 <keycode_to_action+0xc6>
    2d20:	3a ee       	ldi	r19, 0xEA	; 234
    2d22:	fa cf       	rjmp	.-12     	; 0x2d18 <keycode_to_action+0xc6>
    2d24:	35 eb       	ldi	r19, 0xB5	; 181
    2d26:	f8 cf       	rjmp	.-16     	; 0x2d18 <keycode_to_action+0xc6>
    2d28:	36 eb       	ldi	r19, 0xB6	; 182
    2d2a:	f6 cf       	rjmp	.-20     	; 0x2d18 <keycode_to_action+0xc6>
    2d2c:	33 eb       	ldi	r19, 0xB3	; 179
    2d2e:	f4 cf       	rjmp	.-24     	; 0x2d18 <keycode_to_action+0xc6>
    2d30:	34 eb       	ldi	r19, 0xB4	; 180
    2d32:	f2 cf       	rjmp	.-28     	; 0x2d18 <keycode_to_action+0xc6>
    2d34:	37 eb       	ldi	r19, 0xB7	; 183
    2d36:	f0 cf       	rjmp	.-32     	; 0x2d18 <keycode_to_action+0xc6>
    2d38:	3c ec       	ldi	r19, 0xCC	; 204
    2d3a:	ee cf       	rjmp	.-36     	; 0x2d18 <keycode_to_action+0xc6>
    2d3c:	3d ec       	ldi	r19, 0xCD	; 205
    2d3e:	ec cf       	rjmp	.-40     	; 0x2d18 <keycode_to_action+0xc6>
    2d40:	33 e8       	ldi	r19, 0x83	; 131
    2d42:	05 c0       	rjmp	.+10     	; 0x2d4e <keycode_to_action+0xfc>
    2d44:	3a e8       	ldi	r19, 0x8A	; 138
    2d46:	03 c0       	rjmp	.+6      	; 0x2d4e <keycode_to_action+0xfc>
    2d48:	32 e9       	ldi	r19, 0x92	; 146
    2d4a:	01 c0       	rjmp	.+2      	; 0x2d4e <keycode_to_action+0xfc>
    2d4c:	34 e9       	ldi	r19, 0x94	; 148
    2d4e:	25 e4       	ldi	r18, 0x45	; 69
    2d50:	0e c0       	rjmp	.+28     	; 0x2d6e <keycode_to_action+0x11c>
    2d52:	31 e2       	ldi	r19, 0x21	; 33
    2d54:	0b c0       	rjmp	.+22     	; 0x2d6c <keycode_to_action+0x11a>
    2d56:	33 e2       	ldi	r19, 0x23	; 35
    2d58:	09 c0       	rjmp	.+18     	; 0x2d6c <keycode_to_action+0x11a>
    2d5a:	34 e2       	ldi	r19, 0x24	; 36
    2d5c:	07 c0       	rjmp	.+14     	; 0x2d6c <keycode_to_action+0x11a>
    2d5e:	35 e2       	ldi	r19, 0x25	; 37
    2d60:	05 c0       	rjmp	.+10     	; 0x2d6c <keycode_to_action+0x11a>
    2d62:	36 e2       	ldi	r19, 0x26	; 38
    2d64:	03 c0       	rjmp	.+6      	; 0x2d6c <keycode_to_action+0x11a>
    2d66:	37 e2       	ldi	r19, 0x27	; 39
    2d68:	01 c0       	rjmp	.+2      	; 0x2d6c <keycode_to_action+0x11a>
    2d6a:	3a e2       	ldi	r19, 0x2A	; 42
    2d6c:	26 e4       	ldi	r18, 0x46	; 70
    2d6e:	83 2f       	mov	r24, r19
    2d70:	92 2f       	mov	r25, r18
    2d72:	08 95       	ret
            clear_keyboard();
            wait_ms(50);
            bootloader_jump(); // not return
            break;
        default:
            return (action_t)ACTION_NO;
    2d74:	80 e0       	ldi	r24, 0x00	; 0
    2d76:	90 e0       	ldi	r25, 0x00	; 0
            break;
    }
    return (action_t)ACTION_NO;
}
    2d78:	08 95       	ret

00002d7a <action_get_macro>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	08 95       	ret

00002d80 <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    2d80:	08 95       	ret

00002d82 <keymap_key_to_keycode>:

__attribute__ ((weak))
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
#if defined(__AVR__)
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
    2d82:	e8 2f       	mov	r30, r24
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	ee 0f       	add	r30, r30
    2d88:	ff 1f       	adc	r31, r31
    2d8a:	ee 0f       	add	r30, r30
    2d8c:	ff 1f       	adc	r31, r31
    2d8e:	e7 0f       	add	r30, r23
    2d90:	f1 1d       	adc	r31, r1
    2d92:	ee 0f       	add	r30, r30
    2d94:	ff 1f       	adc	r31, r31
    2d96:	ee 0f       	add	r30, r30
    2d98:	ff 1f       	adc	r31, r31
    2d9a:	e6 0f       	add	r30, r22
    2d9c:	f1 1d       	adc	r31, r1
    2d9e:	e4 55       	subi	r30, 0x54	; 84
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	84 91       	lpm	r24, Z
#else
    return keymaps[(layer)][(key.row)][(key.col)];
#endif
}
    2da4:	08 95       	ret

00002da6 <keymap_fn_to_action>:

__attribute__ ((weak))
action_t keymap_fn_to_action(uint8_t keycode)
{
#if defined(__AVR__)
    return (action_t)pgm_read_word(&fn_actions[FN_INDEX(keycode)]);
    2da6:	e8 2f       	mov	r30, r24
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	ee 0f       	add	r30, r30
    2dac:	ff 1f       	adc	r31, r31
    2dae:	e8 5d       	subi	r30, 0xD8	; 216
    2db0:	f0 40       	sbci	r31, 0x00	; 0
    2db2:	85 91       	lpm	r24, Z+
    2db4:	94 91       	lpm	r25, Z
#else
    return fn_actions[FN_INDEX(keycode)];
#endif
}
    2db6:	08 95       	ret

00002db8 <action_for_key>:

/* converts key to action */
__attribute__ ((weak))
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    2db8:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <keymap_key_to_keycode>
    switch (keycode) {
    2dbc:	80 3e       	cpi	r24, 0xE0	; 224
    2dbe:	a8 f4       	brcc	.+42     	; 0x2dea <action_for_key+0x32>
    2dc0:	80 3c       	cpi	r24, 0xC0	; 192
    2dc2:	00 f5       	brcc	.+64     	; 0x2e04 <action_for_key+0x4c>
    2dc4:	81 33       	cpi	r24, 0x31	; 49
    2dc6:	09 f4       	brne	.+2      	; 0x2dca <action_for_key+0x12>
    2dc8:	5c c0       	rjmp	.+184    	; 0x2e82 <action_for_key+0xca>
    2dca:	38 f4       	brcc	.+14     	; 0x2dda <action_for_key+0x22>
    2dcc:	89 32       	cpi	r24, 0x29	; 41
    2dce:	09 f4       	brne	.+2      	; 0x2dd2 <action_for_key+0x1a>
    2dd0:	52 c0       	rjmp	.+164    	; 0x2e76 <action_for_key+0xbe>
    2dd2:	8a 32       	cpi	r24, 0x2A	; 42
    2dd4:	09 f4       	brne	.+2      	; 0x2dd8 <action_for_key+0x20>
    2dd6:	5b c0       	rjmp	.+182    	; 0x2e8e <action_for_key+0xd6>
    2dd8:	5f c0       	rjmp	.+190    	; 0x2e98 <action_for_key+0xe0>
    2dda:	89 33       	cpi	r24, 0x39	; 57
    2ddc:	b1 f0       	breq	.+44     	; 0x2e0a <action_for_key+0x52>
    2dde:	82 38       	cpi	r24, 0x82	; 130
    2de0:	a1 f0       	breq	.+40     	; 0x2e0a <action_for_key+0x52>
    2de2:	85 33       	cpi	r24, 0x35	; 53
    2de4:	09 f4       	brne	.+2      	; 0x2de8 <action_for_key+0x30>
    2de6:	41 c0       	rjmp	.+130    	; 0x2e6a <action_for_key+0xb2>
    2de8:	57 c0       	rjmp	.+174    	; 0x2e98 <action_for_key+0xe0>
    2dea:	83 3e       	cpi	r24, 0xE3	; 227
    2dec:	41 f1       	breq	.+80     	; 0x2e3e <action_for_key+0x86>
    2dee:	28 f4       	brcc	.+10     	; 0x2dfa <action_for_key+0x42>
    2df0:	80 3e       	cpi	r24, 0xE0	; 224
    2df2:	99 f0       	breq	.+38     	; 0x2e1a <action_for_key+0x62>
    2df4:	82 3e       	cpi	r24, 0xE2	; 226
    2df6:	b9 f0       	breq	.+46     	; 0x2e26 <action_for_key+0x6e>
    2df8:	4f c0       	rjmp	.+158    	; 0x2e98 <action_for_key+0xe0>
    2dfa:	86 3e       	cpi	r24, 0xE6	; 230
    2dfc:	31 f1       	breq	.+76     	; 0x2e4a <action_for_key+0x92>
    2dfe:	87 3e       	cpi	r24, 0xE7	; 231
    2e00:	71 f1       	breq	.+92     	; 0x2e5e <action_for_key+0xa6>
    2e02:	4a c0       	rjmp	.+148    	; 0x2e98 <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    2e04:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <keymap_fn_to_action>
    2e08:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    2e0a:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <keymap_config>
    2e0e:	90 fd       	sbrc	r25, 0
    2e10:	02 c0       	rjmp	.+4      	; 0x2e16 <action_for_key+0x5e>
    2e12:	91 ff       	sbrs	r25, 1
    2e14:	41 c0       	rjmp	.+130    	; 0x2e98 <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    2e16:	80 ee       	ldi	r24, 0xE0	; 224
    2e18:	3f c0       	rjmp	.+126    	; 0x2e98 <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    2e1a:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <keymap_config>
    2e1e:	80 ff       	sbrs	r24, 0
    2e20:	fa cf       	rjmp	.-12     	; 0x2e16 <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    2e22:	89 e3       	ldi	r24, 0x39	; 57
    2e24:	39 c0       	rjmp	.+114    	; 0x2e98 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    2e26:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <keymap_config>
    2e2a:	82 ff       	sbrs	r24, 2
    2e2c:	0c c0       	rjmp	.+24     	; 0x2e46 <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    2e2e:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <keymap_config>
    2e32:	84 ff       	sbrs	r24, 4
    2e34:	02 c0       	rjmp	.+4      	; 0x2e3a <action_for_key+0x82>
                    return keycode_to_action(KC_NO);
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	2f c0       	rjmp	.+94     	; 0x2e98 <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    2e3a:	83 ee       	ldi	r24, 0xE3	; 227
    2e3c:	2d c0       	rjmp	.+90     	; 0x2e98 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    2e3e:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <keymap_config>
    2e42:	82 ff       	sbrs	r24, 2
    2e44:	f4 cf       	rjmp	.-24     	; 0x2e2e <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(KC_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    2e46:	82 ee       	ldi	r24, 0xE2	; 226
    2e48:	27 c0       	rjmp	.+78     	; 0x2e98 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(KC_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    2e4a:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <keymap_config>
    2e4e:	83 ff       	sbrs	r24, 3
    2e50:	0a c0       	rjmp	.+20     	; 0x2e66 <action_for_key+0xae>
                if (keymap_config.no_gui) {
    2e52:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <keymap_config>
    2e56:	84 fd       	sbrc	r24, 4
    2e58:	ee cf       	rjmp	.-36     	; 0x2e36 <action_for_key+0x7e>
                    return keycode_to_action(KC_NO);
                }
                return keycode_to_action(KC_RGUI);
    2e5a:	87 ee       	ldi	r24, 0xE7	; 231
    2e5c:	1d c0       	rjmp	.+58     	; 0x2e98 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    2e5e:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <keymap_config>
    2e62:	83 ff       	sbrs	r24, 3
    2e64:	f6 cf       	rjmp	.-20     	; 0x2e52 <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(KC_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    2e66:	86 ee       	ldi	r24, 0xE6	; 230
    2e68:	17 c0       	rjmp	.+46     	; 0x2e98 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(KC_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    2e6a:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <keymap_config>
    2e6e:	85 ff       	sbrs	r24, 5
    2e70:	06 c0       	rjmp	.+12     	; 0x2e7e <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    2e72:	89 e2       	ldi	r24, 0x29	; 41
    2e74:	11 c0       	rjmp	.+34     	; 0x2e98 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    2e76:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <keymap_config>
    2e7a:	85 ff       	sbrs	r24, 5
    2e7c:	fa cf       	rjmp	.-12     	; 0x2e72 <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    2e7e:	85 e3       	ldi	r24, 0x35	; 53
    2e80:	0b c0       	rjmp	.+22     	; 0x2e98 <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    2e82:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <keymap_config>
    2e86:	86 ff       	sbrs	r24, 6
    2e88:	06 c0       	rjmp	.+12     	; 0x2e96 <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    2e8a:	8a e2       	ldi	r24, 0x2A	; 42
    2e8c:	05 c0       	rjmp	.+10     	; 0x2e98 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    2e8e:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <keymap_config>
    2e92:	86 ff       	sbrs	r24, 6
    2e94:	fa cf       	rjmp	.-12     	; 0x2e8a <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    2e96:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    2e98:	0e 94 29 16 	call	0x2c52	; 0x2c52 <keycode_to_action>
    }
}
    2e9c:	08 95       	ret

00002e9e <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    2e9e:	cf 92       	push	r12
    2ea0:	df 92       	push	r13
    2ea2:	ef 92       	push	r14
    2ea4:	ff 92       	push	r15
    2ea6:	0f 93       	push	r16
    2ea8:	1f 93       	push	r17
    2eaa:	cf 93       	push	r28
    2eac:	6c 01       	movw	r12, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2eae:	c0 e0       	ldi	r28, 0x00	; 0
        matrix_row_t matrix_row = matrix_get_row(r);
    2eb0:	8c 2f       	mov	r24, r28
    2eb2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <matrix_get_row>
    2eb6:	00 e0       	ldi	r16, 0x00	; 0
    2eb8:	10 e0       	ldi	r17, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    2eba:	e8 2e       	mov	r14, r24
    2ebc:	f1 2c       	mov	r15, r1
    2ebe:	c7 01       	movw	r24, r14
    2ec0:	00 2e       	mov	r0, r16
    2ec2:	02 c0       	rjmp	.+4      	; 0x2ec8 <scan_key+0x2a>
    2ec4:	95 95       	asr	r25
    2ec6:	87 95       	ror	r24
    2ec8:	0a 94       	dec	r0
    2eca:	e2 f7       	brpl	.-8      	; 0x2ec4 <scan_key+0x26>
    2ecc:	80 ff       	sbrs	r24, 0
    2ece:	15 c0       	rjmp	.+42     	; 0x2efa <scan_key+0x5c>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    2ed0:	60 2f       	mov	r22, r16
    2ed2:	7c 2f       	mov	r23, r28
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <action_for_key>
                if (action.code == code ||
    2eda:	8c 15       	cp	r24, r12
    2edc:	9d 05       	cpc	r25, r13
    2ede:	59 f0       	breq	.+22     	; 0x2ef6 <scan_key+0x58>
    2ee0:	29 2f       	mov	r18, r25
    2ee2:	20 7e       	andi	r18, 0xE0	; 224
    2ee4:	39 2f       	mov	r19, r25
    2ee6:	30 7c       	andi	r19, 0xC0	; 192
    2ee8:	11 f0       	breq	.+4      	; 0x2eee <scan_key+0x50>
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
    2eea:	20 3a       	cpi	r18, 0xA0	; 160
    2eec:	31 f4       	brne	.+12     	; 0x2efa <scan_key+0x5c>
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	c8 16       	cp	r12, r24
    2ef2:	d9 06       	cpc	r13, r25
    2ef4:	11 f4       	brne	.+4      	; 0x2efa <scan_key+0x5c>
                     action.key.code == code)) {
                    return true;
    2ef6:	81 e0       	ldi	r24, 0x01	; 1
    2ef8:	09 c0       	rjmp	.+18     	; 0x2f0c <scan_key+0x6e>
    2efa:	0f 5f       	subi	r16, 0xFF	; 255
    2efc:	1f 4f       	sbci	r17, 0xFF	; 255

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    2efe:	04 30       	cpi	r16, 0x04	; 4
    2f00:	11 05       	cpc	r17, r1
    2f02:	e9 f6       	brne	.-70     	; 0x2ebe <scan_key+0x20>
    }
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2f04:	cf 5f       	subi	r28, 0xFF	; 255
    2f06:	c4 30       	cpi	r28, 0x04	; 4
    2f08:	99 f6       	brne	.-90     	; 0x2eb0 <scan_key+0x12>
                    return true;
                }
            }
        }
    }
    return false;
    2f0a:	80 e0       	ldi	r24, 0x00	; 0
}
    2f0c:	cf 91       	pop	r28
    2f0e:	1f 91       	pop	r17
    2f10:	0f 91       	pop	r16
    2f12:	ff 90       	pop	r15
    2f14:	ef 90       	pop	r14
    2f16:	df 90       	pop	r13
    2f18:	cf 90       	pop	r12
    2f1a:	08 95       	ret

00002f1c <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    2f1c:	cf 93       	push	r28
    2f1e:	df 93       	push	r29
    2f20:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    2f22:	8c e2       	ldi	r24, 0x2C	; 44
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <scan_key>
    2f2a:	88 23       	and	r24, r24
    2f2c:	29 f0       	breq	.+10     	; 0x2f38 <bootmagic_scan_key+0x1c>

    return scan_key(code);
    2f2e:	ce 01       	movw	r24, r28
}
    2f30:	df 91       	pop	r29
    2f32:	cf 91       	pop	r28

bool bootmagic_scan_key(uint16_t code)
{
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;

    return scan_key(code);
    2f34:	0c 94 4f 17 	jmp	0x2e9e	; 0x2e9e <scan_key>
}
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	df 91       	pop	r29
    2f3c:	cf 91       	pop	r28
    2f3e:	08 95       	ret

00002f40 <bootmagic>:
#include "hook.h"

keymap_config_t keymap_config;

void bootmagic(void)
{
    2f40:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    2f42:	0e 94 05 19 	call	0x320a	; 0x320a <eeconfig_is_enabled>
    2f46:	81 11       	cpse	r24, r1
    2f48:	02 c0       	rjmp	.+4      	; 0x2f4e <bootmagic+0xe>
        eeconfig_init();
    2f4a:	0e 94 e6 18 	call	0x31cc	; 0x31cc <eeconfig_init>
#include "hook.h"

keymap_config_t keymap_config;

void bootmagic(void)
{
    2f4e:	c5 e6       	ldi	r28, 0x65	; 101
    2f50:	c1 50       	subi	r28, 0x01	; 1
    }

    /* do scans in case of bounce */
    print("bootmagic scan: ... ");
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); wait_ms(10); }
    2f52:	49 f0       	breq	.+18     	; 0x2f66 <bootmagic+0x26>
    2f54:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <matrix_scan>
    2f58:	8f e3       	ldi	r24, 0x3F	; 63
    2f5a:	9c e9       	ldi	r25, 0x9C	; 156
    2f5c:	01 97       	sbiw	r24, 0x01	; 1
    2f5e:	f1 f7       	brne	.-4      	; 0x2f5c <bootmagic+0x1c>
    2f60:	00 c0       	rjmp	.+0      	; 0x2f62 <bootmagic+0x22>
    2f62:	00 00       	nop
    2f64:	f5 cf       	rjmp	.-22     	; 0x2f50 <bootmagic+0x10>
    print("done.\n");

    /* bootmagic skip */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    2f66:	89 e2       	ldi	r24, 0x29	; 41
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <bootmagic_scan_key>
    2f6e:	81 11       	cpse	r24, r1
    2f70:	2b c1       	rjmp	.+598    	; 0x31c8 <bootmagic+0x288>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    2f72:	8a e2       	ldi	r24, 0x2A	; 42
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <bootmagic_scan_key>
    2f7a:	81 11       	cpse	r24, r1
        eeconfig_init();
    2f7c:	0e 94 e6 18 	call	0x31cc	; 0x31cc <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    2f80:	85 e0       	ldi	r24, 0x05	; 5
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <bootmagic_scan_key>
    2f88:	81 11       	cpse	r24, r1
        bootloader_jump();
    2f8a:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <bootloader_jump>
    }

    /* user-defined checks */
    hook_bootmagic();
    2f8e:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <hook_bootmagic>

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    2f92:	0e 94 10 19 	call	0x3220	; 0x3220 <eeconfig_read_debug>
    2f96:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <debug_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    2f9a:	87 e0       	ldi	r24, 0x07	; 7
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <bootmagic_scan_key>
    2fa2:	88 23       	and	r24, r24
    2fa4:	c1 f1       	breq	.+112    	; 0x3016 <bootmagic+0xd6>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    2fa6:	8b e1       	ldi	r24, 0x1B	; 27
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <bootmagic_scan_key>
    2fae:	88 23       	and	r24, r24
    2fb0:	51 f0       	breq	.+20     	; 0x2fc6 <bootmagic+0x86>
            debug_config.matrix = !debug_config.matrix;
    2fb2:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <debug_config>
    2fb6:	81 fb       	bst	r24, 1
    2fb8:	22 27       	eor	r18, r18
    2fba:	20 f9       	bld	r18, 0
    2fbc:	91 e0       	ldi	r25, 0x01	; 1
    2fbe:	92 27       	eor	r25, r18
    2fc0:	90 fb       	bst	r25, 0
    2fc2:	81 f9       	bld	r24, 1
    2fc4:	0f c0       	rjmp	.+30     	; 0x2fe4 <bootmagic+0xa4>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    2fc6:	8e e0       	ldi	r24, 0x0E	; 14
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <bootmagic_scan_key>
    2fce:	88 23       	and	r24, r24
    2fd0:	61 f0       	breq	.+24     	; 0x2fea <bootmagic+0xaa>
            debug_config.keyboard = !debug_config.keyboard;
    2fd2:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <debug_config>
    2fd6:	82 fb       	bst	r24, 2
    2fd8:	22 27       	eor	r18, r18
    2fda:	20 f9       	bld	r18, 0
    2fdc:	91 e0       	ldi	r25, 0x01	; 1
    2fde:	92 27       	eor	r25, r18
    2fe0:	90 fb       	bst	r25, 0
    2fe2:	82 f9       	bld	r24, 2
    2fe4:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <debug_config>
    2fe8:	16 c0       	rjmp	.+44     	; 0x3016 <bootmagic+0xd6>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    2fea:	80 e1       	ldi	r24, 0x10	; 16
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <bootmagic_scan_key>
    2ff2:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <debug_config>
    2ff6:	88 23       	and	r24, r24
    2ff8:	41 f0       	breq	.+16     	; 0x300a <bootmagic+0xca>
            debug_config.mouse = !debug_config.mouse;
    2ffa:	93 fb       	bst	r25, 3
    2ffc:	22 27       	eor	r18, r18
    2ffe:	20 f9       	bld	r18, 0
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	82 27       	eor	r24, r18
    3004:	80 fb       	bst	r24, 0
    3006:	93 f9       	bld	r25, 3
    3008:	04 c0       	rjmp	.+8      	; 0x3012 <bootmagic+0xd2>
        } else {
            debug_config.enable = !debug_config.enable;
    300a:	89 2f       	mov	r24, r25
    300c:	80 95       	com	r24
    300e:	80 fb       	bst	r24, 0
    3010:	90 f9       	bld	r25, 0
    3012:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <debug_config>
        }
    }
    eeconfig_write_debug(debug_config.raw);
    3016:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <debug_config>
    301a:	0e 94 14 19 	call	0x3228	; 0x3228 <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    301e:	0e 94 22 19 	call	0x3244	; 0x3244 <eeconfig_read_keymap>
    3022:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    3026:	80 ee       	ldi	r24, 0xE0	; 224
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <bootmagic_scan_key>
    302e:	88 23       	and	r24, r24
    3030:	41 f0       	breq	.+16     	; 0x3042 <bootmagic+0x102>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    3032:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <keymap_config>
    3036:	98 2f       	mov	r25, r24
    3038:	90 95       	com	r25
    303a:	90 fb       	bst	r25, 0
    303c:	80 f9       	bld	r24, 0
    303e:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    3042:	89 e3       	ldi	r24, 0x39	; 57
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <bootmagic_scan_key>
    304a:	88 23       	and	r24, r24
    304c:	59 f0       	breq	.+22     	; 0x3064 <bootmagic+0x124>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    304e:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <keymap_config>
    3052:	81 fb       	bst	r24, 1
    3054:	22 27       	eor	r18, r18
    3056:	20 f9       	bld	r18, 0
    3058:	91 e0       	ldi	r25, 0x01	; 1
    305a:	92 27       	eor	r25, r18
    305c:	90 fb       	bst	r25, 0
    305e:	81 f9       	bld	r24, 1
    3060:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    3064:	82 ee       	ldi	r24, 0xE2	; 226
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <bootmagic_scan_key>
    306c:	88 23       	and	r24, r24
    306e:	59 f0       	breq	.+22     	; 0x3086 <bootmagic+0x146>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    3070:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <keymap_config>
    3074:	82 fb       	bst	r24, 2
    3076:	22 27       	eor	r18, r18
    3078:	20 f9       	bld	r18, 0
    307a:	91 e0       	ldi	r25, 0x01	; 1
    307c:	92 27       	eor	r25, r18
    307e:	90 fb       	bst	r25, 0
    3080:	82 f9       	bld	r24, 2
    3082:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    3086:	86 ee       	ldi	r24, 0xE6	; 230
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <bootmagic_scan_key>
    308e:	88 23       	and	r24, r24
    3090:	59 f0       	breq	.+22     	; 0x30a8 <bootmagic+0x168>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    3092:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <keymap_config>
    3096:	83 fb       	bst	r24, 3
    3098:	22 27       	eor	r18, r18
    309a:	20 f9       	bld	r18, 0
    309c:	91 e0       	ldi	r25, 0x01	; 1
    309e:	92 27       	eor	r25, r18
    30a0:	90 fb       	bst	r25, 0
    30a2:	83 f9       	bld	r24, 3
    30a4:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    30a8:	83 ee       	ldi	r24, 0xE3	; 227
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <bootmagic_scan_key>
    30b0:	88 23       	and	r24, r24
    30b2:	59 f0       	breq	.+22     	; 0x30ca <bootmagic+0x18a>
        keymap_config.no_gui = !keymap_config.no_gui;
    30b4:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <keymap_config>
    30b8:	84 fb       	bst	r24, 4
    30ba:	22 27       	eor	r18, r18
    30bc:	20 f9       	bld	r18, 0
    30be:	91 e0       	ldi	r25, 0x01	; 1
    30c0:	92 27       	eor	r25, r18
    30c2:	90 fb       	bst	r25, 0
    30c4:	84 f9       	bld	r24, 4
    30c6:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    30ca:	85 e3       	ldi	r24, 0x35	; 53
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <bootmagic_scan_key>
    30d2:	88 23       	and	r24, r24
    30d4:	59 f0       	breq	.+22     	; 0x30ec <bootmagic+0x1ac>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    30d6:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <keymap_config>
    30da:	85 fb       	bst	r24, 5
    30dc:	22 27       	eor	r18, r18
    30de:	20 f9       	bld	r18, 0
    30e0:	91 e0       	ldi	r25, 0x01	; 1
    30e2:	92 27       	eor	r25, r18
    30e4:	90 fb       	bst	r25, 0
    30e6:	85 f9       	bld	r24, 5
    30e8:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    30ec:	81 e3       	ldi	r24, 0x31	; 49
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <bootmagic_scan_key>
    30f4:	88 23       	and	r24, r24
    30f6:	59 f0       	breq	.+22     	; 0x310e <bootmagic+0x1ce>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    30f8:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <keymap_config>
    30fc:	86 fb       	bst	r24, 6
    30fe:	22 27       	eor	r18, r18
    3100:	20 f9       	bld	r18, 0
    3102:	91 e0       	ldi	r25, 0x01	; 1
    3104:	92 27       	eor	r25, r18
    3106:	90 fb       	bst	r25, 0
    3108:	86 f9       	bld	r24, 6
    310a:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    310e:	81 e1       	ldi	r24, 0x11	; 17
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <bootmagic_scan_key>
    3116:	88 23       	and	r24, r24
    3118:	59 f0       	breq	.+22     	; 0x3130 <bootmagic+0x1f0>
        keymap_config.nkro = !keymap_config.nkro;
    311a:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <keymap_config>
    311e:	87 fb       	bst	r24, 7
    3120:	22 27       	eor	r18, r18
    3122:	20 f9       	bld	r18, 0
    3124:	91 e0       	ldi	r25, 0x01	; 1
    3126:	92 27       	eor	r25, r18
    3128:	90 fb       	bst	r25, 0
    312a:	87 f9       	bld	r24, 7
    312c:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <keymap_config>
    }
    eeconfig_write_keymap(keymap_config.raw);
    3130:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <keymap_config>
    3134:	0e 94 26 19 	call	0x324c	; 0x324c <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    3138:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <keymap_config>
    313c:	87 fb       	bst	r24, 7
    313e:	88 27       	eor	r24, r24
    3140:	80 f9       	bld	r24, 0
    3142:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <keyboard_nkro>
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    3146:	87 e2       	ldi	r24, 0x27	; 39
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <bootmagic_scan_key>
    314e:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    3150:	8e e1       	ldi	r24, 0x1E	; 30
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <bootmagic_scan_key>
    3158:	81 11       	cpse	r24, r1
    315a:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    315c:	8f e1       	ldi	r24, 0x1F	; 31
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <bootmagic_scan_key>
    3164:	81 11       	cpse	r24, r1
    3166:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    3168:	80 e2       	ldi	r24, 0x20	; 32
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <bootmagic_scan_key>
    3170:	81 11       	cpse	r24, r1
    3172:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    3174:	81 e2       	ldi	r24, 0x21	; 33
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <bootmagic_scan_key>
    317c:	81 11       	cpse	r24, r1
    317e:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    3180:	82 e2       	ldi	r24, 0x22	; 34
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <bootmagic_scan_key>
    3188:	81 11       	cpse	r24, r1
    318a:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    318c:	83 e2       	ldi	r24, 0x23	; 35
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <bootmagic_scan_key>
    3194:	81 11       	cpse	r24, r1
    3196:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    3198:	84 e2       	ldi	r24, 0x24	; 36
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <bootmagic_scan_key>
    31a0:	88 23       	and	r24, r24
    31a2:	11 f0       	breq	.+4      	; 0x31a8 <bootmagic+0x268>
    31a4:	c0 68       	ori	r28, 0x80	; 128
    31a6:	02 c0       	rjmp	.+4      	; 0x31ac <bootmagic+0x26c>
    if (default_layer) {
    31a8:	cc 23       	and	r28, r28
    31aa:	29 f0       	breq	.+10     	; 0x31b6 <bootmagic+0x276>
        eeconfig_write_default_layer(default_layer);
    31ac:	8c 2f       	mov	r24, r28
    31ae:	0e 94 1d 19 	call	0x323a	; 0x323a <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    31b2:	6c 2f       	mov	r22, r28
    31b4:	03 c0       	rjmp	.+6      	; 0x31bc <bootmagic+0x27c>
    } else {
        default_layer = eeconfig_read_default_layer();
    31b6:	0e 94 19 19 	call	0x3232	; 0x3232 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    31ba:	68 2f       	mov	r22, r24
    31bc:	70 e0       	ldi	r23, 0x00	; 0
    31be:	80 e0       	ldi	r24, 0x00	; 0
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    31c2:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    31c4:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <default_layer_set>
    }
}
    31c8:	cf 91       	pop	r28
    31ca:	08 95       	ret

000031cc <eeconfig_init>:
    eeprom_write_word(EECONFIG_MAGIC, EECONFIG_MAGIC_NUMBER);
}

void eeconfig_disable(void)
{
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
    31cc:	6d ee       	ldi	r22, 0xED	; 237
    31ce:	7e ef       	ldi	r23, 0xFE	; 254
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <eeprom_write_word>
    31d8:	60 e0       	ldi	r22, 0x00	; 0
    31da:	82 e0       	ldi	r24, 0x02	; 2
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <eeprom_write_byte>
    31e2:	60 e0       	ldi	r22, 0x00	; 0
    31e4:	83 e0       	ldi	r24, 0x03	; 3
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <eeprom_write_byte>
    31ec:	60 e0       	ldi	r22, 0x00	; 0
    31ee:	84 e0       	ldi	r24, 0x04	; 4
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <eeprom_write_byte>
    31f6:	60 e0       	ldi	r22, 0x00	; 0
    31f8:	85 e0       	ldi	r24, 0x05	; 5
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <eeprom_write_byte>
    3200:	60 e0       	ldi	r22, 0x00	; 0
    3202:	86 e0       	ldi	r24, 0x06	; 6
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	0c 94 ea 19 	jmp	0x33d4	; 0x33d4 <eeprom_write_byte>

0000320a <eeconfig_is_enabled>:
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    320a:	80 e0       	ldi	r24, 0x00	; 0
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <eeprom_read_word>
    3212:	21 e0       	ldi	r18, 0x01	; 1
    3214:	8d 3e       	cpi	r24, 0xED	; 237
    3216:	9e 4f       	sbci	r25, 0xFE	; 254
    3218:	09 f0       	breq	.+2      	; 0x321c <eeconfig_is_enabled+0x12>
    321a:	20 e0       	ldi	r18, 0x00	; 0
}
    321c:	82 2f       	mov	r24, r18
    321e:	08 95       	ret

00003220 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    3220:	82 e0       	ldi	r24, 0x02	; 2
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	0c 94 dc 19 	jmp	0x33b8	; 0x33b8 <eeprom_read_byte>

00003228 <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    3228:	68 2f       	mov	r22, r24
    322a:	82 e0       	ldi	r24, 0x02	; 2
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	0c 94 ea 19 	jmp	0x33d4	; 0x33d4 <eeprom_write_byte>

00003232 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    3232:	83 e0       	ldi	r24, 0x03	; 3
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	0c 94 dc 19 	jmp	0x33b8	; 0x33b8 <eeprom_read_byte>

0000323a <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    323a:	68 2f       	mov	r22, r24
    323c:	83 e0       	ldi	r24, 0x03	; 3
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	0c 94 ea 19 	jmp	0x33d4	; 0x33d4 <eeprom_write_byte>

00003244 <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    3244:	84 e0       	ldi	r24, 0x04	; 4
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	0c 94 dc 19 	jmp	0x33b8	; 0x33b8 <eeprom_read_byte>

0000324c <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    324c:	68 2f       	mov	r22, r24
    324e:	84 e0       	ldi	r24, 0x04	; 4
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	0c 94 ea 19 	jmp	0x33d4	; 0x33d4 <eeprom_write_byte>

00003256 <eeconfig_read_backlight>:

#ifdef BACKLIGHT_ENABLE
uint8_t eeconfig_read_backlight(void)      { return eeprom_read_byte(EECONFIG_BACKLIGHT); }
    3256:	86 e0       	ldi	r24, 0x06	; 6
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	0c 94 dc 19 	jmp	0x33b8	; 0x33b8 <eeprom_read_byte>

0000325e <eeconfig_write_backlight>:
void eeconfig_write_backlight(uint8_t val) { eeprom_write_byte(EECONFIG_BACKLIGHT, val); }
    325e:	68 2f       	mov	r22, r24
    3260:	86 e0       	ldi	r24, 0x06	; 6
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	0c 94 ea 19 	jmp	0x33d4	; 0x33d4 <eeprom_write_byte>

00003268 <backlight_init>:
backlight_config_t backlight_config;

void backlight_init(void)
{
    /* check signature */
    if (!eeconfig_is_enabled()) {
    3268:	0e 94 05 19 	call	0x320a	; 0x320a <eeconfig_is_enabled>
    326c:	81 11       	cpse	r24, r1
    326e:	02 c0       	rjmp	.+4      	; 0x3274 <backlight_init+0xc>
        eeconfig_init();
    3270:	0e 94 e6 18 	call	0x31cc	; 0x31cc <eeconfig_init>
    }
    backlight_config.raw = eeconfig_read_backlight();
    3274:	0e 94 2b 19 	call	0x3256	; 0x3256 <eeconfig_read_backlight>
    3278:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <backlight_config>
    backlight_set(backlight_config.enable ? backlight_config.level : 0);
    327c:	80 ff       	sbrs	r24, 0
    327e:	02 c0       	rjmp	.+4      	; 0x3284 <backlight_init+0x1c>
    3280:	86 95       	lsr	r24
    3282:	01 c0       	rjmp	.+2      	; 0x3286 <backlight_init+0x1e>
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <backlight_set>

0000328a <backlight_increase>:
}

void backlight_increase(void)
{
    if(backlight_config.level < BACKLIGHT_LEVELS)
    328a:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <backlight_config>
    328e:	98 2f       	mov	r25, r24
    3290:	96 95       	lsr	r25
    3292:	39 f4       	brne	.+14     	; 0x32a2 <backlight_increase+0x18>
    {
        backlight_config.level++;
    3294:	81 70       	andi	r24, 0x01	; 1
        backlight_config.enable = 1;
    3296:	82 60       	ori	r24, 0x02	; 2
    3298:	81 60       	ori	r24, 0x01	; 1
    329a:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <backlight_config>
        eeconfig_write_backlight(backlight_config.raw);
    329e:	0e 94 2f 19 	call	0x325e	; 0x325e <eeconfig_write_backlight>
    }
    dprintf("backlight increase: %u\n", backlight_config.level);
    backlight_set(backlight_config.level);
    32a2:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <backlight_config>
    32a6:	86 95       	lsr	r24
    32a8:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <backlight_set>

000032ac <backlight_decrease>:
}

void backlight_decrease(void)
{
    if(backlight_config.level > 0)
    32ac:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <backlight_config>
    32b0:	98 2f       	mov	r25, r24
    32b2:	96 95       	lsr	r25
    32b4:	91 f0       	breq	.+36     	; 0x32da <backlight_decrease+0x2e>
    {
        backlight_config.level--;
    32b6:	91 58       	subi	r25, 0x81	; 129
    32b8:	99 0f       	add	r25, r25
    32ba:	81 70       	andi	r24, 0x01	; 1
    32bc:	89 2b       	or	r24, r25
    32be:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <backlight_config>
        backlight_config.enable = !!backlight_config.level;
    32c2:	8e 7f       	andi	r24, 0xFE	; 254
    32c4:	91 e0       	ldi	r25, 0x01	; 1
    32c6:	09 f4       	brne	.+2      	; 0x32ca <backlight_decrease+0x1e>
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <backlight_config>
    32ce:	90 fb       	bst	r25, 0
    32d0:	80 f9       	bld	r24, 0
    32d2:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <backlight_config>
        eeconfig_write_backlight(backlight_config.raw);
    32d6:	0e 94 2f 19 	call	0x325e	; 0x325e <eeconfig_write_backlight>
    }
    dprintf("backlight decrease: %u\n", backlight_config.level);
    backlight_set(backlight_config.level);
    32da:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <backlight_config>
    32de:	86 95       	lsr	r24
    32e0:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <backlight_set>

000032e4 <backlight_toggle>:
}

void backlight_toggle(void)
{
    backlight_config.enable ^= 1;
    32e4:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <backlight_config>
    32e8:	98 2f       	mov	r25, r24
    32ea:	90 95       	com	r25
    32ec:	90 fb       	bst	r25, 0
    32ee:	80 f9       	bld	r24, 0
    32f0:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <backlight_config>
    eeconfig_write_backlight(backlight_config.raw);
    32f4:	0e 94 2f 19 	call	0x325e	; 0x325e <eeconfig_write_backlight>
    dprintf("backlight toggle: %u\n", backlight_config.enable);
    backlight_set(backlight_config.enable ? backlight_config.level : 0);
    32f8:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <backlight_config>
    32fc:	80 ff       	sbrs	r24, 0
    32fe:	02 c0       	rjmp	.+4      	; 0x3304 <backlight_toggle+0x20>
    3300:	86 95       	lsr	r24
    3302:	01 c0       	rjmp	.+2      	; 0x3306 <backlight_toggle+0x22>
    3304:	80 e0       	ldi	r24, 0x00	; 0
    3306:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <backlight_set>

0000330a <backlight_step>:
}

void backlight_step(void)
{
    backlight_config.level++;
    330a:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <backlight_config>
    330e:	89 2f       	mov	r24, r25
    3310:	86 95       	lsr	r24
    3312:	8f 5f       	subi	r24, 0xFF	; 255
    3314:	8f 77       	andi	r24, 0x7F	; 127
    3316:	91 70       	andi	r25, 0x01	; 1
    if(backlight_config.level > BACKLIGHT_LEVELS)
    3318:	82 30       	cpi	r24, 0x02	; 2
    331a:	28 f4       	brcc	.+10     	; 0x3326 <backlight_step+0x1c>
    backlight_set(backlight_config.enable ? backlight_config.level : 0);
}

void backlight_step(void)
{
    backlight_config.level++;
    331c:	88 0f       	add	r24, r24
    331e:	89 2b       	or	r24, r25
    3320:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <backlight_config>
    3324:	02 c0       	rjmp	.+4      	; 0x332a <backlight_step+0x20>
    if(backlight_config.level > BACKLIGHT_LEVELS)
    {
        backlight_config.level = 0;
    3326:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <backlight_config>
    }
    backlight_config.enable = !!backlight_config.level;
    332a:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <backlight_config>
    332e:	8e 7f       	andi	r24, 0xFE	; 254
    3330:	91 e0       	ldi	r25, 0x01	; 1
    3332:	09 f4       	brne	.+2      	; 0x3336 <backlight_step+0x2c>
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <backlight_config>
    333a:	90 fb       	bst	r25, 0
    333c:	80 f9       	bld	r24, 0
    333e:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <backlight_config>
    eeconfig_write_backlight(backlight_config.raw);
    3342:	0e 94 2f 19 	call	0x325e	; 0x325e <eeconfig_write_backlight>
    dprintf("backlight step: %u\n", backlight_config.level);
    backlight_set(backlight_config.level);
    3346:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <backlight_config>
    334a:	86 95       	lsr	r24
    334c:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <backlight_set>

00003350 <backlight_level>:
}

void backlight_level(uint8_t level)
{
    backlight_config.level ^= level;
    3350:	20 91 db 01 	lds	r18, 0x01DB	; 0x8001db <backlight_config>
    3354:	92 2f       	mov	r25, r18
    3356:	96 95       	lsr	r25
    3358:	89 27       	eor	r24, r25
    335a:	98 2f       	mov	r25, r24
    335c:	99 0f       	add	r25, r25
    335e:	82 2f       	mov	r24, r18
    3360:	81 70       	andi	r24, 0x01	; 1
    3362:	89 2b       	or	r24, r25
    3364:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <backlight_config>
    backlight_config.enable = !!backlight_config.level;
    3368:	8e 7f       	andi	r24, 0xFE	; 254
    336a:	91 e0       	ldi	r25, 0x01	; 1
    336c:	09 f4       	brne	.+2      	; 0x3370 <backlight_level+0x20>
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <backlight_config>
    3374:	90 fb       	bst	r25, 0
    3376:	80 f9       	bld	r24, 0
    3378:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <backlight_config>
    eeconfig_write_backlight(backlight_config.raw);
    337c:	0e 94 2f 19 	call	0x325e	; 0x325e <eeconfig_write_backlight>
    backlight_set(backlight_config.level);
    3380:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <backlight_config>
    3384:	86 95       	lsr	r24
    3386:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <backlight_set>

0000338a <__mulhi3>:
    338a:	00 24       	eor	r0, r0
    338c:	55 27       	eor	r21, r21
    338e:	04 c0       	rjmp	.+8      	; 0x3398 <__mulhi3+0xe>
    3390:	08 0e       	add	r0, r24
    3392:	59 1f       	adc	r21, r25
    3394:	88 0f       	add	r24, r24
    3396:	99 1f       	adc	r25, r25
    3398:	00 97       	sbiw	r24, 0x00	; 0
    339a:	29 f0       	breq	.+10     	; 0x33a6 <__mulhi3+0x1c>
    339c:	76 95       	lsr	r23
    339e:	67 95       	ror	r22
    33a0:	b8 f3       	brcs	.-18     	; 0x3390 <__mulhi3+0x6>
    33a2:	71 05       	cpc	r23, r1
    33a4:	b9 f7       	brne	.-18     	; 0x3394 <__mulhi3+0xa>
    33a6:	80 2d       	mov	r24, r0
    33a8:	95 2f       	mov	r25, r21
    33aa:	08 95       	ret

000033ac <__tablejump2__>:
    33ac:	ee 0f       	add	r30, r30
    33ae:	ff 1f       	adc	r31, r31
    33b0:	05 90       	lpm	r0, Z+
    33b2:	f4 91       	lpm	r31, Z
    33b4:	e0 2d       	mov	r30, r0
    33b6:	09 94       	ijmp

000033b8 <eeprom_read_byte>:
    33b8:	f9 99       	sbic	0x1f, 1	; 31
    33ba:	fe cf       	rjmp	.-4      	; 0x33b8 <eeprom_read_byte>
    33bc:	92 bd       	out	0x22, r25	; 34
    33be:	81 bd       	out	0x21, r24	; 33
    33c0:	f8 9a       	sbi	0x1f, 0	; 31
    33c2:	99 27       	eor	r25, r25
    33c4:	80 b5       	in	r24, 0x20	; 32
    33c6:	08 95       	ret

000033c8 <eeprom_read_word>:
    33c8:	a8 e1       	ldi	r26, 0x18	; 24
    33ca:	b0 e0       	ldi	r27, 0x00	; 0
    33cc:	42 e0       	ldi	r20, 0x02	; 2
    33ce:	50 e0       	ldi	r21, 0x00	; 0
    33d0:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <eeprom_read_blraw>

000033d4 <eeprom_write_byte>:
    33d4:	26 2f       	mov	r18, r22

000033d6 <eeprom_write_r18>:
    33d6:	f9 99       	sbic	0x1f, 1	; 31
    33d8:	fe cf       	rjmp	.-4      	; 0x33d6 <eeprom_write_r18>
    33da:	1f ba       	out	0x1f, r1	; 31
    33dc:	92 bd       	out	0x22, r25	; 34
    33de:	81 bd       	out	0x21, r24	; 33
    33e0:	20 bd       	out	0x20, r18	; 32
    33e2:	0f b6       	in	r0, 0x3f	; 63
    33e4:	f8 94       	cli
    33e6:	fa 9a       	sbi	0x1f, 2	; 31
    33e8:	f9 9a       	sbi	0x1f, 1	; 31
    33ea:	0f be       	out	0x3f, r0	; 63
    33ec:	01 96       	adiw	r24, 0x01	; 1
    33ee:	08 95       	ret

000033f0 <eeprom_write_word>:
    33f0:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <eeprom_write_byte>
    33f4:	27 2f       	mov	r18, r23
    33f6:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <eeprom_write_r18>

000033fa <eeprom_read_block>:
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22

000033fe <eeprom_read_blraw>:
    33fe:	fc 01       	movw	r30, r24
    3400:	f9 99       	sbic	0x1f, 1	; 31
    3402:	fe cf       	rjmp	.-4      	; 0x3400 <eeprom_read_blraw+0x2>
    3404:	06 c0       	rjmp	.+12     	; 0x3412 <eeprom_read_blraw+0x14>
    3406:	f2 bd       	out	0x22, r31	; 34
    3408:	e1 bd       	out	0x21, r30	; 33
    340a:	f8 9a       	sbi	0x1f, 0	; 31
    340c:	31 96       	adiw	r30, 0x01	; 1
    340e:	00 b4       	in	r0, 0x20	; 32
    3410:	0d 92       	st	X+, r0
    3412:	41 50       	subi	r20, 0x01	; 1
    3414:	50 40       	sbci	r21, 0x00	; 0
    3416:	b8 f7       	brcc	.-18     	; 0x3406 <eeprom_read_blraw+0x8>
    3418:	08 95       	ret

0000341a <_exit>:
    341a:	f8 94       	cli

0000341c <__stop_program>:
    341c:	ff cf       	rjmp	.-2      	; 0x341c <__stop_program>
