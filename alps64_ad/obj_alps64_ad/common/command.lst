   1               		.file	"command.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.mousekey_console_help,"ax",@progbits
  12               	mousekey_console_help:
  13               	.LFB21:
  14               		.file 1 "../../tmk_core/common/command.c"
   1:../../tmk_core/common/command.c **** /*
   2:../../tmk_core/common/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/command.c **** 
   4:../../tmk_core/common/command.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/command.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/command.c **** (at your option) any later version.
   8:../../tmk_core/common/command.c **** 
   9:../../tmk_core/common/command.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/command.c **** GNU General Public License for more details.
  13:../../tmk_core/common/command.c **** 
  14:../../tmk_core/common/command.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/command.c **** */
  17:../../tmk_core/common/command.c **** #include <stdint.h>
  18:../../tmk_core/common/command.c **** #include <stdbool.h>
  19:../../tmk_core/common/command.c **** #include "wait.h"
  20:../../tmk_core/common/command.c **** #include "keycode.h"
  21:../../tmk_core/common/command.c **** #include "host.h"
  22:../../tmk_core/common/command.c **** #include "keymap.h"
  23:../../tmk_core/common/command.c **** #include "print.h"
  24:../../tmk_core/common/command.c **** #include "debug.h"
  25:../../tmk_core/common/command.c **** #include "util.h"
  26:../../tmk_core/common/command.c **** #include "timer.h"
  27:../../tmk_core/common/command.c **** #include "keyboard.h"
  28:../../tmk_core/common/command.c **** #include "bootloader.h"
  29:../../tmk_core/common/command.c **** #include "action_layer.h"
  30:../../tmk_core/common/command.c **** #include "action_util.h"
  31:../../tmk_core/common/command.c **** #include "eeconfig.h"
  32:../../tmk_core/common/command.c **** #include "sleep_led.h"
  33:../../tmk_core/common/command.c **** #include "led.h"
  34:../../tmk_core/common/command.c **** #include "command.h"
  35:../../tmk_core/common/command.c **** #include "backlight.h"
  36:../../tmk_core/common/command.c **** 
  37:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  38:../../tmk_core/common/command.c **** #include "mousekey.h"
  39:../../tmk_core/common/command.c **** #endif
  40:../../tmk_core/common/command.c **** 
  41:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
  42:../../tmk_core/common/command.c **** #   include "usb_keyboard.h"
  43:../../tmk_core/common/command.c **** #   ifdef EXTRAKEY_ENABLE
  44:../../tmk_core/common/command.c **** #       include "usb_extra.h"
  45:../../tmk_core/common/command.c **** #   endif
  46:../../tmk_core/common/command.c **** #endif
  47:../../tmk_core/common/command.c **** 
  48:../../tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
  49:../../tmk_core/common/command.c **** #   include "usbdrv.h"
  50:../../tmk_core/common/command.c **** #endif
  51:../../tmk_core/common/command.c **** 
  52:../../tmk_core/common/command.c **** 
  53:../../tmk_core/common/command.c **** static bool command_common(uint8_t code);
  54:../../tmk_core/common/command.c **** static void command_common_help(void);
  55:../../tmk_core/common/command.c **** static bool command_console(uint8_t code);
  56:../../tmk_core/common/command.c **** static void command_console_help(void);
  57:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  58:../../tmk_core/common/command.c **** static bool mousekey_console(uint8_t code);
  59:../../tmk_core/common/command.c **** static void mousekey_console_help(void);
  60:../../tmk_core/common/command.c **** static uint8_t numkey2num(uint8_t code);
  61:../../tmk_core/common/command.c **** #endif
  62:../../tmk_core/common/command.c **** 
  63:../../tmk_core/common/command.c **** 
  64:../../tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer);
  65:../../tmk_core/common/command.c **** 
  66:../../tmk_core/common/command.c **** 
  67:../../tmk_core/common/command.c **** command_state_t command_state = ONESHOT;
  68:../../tmk_core/common/command.c **** 
  69:../../tmk_core/common/command.c **** 
  70:../../tmk_core/common/command.c **** bool command_proc(uint8_t code)
  71:../../tmk_core/common/command.c **** {
  72:../../tmk_core/common/command.c ****     switch (command_state) {
  73:../../tmk_core/common/command.c ****         case ONESHOT:
  74:../../tmk_core/common/command.c ****             if (!IS_COMMAND())
  75:../../tmk_core/common/command.c ****                 return false;
  76:../../tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
  77:../../tmk_core/common/command.c ****             break;
  78:../../tmk_core/common/command.c ****         case CONSOLE:
  79:../../tmk_core/common/command.c ****             if (IS_COMMAND())
  80:../../tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
  81:../../tmk_core/common/command.c ****             else
  82:../../tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
  83:../../tmk_core/common/command.c ****             break;
  84:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  85:../../tmk_core/common/command.c ****         case MOUSEKEY:
  86:../../tmk_core/common/command.c ****             mousekey_console(code);
  87:../../tmk_core/common/command.c ****             break;
  88:../../tmk_core/common/command.c **** #endif
  89:../../tmk_core/common/command.c ****         default:
  90:../../tmk_core/common/command.c ****             command_state = ONESHOT;
  91:../../tmk_core/common/command.c ****             return false;
  92:../../tmk_core/common/command.c ****     }
  93:../../tmk_core/common/command.c ****     return true;
  94:../../tmk_core/common/command.c **** }
  95:../../tmk_core/common/command.c **** 
  96:../../tmk_core/common/command.c **** /* TODO: Refactoring is needed. */
  97:../../tmk_core/common/command.c **** /* This allows to define extra commands. return false when not processed. */
  98:../../tmk_core/common/command.c **** bool command_extra(uint8_t code) __attribute__ ((weak));
  99:../../tmk_core/common/command.c **** bool command_extra(uint8_t code)
 100:../../tmk_core/common/command.c **** {
 101:../../tmk_core/common/command.c ****     (void)code;
 102:../../tmk_core/common/command.c ****     return false;
 103:../../tmk_core/common/command.c **** }
 104:../../tmk_core/common/command.c **** 
 105:../../tmk_core/common/command.c **** bool command_console_extra(uint8_t code) __attribute__ ((weak));
 106:../../tmk_core/common/command.c **** bool command_console_extra(uint8_t code)
 107:../../tmk_core/common/command.c **** {
 108:../../tmk_core/common/command.c ****     (void)code;
 109:../../tmk_core/common/command.c ****     return false;
 110:../../tmk_core/common/command.c **** }
 111:../../tmk_core/common/command.c **** 
 112:../../tmk_core/common/command.c **** 
 113:../../tmk_core/common/command.c **** /***********************************************************
 114:../../tmk_core/common/command.c ****  * Command common
 115:../../tmk_core/common/command.c ****  ***********************************************************/
 116:../../tmk_core/common/command.c **** static void command_common_help(void)
 117:../../tmk_core/common/command.c **** {
 118:../../tmk_core/common/command.c ****     print("\n\t- Magic -\n"
 119:../../tmk_core/common/command.c ****           "d:	debug\n"
 120:../../tmk_core/common/command.c ****           "x:	debug matrix\n"
 121:../../tmk_core/common/command.c ****           "k:	debug keyboard\n"
 122:../../tmk_core/common/command.c ****           "m:	debug mouse\n"
 123:../../tmk_core/common/command.c ****           "v:	version\n"
 124:../../tmk_core/common/command.c ****           "s:	status\n"
 125:../../tmk_core/common/command.c ****           "c:	console mode\n"
 126:../../tmk_core/common/command.c ****           "0-4:	layer0-4(F10-F4)\n"
 127:../../tmk_core/common/command.c ****           "Paus:	bootloader\n"
 128:../../tmk_core/common/command.c **** 
 129:../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 130:../../tmk_core/common/command.c ****           "Caps:	Lock\n"
 131:../../tmk_core/common/command.c **** #endif
 132:../../tmk_core/common/command.c **** 
 133:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 134:../../tmk_core/common/command.c ****           "e:	eeprom\n"
 135:../../tmk_core/common/command.c **** #endif
 136:../../tmk_core/common/command.c **** 
 137:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 138:../../tmk_core/common/command.c ****           "n:	NKRO\n"
 139:../../tmk_core/common/command.c **** #endif
 140:../../tmk_core/common/command.c **** 
 141:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 142:../../tmk_core/common/command.c ****           "z:	sleep LED test\n"
 143:../../tmk_core/common/command.c **** #endif
 144:../../tmk_core/common/command.c ****     );
 145:../../tmk_core/common/command.c **** }
 146:../../tmk_core/common/command.c **** 
 147:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 148:../../tmk_core/common/command.c **** static void print_eeconfig(void)
 149:../../tmk_core/common/command.c **** {
 150:../../tmk_core/common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 151:../../tmk_core/common/command.c **** 
 152:../../tmk_core/common/command.c ****     debug_config_t dc;
 153:../../tmk_core/common/command.c ****     dc.raw = eeconfig_read_debug();
 154:../../tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 155:../../tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 156:../../tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 157:../../tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 158:../../tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 159:../../tmk_core/common/command.c **** 
 160:../../tmk_core/common/command.c ****     keymap_config_t kc;
 161:../../tmk_core/common/command.c ****     kc.raw = eeconfig_read_keymap();
 162:../../tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 163:../../tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 164:../../tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 165:../../tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 166:../../tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 167:../../tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 168:../../tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 169:../../tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 170:../../tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 171:../../tmk_core/common/command.c **** 
 172:../../tmk_core/common/command.c **** #ifdef BACKLIGHT_ENABLE
 173:../../tmk_core/common/command.c ****     backlight_config_t bc;
 174:../../tmk_core/common/command.c ****     bc.raw = eeconfig_read_backlight();
 175:../../tmk_core/common/command.c ****     print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
 176:../../tmk_core/common/command.c ****     print(".enable: "); print_dec(bc.enable); print("\n");
 177:../../tmk_core/common/command.c ****     print(".level: "); print_dec(bc.level); print("\n");
 178:../../tmk_core/common/command.c **** #endif
 179:../../tmk_core/common/command.c **** }
 180:../../tmk_core/common/command.c **** #endif
 181:../../tmk_core/common/command.c **** 
 182:../../tmk_core/common/command.c **** static bool command_common(uint8_t code)
 183:../../tmk_core/common/command.c **** {
 184:../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 185:../../tmk_core/common/command.c ****     static host_driver_t *host_driver = 0;
 186:../../tmk_core/common/command.c **** #endif
 187:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 188:../../tmk_core/common/command.c ****     static bool sleep_led_test = false;
 189:../../tmk_core/common/command.c **** #endif
 190:../../tmk_core/common/command.c ****     switch (code) {
 191:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 192:../../tmk_core/common/command.c ****         case KC_Z:
 193:../../tmk_core/common/command.c ****             // test breathing sleep LED
 194:../../tmk_core/common/command.c ****             print("Sleep LED test\n");
 195:../../tmk_core/common/command.c ****             if (sleep_led_test) {
 196:../../tmk_core/common/command.c ****                 sleep_led_disable();
 197:../../tmk_core/common/command.c ****                 led_set(host_keyboard_leds());
 198:../../tmk_core/common/command.c ****             } else {
 199:../../tmk_core/common/command.c ****                 sleep_led_enable();
 200:../../tmk_core/common/command.c ****             }
 201:../../tmk_core/common/command.c ****             sleep_led_test = !sleep_led_test;
 202:../../tmk_core/common/command.c ****             break;
 203:../../tmk_core/common/command.c **** #endif
 204:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 205:../../tmk_core/common/command.c ****         case KC_E:
 206:../../tmk_core/common/command.c ****             print("eeconfig:\n");
 207:../../tmk_core/common/command.c ****             print_eeconfig();
 208:../../tmk_core/common/command.c ****             break;
 209:../../tmk_core/common/command.c **** #endif
 210:../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 211:../../tmk_core/common/command.c ****         case KC_CAPSLOCK:
 212:../../tmk_core/common/command.c ****             if (host_get_driver()) {
 213:../../tmk_core/common/command.c ****                 host_driver = host_get_driver();
 214:../../tmk_core/common/command.c ****                 clear_keyboard();
 215:../../tmk_core/common/command.c ****                 host_set_driver(0);
 216:../../tmk_core/common/command.c ****                 print("Locked.\n");
 217:../../tmk_core/common/command.c ****             } else {
 218:../../tmk_core/common/command.c ****                 host_set_driver(host_driver);
 219:../../tmk_core/common/command.c ****                 print("Unlocked.\n");
 220:../../tmk_core/common/command.c ****             }
 221:../../tmk_core/common/command.c ****             break;
 222:../../tmk_core/common/command.c **** #endif
 223:../../tmk_core/common/command.c ****         case KC_H:
 224:../../tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 225:../../tmk_core/common/command.c ****             command_common_help();
 226:../../tmk_core/common/command.c ****             break;
 227:../../tmk_core/common/command.c ****         case KC_C:
 228:../../tmk_core/common/command.c ****             debug_matrix   = false;
 229:../../tmk_core/common/command.c ****             debug_keyboard = false;
 230:../../tmk_core/common/command.c ****             debug_mouse    = false;
 231:../../tmk_core/common/command.c ****             debug_enable   = false;
 232:../../tmk_core/common/command.c ****             command_console_help();
 233:../../tmk_core/common/command.c ****             print("C> ");
 234:../../tmk_core/common/command.c ****             command_state = CONSOLE;
 235:../../tmk_core/common/command.c ****             break;
 236:../../tmk_core/common/command.c ****         case KC_PAUSE:
 237:../../tmk_core/common/command.c ****             clear_keyboard();
 238:../../tmk_core/common/command.c ****             print("\n\nbootloader... ");
 239:../../tmk_core/common/command.c ****             wait_ms(1000);
 240:../../tmk_core/common/command.c ****             bootloader_jump(); // not return
 241:../../tmk_core/common/command.c ****             break;
 242:../../tmk_core/common/command.c ****         case KC_D:
 243:../../tmk_core/common/command.c ****             if (debug_enable) {
 244:../../tmk_core/common/command.c ****                 print("\ndebug: off\n");
 245:../../tmk_core/common/command.c ****                 debug_matrix   = false;
 246:../../tmk_core/common/command.c ****                 debug_keyboard = false;
 247:../../tmk_core/common/command.c ****                 debug_mouse    = false;
 248:../../tmk_core/common/command.c ****                 debug_enable   = false;
 249:../../tmk_core/common/command.c ****             } else {
 250:../../tmk_core/common/command.c ****                 print("\ndebug: on\n");
 251:../../tmk_core/common/command.c ****                 debug_enable   = true;
 252:../../tmk_core/common/command.c ****             }
 253:../../tmk_core/common/command.c ****             break;
 254:../../tmk_core/common/command.c ****         case KC_X: // debug matrix toggle
 255:../../tmk_core/common/command.c ****             debug_matrix = !debug_matrix;
 256:../../tmk_core/common/command.c ****             if (debug_matrix) {
 257:../../tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 258:../../tmk_core/common/command.c ****                 debug_enable = true;
 259:../../tmk_core/common/command.c ****             } else {
 260:../../tmk_core/common/command.c ****                 print("\nmatrix: off\n");
 261:../../tmk_core/common/command.c ****             }
 262:../../tmk_core/common/command.c ****             break;
 263:../../tmk_core/common/command.c ****         case KC_K: // debug keyboard toggle
 264:../../tmk_core/common/command.c ****             debug_keyboard = !debug_keyboard;
 265:../../tmk_core/common/command.c ****             if (debug_keyboard) {
 266:../../tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 267:../../tmk_core/common/command.c ****                 debug_enable = true;
 268:../../tmk_core/common/command.c ****             } else {
 269:../../tmk_core/common/command.c ****                 print("\nkeyboard: off\n");
 270:../../tmk_core/common/command.c ****             }
 271:../../tmk_core/common/command.c ****             break;
 272:../../tmk_core/common/command.c ****         case KC_M: // debug mouse toggle
 273:../../tmk_core/common/command.c ****             debug_mouse = !debug_mouse;
 274:../../tmk_core/common/command.c ****             if (debug_mouse) {
 275:../../tmk_core/common/command.c ****                 print("\nmouse: on\n");
 276:../../tmk_core/common/command.c ****                 debug_enable = true;
 277:../../tmk_core/common/command.c ****             } else {
 278:../../tmk_core/common/command.c ****                 print("\nmouse: off\n");
 279:../../tmk_core/common/command.c ****             }
 280:../../tmk_core/common/command.c ****             break;
 281:../../tmk_core/common/command.c ****         case KC_V: // print version & information
 282:../../tmk_core/common/command.c ****             print("\n\t- Version -\n");
 283:../../tmk_core/common/command.c ****             print("DESC: " STR(DESCRIPTION) "\n");
 284:../../tmk_core/common/command.c ****             print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 285:../../tmk_core/common/command.c ****                   "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 286:../../tmk_core/common/command.c ****                   "VER: " STR(DEVICE_VER) "\n");
 287:../../tmk_core/common/command.c ****             print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
 288:../../tmk_core/common/command.c ****             /* build options */
 289:../../tmk_core/common/command.c ****             print("OPTIONS:"
 290:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 291:../../tmk_core/common/command.c ****             " PJRC"
 292:../../tmk_core/common/command.c **** #endif
 293:../../tmk_core/common/command.c **** #ifdef PROTOCOL_LUFA
 294:../../tmk_core/common/command.c ****             " LUFA"
 295:../../tmk_core/common/command.c **** #endif
 296:../../tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
 297:../../tmk_core/common/command.c ****             " VUSB"
 298:../../tmk_core/common/command.c **** #endif
 299:../../tmk_core/common/command.c **** #ifdef PROTOCOL_CHIBIOS
 300:../../tmk_core/common/command.c ****             " CHIBIOS"
 301:../../tmk_core/common/command.c **** #endif
 302:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 303:../../tmk_core/common/command.c ****             " BOOTMAGIC"
 304:../../tmk_core/common/command.c **** #endif
 305:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 306:../../tmk_core/common/command.c ****             " MOUSEKEY"
 307:../../tmk_core/common/command.c **** #endif
 308:../../tmk_core/common/command.c **** #ifdef EXTRAKEY_ENABLE
 309:../../tmk_core/common/command.c ****             " EXTRAKEY"
 310:../../tmk_core/common/command.c **** #endif
 311:../../tmk_core/common/command.c **** #ifdef CONSOLE_ENABLE
 312:../../tmk_core/common/command.c ****             " CONSOLE"
 313:../../tmk_core/common/command.c **** #endif
 314:../../tmk_core/common/command.c **** #ifdef COMMAND_ENABLE
 315:../../tmk_core/common/command.c ****             " COMMAND"
 316:../../tmk_core/common/command.c **** #endif
 317:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 318:../../tmk_core/common/command.c ****             " NKRO"
 319:../../tmk_core/common/command.c **** #endif
 320:../../tmk_core/common/command.c **** #ifdef KEYMAP_SECTION_ENABLE
 321:../../tmk_core/common/command.c ****             " KEYMAP_SECTION"
 322:../../tmk_core/common/command.c **** #endif
 323:../../tmk_core/common/command.c ****             " " STR(BOOTLOADER_SIZE) "\n");
 324:../../tmk_core/common/command.c **** 
 325:../../tmk_core/common/command.c ****             print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 326:../../tmk_core/common/command.c **** #if defined(__AVR__)
 327:../../tmk_core/common/command.c ****                   " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 328:../../tmk_core/common/command.c ****                   " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
 329:../../tmk_core/common/command.c **** #elif defined(__arm__)
 330:../../tmk_core/common/command.c ****             // TODO
 331:../../tmk_core/common/command.c ****             );
 332:../../tmk_core/common/command.c **** #endif
 333:../../tmk_core/common/command.c ****             break;
 334:../../tmk_core/common/command.c ****         case KC_S:
 335:../../tmk_core/common/command.c ****             print("\n\t- Status -\n");
 336:../../tmk_core/common/command.c ****             print_val_hex8(host_keyboard_leds());
 337:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_protocol);
 338:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_idle);
 339:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 340:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_nkro);
 341:../../tmk_core/common/command.c **** #endif
 342:../../tmk_core/common/command.c ****             print_val_hex32(timer_read32());
 343:../../tmk_core/common/command.c **** 
 344:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 345:../../tmk_core/common/command.c ****             print_val_hex8(UDCON);
 346:../../tmk_core/common/command.c ****             print_val_hex8(UDIEN);
 347:../../tmk_core/common/command.c ****             print_val_hex8(UDINT);
 348:../../tmk_core/common/command.c ****             print_val_hex8(usb_keyboard_leds);
 349:../../tmk_core/common/command.c ****             print_val_hex8(usb_keyboard_idle_count);
 350:../../tmk_core/common/command.c **** #endif
 351:../../tmk_core/common/command.c **** 
 352:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 353:../../tmk_core/common/command.c **** #   if USB_COUNT_SOF
 354:../../tmk_core/common/command.c ****             print_val_hex8(usbSofCount);
 355:../../tmk_core/common/command.c **** #   endif
 356:../../tmk_core/common/command.c **** #endif
 357:../../tmk_core/common/command.c ****             break;
 358:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 359:../../tmk_core/common/command.c ****         case KC_N:
 360:../../tmk_core/common/command.c ****             clear_keyboard(); //Prevents stuck keys.
 361:../../tmk_core/common/command.c ****             keyboard_nkro = !keyboard_nkro;
 362:../../tmk_core/common/command.c ****             if (keyboard_nkro) {
 363:../../tmk_core/common/command.c ****                 print("NKRO: on\n");
 364:../../tmk_core/common/command.c ****             } else {
 365:../../tmk_core/common/command.c ****                 print("NKRO: off\n");
 366:../../tmk_core/common/command.c ****             }
 367:../../tmk_core/common/command.c ****             break;
 368:../../tmk_core/common/command.c **** #endif
 369:../../tmk_core/common/command.c ****         case KC_ESC:
 370:../../tmk_core/common/command.c ****         case KC_GRV:
 371:../../tmk_core/common/command.c ****         case KC_0:
 372:../../tmk_core/common/command.c ****         case KC_F10:
 373:../../tmk_core/common/command.c ****             switch_default_layer(0);
 374:../../tmk_core/common/command.c ****             break;
 375:../../tmk_core/common/command.c ****         case KC_1 ... KC_9:
 376:../../tmk_core/common/command.c ****             switch_default_layer((code - KC_1) + 1);
 377:../../tmk_core/common/command.c ****             break;
 378:../../tmk_core/common/command.c ****         case KC_F1 ... KC_F9:
 379:../../tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 380:../../tmk_core/common/command.c ****             break;
 381:../../tmk_core/common/command.c ****         default:
 382:../../tmk_core/common/command.c ****             print("?");
 383:../../tmk_core/common/command.c ****             return false;
 384:../../tmk_core/common/command.c ****     }
 385:../../tmk_core/common/command.c ****     return true;
 386:../../tmk_core/common/command.c **** }
 387:../../tmk_core/common/command.c **** 
 388:../../tmk_core/common/command.c **** 
 389:../../tmk_core/common/command.c **** /***********************************************************
 390:../../tmk_core/common/command.c ****  * Command console
 391:../../tmk_core/common/command.c ****  ***********************************************************/
 392:../../tmk_core/common/command.c **** static void command_console_help(void)
 393:../../tmk_core/common/command.c **** {
 394:../../tmk_core/common/command.c ****     print("\n\t- Console -\n"
 395:../../tmk_core/common/command.c ****           "ESC/q:	quit\n"
 396:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 397:../../tmk_core/common/command.c ****           "m:	mousekey\n"
 398:../../tmk_core/common/command.c **** #endif
 399:../../tmk_core/common/command.c ****     );
 400:../../tmk_core/common/command.c **** }
 401:../../tmk_core/common/command.c **** 
 402:../../tmk_core/common/command.c **** static bool command_console(uint8_t code)
 403:../../tmk_core/common/command.c **** {
 404:../../tmk_core/common/command.c ****     switch (code) {
 405:../../tmk_core/common/command.c ****         case KC_H:
 406:../../tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 407:../../tmk_core/common/command.c ****             command_console_help();
 408:../../tmk_core/common/command.c ****             break;
 409:../../tmk_core/common/command.c ****         case KC_Q:
 410:../../tmk_core/common/command.c ****         case KC_ESC:
 411:../../tmk_core/common/command.c ****             command_state = ONESHOT;
 412:../../tmk_core/common/command.c ****             return false;
 413:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 414:../../tmk_core/common/command.c ****         case KC_M:
 415:../../tmk_core/common/command.c ****             mousekey_console_help();
 416:../../tmk_core/common/command.c ****             print("M> ");
 417:../../tmk_core/common/command.c ****             command_state = MOUSEKEY;
 418:../../tmk_core/common/command.c ****             return true;
 419:../../tmk_core/common/command.c **** #endif
 420:../../tmk_core/common/command.c ****         default:
 421:../../tmk_core/common/command.c ****             print("?");
 422:../../tmk_core/common/command.c ****             return false;
 423:../../tmk_core/common/command.c ****     }
 424:../../tmk_core/common/command.c ****     print("C> ");
 425:../../tmk_core/common/command.c ****     return true;
 426:../../tmk_core/common/command.c **** }
 427:../../tmk_core/common/command.c **** 
 428:../../tmk_core/common/command.c **** 
 429:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 430:../../tmk_core/common/command.c **** /***********************************************************
 431:../../tmk_core/common/command.c ****  * Mousekey console
 432:../../tmk_core/common/command.c ****  ***********************************************************/
 433:../../tmk_core/common/command.c **** static uint8_t mousekey_param = 0;
 434:../../tmk_core/common/command.c **** 
 435:../../tmk_core/common/command.c **** static void mousekey_param_print(void)
 436:../../tmk_core/common/command.c **** {
 437:../../tmk_core/common/command.c ****     print("\n\t- Values -\n");
 438:../../tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 439:../../tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 440:../../tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 441:../../tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 442:../../tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 443:../../tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 444:../../tmk_core/common/command.c **** }
 445:../../tmk_core/common/command.c **** 
 446:../../tmk_core/common/command.c **** //#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
 447:../../tmk_core/common/command.c **** #define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
 448:../../tmk_core/common/command.c **** static void mousekey_param_inc(uint8_t param, uint8_t inc)
 449:../../tmk_core/common/command.c **** {
 450:../../tmk_core/common/command.c ****     switch (param) {
 451:../../tmk_core/common/command.c ****         case 1:
 452:../../tmk_core/common/command.c ****             if (mk_delay + inc < UINT8_MAX)
 453:../../tmk_core/common/command.c ****                 mk_delay += inc;
 454:../../tmk_core/common/command.c ****             else
 455:../../tmk_core/common/command.c ****                 mk_delay = UINT8_MAX;
 456:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 457:../../tmk_core/common/command.c ****             break;
 458:../../tmk_core/common/command.c ****         case 2:
 459:../../tmk_core/common/command.c ****             if (mk_interval + inc < UINT8_MAX)
 460:../../tmk_core/common/command.c ****                 mk_interval += inc;
 461:../../tmk_core/common/command.c ****             else
 462:../../tmk_core/common/command.c ****                 mk_interval = UINT8_MAX;
 463:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 464:../../tmk_core/common/command.c ****             break;
 465:../../tmk_core/common/command.c ****         case 3:
 466:../../tmk_core/common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
 467:../../tmk_core/common/command.c ****                 mk_max_speed += inc;
 468:../../tmk_core/common/command.c ****             else
 469:../../tmk_core/common/command.c ****                 mk_max_speed = UINT8_MAX;
 470:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 471:../../tmk_core/common/command.c ****             break;
 472:../../tmk_core/common/command.c ****         case 4:
 473:../../tmk_core/common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 474:../../tmk_core/common/command.c ****                 mk_time_to_max += inc;
 475:../../tmk_core/common/command.c ****             else
 476:../../tmk_core/common/command.c ****                 mk_time_to_max = UINT8_MAX;
 477:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 478:../../tmk_core/common/command.c ****             break;
 479:../../tmk_core/common/command.c ****         case 5:
 480:../../tmk_core/common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 481:../../tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 482:../../tmk_core/common/command.c ****             else
 483:../../tmk_core/common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 484:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 485:../../tmk_core/common/command.c ****             break;
 486:../../tmk_core/common/command.c ****         case 6:
 487:../../tmk_core/common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 488:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 489:../../tmk_core/common/command.c ****             else
 490:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 491:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 492:../../tmk_core/common/command.c ****             break;
 493:../../tmk_core/common/command.c ****     }
 494:../../tmk_core/common/command.c **** }
 495:../../tmk_core/common/command.c **** 
 496:../../tmk_core/common/command.c **** static void mousekey_param_dec(uint8_t param, uint8_t dec)
 497:../../tmk_core/common/command.c **** {
 498:../../tmk_core/common/command.c ****     switch (param) {
 499:../../tmk_core/common/command.c ****         case 1:
 500:../../tmk_core/common/command.c ****             if (mk_delay > dec)
 501:../../tmk_core/common/command.c ****                 mk_delay -= dec;
 502:../../tmk_core/common/command.c ****             else
 503:../../tmk_core/common/command.c ****                 mk_delay = 0;
 504:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 505:../../tmk_core/common/command.c ****             break;
 506:../../tmk_core/common/command.c ****         case 2:
 507:../../tmk_core/common/command.c ****             if (mk_interval > dec)
 508:../../tmk_core/common/command.c ****                 mk_interval -= dec;
 509:../../tmk_core/common/command.c ****             else
 510:../../tmk_core/common/command.c ****                 mk_interval = 0;
 511:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 512:../../tmk_core/common/command.c ****             break;
 513:../../tmk_core/common/command.c ****         case 3:
 514:../../tmk_core/common/command.c ****             if (mk_max_speed > dec)
 515:../../tmk_core/common/command.c ****                 mk_max_speed -= dec;
 516:../../tmk_core/common/command.c ****             else
 517:../../tmk_core/common/command.c ****                 mk_max_speed = 0;
 518:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 519:../../tmk_core/common/command.c ****             break;
 520:../../tmk_core/common/command.c ****         case 4:
 521:../../tmk_core/common/command.c ****             if (mk_time_to_max > dec)
 522:../../tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 523:../../tmk_core/common/command.c ****             else
 524:../../tmk_core/common/command.c ****                 mk_time_to_max = 0;
 525:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 526:../../tmk_core/common/command.c ****             break;
 527:../../tmk_core/common/command.c ****         case 5:
 528:../../tmk_core/common/command.c ****             if (mk_wheel_max_speed > dec)
 529:../../tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 530:../../tmk_core/common/command.c ****             else
 531:../../tmk_core/common/command.c ****                 mk_wheel_max_speed = 0;
 532:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 533:../../tmk_core/common/command.c ****             break;
 534:../../tmk_core/common/command.c ****         case 6:
 535:../../tmk_core/common/command.c ****             if (mk_wheel_time_to_max > dec)
 536:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 537:../../tmk_core/common/command.c ****             else
 538:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max = 0;
 539:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 540:../../tmk_core/common/command.c ****             break;
 541:../../tmk_core/common/command.c ****     }
 542:../../tmk_core/common/command.c **** }
 543:../../tmk_core/common/command.c **** 
 544:../../tmk_core/common/command.c **** static void mousekey_console_help(void)
 545:../../tmk_core/common/command.c **** {
  15               		.loc 1 545 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 546:../../tmk_core/common/command.c ****     print("\n\t- Mousekey -\n"
  21               		.loc 1 546 0
  22 0000 80E0      		ldi r24,lo8(__c.2987)
  23 0002 90E0      		ldi r25,hi8(__c.2987)
  24 0004 0E94 0000 		call xputs
  25               	.LVL0:
 547:../../tmk_core/common/command.c ****           "ESC/q:	quit\n"
 548:../../tmk_core/common/command.c ****           "1:	delay(*10ms)\n"
 549:../../tmk_core/common/command.c ****           "2:	interval(ms)\n"
 550:../../tmk_core/common/command.c ****           "3:	max_speed\n"
 551:../../tmk_core/common/command.c ****           "4:	time_to_max\n"
 552:../../tmk_core/common/command.c ****           "5:	wheel_max_speed\n"
 553:../../tmk_core/common/command.c ****           "6:	wheel_time_to_max\n"
 554:../../tmk_core/common/command.c ****           "\n"
 555:../../tmk_core/common/command.c ****           "p:	print values\n"
 556:../../tmk_core/common/command.c ****           "d:	set defaults\n"
 557:../../tmk_core/common/command.c ****           "up:	+1\n"
 558:../../tmk_core/common/command.c ****           "down:	-1\n"
 559:../../tmk_core/common/command.c ****           "pgup:	+10\n"
 560:../../tmk_core/common/command.c ****           "pgdown:	-10\n"
 561:../../tmk_core/common/command.c ****           "\n"
 562:../../tmk_core/common/command.c ****           "speed = delta * max_speed * (repeat / time_to_max)\n");
 563:../../tmk_core/common/command.c ****     xprintf("where delta: cursor=%d, wheel=%d\n" 
  26               		.loc 1 563 0
  27 0008 1F92      		push __zero_reg__
  28               	.LCFI0:
  29               		.cfi_def_cfa_offset 3
  30 000a 81E0      		ldi r24,lo8(1)
  31 000c 8F93      		push r24
  32               	.LCFI1:
  33               		.cfi_def_cfa_offset 4
  34 000e 1F92      		push __zero_reg__
  35               	.LCFI2:
  36               		.cfi_def_cfa_offset 5
  37 0010 85E0      		ldi r24,lo8(5)
  38 0012 8F93      		push r24
  39               	.LCFI3:
  40               		.cfi_def_cfa_offset 6
  41 0014 80E0      		ldi r24,lo8(__c.2989)
  42 0016 90E0      		ldi r25,hi8(__c.2989)
  43 0018 9F93      		push r25
  44               	.LCFI4:
  45               		.cfi_def_cfa_offset 7
  46 001a 8F93      		push r24
  47               	.LCFI5:
  48               		.cfi_def_cfa_offset 8
  49 001c 0E94 0000 		call __xprintf
  50               	.LVL1:
 564:../../tmk_core/common/command.c ****             "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_D
 565:../../tmk_core/common/command.c **** }
  51               		.loc 1 565 0
  52 0020 0F90      		pop __tmp_reg__
  53 0022 0F90      		pop __tmp_reg__
  54 0024 0F90      		pop __tmp_reg__
  55 0026 0F90      		pop __tmp_reg__
  56 0028 0F90      		pop __tmp_reg__
  57 002a 0F90      		pop __tmp_reg__
  58               	.LCFI6:
  59               		.cfi_def_cfa_offset 2
  60 002c 0895      		ret
  61               		.cfi_endproc
  62               	.LFE21:
  64               		.section	.text.mousekey_param_inc,"ax",@progbits
  66               	mousekey_param_inc:
  67               	.LFB19:
 449:../../tmk_core/common/command.c ****     switch (param) {
  68               		.loc 1 449 0
  69               		.cfi_startproc
  70               	.LVL2:
  71               	/* prologue: function */
  72               	/* frame size = 0 */
  73               	/* stack size = 0 */
  74               	.L__stack_usage = 0
 450:../../tmk_core/common/command.c ****         case 1:
  75               		.loc 1 450 0
  76 0000 8330      		cpi r24,lo8(3)
  77 0002 01F0      		breq .L4
  78 0004 00F4      		brsh .L5
  79 0006 8130      		cpi r24,lo8(1)
  80 0008 01F0      		breq .L6
  81 000a 8230      		cpi r24,lo8(2)
  82 000c 01F0      		breq .L7
  83 000e 0895      		ret
  84               	.L5:
  85 0010 8530      		cpi r24,lo8(5)
  86 0012 01F4      		brne .+2
  87 0014 00C0      		rjmp .L8
  88 0016 00F4      		brsh .+2
  89 0018 00C0      		rjmp .L9
  90 001a 8630      		cpi r24,lo8(6)
  91 001c 01F4      		brne .+2
  92 001e 00C0      		rjmp .L10
  93 0020 0895      		ret
  94               	.L6:
 452:../../tmk_core/common/command.c ****                 mk_delay += inc;
  95               		.loc 1 452 0
  96 0022 8091 0000 		lds r24,mk_delay
  97               	.LVL3:
  98 0026 262F      		mov r18,r22
  99 0028 30E0      		ldi r19,0
 100 002a 280F      		add r18,r24
 101 002c 311D      		adc r19,__zero_reg__
 102 002e 2F3F      		cpi r18,-1
 103 0030 3105      		cpc r19,__zero_reg__
 104 0032 04F4      		brge .L11
 453:../../tmk_core/common/command.c ****             else
 105               		.loc 1 453 0
 106 0034 680F      		add r22,r24
 107               	.LVL4:
 108 0036 6093 0000 		sts mk_delay,r22
 109 003a 00C0      		rjmp .L12
 110               	.LVL5:
 111               	.L11:
 455:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 112               		.loc 1 455 0
 113 003c 8FEF      		ldi r24,lo8(-1)
 114 003e 8093 0000 		sts mk_delay,r24
 115               	.LVL6:
 116               	.L12:
 456:../../tmk_core/common/command.c ****             break;
 117               		.loc 1 456 0
 118 0042 8091 0000 		lds r24,mk_delay
 119 0046 1F92      		push __zero_reg__
 120               	.LCFI7:
 121               		.cfi_remember_state
 122               		.cfi_def_cfa_offset 3
 123 0048 8F93      		push r24
 124               	.LCFI8:
 125               		.cfi_def_cfa_offset 4
 126 004a 80E0      		ldi r24,lo8(__c.2943)
 127 004c 90E0      		ldi r25,hi8(__c.2943)
 128 004e 00C0      		rjmp .L23
 129               	.LVL7:
 130               	.L7:
 131               	.LCFI9:
 132               		.cfi_restore_state
 459:../../tmk_core/common/command.c ****                 mk_interval += inc;
 133               		.loc 1 459 0
 134 0050 8091 0000 		lds r24,mk_interval
 135               	.LVL8:
 136 0054 262F      		mov r18,r22
 137 0056 30E0      		ldi r19,0
 138 0058 280F      		add r18,r24
 139 005a 311D      		adc r19,__zero_reg__
 140 005c 2F3F      		cpi r18,-1
 141 005e 3105      		cpc r19,__zero_reg__
 142 0060 04F4      		brge .L13
 460:../../tmk_core/common/command.c ****             else
 143               		.loc 1 460 0
 144 0062 680F      		add r22,r24
 145               	.LVL9:
 146 0064 6093 0000 		sts mk_interval,r22
 147 0068 00C0      		rjmp .L14
 148               	.LVL10:
 149               	.L13:
 462:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 150               		.loc 1 462 0
 151 006a 8FEF      		ldi r24,lo8(-1)
 152 006c 8093 0000 		sts mk_interval,r24
 153               	.LVL11:
 154               	.L14:
 463:../../tmk_core/common/command.c ****             break;
 155               		.loc 1 463 0
 156 0070 8091 0000 		lds r24,mk_interval
 157 0074 1F92      		push __zero_reg__
 158               	.LCFI10:
 159               		.cfi_remember_state
 160               		.cfi_def_cfa_offset 3
 161 0076 8F93      		push r24
 162               	.LCFI11:
 163               		.cfi_def_cfa_offset 4
 164 0078 80E0      		ldi r24,lo8(__c.2947)
 165 007a 90E0      		ldi r25,hi8(__c.2947)
 166 007c 00C0      		rjmp .L23
 167               	.LVL12:
 168               	.L4:
 169               	.LCFI12:
 170               		.cfi_restore_state
 466:../../tmk_core/common/command.c ****                 mk_max_speed += inc;
 171               		.loc 1 466 0
 172 007e 8091 0000 		lds r24,mk_max_speed
 173               	.LVL13:
 174 0082 262F      		mov r18,r22
 175 0084 30E0      		ldi r19,0
 176 0086 280F      		add r18,r24
 177 0088 311D      		adc r19,__zero_reg__
 178 008a 2F3F      		cpi r18,-1
 179 008c 3105      		cpc r19,__zero_reg__
 180 008e 04F4      		brge .L15
 467:../../tmk_core/common/command.c ****             else
 181               		.loc 1 467 0
 182 0090 680F      		add r22,r24
 183               	.LVL14:
 184 0092 6093 0000 		sts mk_max_speed,r22
 185 0096 00C0      		rjmp .L16
 186               	.LVL15:
 187               	.L15:
 469:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 188               		.loc 1 469 0
 189 0098 8FEF      		ldi r24,lo8(-1)
 190 009a 8093 0000 		sts mk_max_speed,r24
 191               	.LVL16:
 192               	.L16:
 470:../../tmk_core/common/command.c ****             break;
 193               		.loc 1 470 0
 194 009e 8091 0000 		lds r24,mk_max_speed
 195 00a2 1F92      		push __zero_reg__
 196               	.LCFI13:
 197               		.cfi_remember_state
 198               		.cfi_def_cfa_offset 3
 199 00a4 8F93      		push r24
 200               	.LCFI14:
 201               		.cfi_def_cfa_offset 4
 202 00a6 80E0      		ldi r24,lo8(__c.2950)
 203 00a8 90E0      		ldi r25,hi8(__c.2950)
 204 00aa 00C0      		rjmp .L23
 205               	.LVL17:
 206               	.L9:
 207               	.LCFI15:
 208               		.cfi_restore_state
 473:../../tmk_core/common/command.c ****                 mk_time_to_max += inc;
 209               		.loc 1 473 0
 210 00ac 8091 0000 		lds r24,mk_time_to_max
 211               	.LVL18:
 212 00b0 262F      		mov r18,r22
 213 00b2 30E0      		ldi r19,0
 214 00b4 280F      		add r18,r24
 215 00b6 311D      		adc r19,__zero_reg__
 216 00b8 2F3F      		cpi r18,-1
 217 00ba 3105      		cpc r19,__zero_reg__
 218 00bc 04F4      		brge .L17
 474:../../tmk_core/common/command.c ****             else
 219               		.loc 1 474 0
 220 00be 680F      		add r22,r24
 221               	.LVL19:
 222 00c0 6093 0000 		sts mk_time_to_max,r22
 223 00c4 00C0      		rjmp .L18
 224               	.LVL20:
 225               	.L17:
 476:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 226               		.loc 1 476 0
 227 00c6 8FEF      		ldi r24,lo8(-1)
 228 00c8 8093 0000 		sts mk_time_to_max,r24
 229               	.LVL21:
 230               	.L18:
 477:../../tmk_core/common/command.c ****             break;
 231               		.loc 1 477 0
 232 00cc 8091 0000 		lds r24,mk_time_to_max
 233 00d0 1F92      		push __zero_reg__
 234               	.LCFI16:
 235               		.cfi_remember_state
 236               		.cfi_def_cfa_offset 3
 237 00d2 8F93      		push r24
 238               	.LCFI17:
 239               		.cfi_def_cfa_offset 4
 240 00d4 80E0      		ldi r24,lo8(__c.2953)
 241 00d6 90E0      		ldi r25,hi8(__c.2953)
 242 00d8 00C0      		rjmp .L23
 243               	.LVL22:
 244               	.L8:
 245               	.LCFI18:
 246               		.cfi_restore_state
 480:../../tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 247               		.loc 1 480 0
 248 00da 8091 0000 		lds r24,mk_wheel_max_speed
 249               	.LVL23:
 250 00de 262F      		mov r18,r22
 251 00e0 30E0      		ldi r19,0
 252 00e2 280F      		add r18,r24
 253 00e4 311D      		adc r19,__zero_reg__
 254 00e6 2F3F      		cpi r18,-1
 255 00e8 3105      		cpc r19,__zero_reg__
 256 00ea 04F4      		brge .L19
 481:../../tmk_core/common/command.c ****             else
 257               		.loc 1 481 0
 258 00ec 680F      		add r22,r24
 259               	.LVL24:
 260 00ee 6093 0000 		sts mk_wheel_max_speed,r22
 261 00f2 00C0      		rjmp .L20
 262               	.LVL25:
 263               	.L19:
 483:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 264               		.loc 1 483 0
 265 00f4 8FEF      		ldi r24,lo8(-1)
 266 00f6 8093 0000 		sts mk_wheel_max_speed,r24
 267               	.LVL26:
 268               	.L20:
 484:../../tmk_core/common/command.c ****             break;
 269               		.loc 1 484 0
 270 00fa 8091 0000 		lds r24,mk_wheel_max_speed
 271 00fe 1F92      		push __zero_reg__
 272               	.LCFI19:
 273               		.cfi_remember_state
 274               		.cfi_def_cfa_offset 3
 275 0100 8F93      		push r24
 276               	.LCFI20:
 277               		.cfi_def_cfa_offset 4
 278 0102 80E0      		ldi r24,lo8(__c.2956)
 279 0104 90E0      		ldi r25,hi8(__c.2956)
 280 0106 00C0      		rjmp .L23
 281               	.LVL27:
 282               	.L10:
 283               	.LCFI21:
 284               		.cfi_restore_state
 487:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 285               		.loc 1 487 0
 286 0108 8091 0000 		lds r24,mk_wheel_time_to_max
 287               	.LVL28:
 288 010c 262F      		mov r18,r22
 289 010e 30E0      		ldi r19,0
 290 0110 280F      		add r18,r24
 291 0112 311D      		adc r19,__zero_reg__
 292 0114 2F3F      		cpi r18,-1
 293 0116 3105      		cpc r19,__zero_reg__
 294 0118 04F4      		brge .L21
 488:../../tmk_core/common/command.c ****             else
 295               		.loc 1 488 0
 296 011a 680F      		add r22,r24
 297               	.LVL29:
 298 011c 6093 0000 		sts mk_wheel_time_to_max,r22
 299 0120 00C0      		rjmp .L22
 300               	.LVL30:
 301               	.L21:
 490:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 302               		.loc 1 490 0
 303 0122 8FEF      		ldi r24,lo8(-1)
 304 0124 8093 0000 		sts mk_wheel_time_to_max,r24
 305               	.LVL31:
 306               	.L22:
 491:../../tmk_core/common/command.c ****             break;
 307               		.loc 1 491 0
 308 0128 8091 0000 		lds r24,mk_wheel_time_to_max
 309 012c 1F92      		push __zero_reg__
 310               	.LCFI22:
 311               		.cfi_def_cfa_offset 3
 312 012e 8F93      		push r24
 313               	.LCFI23:
 314               		.cfi_def_cfa_offset 4
 315 0130 80E0      		ldi r24,lo8(__c.2959)
 316 0132 90E0      		ldi r25,hi8(__c.2959)
 317               	.L23:
 318 0134 9F93      		push r25
 319               	.LCFI24:
 320               		.cfi_def_cfa_offset 5
 321 0136 8F93      		push r24
 322               	.LCFI25:
 323               		.cfi_def_cfa_offset 6
 324 0138 0E94 0000 		call __xprintf
 325               	.LVL32:
 492:../../tmk_core/common/command.c ****     }
 326               		.loc 1 492 0
 327 013c 0F90      		pop __tmp_reg__
 328 013e 0F90      		pop __tmp_reg__
 329 0140 0F90      		pop __tmp_reg__
 330 0142 0F90      		pop __tmp_reg__
 331               	.LCFI26:
 332               		.cfi_def_cfa_offset 2
 333 0144 0895      		ret
 334               		.cfi_endproc
 335               	.LFE19:
 337               		.section	.text.mousekey_param_dec,"ax",@progbits
 339               	mousekey_param_dec:
 340               	.LFB20:
 497:../../tmk_core/common/command.c ****     switch (param) {
 341               		.loc 1 497 0
 342               		.cfi_startproc
 343               	.LVL33:
 344               	/* prologue: function */
 345               	/* frame size = 0 */
 346               	/* stack size = 0 */
 347               	.L__stack_usage = 0
 498:../../tmk_core/common/command.c ****         case 1:
 348               		.loc 1 498 0
 349 0000 8330      		cpi r24,lo8(3)
 350 0002 01F0      		breq .L27
 351 0004 00F4      		brsh .L28
 352 0006 8130      		cpi r24,lo8(1)
 353 0008 01F0      		breq .L29
 354 000a 8230      		cpi r24,lo8(2)
 355 000c 01F0      		breq .L30
 356 000e 0895      		ret
 357               	.L28:
 358 0010 8530      		cpi r24,lo8(5)
 359 0012 01F4      		brne .+2
 360 0014 00C0      		rjmp .L31
 361 0016 00F0      		brlo .L32
 362 0018 8630      		cpi r24,lo8(6)
 363 001a 01F4      		brne .+2
 364 001c 00C0      		rjmp .L33
 365 001e 0895      		ret
 366               	.L29:
 500:../../tmk_core/common/command.c ****                 mk_delay -= dec;
 367               		.loc 1 500 0
 368 0020 8091 0000 		lds r24,mk_delay
 369               	.LVL34:
 370 0024 6817      		cp r22,r24
 371 0026 00F4      		brsh .L34
 501:../../tmk_core/common/command.c ****             else
 372               		.loc 1 501 0
 373 0028 861B      		sub r24,r22
 374 002a 8093 0000 		sts mk_delay,r24
 375 002e 00C0      		rjmp .L35
 376               	.L34:
 503:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 377               		.loc 1 503 0
 378 0030 1092 0000 		sts mk_delay,__zero_reg__
 379               	.L35:
 504:../../tmk_core/common/command.c ****             break;
 380               		.loc 1 504 0
 381 0034 8091 0000 		lds r24,mk_delay
 382 0038 1F92      		push __zero_reg__
 383               	.LCFI27:
 384               		.cfi_remember_state
 385               		.cfi_def_cfa_offset 3
 386 003a 8F93      		push r24
 387               	.LCFI28:
 388               		.cfi_def_cfa_offset 4
 389 003c 80E0      		ldi r24,lo8(__c.2966)
 390 003e 90E0      		ldi r25,hi8(__c.2966)
 391 0040 00C0      		rjmp .L46
 392               	.LVL35:
 393               	.L30:
 394               	.LCFI29:
 395               		.cfi_restore_state
 507:../../tmk_core/common/command.c ****                 mk_interval -= dec;
 396               		.loc 1 507 0
 397 0042 8091 0000 		lds r24,mk_interval
 398               	.LVL36:
 399 0046 6817      		cp r22,r24
 400 0048 00F4      		brsh .L36
 508:../../tmk_core/common/command.c ****             else
 401               		.loc 1 508 0
 402 004a 861B      		sub r24,r22
 403 004c 8093 0000 		sts mk_interval,r24
 404 0050 00C0      		rjmp .L37
 405               	.L36:
 510:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 406               		.loc 1 510 0
 407 0052 1092 0000 		sts mk_interval,__zero_reg__
 408               	.L37:
 511:../../tmk_core/common/command.c ****             break;
 409               		.loc 1 511 0
 410 0056 8091 0000 		lds r24,mk_interval
 411 005a 1F92      		push __zero_reg__
 412               	.LCFI30:
 413               		.cfi_remember_state
 414               		.cfi_def_cfa_offset 3
 415 005c 8F93      		push r24
 416               	.LCFI31:
 417               		.cfi_def_cfa_offset 4
 418 005e 80E0      		ldi r24,lo8(__c.2970)
 419 0060 90E0      		ldi r25,hi8(__c.2970)
 420 0062 00C0      		rjmp .L46
 421               	.LVL37:
 422               	.L27:
 423               	.LCFI32:
 424               		.cfi_restore_state
 514:../../tmk_core/common/command.c ****                 mk_max_speed -= dec;
 425               		.loc 1 514 0
 426 0064 8091 0000 		lds r24,mk_max_speed
 427               	.LVL38:
 428 0068 6817      		cp r22,r24
 429 006a 00F4      		brsh .L38
 515:../../tmk_core/common/command.c ****             else
 430               		.loc 1 515 0
 431 006c 861B      		sub r24,r22
 432 006e 8093 0000 		sts mk_max_speed,r24
 433 0072 00C0      		rjmp .L39
 434               	.L38:
 517:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 435               		.loc 1 517 0
 436 0074 1092 0000 		sts mk_max_speed,__zero_reg__
 437               	.L39:
 518:../../tmk_core/common/command.c ****             break;
 438               		.loc 1 518 0
 439 0078 8091 0000 		lds r24,mk_max_speed
 440 007c 1F92      		push __zero_reg__
 441               	.LCFI33:
 442               		.cfi_remember_state
 443               		.cfi_def_cfa_offset 3
 444 007e 8F93      		push r24
 445               	.LCFI34:
 446               		.cfi_def_cfa_offset 4
 447 0080 80E0      		ldi r24,lo8(__c.2973)
 448 0082 90E0      		ldi r25,hi8(__c.2973)
 449 0084 00C0      		rjmp .L46
 450               	.LVL39:
 451               	.L32:
 452               	.LCFI35:
 453               		.cfi_restore_state
 521:../../tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 454               		.loc 1 521 0
 455 0086 8091 0000 		lds r24,mk_time_to_max
 456               	.LVL40:
 457 008a 6817      		cp r22,r24
 458 008c 00F4      		brsh .L40
 522:../../tmk_core/common/command.c ****             else
 459               		.loc 1 522 0
 460 008e 861B      		sub r24,r22
 461 0090 8093 0000 		sts mk_time_to_max,r24
 462 0094 00C0      		rjmp .L41
 463               	.L40:
 524:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 464               		.loc 1 524 0
 465 0096 1092 0000 		sts mk_time_to_max,__zero_reg__
 466               	.L41:
 525:../../tmk_core/common/command.c ****             break;
 467               		.loc 1 525 0
 468 009a 8091 0000 		lds r24,mk_time_to_max
 469 009e 1F92      		push __zero_reg__
 470               	.LCFI36:
 471               		.cfi_remember_state
 472               		.cfi_def_cfa_offset 3
 473 00a0 8F93      		push r24
 474               	.LCFI37:
 475               		.cfi_def_cfa_offset 4
 476 00a2 80E0      		ldi r24,lo8(__c.2976)
 477 00a4 90E0      		ldi r25,hi8(__c.2976)
 478 00a6 00C0      		rjmp .L46
 479               	.LVL41:
 480               	.L31:
 481               	.LCFI38:
 482               		.cfi_restore_state
 528:../../tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 483               		.loc 1 528 0
 484 00a8 8091 0000 		lds r24,mk_wheel_max_speed
 485               	.LVL42:
 486 00ac 6817      		cp r22,r24
 487 00ae 00F4      		brsh .L42
 529:../../tmk_core/common/command.c ****             else
 488               		.loc 1 529 0
 489 00b0 861B      		sub r24,r22
 490 00b2 8093 0000 		sts mk_wheel_max_speed,r24
 491 00b6 00C0      		rjmp .L43
 492               	.L42:
 531:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 493               		.loc 1 531 0
 494 00b8 1092 0000 		sts mk_wheel_max_speed,__zero_reg__
 495               	.L43:
 532:../../tmk_core/common/command.c ****             break;
 496               		.loc 1 532 0
 497 00bc 8091 0000 		lds r24,mk_wheel_max_speed
 498 00c0 1F92      		push __zero_reg__
 499               	.LCFI39:
 500               		.cfi_remember_state
 501               		.cfi_def_cfa_offset 3
 502 00c2 8F93      		push r24
 503               	.LCFI40:
 504               		.cfi_def_cfa_offset 4
 505 00c4 80E0      		ldi r24,lo8(__c.2979)
 506 00c6 90E0      		ldi r25,hi8(__c.2979)
 507 00c8 00C0      		rjmp .L46
 508               	.LVL43:
 509               	.L33:
 510               	.LCFI41:
 511               		.cfi_restore_state
 535:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 512               		.loc 1 535 0
 513 00ca 8091 0000 		lds r24,mk_wheel_time_to_max
 514               	.LVL44:
 515 00ce 6817      		cp r22,r24
 516 00d0 00F4      		brsh .L44
 536:../../tmk_core/common/command.c ****             else
 517               		.loc 1 536 0
 518 00d2 861B      		sub r24,r22
 519 00d4 8093 0000 		sts mk_wheel_time_to_max,r24
 520 00d8 00C0      		rjmp .L45
 521               	.L44:
 538:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 522               		.loc 1 538 0
 523 00da 1092 0000 		sts mk_wheel_time_to_max,__zero_reg__
 524               	.L45:
 539:../../tmk_core/common/command.c ****             break;
 525               		.loc 1 539 0
 526 00de 8091 0000 		lds r24,mk_wheel_time_to_max
 527 00e2 1F92      		push __zero_reg__
 528               	.LCFI42:
 529               		.cfi_def_cfa_offset 3
 530 00e4 8F93      		push r24
 531               	.LCFI43:
 532               		.cfi_def_cfa_offset 4
 533 00e6 80E0      		ldi r24,lo8(__c.2982)
 534 00e8 90E0      		ldi r25,hi8(__c.2982)
 535               	.L46:
 536 00ea 9F93      		push r25
 537               	.LCFI44:
 538               		.cfi_def_cfa_offset 5
 539 00ec 8F93      		push r24
 540               	.LCFI45:
 541               		.cfi_def_cfa_offset 6
 542 00ee 0E94 0000 		call __xprintf
 543               	.LVL45:
 540:../../tmk_core/common/command.c ****     }
 544               		.loc 1 540 0
 545 00f2 0F90      		pop __tmp_reg__
 546 00f4 0F90      		pop __tmp_reg__
 547 00f6 0F90      		pop __tmp_reg__
 548 00f8 0F90      		pop __tmp_reg__
 549               	.LCFI46:
 550               		.cfi_def_cfa_offset 2
 551 00fa 0895      		ret
 552               		.cfi_endproc
 553               	.LFE20:
 555               		.section	.text.switch_default_layer,"ax",@progbits
 557               	switch_default_layer:
 558               	.LFB24:
 566:../../tmk_core/common/command.c **** 
 567:../../tmk_core/common/command.c **** static bool mousekey_console(uint8_t code)
 568:../../tmk_core/common/command.c **** {
 569:../../tmk_core/common/command.c ****     switch (code) {
 570:../../tmk_core/common/command.c ****         case KC_H:
 571:../../tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 572:../../tmk_core/common/command.c ****             mousekey_console_help();
 573:../../tmk_core/common/command.c ****             break;
 574:../../tmk_core/common/command.c ****         case KC_Q:
 575:../../tmk_core/common/command.c ****         case KC_ESC:
 576:../../tmk_core/common/command.c ****             if (mousekey_param) {
 577:../../tmk_core/common/command.c ****                 mousekey_param = 0;
 578:../../tmk_core/common/command.c ****             } else {
 579:../../tmk_core/common/command.c ****                 print("C> ");
 580:../../tmk_core/common/command.c ****                 command_state = CONSOLE;
 581:../../tmk_core/common/command.c ****                 return false;
 582:../../tmk_core/common/command.c ****             }
 583:../../tmk_core/common/command.c ****             break;
 584:../../tmk_core/common/command.c ****         case KC_P:
 585:../../tmk_core/common/command.c ****             mousekey_param_print();
 586:../../tmk_core/common/command.c ****             break;
 587:../../tmk_core/common/command.c ****         case KC_1:
 588:../../tmk_core/common/command.c ****         case KC_2:
 589:../../tmk_core/common/command.c ****         case KC_3:
 590:../../tmk_core/common/command.c ****         case KC_4:
 591:../../tmk_core/common/command.c ****         case KC_5:
 592:../../tmk_core/common/command.c ****         case KC_6:
 593:../../tmk_core/common/command.c ****             mousekey_param = numkey2num(code);
 594:../../tmk_core/common/command.c ****             break;
 595:../../tmk_core/common/command.c ****         case KC_UP:
 596:../../tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 597:../../tmk_core/common/command.c ****             break;
 598:../../tmk_core/common/command.c ****         case KC_DOWN:
 599:../../tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 600:../../tmk_core/common/command.c ****             break;
 601:../../tmk_core/common/command.c ****         case KC_PGUP:
 602:../../tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 603:../../tmk_core/common/command.c ****             break;
 604:../../tmk_core/common/command.c ****         case KC_PGDN:
 605:../../tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 606:../../tmk_core/common/command.c ****             break;
 607:../../tmk_core/common/command.c ****         case KC_D:
 608:../../tmk_core/common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 609:../../tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 610:../../tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 611:../../tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 612:../../tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 613:../../tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 614:../../tmk_core/common/command.c ****             print("set default\n");
 615:../../tmk_core/common/command.c ****             break;
 616:../../tmk_core/common/command.c ****         default:
 617:../../tmk_core/common/command.c ****             print("?");
 618:../../tmk_core/common/command.c ****             return false;
 619:../../tmk_core/common/command.c ****     }
 620:../../tmk_core/common/command.c ****     if (mousekey_param) {
 621:../../tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 622:../../tmk_core/common/command.c ****     } else {
 623:../../tmk_core/common/command.c ****         print("M>" );
 624:../../tmk_core/common/command.c ****     }
 625:../../tmk_core/common/command.c ****     return true;
 626:../../tmk_core/common/command.c **** }
 627:../../tmk_core/common/command.c **** #endif
 628:../../tmk_core/common/command.c **** 
 629:../../tmk_core/common/command.c **** 
 630:../../tmk_core/common/command.c **** /***********************************************************
 631:../../tmk_core/common/command.c ****  * Utilities
 632:../../tmk_core/common/command.c ****  ***********************************************************/
 633:../../tmk_core/common/command.c **** #if MOUSEKEY_ENABLE
 634:../../tmk_core/common/command.c **** static uint8_t numkey2num(uint8_t code)
 635:../../tmk_core/common/command.c **** {
 636:../../tmk_core/common/command.c ****     switch (code) {
 637:../../tmk_core/common/command.c ****         case KC_1: return 1;
 638:../../tmk_core/common/command.c ****         case KC_2: return 2;
 639:../../tmk_core/common/command.c ****         case KC_3: return 3;
 640:../../tmk_core/common/command.c ****         case KC_4: return 4;
 641:../../tmk_core/common/command.c ****         case KC_5: return 5;
 642:../../tmk_core/common/command.c ****         case KC_6: return 6;
 643:../../tmk_core/common/command.c ****         case KC_7: return 7;
 644:../../tmk_core/common/command.c ****         case KC_8: return 8;
 645:../../tmk_core/common/command.c ****         case KC_9: return 9;
 646:../../tmk_core/common/command.c ****         case KC_0: return 0;
 647:../../tmk_core/common/command.c ****     }
 648:../../tmk_core/common/command.c ****     return 0;
 649:../../tmk_core/common/command.c **** }
 650:../../tmk_core/common/command.c **** #endif
 651:../../tmk_core/common/command.c **** 
 652:../../tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer)
 653:../../tmk_core/common/command.c **** {
 559               		.loc 1 653 0
 560               		.cfi_startproc
 561               	.LVL46:
 562 0000 CF93      		push r28
 563               	.LCFI47:
 564               		.cfi_def_cfa_offset 3
 565               		.cfi_offset 28, -2
 566               	/* prologue: function */
 567               	/* frame size = 0 */
 568               	/* stack size = 1 */
 569               	.L__stack_usage = 1
 570 0002 C82F      		mov r28,r24
 654:../../tmk_core/common/command.c ****     xprintf("L%d\n", layer);
 571               		.loc 1 654 0
 572 0004 1F92      		push __zero_reg__
 573               	.LCFI48:
 574               		.cfi_def_cfa_offset 4
 575 0006 8F93      		push r24
 576               	.LCFI49:
 577               		.cfi_def_cfa_offset 5
 578 0008 80E0      		ldi r24,lo8(__c.3038)
 579 000a 90E0      		ldi r25,hi8(__c.3038)
 580               	.LVL47:
 581 000c 9F93      		push r25
 582               	.LCFI50:
 583               		.cfi_def_cfa_offset 6
 584 000e 8F93      		push r24
 585               	.LCFI51:
 586               		.cfi_def_cfa_offset 7
 587 0010 0E94 0000 		call __xprintf
 588               	.LVL48:
 655:../../tmk_core/common/command.c ****     default_layer_set(1UL<<layer);
 589               		.loc 1 655 0
 590 0014 81E0      		ldi r24,lo8(1)
 591 0016 90E0      		ldi r25,0
 592 0018 A0E0      		ldi r26,0
 593 001a B0E0      		ldi r27,0
 594 001c BC01      		movw r22,r24
 595 001e CD01      		movw r24,r26
 596 0020 00C0      		rjmp 2f
 597               		1:
 598 0022 660F      		lsl r22
 599 0024 771F      		rol r23
 600 0026 881F      		rol r24
 601 0028 991F      		rol r25
 602               		2:
 603 002a CA95      		dec r28
 604 002c 02F4      		brpl 1b
 605 002e 0E94 0000 		call default_layer_set
 606               	.LVL49:
 656:../../tmk_core/common/command.c ****     clear_keyboard();
 607               		.loc 1 656 0
 608 0032 0F90      		pop __tmp_reg__
 609 0034 0F90      		pop __tmp_reg__
 610 0036 0F90      		pop __tmp_reg__
 611 0038 0F90      		pop __tmp_reg__
 612               	.LCFI52:
 613               		.cfi_def_cfa_offset 3
 614               	/* epilogue start */
 657:../../tmk_core/common/command.c **** }
 615               		.loc 1 657 0
 616 003a CF91      		pop r28
 617               	.LVL50:
 656:../../tmk_core/common/command.c ****     clear_keyboard();
 618               		.loc 1 656 0
 619 003c 0C94 0000 		jmp clear_keyboard
 620               	.LVL51:
 621               		.cfi_endproc
 622               	.LFE24:
 624               		.section	.text.command_common,"ax",@progbits
 626               	command_common:
 627               	.LFB15:
 183:../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 628               		.loc 1 183 0
 629               		.cfi_startproc
 630 0000 CF93      		push r28
 631               	.LCFI53:
 632               		.cfi_def_cfa_offset 3
 633               		.cfi_offset 28, -2
 634               	/* prologue: function */
 635               	/* frame size = 0 */
 636               	/* stack size = 1 */
 637               	.L__stack_usage = 1
 190:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 638               		.loc 1 190 0
 639 0002 8732      		cpi r24,lo8(39)
 640 0004 00F4      		brsh .L50
 641 0006 8E31      		cpi r24,lo8(30)
 642 0008 00F0      		brlo .+2
 643 000a 00C0      		rjmp .L51
 644 000c 8E30      		cpi r24,lo8(14)
 645 000e 01F4      		brne .+2
 646 0010 00C0      		rjmp .L52
 647 0012 00F4      		brsh .L53
 648 0014 8730      		cpi r24,lo8(7)
 649 0016 01F4      		brne .+2
 650 0018 00C0      		rjmp .L54
 651 001a 00F4      		brsh .L55
 652 001c 8630      		cpi r24,lo8(6)
 653 001e 01F0      		breq .+2
 654 0020 00C0      		rjmp .L49
 228:../../tmk_core/common/command.c ****             debug_keyboard = false;
 655               		.loc 1 228 0
 656 0022 8091 0000 		lds r24,debug_config
 231:../../tmk_core/common/command.c ****             command_console_help();
 657               		.loc 1 231 0
 658 0026 817F      		andi r24,lo8(-15)
 659 0028 8E7F      		andi r24,lo8(~(1<<0))
 660 002a 8093 0000 		sts debug_config,r24
 661               	.LBB105:
 662               	.LBB106:
 394:../../tmk_core/common/command.c ****           "ESC/q:	quit\n"
 663               		.loc 1 394 0
 664 002e 80E0      		ldi r24,lo8(__c.2878)
 665 0030 90E0      		ldi r25,hi8(__c.2878)
 666 0032 0E94 0000 		call xputs
 667               	.LBE106:
 668               	.LBE105:
 233:../../tmk_core/common/command.c ****             command_state = CONSOLE;
 669               		.loc 1 233 0
 670 0036 80E0      		ldi r24,lo8(__c.2817)
 671 0038 90E0      		ldi r25,hi8(__c.2817)
 672 003a 0E94 0000 		call xputs
 234:../../tmk_core/common/command.c ****             break;
 673               		.loc 1 234 0
 674 003e 81E0      		ldi r24,lo8(1)
 675 0040 8093 0000 		sts command_state,r24
 676 0044 00C0      		rjmp .L93
 677               	.L55:
 190:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 678               		.loc 1 190 0
 679 0046 8830      		cpi r24,lo8(8)
 680 0048 01F4      		brne .+2
 681 004a 00C0      		rjmp .L57
 682 004c 8B30      		cpi r24,lo8(11)
 683 004e 01F4      		brne .+2
 684 0050 00C0      		rjmp .L58
 685 0052 00C0      		rjmp .L49
 686               	.L53:
 687 0054 8631      		cpi r24,lo8(22)
 688 0056 01F4      		brne .+2
 689 0058 00C0      		rjmp .L59
 690 005a 00F4      		brsh .L60
 691 005c 8031      		cpi r24,lo8(16)
 692 005e 01F4      		brne .+2
 693 0060 00C0      		rjmp .L61
 694 0062 00C0      		rjmp .L49
 695               	.L60:
 696 0064 8931      		cpi r24,lo8(25)
 697 0066 01F4      		brne .+2
 698 0068 00C0      		rjmp .L62
 699 006a 8B31      		cpi r24,lo8(27)
 700 006c 01F4      		brne .+2
 701 006e 00C0      		rjmp .L63
 702 0070 00C0      		rjmp .L49
 703               	.L50:
 704 0072 8833      		cpi r24,lo8(56)
 705 0074 01F4      		brne .+2
 706 0076 00C0      		rjmp .L58
 707 0078 00F4      		brsh .L64
 708 007a 8932      		cpi r24,lo8(41)
 709 007c 01F4      		brne .+2
 710 007e 00C0      		rjmp .L65
 711 0080 8533      		cpi r24,lo8(53)
 712 0082 01F4      		brne .+2
 713 0084 00C0      		rjmp .L65
 714 0086 8732      		cpi r24,lo8(39)
 715 0088 01F0      		breq .+2
 716 008a 00C0      		rjmp .L49
 717 008c 00C0      		rjmp .L65
 718               	.L64:
 719 008e 8334      		cpi r24,lo8(67)
 720 0090 01F4      		brne .+2
 721 0092 00C0      		rjmp .L65
 722 0094 00F4      		brsh .L66
 723 0096 8A33      		cpi r24,lo8(58)
 724 0098 00F4      		brsh .+2
 725 009a 00C0      		rjmp .L49
 379:../../tmk_core/common/command.c ****             break;
 726               		.loc 1 379 0
 727 009c 8953      		subi r24,lo8(-(-57))
 728 009e 00C0      		rjmp .L97
 729               	.L66:
 190:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 730               		.loc 1 190 0
 731 00a0 8834      		cpi r24,lo8(72)
 732 00a2 01F0      		breq .+2
 733 00a4 00C0      		rjmp .L49
 237:../../tmk_core/common/command.c ****             print("\n\nbootloader... ");
 734               		.loc 1 237 0
 735 00a6 0E94 0000 		call clear_keyboard
 238:../../tmk_core/common/command.c ****             wait_ms(1000);
 736               		.loc 1 238 0
 737 00aa 80E0      		ldi r24,lo8(__c.2820)
 738 00ac 90E0      		ldi r25,hi8(__c.2820)
 739 00ae 0E94 0000 		call xputs
 740               	.LBB107:
 741               	.LBB108:
 742               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 743               		.loc 2 187 0
 744 00b2 9FEF      		ldi r25,lo8(3199999)
 745 00b4 23ED      		ldi r18,hi8(3199999)
 746 00b6 80E3      		ldi r24,hlo8(3199999)
 747 00b8 9150      	1:	subi r25,1
 748 00ba 2040      		sbci r18,0
 749 00bc 8040      		sbci r24,0
 750 00be 01F4      		brne 1b
 751 00c0 00C0      		rjmp .
 752 00c2 0000      		nop
 753               	.LBE108:
 754               	.LBE107:
 240:../../tmk_core/common/command.c ****             break;
 755               		.loc 1 240 0
 756 00c4 0E94 0000 		call bootloader_jump
 757 00c8 00C0      		rjmp .L93
 758               	.L57:
 206:../../tmk_core/common/command.c ****             print_eeconfig();
 759               		.loc 1 206 0
 760 00ca 80E0      		ldi r24,lo8(__c.2811)
 761 00cc 90E0      		ldi r25,hi8(__c.2811)
 762 00ce 0E94 0000 		call xputs
 763               	.LBB109:
 764               	.LBB110:
 150:../../tmk_core/common/command.c **** 
 765               		.loc 1 150 0
 766 00d2 80E0      		ldi r24,lo8(__c.2715)
 767 00d4 90E0      		ldi r25,hi8(__c.2715)
 768 00d6 0E94 0000 		call xputs
 769 00da 0E94 0000 		call eeconfig_read_default_layer
 770 00de 1F92      		push __zero_reg__
 771               	.LCFI54:
 772               		.cfi_def_cfa_offset 4
 773 00e0 8F93      		push r24
 774               	.LCFI55:
 775               		.cfi_def_cfa_offset 5
 776 00e2 80E0      		ldi r24,lo8(__c.2717)
 777 00e4 90E0      		ldi r25,hi8(__c.2717)
 778 00e6 9F93      		push r25
 779               	.LCFI56:
 780               		.cfi_def_cfa_offset 6
 781 00e8 8F93      		push r24
 782               	.LCFI57:
 783               		.cfi_def_cfa_offset 7
 784 00ea 0E94 0000 		call __xprintf
 785 00ee 80E0      		ldi r24,lo8(__c.2719)
 786 00f0 90E0      		ldi r25,hi8(__c.2719)
 787 00f2 0E94 0000 		call xputs
 153:../../tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 788               		.loc 1 153 0
 789 00f6 0E94 0000 		call eeconfig_read_debug
 790 00fa C82F      		mov r28,r24
 154:../../tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 791               		.loc 1 154 0
 792 00fc 80E0      		ldi r24,lo8(__c.2722)
 793 00fe 90E0      		ldi r25,hi8(__c.2722)
 794 0100 0E94 0000 		call xputs
 795 0104 1F92      		push __zero_reg__
 796               	.LCFI58:
 797               		.cfi_def_cfa_offset 8
 798 0106 CF93      		push r28
 799               	.LCFI59:
 800               		.cfi_def_cfa_offset 9
 801 0108 80E0      		ldi r24,lo8(__c.2724)
 802 010a 90E0      		ldi r25,hi8(__c.2724)
 803 010c 9F93      		push r25
 804               	.LCFI60:
 805               		.cfi_def_cfa_offset 10
 806 010e 8F93      		push r24
 807               	.LCFI61:
 808               		.cfi_def_cfa_offset 11
 809 0110 0E94 0000 		call __xprintf
 810 0114 80E0      		ldi r24,lo8(__c.2726)
 811 0116 90E0      		ldi r25,hi8(__c.2726)
 812 0118 0E94 0000 		call xputs
 155:../../tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 813               		.loc 1 155 0
 814 011c 80E0      		ldi r24,lo8(__c.2728)
 815 011e 90E0      		ldi r25,hi8(__c.2728)
 816 0120 0E94 0000 		call xputs
 817 0124 8C2F      		mov r24,r28
 818 0126 8170      		andi r24,1
 819 0128 1F92      		push __zero_reg__
 820               	.LCFI62:
 821               		.cfi_def_cfa_offset 12
 822 012a 8F93      		push r24
 823               	.LCFI63:
 824               		.cfi_def_cfa_offset 13
 825 012c 80E0      		ldi r24,lo8(__c.2730)
 826 012e 90E0      		ldi r25,hi8(__c.2730)
 827 0130 9F93      		push r25
 828               	.LCFI64:
 829               		.cfi_def_cfa_offset 14
 830 0132 8F93      		push r24
 831               	.LCFI65:
 832               		.cfi_def_cfa_offset 15
 833 0134 0E94 0000 		call __xprintf
 834 0138 80E0      		ldi r24,lo8(__c.2732)
 835 013a 90E0      		ldi r25,hi8(__c.2732)
 836 013c 0E94 0000 		call xputs
 156:../../tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 837               		.loc 1 156 0
 838 0140 80E0      		ldi r24,lo8(__c.2734)
 839 0142 90E0      		ldi r25,hi8(__c.2734)
 840 0144 0E94 0000 		call xputs
 841 0148 C1FB      		bst r28,1
 842 014a 8827      		clr r24
 843 014c 80F9      		bld r24,0
 844 014e 1F92      		push __zero_reg__
 845               	.LCFI66:
 846               		.cfi_def_cfa_offset 16
 847 0150 8F93      		push r24
 848               	.LCFI67:
 849               		.cfi_def_cfa_offset 17
 850 0152 80E0      		ldi r24,lo8(__c.2736)
 851 0154 90E0      		ldi r25,hi8(__c.2736)
 852 0156 9F93      		push r25
 853               	.LCFI68:
 854               		.cfi_def_cfa_offset 18
 855 0158 8F93      		push r24
 856               	.LCFI69:
 857               		.cfi_def_cfa_offset 19
 858 015a 0E94 0000 		call __xprintf
 859 015e 80E0      		ldi r24,lo8(__c.2738)
 860 0160 90E0      		ldi r25,hi8(__c.2738)
 861 0162 0E94 0000 		call xputs
 157:../../tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 862               		.loc 1 157 0
 863 0166 80E0      		ldi r24,lo8(__c.2740)
 864 0168 90E0      		ldi r25,hi8(__c.2740)
 865 016a 0E94 0000 		call xputs
 866 016e C2FB      		bst r28,2
 867 0170 8827      		clr r24
 868 0172 80F9      		bld r24,0
 869 0174 1F92      		push __zero_reg__
 870               	.LCFI70:
 871               		.cfi_def_cfa_offset 20
 872 0176 8F93      		push r24
 873               	.LCFI71:
 874               		.cfi_def_cfa_offset 21
 875 0178 80E0      		ldi r24,lo8(__c.2742)
 876 017a 90E0      		ldi r25,hi8(__c.2742)
 877 017c 9F93      		push r25
 878               	.LCFI72:
 879               		.cfi_def_cfa_offset 22
 880 017e 8F93      		push r24
 881               	.LCFI73:
 882               		.cfi_def_cfa_offset 23
 883 0180 0E94 0000 		call __xprintf
 884 0184 80E0      		ldi r24,lo8(__c.2744)
 885 0186 90E0      		ldi r25,hi8(__c.2744)
 886 0188 0E94 0000 		call xputs
 158:../../tmk_core/common/command.c **** 
 887               		.loc 1 158 0
 888 018c 80E0      		ldi r24,lo8(__c.2746)
 889 018e 90E0      		ldi r25,hi8(__c.2746)
 890 0190 0E94 0000 		call xputs
 891 0194 C3FB      		bst r28,3
 892 0196 CC27      		clr r28
 893 0198 C0F9      		bld r28,0
 894 019a 1F92      		push __zero_reg__
 895               	.LCFI74:
 896               		.cfi_def_cfa_offset 24
 897 019c CF93      		push r28
 898               	.LCFI75:
 899               		.cfi_def_cfa_offset 25
 900 019e 80E0      		ldi r24,lo8(__c.2748)
 901 01a0 90E0      		ldi r25,hi8(__c.2748)
 902 01a2 9F93      		push r25
 903               	.LCFI76:
 904               		.cfi_def_cfa_offset 26
 905 01a4 8F93      		push r24
 906               	.LCFI77:
 907               		.cfi_def_cfa_offset 27
 908 01a6 0E94 0000 		call __xprintf
 909 01aa 80E0      		ldi r24,lo8(__c.2750)
 910 01ac 90E0      		ldi r25,hi8(__c.2750)
 911 01ae 0E94 0000 		call xputs
 161:../../tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 912               		.loc 1 161 0
 913 01b2 0E94 0000 		call eeconfig_read_keymap
 914 01b6 C82F      		mov r28,r24
 162:../../tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 915               		.loc 1 162 0
 916 01b8 80E0      		ldi r24,lo8(__c.2753)
 917 01ba 90E0      		ldi r25,hi8(__c.2753)
 918 01bc 0E94 0000 		call xputs
 919 01c0 1F92      		push __zero_reg__
 920               	.LCFI78:
 921               		.cfi_def_cfa_offset 28
 922 01c2 CF93      		push r28
 923               	.LCFI79:
 924               		.cfi_def_cfa_offset 29
 925 01c4 80E0      		ldi r24,lo8(__c.2755)
 926 01c6 90E0      		ldi r25,hi8(__c.2755)
 927 01c8 9F93      		push r25
 928               	.LCFI80:
 929               		.cfi_def_cfa_offset 30
 930 01ca 8F93      		push r24
 931               	.LCFI81:
 932               		.cfi_def_cfa_offset 31
 933 01cc 0E94 0000 		call __xprintf
 934 01d0 80E0      		ldi r24,lo8(__c.2757)
 935 01d2 90E0      		ldi r25,hi8(__c.2757)
 936 01d4 0E94 0000 		call xputs
 163:../../tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 937               		.loc 1 163 0
 938 01d8 80E0      		ldi r24,lo8(__c.2759)
 939 01da 90E0      		ldi r25,hi8(__c.2759)
 940 01dc 0E94 0000 		call xputs
 941 01e0 8C2F      		mov r24,r28
 942 01e2 8170      		andi r24,1
 943 01e4 1F92      		push __zero_reg__
 944               	.LCFI82:
 945               		.cfi_def_cfa_offset 32
 946 01e6 8F93      		push r24
 947               	.LCFI83:
 948               		.cfi_def_cfa_offset 33
 949 01e8 80E0      		ldi r24,lo8(__c.2761)
 950 01ea 90E0      		ldi r25,hi8(__c.2761)
 951 01ec 9F93      		push r25
 952               	.LCFI84:
 953               		.cfi_def_cfa_offset 34
 954 01ee 8F93      		push r24
 955               	.LCFI85:
 956               		.cfi_def_cfa_offset 35
 957 01f0 0E94 0000 		call __xprintf
 958 01f4 8DB7      		in r24,__SP_L__
 959 01f6 9EB7      		in r25,__SP_H__
 960 01f8 8096      		adiw r24,32
 961 01fa 0FB6      		in __tmp_reg__,__SREG__
 962 01fc F894      		cli
 963 01fe 9EBF      		out __SP_H__,r25
 964 0200 0FBE      		out __SREG__,__tmp_reg__
 965 0202 8DBF      		out __SP_L__,r24
 966               	.LCFI86:
 967               		.cfi_def_cfa_offset 3
 968 0204 80E0      		ldi r24,lo8(__c.2763)
 969 0206 90E0      		ldi r25,hi8(__c.2763)
 970 0208 0E94 0000 		call xputs
 164:../../tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 971               		.loc 1 164 0
 972 020c 80E0      		ldi r24,lo8(__c.2765)
 973 020e 90E0      		ldi r25,hi8(__c.2765)
 974 0210 0E94 0000 		call xputs
 975 0214 C1FB      		bst r28,1
 976 0216 8827      		clr r24
 977 0218 80F9      		bld r24,0
 978 021a 1F92      		push __zero_reg__
 979               	.LCFI87:
 980               		.cfi_def_cfa_offset 4
 981 021c 8F93      		push r24
 982               	.LCFI88:
 983               		.cfi_def_cfa_offset 5
 984 021e 80E0      		ldi r24,lo8(__c.2767)
 985 0220 90E0      		ldi r25,hi8(__c.2767)
 986 0222 9F93      		push r25
 987               	.LCFI89:
 988               		.cfi_def_cfa_offset 6
 989 0224 8F93      		push r24
 990               	.LCFI90:
 991               		.cfi_def_cfa_offset 7
 992 0226 0E94 0000 		call __xprintf
 993 022a 80E0      		ldi r24,lo8(__c.2769)
 994 022c 90E0      		ldi r25,hi8(__c.2769)
 995 022e 0E94 0000 		call xputs
 165:../../tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 996               		.loc 1 165 0
 997 0232 80E0      		ldi r24,lo8(__c.2771)
 998 0234 90E0      		ldi r25,hi8(__c.2771)
 999 0236 0E94 0000 		call xputs
 1000 023a C2FB      		bst r28,2
 1001 023c 8827      		clr r24
 1002 023e 80F9      		bld r24,0
 1003 0240 1F92      		push __zero_reg__
 1004               	.LCFI91:
 1005               		.cfi_def_cfa_offset 8
 1006 0242 8F93      		push r24
 1007               	.LCFI92:
 1008               		.cfi_def_cfa_offset 9
 1009 0244 80E0      		ldi r24,lo8(__c.2773)
 1010 0246 90E0      		ldi r25,hi8(__c.2773)
 1011 0248 9F93      		push r25
 1012               	.LCFI93:
 1013               		.cfi_def_cfa_offset 10
 1014 024a 8F93      		push r24
 1015               	.LCFI94:
 1016               		.cfi_def_cfa_offset 11
 1017 024c 0E94 0000 		call __xprintf
 1018 0250 80E0      		ldi r24,lo8(__c.2775)
 1019 0252 90E0      		ldi r25,hi8(__c.2775)
 1020 0254 0E94 0000 		call xputs
 166:../../tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 1021               		.loc 1 166 0
 1022 0258 80E0      		ldi r24,lo8(__c.2777)
 1023 025a 90E0      		ldi r25,hi8(__c.2777)
 1024 025c 0E94 0000 		call xputs
 1025 0260 C3FB      		bst r28,3
 1026 0262 8827      		clr r24
 1027 0264 80F9      		bld r24,0
 1028 0266 1F92      		push __zero_reg__
 1029               	.LCFI95:
 1030               		.cfi_def_cfa_offset 12
 1031 0268 8F93      		push r24
 1032               	.LCFI96:
 1033               		.cfi_def_cfa_offset 13
 1034 026a 80E0      		ldi r24,lo8(__c.2779)
 1035 026c 90E0      		ldi r25,hi8(__c.2779)
 1036 026e 9F93      		push r25
 1037               	.LCFI97:
 1038               		.cfi_def_cfa_offset 14
 1039 0270 8F93      		push r24
 1040               	.LCFI98:
 1041               		.cfi_def_cfa_offset 15
 1042 0272 0E94 0000 		call __xprintf
 1043 0276 80E0      		ldi r24,lo8(__c.2781)
 1044 0278 90E0      		ldi r25,hi8(__c.2781)
 1045 027a 0E94 0000 		call xputs
 167:../../tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 1046               		.loc 1 167 0
 1047 027e 80E0      		ldi r24,lo8(__c.2783)
 1048 0280 90E0      		ldi r25,hi8(__c.2783)
 1049 0282 0E94 0000 		call xputs
 1050 0286 C4FB      		bst r28,4
 1051 0288 8827      		clr r24
 1052 028a 80F9      		bld r24,0
 1053 028c 1F92      		push __zero_reg__
 1054               	.LCFI99:
 1055               		.cfi_def_cfa_offset 16
 1056 028e 8F93      		push r24
 1057               	.LCFI100:
 1058               		.cfi_def_cfa_offset 17
 1059 0290 80E0      		ldi r24,lo8(__c.2785)
 1060 0292 90E0      		ldi r25,hi8(__c.2785)
 1061 0294 9F93      		push r25
 1062               	.LCFI101:
 1063               		.cfi_def_cfa_offset 18
 1064 0296 8F93      		push r24
 1065               	.LCFI102:
 1066               		.cfi_def_cfa_offset 19
 1067 0298 0E94 0000 		call __xprintf
 1068 029c 80E0      		ldi r24,lo8(__c.2787)
 1069 029e 90E0      		ldi r25,hi8(__c.2787)
 1070 02a0 0E94 0000 		call xputs
 168:../../tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 1071               		.loc 1 168 0
 1072 02a4 80E0      		ldi r24,lo8(__c.2789)
 1073 02a6 90E0      		ldi r25,hi8(__c.2789)
 1074 02a8 0E94 0000 		call xputs
 1075 02ac C5FB      		bst r28,5
 1076 02ae 8827      		clr r24
 1077 02b0 80F9      		bld r24,0
 1078 02b2 1F92      		push __zero_reg__
 1079               	.LCFI103:
 1080               		.cfi_def_cfa_offset 20
 1081 02b4 8F93      		push r24
 1082               	.LCFI104:
 1083               		.cfi_def_cfa_offset 21
 1084 02b6 80E0      		ldi r24,lo8(__c.2791)
 1085 02b8 90E0      		ldi r25,hi8(__c.2791)
 1086 02ba 9F93      		push r25
 1087               	.LCFI105:
 1088               		.cfi_def_cfa_offset 22
 1089 02bc 8F93      		push r24
 1090               	.LCFI106:
 1091               		.cfi_def_cfa_offset 23
 1092 02be 0E94 0000 		call __xprintf
 1093 02c2 80E0      		ldi r24,lo8(__c.2793)
 1094 02c4 90E0      		ldi r25,hi8(__c.2793)
 1095 02c6 0E94 0000 		call xputs
 169:../../tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 1096               		.loc 1 169 0
 1097 02ca 80E0      		ldi r24,lo8(__c.2795)
 1098 02cc 90E0      		ldi r25,hi8(__c.2795)
 1099 02ce 0E94 0000 		call xputs
 1100 02d2 C6FB      		bst r28,6
 1101 02d4 8827      		clr r24
 1102 02d6 80F9      		bld r24,0
 1103 02d8 1F92      		push __zero_reg__
 1104               	.LCFI107:
 1105               		.cfi_def_cfa_offset 24
 1106 02da 8F93      		push r24
 1107               	.LCFI108:
 1108               		.cfi_def_cfa_offset 25
 1109 02dc 80E0      		ldi r24,lo8(__c.2797)
 1110 02de 90E0      		ldi r25,hi8(__c.2797)
 1111 02e0 9F93      		push r25
 1112               	.LCFI109:
 1113               		.cfi_def_cfa_offset 26
 1114 02e2 8F93      		push r24
 1115               	.LCFI110:
 1116               		.cfi_def_cfa_offset 27
 1117 02e4 0E94 0000 		call __xprintf
 1118 02e8 80E0      		ldi r24,lo8(__c.2799)
 1119 02ea 90E0      		ldi r25,hi8(__c.2799)
 1120 02ec 0E94 0000 		call xputs
 170:../../tmk_core/common/command.c **** 
 1121               		.loc 1 170 0
 1122 02f0 80E0      		ldi r24,lo8(__c.2801)
 1123 02f2 90E0      		ldi r25,hi8(__c.2801)
 1124 02f4 0E94 0000 		call xputs
 1125 02f8 C7FB      		bst r28,7
 1126 02fa CC27      		clr r28
 1127 02fc C0F9      		bld r28,0
 1128 02fe 1F92      		push __zero_reg__
 1129               	.LCFI111:
 1130               		.cfi_def_cfa_offset 28
 1131 0300 CF93      		push r28
 1132               	.LCFI112:
 1133               		.cfi_def_cfa_offset 29
 1134 0302 80E0      		ldi r24,lo8(__c.2803)
 1135 0304 90E0      		ldi r25,hi8(__c.2803)
 1136 0306 9F93      		push r25
 1137               	.LCFI113:
 1138               		.cfi_def_cfa_offset 30
 1139 0308 8F93      		push r24
 1140               	.LCFI114:
 1141               		.cfi_def_cfa_offset 31
 1142 030a 0E94 0000 		call __xprintf
 1143 030e 80E0      		ldi r24,lo8(__c.2805)
 1144 0310 90E0      		ldi r25,hi8(__c.2805)
 1145 0312 0E94 0000 		call xputs
 1146 0316 8DB7      		in r24,__SP_L__
 1147 0318 9EB7      		in r25,__SP_H__
 1148 031a 4C96      		adiw r24,28
 1149 031c 0FB6      		in __tmp_reg__,__SREG__
 1150 031e F894      		cli
 1151 0320 9EBF      		out __SP_H__,r25
 1152 0322 0FBE      		out __SREG__,__tmp_reg__
 1153 0324 8DBF      		out __SP_L__,r24
 1154               	.LCFI115:
 1155               		.cfi_def_cfa_offset 3
 1156 0326 00C0      		rjmp .L93
 1157               	.L58:
 1158               	.LBE110:
 1159               	.LBE109:
 1160               	.LBB111:
 1161               	.LBB112:
 118:../../tmk_core/common/command.c ****           "d:	debug\n"
 1162               		.loc 1 118 0
 1163 0328 80E0      		ldi r24,lo8(__c.2710)
 1164 032a 90E0      		ldi r25,hi8(__c.2710)
 1165               	.L96:
 1166 032c 0E94 0000 		call xputs
 1167               	.L93:
 1168               	.LBE112:
 1169               	.LBE111:
 385:../../tmk_core/common/command.c **** }
 1170               		.loc 1 385 0
 1171 0330 C1E0      		ldi r28,lo8(1)
 1172 0332 00C0      		rjmp .L69
 1173               	.L54:
 243:../../tmk_core/common/command.c ****                 print("\ndebug: off\n");
 1174               		.loc 1 243 0
 1175 0334 8091 0000 		lds r24,debug_config
 1176 0338 C82F      		mov r28,r24
 1177 033a C170      		andi r28,1
 1178 033c 80FF      		sbrs r24,0
 1179 033e 00C0      		rjmp .L70
 244:../../tmk_core/common/command.c ****                 debug_matrix   = false;
 1180               		.loc 1 244 0
 1181 0340 80E0      		ldi r24,lo8(__c.2823)
 1182 0342 90E0      		ldi r25,hi8(__c.2823)
 1183 0344 0E94 0000 		call xputs
 245:../../tmk_core/common/command.c ****                 debug_keyboard = false;
 1184               		.loc 1 245 0
 1185 0348 8091 0000 		lds r24,debug_config
 248:../../tmk_core/common/command.c ****             } else {
 1186               		.loc 1 248 0
 1187 034c 817F      		andi r24,lo8(-15)
 1188 034e 8E7F      		andi r24,lo8(~(1<<0))
 1189 0350 00C0      		rjmp .L94
 1190               	.L70:
 250:../../tmk_core/common/command.c ****                 debug_enable   = true;
 1191               		.loc 1 250 0
 1192 0352 80E0      		ldi r24,lo8(__c.2825)
 1193 0354 90E0      		ldi r25,hi8(__c.2825)
 1194 0356 0E94 0000 		call xputs
 251:../../tmk_core/common/command.c ****             }
 1195               		.loc 1 251 0
 1196 035a 8091 0000 		lds r24,debug_config
 1197 035e 8160      		ori r24,lo8(1<<0)
 1198 0360 8093 0000 		sts debug_config,r24
 1199 0364 00C0      		rjmp .L93
 1200               	.L63:
 255:../../tmk_core/common/command.c ****             if (debug_matrix) {
 1201               		.loc 1 255 0
 1202 0366 9091 0000 		lds r25,debug_config
 1203 036a 91FB      		bst r25,1
 1204 036c CC27      		clr r28
 1205 036e C0F9      		bld r28,0
 1206 0370 81E0      		ldi r24,lo8(1)
 1207 0372 C827      		eor r28,r24
 1208 0374 892F      		mov r24,r25
 1209 0376 C0FB      		bst r28,0
 1210 0378 81F9      		bld r24,1
 1211 037a 8093 0000 		sts debug_config,r24
 256:../../tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 1212               		.loc 1 256 0
 1213 037e CC23      		tst r28
 1214 0380 01F0      		breq .L71
 257:../../tmk_core/common/command.c ****                 debug_enable = true;
 1215               		.loc 1 257 0
 1216 0382 80E0      		ldi r24,lo8(__c.2828)
 1217 0384 90E0      		ldi r25,hi8(__c.2828)
 1218 0386 00C0      		rjmp .L95
 1219               	.L71:
 260:../../tmk_core/common/command.c ****             }
 1220               		.loc 1 260 0
 1221 0388 80E0      		ldi r24,lo8(__c.2830)
 1222 038a 90E0      		ldi r25,hi8(__c.2830)
 1223 038c 00C0      		rjmp .L96
 1224               	.L52:
 264:../../tmk_core/common/command.c ****             if (debug_keyboard) {
 1225               		.loc 1 264 0
 1226 038e 9091 0000 		lds r25,debug_config
 1227 0392 92FB      		bst r25,2
 1228 0394 CC27      		clr r28
 1229 0396 C0F9      		bld r28,0
 1230 0398 81E0      		ldi r24,lo8(1)
 1231 039a C827      		eor r28,r24
 1232 039c 892F      		mov r24,r25
 1233 039e C0FB      		bst r28,0
 1234 03a0 82F9      		bld r24,2
 1235 03a2 8093 0000 		sts debug_config,r24
 265:../../tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 1236               		.loc 1 265 0
 1237 03a6 CC23      		tst r28
 1238 03a8 01F0      		breq .L72
 266:../../tmk_core/common/command.c ****                 debug_enable = true;
 1239               		.loc 1 266 0
 1240 03aa 80E0      		ldi r24,lo8(__c.2833)
 1241 03ac 90E0      		ldi r25,hi8(__c.2833)
 1242 03ae 00C0      		rjmp .L95
 1243               	.L72:
 269:../../tmk_core/common/command.c ****             }
 1244               		.loc 1 269 0
 1245 03b0 80E0      		ldi r24,lo8(__c.2835)
 1246 03b2 90E0      		ldi r25,hi8(__c.2835)
 1247 03b4 00C0      		rjmp .L96
 1248               	.L61:
 273:../../tmk_core/common/command.c ****             if (debug_mouse) {
 1249               		.loc 1 273 0
 1250 03b6 9091 0000 		lds r25,debug_config
 1251 03ba 93FB      		bst r25,3
 1252 03bc CC27      		clr r28
 1253 03be C0F9      		bld r28,0
 1254 03c0 81E0      		ldi r24,lo8(1)
 1255 03c2 C827      		eor r28,r24
 1256 03c4 892F      		mov r24,r25
 1257 03c6 C0FB      		bst r28,0
 1258 03c8 83F9      		bld r24,3
 1259 03ca 8093 0000 		sts debug_config,r24
 274:../../tmk_core/common/command.c ****                 print("\nmouse: on\n");
 1260               		.loc 1 274 0
 1261 03ce CC23      		tst r28
 1262 03d0 01F0      		breq .L73
 275:../../tmk_core/common/command.c ****                 debug_enable = true;
 1263               		.loc 1 275 0
 1264 03d2 80E0      		ldi r24,lo8(__c.2838)
 1265 03d4 90E0      		ldi r25,hi8(__c.2838)
 1266               	.L95:
 1267 03d6 0E94 0000 		call xputs
 276:../../tmk_core/common/command.c ****             } else {
 1268               		.loc 1 276 0
 1269 03da 8091 0000 		lds r24,debug_config
 1270 03de 8160      		ori r24,lo8(1<<0)
 1271               	.L94:
 1272 03e0 8093 0000 		sts debug_config,r24
 1273 03e4 00C0      		rjmp .L69
 1274               	.L73:
 278:../../tmk_core/common/command.c ****             }
 1275               		.loc 1 278 0
 1276 03e6 80E0      		ldi r24,lo8(__c.2840)
 1277 03e8 90E0      		ldi r25,hi8(__c.2840)
 1278 03ea 00C0      		rjmp .L96
 1279               	.L62:
 282:../../tmk_core/common/command.c ****             print("DESC: " STR(DESCRIPTION) "\n");
 1280               		.loc 1 282 0
 1281 03ec 80E0      		ldi r24,lo8(__c.2843)
 1282 03ee 90E0      		ldi r25,hi8(__c.2843)
 1283 03f0 0E94 0000 		call xputs
 283:../../tmk_core/common/command.c ****             print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 1284               		.loc 1 283 0
 1285 03f4 80E0      		ldi r24,lo8(__c.2845)
 1286 03f6 90E0      		ldi r25,hi8(__c.2845)
 1287 03f8 0E94 0000 		call xputs
 284:../../tmk_core/common/command.c ****                   "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 1288               		.loc 1 284 0
 1289 03fc 80E0      		ldi r24,lo8(__c.2847)
 1290 03fe 90E0      		ldi r25,hi8(__c.2847)
 1291 0400 0E94 0000 		call xputs
 287:../../tmk_core/common/command.c ****             /* build options */
 1292               		.loc 1 287 0
 1293 0404 80E0      		ldi r24,lo8(__c.2849)
 1294 0406 90E0      		ldi r25,hi8(__c.2849)
 1295 0408 0E94 0000 		call xputs
 289:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 1296               		.loc 1 289 0
 1297 040c 80E0      		ldi r24,lo8(__c.2851)
 1298 040e 90E0      		ldi r25,hi8(__c.2851)
 1299 0410 0E94 0000 		call xputs
 325:../../tmk_core/common/command.c **** #if defined(__AVR__)
 1300               		.loc 1 325 0
 1301 0414 80E0      		ldi r24,lo8(__c.2853)
 1302 0416 90E0      		ldi r25,hi8(__c.2853)
 1303 0418 00C0      		rjmp .L96
 1304               	.L59:
 335:../../tmk_core/common/command.c ****             print_val_hex8(host_keyboard_leds());
 1305               		.loc 1 335 0
 1306 041a 80E0      		ldi r24,lo8(__c.2856)
 1307 041c 90E0      		ldi r25,hi8(__c.2856)
 1308 041e 0E94 0000 		call xputs
 336:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_protocol);
 1309               		.loc 1 336 0
 1310 0422 0E94 0000 		call host_keyboard_leds
 1311 0426 1F92      		push __zero_reg__
 1312               	.LCFI116:
 1313               		.cfi_def_cfa_offset 4
 1314 0428 8F93      		push r24
 1315               	.LCFI117:
 1316               		.cfi_def_cfa_offset 5
 1317 042a 80E0      		ldi r24,lo8(__c.2858)
 1318 042c 90E0      		ldi r25,hi8(__c.2858)
 1319 042e 9F93      		push r25
 1320               	.LCFI118:
 1321               		.cfi_def_cfa_offset 6
 1322 0430 8F93      		push r24
 1323               	.LCFI119:
 1324               		.cfi_def_cfa_offset 7
 1325 0432 0E94 0000 		call __xprintf
 337:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_idle);
 1326               		.loc 1 337 0
 1327 0436 8091 0000 		lds r24,keyboard_protocol
 1328 043a 1F92      		push __zero_reg__
 1329               	.LCFI120:
 1330               		.cfi_def_cfa_offset 8
 1331 043c 8F93      		push r24
 1332               	.LCFI121:
 1333               		.cfi_def_cfa_offset 9
 1334 043e 80E0      		ldi r24,lo8(__c.2860)
 1335 0440 90E0      		ldi r25,hi8(__c.2860)
 1336 0442 9F93      		push r25
 1337               	.LCFI122:
 1338               		.cfi_def_cfa_offset 10
 1339 0444 8F93      		push r24
 1340               	.LCFI123:
 1341               		.cfi_def_cfa_offset 11
 1342 0446 0E94 0000 		call __xprintf
 338:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 1343               		.loc 1 338 0
 1344 044a 8091 0000 		lds r24,keyboard_idle
 1345 044e 1F92      		push __zero_reg__
 1346               	.LCFI124:
 1347               		.cfi_def_cfa_offset 12
 1348 0450 8F93      		push r24
 1349               	.LCFI125:
 1350               		.cfi_def_cfa_offset 13
 1351 0452 80E0      		ldi r24,lo8(__c.2862)
 1352 0454 90E0      		ldi r25,hi8(__c.2862)
 1353 0456 9F93      		push r25
 1354               	.LCFI126:
 1355               		.cfi_def_cfa_offset 14
 1356 0458 8F93      		push r24
 1357               	.LCFI127:
 1358               		.cfi_def_cfa_offset 15
 1359 045a 0E94 0000 		call __xprintf
 342:../../tmk_core/common/command.c **** 
 1360               		.loc 1 342 0
 1361 045e 0E94 0000 		call timer_read32
 1362 0462 9F93      		push r25
 1363               	.LCFI128:
 1364               		.cfi_def_cfa_offset 16
 1365 0464 8F93      		push r24
 1366               	.LCFI129:
 1367               		.cfi_def_cfa_offset 17
 1368 0466 7F93      		push r23
 1369               	.LCFI130:
 1370               		.cfi_def_cfa_offset 18
 1371 0468 6F93      		push r22
 1372               	.LCFI131:
 1373               		.cfi_def_cfa_offset 19
 1374 046a 80E0      		ldi r24,lo8(__c.2864)
 1375 046c 90E0      		ldi r25,hi8(__c.2864)
 1376 046e 9F93      		push r25
 1377               	.LCFI132:
 1378               		.cfi_def_cfa_offset 20
 1379 0470 8F93      		push r24
 1380               	.LCFI133:
 1381               		.cfi_def_cfa_offset 21
 1382 0472 0E94 0000 		call __xprintf
 357:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 1383               		.loc 1 357 0
 1384 0476 8DB7      		in r24,__SP_L__
 1385 0478 9EB7      		in r25,__SP_H__
 1386 047a 4296      		adiw r24,18
 1387 047c 0FB6      		in __tmp_reg__,__SREG__
 1388 047e F894      		cli
 1389 0480 9EBF      		out __SP_H__,r25
 1390 0482 0FBE      		out __SREG__,__tmp_reg__
 1391 0484 8DBF      		out __SP_L__,r24
 1392               	.LCFI134:
 1393               		.cfi_def_cfa_offset 3
 1394 0486 00C0      		rjmp .L93
 1395               	.L65:
 373:../../tmk_core/common/command.c ****             break;
 1396               		.loc 1 373 0
 1397 0488 80E0      		ldi r24,0
 1398 048a 00C0      		rjmp .L97
 1399               	.L51:
 376:../../tmk_core/common/command.c ****             break;
 1400               		.loc 1 376 0
 1401 048c 8D51      		subi r24,lo8(-(-29))
 1402               	.L97:
 379:../../tmk_core/common/command.c ****             break;
 1403               		.loc 1 379 0
 1404 048e 0E94 0000 		call switch_default_layer
 1405 0492 00C0      		rjmp .L93
 1406               	.L49:
 382:../../tmk_core/common/command.c ****             return false;
 1407               		.loc 1 382 0
 1408 0494 80E0      		ldi r24,lo8(__c.2873)
 1409 0496 90E0      		ldi r25,hi8(__c.2873)
 1410 0498 0E94 0000 		call xputs
 383:../../tmk_core/common/command.c ****     }
 1411               		.loc 1 383 0
 1412 049c C0E0      		ldi r28,0
 1413               	.L69:
 386:../../tmk_core/common/command.c **** 
 1414               		.loc 1 386 0
 1415 049e 8C2F      		mov r24,r28
 1416               	/* epilogue start */
 1417 04a0 CF91      		pop r28
 1418 04a2 0895      		ret
 1419               		.cfi_endproc
 1420               	.LFE15:
 1422               		.section	.text.command_console_extra,"ax",@progbits
 1423               		.weak	command_console_extra
 1425               	command_console_extra:
 1426               	.LFB12:
 107:../../tmk_core/common/command.c ****     (void)code;
 1427               		.loc 1 107 0
 1428               		.cfi_startproc
 1429               	.LVL52:
 1430               	/* prologue: function */
 1431               	/* frame size = 0 */
 1432               	/* stack size = 0 */
 1433               	.L__stack_usage = 0
 110:../../tmk_core/common/command.c **** 
 1434               		.loc 1 110 0
 1435 0000 80E0      		ldi r24,0
 1436               	.LVL53:
 1437 0002 0895      		ret
 1438               		.cfi_endproc
 1439               	.LFE12:
 1441               		.set	command_console_extra.localalias.0,command_console_extra
 1442               		.section	.text.command_extra,"ax",@progbits
 1443               		.weak	command_extra
 1445               	command_extra:
 1446               	.LFB26:
 1447               		.cfi_startproc
 1448               	/* prologue: function */
 1449               	/* frame size = 0 */
 1450               	/* stack size = 0 */
 1451               	.L__stack_usage = 0
 1452 0000 0C94 0000 		jmp command_console_extra.localalias.0
 1453               		.cfi_endproc
 1454               	.LFE26:
 1456               		.section	.text.command_proc,"ax",@progbits
 1457               	.global	command_proc
 1459               	command_proc:
 1460               	.LFB10:
  71:../../tmk_core/common/command.c ****     switch (command_state) {
 1461               		.loc 1 71 0
 1462               		.cfi_startproc
  71:../../tmk_core/common/command.c ****     switch (command_state) {
 1463               		.loc 1 71 0
 1464 0000 CF93      		push r28
 1465               	.LCFI135:
 1466               		.cfi_def_cfa_offset 3
 1467               		.cfi_offset 28, -2
 1468               	/* prologue: function */
 1469               	/* frame size = 0 */
 1470               	/* stack size = 1 */
 1471               	.L__stack_usage = 1
 1472 0002 C82F      		mov r28,r24
  72:../../tmk_core/common/command.c ****         case ONESHOT:
 1473               		.loc 1 72 0
 1474 0004 8091 0000 		lds r24,command_state
 1475 0008 8130      		cpi r24,lo8(1)
 1476 000a 01F0      		breq .L102
 1477 000c 00F0      		brlo .L103
 1478 000e 8230      		cpi r24,lo8(2)
 1479 0010 01F4      		brne .+2
 1480 0012 00C0      		rjmp .L104
 1481 0014 00C0      		rjmp .L169
 1482               	.L103:
  74:../../tmk_core/common/command.c ****                 return false;
 1483               		.loc 1 74 0
 1484 0016 E091 0000 		lds r30,keyboard_report
 1485 001a F091 0000 		lds r31,keyboard_report+1
 1486 001e 8081      		ld r24,Z
 1487 0020 8232      		cpi r24,lo8(34)
 1488 0022 01F0      		breq .+2
 1489 0024 00C0      		rjmp .L133
 1490 0026 00C0      		rjmp .L168
 1491               	.L102:
  79:../../tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 1492               		.loc 1 79 0
 1493 0028 E091 0000 		lds r30,keyboard_report
 1494 002c F091 0000 		lds r31,keyboard_report+1
 1495 0030 8081      		ld r24,Z
 1496 0032 8232      		cpi r24,lo8(34)
 1497 0034 01F4      		brne .L107
 1498               	.L168:
  80:../../tmk_core/common/command.c ****             else
 1499               		.loc 1 80 0
 1500 0036 8C2F      		mov r24,r28
 1501 0038 0E94 0000 		call command_extra
 1502 003c 8111      		cpse r24,__zero_reg__
 1503 003e 00C0      		rjmp .L135
  80:../../tmk_core/common/command.c ****             else
 1504               		.loc 1 80 0 is_stmt 0 discriminator 2
 1505 0040 8C2F      		mov r24,r28
 1506 0042 0E94 0000 		call command_common
 1507 0046 00C0      		rjmp .L132
 1508               	.L135:
  80:../../tmk_core/common/command.c ****             else
 1509               		.loc 1 80 0
 1510 0048 81E0      		ldi r24,lo8(1)
 1511 004a 90E0      		ldi r25,0
 1512 004c 00C0      		rjmp .L132
 1513               	.L107:
  82:../../tmk_core/common/command.c ****             break;
 1514               		.loc 1 82 0 is_stmt 1
 1515 004e 8C2F      		mov r24,r28
 1516 0050 0E94 0000 		call command_console_extra
 1517 0054 8111      		cpse r24,__zero_reg__
 1518 0056 00C0      		rjmp .L109
 1519               	.LBB151:
 1520               	.LBB152:
 404:../../tmk_core/common/command.c ****         case KC_H:
 1521               		.loc 1 404 0
 1522 0058 C431      		cpi r28,lo8(20)
 1523 005a 01F0      		breq .L111
 1524 005c 00F4      		brsh .L112
 1525 005e CB30      		cpi r28,lo8(11)
 1526 0060 01F0      		breq .L113
 1527 0062 C031      		cpi r28,lo8(16)
 1528 0064 01F4      		brne .L110
 415:../../tmk_core/common/command.c ****             print("M> ");
 1529               		.loc 1 415 0
 1530 0066 0E94 0000 		call mousekey_console_help
 416:../../tmk_core/common/command.c ****             command_state = MOUSEKEY;
 1531               		.loc 1 416 0
 1532 006a 80E0      		ldi r24,lo8(__c.2889)
 1533 006c 90E0      		ldi r25,hi8(__c.2889)
 1534 006e 0E94 0000 		call xputs
 417:../../tmk_core/common/command.c ****             return true;
 1535               		.loc 1 417 0
 1536 0072 82E0      		ldi r24,lo8(2)
 1537 0074 8093 0000 		sts command_state,r24
 1538 0078 00C0      		rjmp .L109
 1539               	.L112:
 404:../../tmk_core/common/command.c ****         case KC_H:
 1540               		.loc 1 404 0
 1541 007a C932      		cpi r28,lo8(41)
 1542 007c 01F0      		breq .L111
 1543 007e C833      		cpi r28,lo8(56)
 1544 0080 01F4      		brne .L110
 1545               	.L113:
 1546               	.LBB153:
 1547               	.LBB154:
 394:../../tmk_core/common/command.c ****           "ESC/q:	quit\n"
 1548               		.loc 1 394 0
 1549 0082 80E0      		ldi r24,lo8(__c.2878)
 1550 0084 90E0      		ldi r25,hi8(__c.2878)
 1551 0086 0E94 0000 		call xputs
 1552               	.LBE154:
 1553               	.LBE153:
 424:../../tmk_core/common/command.c ****     return true;
 1554               		.loc 1 424 0
 1555 008a 80E0      		ldi r24,lo8(__c.2894)
 1556 008c 90E0      		ldi r25,hi8(__c.2894)
 1557 008e 0E94 0000 		call xputs
 1558 0092 00C0      		rjmp .L109
 1559               	.L111:
 411:../../tmk_core/common/command.c ****             return false;
 1560               		.loc 1 411 0
 1561 0094 1092 0000 		sts command_state,__zero_reg__
 1562 0098 00C0      		rjmp .L115
 1563               	.L110:
 421:../../tmk_core/common/command.c ****             return false;
 1564               		.loc 1 421 0
 1565 009a 80E0      		ldi r24,lo8(__c.2892)
 1566 009c 90E0      		ldi r25,hi8(__c.2892)
 1567 009e 0E94 0000 		call xputs
 1568 00a2 00C0      		rjmp .L115
 1569               	.L109:
 1570               	.LBE152:
 1571               	.LBE151:
  82:../../tmk_core/common/command.c ****             break;
 1572               		.loc 1 82 0
 1573 00a4 81E0      		ldi r24,lo8(1)
 1574               	.L132:
  82:../../tmk_core/common/command.c ****             break;
 1575               		.loc 1 82 0 is_stmt 0 discriminator 6
 1576 00a6 8170      		andi r24,lo8(1)
 1577 00a8 00C0      		rjmp .L161
 1578               	.L104:
 1579               	.LBB155:
 1580               	.LBB156:
 569:../../tmk_core/common/command.c ****         case KC_H:
 1581               		.loc 1 569 0 is_stmt 1
 1582 00aa C432      		cpi r28,lo8(36)
 1583 00ac 00F4      		brsh .L117
 1584 00ae CE31      		cpi r28,lo8(30)
 1585 00b0 00F0      		brlo .+2
 1586 00b2 00C0      		rjmp .L118
 1587 00b4 CB30      		cpi r28,lo8(11)
 1588 00b6 01F0      		breq .L119
 1589 00b8 00F4      		brsh .L120
 1590 00ba C730      		cpi r28,lo8(7)
 1591 00bc 01F0      		breq .+2
 1592 00be 00C0      		rjmp .L116
 608:../../tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 1593               		.loc 1 608 0
 1594 00c0 8EE1      		ldi r24,lo8(30)
 1595 00c2 8093 0000 		sts mk_delay,r24
 609:../../tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 1596               		.loc 1 609 0
 1597 00c6 82E3      		ldi r24,lo8(50)
 1598 00c8 8093 0000 		sts mk_interval,r24
 610:../../tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 1599               		.loc 1 610 0
 1600 00cc 8AE0      		ldi r24,lo8(10)
 1601 00ce 8093 0000 		sts mk_max_speed,r24
 611:../../tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 1602               		.loc 1 611 0
 1603 00d2 84E1      		ldi r24,lo8(20)
 1604 00d4 8093 0000 		sts mk_time_to_max,r24
 612:../../tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 1605               		.loc 1 612 0
 1606 00d8 88E0      		ldi r24,lo8(8)
 1607 00da 8093 0000 		sts mk_wheel_max_speed,r24
 613:../../tmk_core/common/command.c ****             print("set default\n");
 1608               		.loc 1 613 0
 1609 00de 88E2      		ldi r24,lo8(40)
 1610 00e0 8093 0000 		sts mk_wheel_time_to_max,r24
 614:../../tmk_core/common/command.c ****             break;
 1611               		.loc 1 614 0
 1612 00e4 80E0      		ldi r24,lo8(__c.3013)
 1613 00e6 90E0      		ldi r25,hi8(__c.3013)
 1614 00e8 0E94 0000 		call xputs
 1615 00ec 00C0      		rjmp .L129
 1616               	.L120:
 569:../../tmk_core/common/command.c ****         case KC_H:
 1617               		.loc 1 569 0
 1618 00ee C331      		cpi r28,lo8(19)
 1619 00f0 01F0      		breq .L122
 1620 00f2 C431      		cpi r28,lo8(20)
 1621 00f4 01F0      		breq .L123
 1622 00f6 00C0      		rjmp .L116
 1623               	.L117:
 1624 00f8 CB34      		cpi r28,lo8(75)
 1625 00fa 01F4      		brne .+2
 1626 00fc 00C0      		rjmp .L124
 1627 00fe 00F4      		brsh .L125
 1628 0100 C932      		cpi r28,lo8(41)
 1629 0102 01F0      		breq .L123
 1630 0104 C833      		cpi r28,lo8(56)
 1631 0106 01F0      		breq .L119
 1632 0108 00C0      		rjmp .L116
 1633               	.L125:
 1634 010a C135      		cpi r28,lo8(81)
 1635 010c 01F4      		brne .+2
 1636 010e 00C0      		rjmp .L126
 1637 0110 C235      		cpi r28,lo8(82)
 1638 0112 01F4      		brne .+2
 1639 0114 00C0      		rjmp .L127
 1640 0116 CE34      		cpi r28,lo8(78)
 1641 0118 01F0      		breq .+2
 1642 011a 00C0      		rjmp .L116
 605:../../tmk_core/common/command.c ****             break;
 1643               		.loc 1 605 0
 1644 011c 6AE0      		ldi r22,lo8(10)
 1645 011e 00C0      		rjmp .L163
 1646               	.L119:
 572:../../tmk_core/common/command.c ****             break;
 1647               		.loc 1 572 0
 1648 0120 0E94 0000 		call mousekey_console_help
 1649 0124 00C0      		rjmp .L129
 1650               	.L123:
 576:../../tmk_core/common/command.c ****                 mousekey_param = 0;
 1651               		.loc 1 576 0
 1652 0126 8091 0000 		lds r24,mousekey_param
 1653 012a 8823      		tst r24
 1654 012c 01F0      		breq .L130
 577:../../tmk_core/common/command.c ****             } else {
 1655               		.loc 1 577 0
 1656 012e 1092 0000 		sts mousekey_param,__zero_reg__
 1657 0132 00C0      		rjmp .L129
 1658               	.L130:
 579:../../tmk_core/common/command.c ****                 command_state = CONSOLE;
 1659               		.loc 1 579 0
 1660 0134 80E0      		ldi r24,lo8(__c.2999)
 1661 0136 90E0      		ldi r25,hi8(__c.2999)
 1662 0138 0E94 0000 		call xputs
 580:../../tmk_core/common/command.c ****                 return false;
 1663               		.loc 1 580 0
 1664 013c 81E0      		ldi r24,lo8(1)
 1665 013e 8093 0000 		sts command_state,r24
 1666 0142 00C0      		rjmp .L161
 1667               	.L122:
 1668               	.LBB157:
 1669               	.LBB158:
 437:../../tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 1670               		.loc 1 437 0
 1671 0144 80E0      		ldi r24,lo8(__c.2900)
 1672 0146 90E0      		ldi r25,hi8(__c.2900)
 1673 0148 0E94 0000 		call xputs
 438:../../tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 1674               		.loc 1 438 0
 1675 014c 80E0      		ldi r24,lo8(__c.2902)
 1676 014e 90E0      		ldi r25,hi8(__c.2902)
 1677 0150 0E94 0000 		call xputs
 1678 0154 8091 0000 		lds r24,mk_delay
 1679 0158 1F92      		push __zero_reg__
 1680               	.LCFI136:
 1681               		.cfi_def_cfa_offset 4
 1682 015a 8F93      		push r24
 1683               	.LCFI137:
 1684               		.cfi_def_cfa_offset 5
 1685 015c 80E0      		ldi r24,lo8(__c.2904)
 1686 015e 90E0      		ldi r25,hi8(__c.2904)
 1687 0160 9F93      		push r25
 1688               	.LCFI138:
 1689               		.cfi_def_cfa_offset 6
 1690 0162 8F93      		push r24
 1691               	.LCFI139:
 1692               		.cfi_def_cfa_offset 7
 1693 0164 0E94 0000 		call __xprintf
 1694 0168 80E0      		ldi r24,lo8(__c.2906)
 1695 016a 90E0      		ldi r25,hi8(__c.2906)
 1696 016c 0E94 0000 		call xputs
 439:../../tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 1697               		.loc 1 439 0
 1698 0170 80E0      		ldi r24,lo8(__c.2908)
 1699 0172 90E0      		ldi r25,hi8(__c.2908)
 1700 0174 0E94 0000 		call xputs
 1701 0178 8091 0000 		lds r24,mk_interval
 1702 017c 1F92      		push __zero_reg__
 1703               	.LCFI140:
 1704               		.cfi_def_cfa_offset 8
 1705 017e 8F93      		push r24
 1706               	.LCFI141:
 1707               		.cfi_def_cfa_offset 9
 1708 0180 80E0      		ldi r24,lo8(__c.2910)
 1709 0182 90E0      		ldi r25,hi8(__c.2910)
 1710 0184 9F93      		push r25
 1711               	.LCFI142:
 1712               		.cfi_def_cfa_offset 10
 1713 0186 8F93      		push r24
 1714               	.LCFI143:
 1715               		.cfi_def_cfa_offset 11
 1716 0188 0E94 0000 		call __xprintf
 1717 018c 80E0      		ldi r24,lo8(__c.2912)
 1718 018e 90E0      		ldi r25,hi8(__c.2912)
 1719 0190 0E94 0000 		call xputs
 440:../../tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 1720               		.loc 1 440 0
 1721 0194 80E0      		ldi r24,lo8(__c.2914)
 1722 0196 90E0      		ldi r25,hi8(__c.2914)
 1723 0198 0E94 0000 		call xputs
 1724 019c 8091 0000 		lds r24,mk_max_speed
 1725 01a0 1F92      		push __zero_reg__
 1726               	.LCFI144:
 1727               		.cfi_def_cfa_offset 12
 1728 01a2 8F93      		push r24
 1729               	.LCFI145:
 1730               		.cfi_def_cfa_offset 13
 1731 01a4 80E0      		ldi r24,lo8(__c.2916)
 1732 01a6 90E0      		ldi r25,hi8(__c.2916)
 1733 01a8 9F93      		push r25
 1734               	.LCFI146:
 1735               		.cfi_def_cfa_offset 14
 1736 01aa 8F93      		push r24
 1737               	.LCFI147:
 1738               		.cfi_def_cfa_offset 15
 1739 01ac 0E94 0000 		call __xprintf
 1740 01b0 80E0      		ldi r24,lo8(__c.2918)
 1741 01b2 90E0      		ldi r25,hi8(__c.2918)
 1742 01b4 0E94 0000 		call xputs
 441:../../tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 1743               		.loc 1 441 0
 1744 01b8 80E0      		ldi r24,lo8(__c.2920)
 1745 01ba 90E0      		ldi r25,hi8(__c.2920)
 1746 01bc 0E94 0000 		call xputs
 1747 01c0 8091 0000 		lds r24,mk_time_to_max
 1748 01c4 1F92      		push __zero_reg__
 1749               	.LCFI148:
 1750               		.cfi_def_cfa_offset 16
 1751 01c6 8F93      		push r24
 1752               	.LCFI149:
 1753               		.cfi_def_cfa_offset 17
 1754 01c8 80E0      		ldi r24,lo8(__c.2922)
 1755 01ca 90E0      		ldi r25,hi8(__c.2922)
 1756 01cc 9F93      		push r25
 1757               	.LCFI150:
 1758               		.cfi_def_cfa_offset 18
 1759 01ce 8F93      		push r24
 1760               	.LCFI151:
 1761               		.cfi_def_cfa_offset 19
 1762 01d0 0E94 0000 		call __xprintf
 1763 01d4 80E0      		ldi r24,lo8(__c.2924)
 1764 01d6 90E0      		ldi r25,hi8(__c.2924)
 1765 01d8 0E94 0000 		call xputs
 442:../../tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 1766               		.loc 1 442 0
 1767 01dc 80E0      		ldi r24,lo8(__c.2926)
 1768 01de 90E0      		ldi r25,hi8(__c.2926)
 1769 01e0 0E94 0000 		call xputs
 1770 01e4 8091 0000 		lds r24,mk_wheel_max_speed
 1771 01e8 1F92      		push __zero_reg__
 1772               	.LCFI152:
 1773               		.cfi_def_cfa_offset 20
 1774 01ea 8F93      		push r24
 1775               	.LCFI153:
 1776               		.cfi_def_cfa_offset 21
 1777 01ec 80E0      		ldi r24,lo8(__c.2928)
 1778 01ee 90E0      		ldi r25,hi8(__c.2928)
 1779 01f0 9F93      		push r25
 1780               	.LCFI154:
 1781               		.cfi_def_cfa_offset 22
 1782 01f2 8F93      		push r24
 1783               	.LCFI155:
 1784               		.cfi_def_cfa_offset 23
 1785 01f4 0E94 0000 		call __xprintf
 1786 01f8 80E0      		ldi r24,lo8(__c.2930)
 1787 01fa 90E0      		ldi r25,hi8(__c.2930)
 1788 01fc 0E94 0000 		call xputs
 443:../../tmk_core/common/command.c **** }
 1789               		.loc 1 443 0
 1790 0200 80E0      		ldi r24,lo8(__c.2932)
 1791 0202 90E0      		ldi r25,hi8(__c.2932)
 1792 0204 0E94 0000 		call xputs
 1793 0208 8091 0000 		lds r24,mk_wheel_time_to_max
 1794 020c 1F92      		push __zero_reg__
 1795               	.LCFI156:
 1796               		.cfi_def_cfa_offset 24
 1797 020e 8F93      		push r24
 1798               	.LCFI157:
 1799               		.cfi_def_cfa_offset 25
 1800 0210 80E0      		ldi r24,lo8(__c.2934)
 1801 0212 90E0      		ldi r25,hi8(__c.2934)
 1802 0214 9F93      		push r25
 1803               	.LCFI158:
 1804               		.cfi_def_cfa_offset 26
 1805 0216 8F93      		push r24
 1806               	.LCFI159:
 1807               		.cfi_def_cfa_offset 27
 1808 0218 0E94 0000 		call __xprintf
 1809 021c 80E0      		ldi r24,lo8(__c.2936)
 1810 021e 90E0      		ldi r25,hi8(__c.2936)
 1811 0220 0E94 0000 		call xputs
 1812 0224 8DB7      		in r24,__SP_L__
 1813 0226 9EB7      		in r25,__SP_H__
 1814 0228 4896      		adiw r24,24
 1815 022a 0FB6      		in __tmp_reg__,__SREG__
 1816 022c F894      		cli
 1817 022e 9EBF      		out __SP_H__,r25
 1818 0230 0FBE      		out __SREG__,__tmp_reg__
 1819 0232 8DBF      		out __SP_L__,r24
 1820               	.LCFI160:
 1821               		.cfi_def_cfa_offset 3
 1822 0234 00C0      		rjmp .L129
 1823               	.L118:
 1824 0236 CE51      		subi r28,lo8(-(-30))
 1825 0238 EC2F      		mov r30,r28
 1826 023a F0E0      		ldi r31,0
 1827 023c E050      		subi r30,lo8(-(CSWTCH.41))
 1828 023e F040      		sbci r31,hi8(-(CSWTCH.41))
 1829               	.LBE158:
 1830               	.LBE157:
 593:../../tmk_core/common/command.c ****             break;
 1831               		.loc 1 593 0
 1832 0240 8081      		ld r24,Z
 1833 0242 8093 0000 		sts mousekey_param,r24
 1834 0246 00C0      		rjmp .L129
 1835               	.L127:
 596:../../tmk_core/common/command.c ****             break;
 1836               		.loc 1 596 0
 1837 0248 61E0      		ldi r22,lo8(1)
 1838 024a 00C0      		rjmp .L162
 1839               	.L126:
 599:../../tmk_core/common/command.c ****             break;
 1840               		.loc 1 599 0
 1841 024c 61E0      		ldi r22,lo8(1)
 1842 024e 00C0      		rjmp .L163
 1843               	.L124:
 602:../../tmk_core/common/command.c ****             break;
 1844               		.loc 1 602 0
 1845 0250 6AE0      		ldi r22,lo8(10)
 1846               	.L162:
 1847 0252 8091 0000 		lds r24,mousekey_param
 1848 0256 0E94 0000 		call mousekey_param_inc
 1849 025a 00C0      		rjmp .L129
 1850               	.L163:
 605:../../tmk_core/common/command.c ****             break;
 1851               		.loc 1 605 0
 1852 025c 8091 0000 		lds r24,mousekey_param
 1853 0260 0E94 0000 		call mousekey_param_dec
 1854 0264 00C0      		rjmp .L129
 1855               	.L116:
 617:../../tmk_core/common/command.c ****             return false;
 1856               		.loc 1 617 0
 1857 0266 80E0      		ldi r24,lo8(__c.3016)
 1858 0268 90E0      		ldi r25,hi8(__c.3016)
 1859 026a 00C0      		rjmp .L165
 1860               	.L129:
 620:../../tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 1861               		.loc 1 620 0
 1862 026c 8091 0000 		lds r24,mousekey_param
 1863 0270 8823      		tst r24
 1864 0272 01F0      		breq .L131
 621:../../tmk_core/common/command.c ****     } else {
 1865               		.loc 1 621 0
 1866 0274 1F92      		push __zero_reg__
 1867               	.LCFI161:
 1868               		.cfi_def_cfa_offset 4
 1869 0276 8F93      		push r24
 1870               	.LCFI162:
 1871               		.cfi_def_cfa_offset 5
 1872 0278 80E0      		ldi r24,lo8(__c.3018)
 1873 027a 90E0      		ldi r25,hi8(__c.3018)
 1874 027c 9F93      		push r25
 1875               	.LCFI163:
 1876               		.cfi_def_cfa_offset 6
 1877 027e 8F93      		push r24
 1878               	.LCFI164:
 1879               		.cfi_def_cfa_offset 7
 1880 0280 0E94 0000 		call __xprintf
 1881 0284 0F90      		pop __tmp_reg__
 1882 0286 0F90      		pop __tmp_reg__
 1883 0288 0F90      		pop __tmp_reg__
 1884 028a 0F90      		pop __tmp_reg__
 1885               	.LCFI165:
 1886               		.cfi_def_cfa_offset 3
 1887 028c 00C0      		rjmp .L164
 1888               	.L131:
 623:../../tmk_core/common/command.c ****     }
 1889               		.loc 1 623 0
 1890 028e 80E0      		ldi r24,lo8(__c.3020)
 1891 0290 90E0      		ldi r25,hi8(__c.3020)
 1892               	.L165:
 1893 0292 0E94 0000 		call xputs
 1894               	.L164:
 1895               	.LBE156:
 1896               	.LBE155:
  93:../../tmk_core/common/command.c **** }
 1897               		.loc 1 93 0
 1898 0296 81E0      		ldi r24,lo8(1)
 1899 0298 00C0      		rjmp .L161
 1900               	.L169:
  90:../../tmk_core/common/command.c ****             return false;
 1901               		.loc 1 90 0
 1902 029a 1092 0000 		sts command_state,__zero_reg__
 1903               	.L133:
  75:../../tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
 1904               		.loc 1 75 0
 1905 029e 80E0      		ldi r24,0
 1906 02a0 00C0      		rjmp .L161
 1907               	.L115:
  82:../../tmk_core/common/command.c ****             break;
 1908               		.loc 1 82 0
 1909 02a2 80E0      		ldi r24,0
 1910 02a4 00C0      		rjmp .L132
 1911               	.L161:
 1912               	/* epilogue start */
  94:../../tmk_core/common/command.c **** 
 1913               		.loc 1 94 0
 1914 02a6 CF91      		pop r28
 1915 02a8 0895      		ret
 1916               		.cfi_endproc
 1917               	.LFE10:
 1919               		.section	.rodata.CSWTCH.41,"a",@progbits
 1922               	CSWTCH.41:
 1923 0000 01        		.byte	1
 1924 0001 02        		.byte	2
 1925 0002 03        		.byte	3
 1926 0003 04        		.byte	4
 1927 0004 05        		.byte	5
 1928 0005 06        		.byte	6
 1929 0006 07        		.byte	7
 1930 0007 08        		.byte	8
 1931 0008 09        		.byte	9
 1932 0009 00        		.byte	0
 1933               		.section	.progmem.data.__c.2982,"a",@progbits
 1936               	__c.2982:
 1937 0000 6D6B 5F77 		.string	"mk_wheel_time_to_max = %d\n"
 1937      6865 656C 
 1937      5F74 696D 
 1937      655F 746F 
 1937      5F6D 6178 
 1938               		.section	.progmem.data.__c.2979,"a",@progbits
 1941               	__c.2979:
 1942 0000 6D6B 5F77 		.string	"mk_wheel_max_speed = %d\n"
 1942      6865 656C 
 1942      5F6D 6178 
 1942      5F73 7065 
 1942      6564 203D 
 1943               		.section	.progmem.data.__c.2976,"a",@progbits
 1946               	__c.2976:
 1947 0000 6D6B 5F74 		.string	"mk_time_to_max = %d\n"
 1947      696D 655F 
 1947      746F 5F6D 
 1947      6178 203D 
 1947      2025 640A 
 1948               		.section	.progmem.data.__c.2973,"a",@progbits
 1951               	__c.2973:
 1952 0000 6D6B 5F6D 		.string	"mk_max_speed = %d\n"
 1952      6178 5F73 
 1952      7065 6564 
 1952      203D 2025 
 1952      640A 00
 1953               		.section	.progmem.data.__c.2970,"a",@progbits
 1956               	__c.2970:
 1957 0000 6D6B 5F69 		.string	"mk_interval = %d\n"
 1957      6E74 6572 
 1957      7661 6C20 
 1957      3D20 2564 
 1957      0A00 
 1958               		.section	.progmem.data.__c.2966,"a",@progbits
 1961               	__c.2966:
 1962 0000 6D6B 5F64 		.string	"mk_delay = %d\n"
 1962      656C 6179 
 1962      203D 2025 
 1962      640A 00
 1963               		.section	.progmem.data.__c.2959,"a",@progbits
 1966               	__c.2959:
 1967 0000 6D6B 5F77 		.string	"mk_wheel_time_to_max = %d\n"
 1967      6865 656C 
 1967      5F74 696D 
 1967      655F 746F 
 1967      5F6D 6178 
 1968               		.section	.progmem.data.__c.2956,"a",@progbits
 1971               	__c.2956:
 1972 0000 6D6B 5F77 		.string	"mk_wheel_max_speed = %d\n"
 1972      6865 656C 
 1972      5F6D 6178 
 1972      5F73 7065 
 1972      6564 203D 
 1973               		.section	.progmem.data.__c.2953,"a",@progbits
 1976               	__c.2953:
 1977 0000 6D6B 5F74 		.string	"mk_time_to_max = %d\n"
 1977      696D 655F 
 1977      746F 5F6D 
 1977      6178 203D 
 1977      2025 640A 
 1978               		.section	.progmem.data.__c.2950,"a",@progbits
 1981               	__c.2950:
 1982 0000 6D6B 5F6D 		.string	"mk_max_speed = %d\n"
 1982      6178 5F73 
 1982      7065 6564 
 1982      203D 2025 
 1982      640A 00
 1983               		.section	.progmem.data.__c.2947,"a",@progbits
 1986               	__c.2947:
 1987 0000 6D6B 5F69 		.string	"mk_interval = %d\n"
 1987      6E74 6572 
 1987      7661 6C20 
 1987      3D20 2564 
 1987      0A00 
 1988               		.section	.progmem.data.__c.2943,"a",@progbits
 1991               	__c.2943:
 1992 0000 6D6B 5F64 		.string	"mk_delay = %d\n"
 1992      656C 6179 
 1992      203D 2025 
 1992      640A 00
 1993               		.section	.progmem.data.__c.2936,"a",@progbits
 1996               	__c.2936:
 1997 0000 0A00      		.string	"\n"
 1998               		.section	.progmem.data.__c.2934,"a",@progbits
 2001               	__c.2934:
 2002 0000 2575 00   		.string	"%u"
 2003               		.section	.progmem.data.__c.2932,"a",@progbits
 2006               	__c.2932:
 2007 0000 363A 2077 		.string	"6: wheel_time_to_max: "
 2007      6865 656C 
 2007      5F74 696D 
 2007      655F 746F 
 2007      5F6D 6178 
 2008               		.section	.progmem.data.__c.2930,"a",@progbits
 2011               	__c.2930:
 2012 0000 0A00      		.string	"\n"
 2013               		.section	.progmem.data.__c.2928,"a",@progbits
 2016               	__c.2928:
 2017 0000 2575 00   		.string	"%u"
 2018               		.section	.progmem.data.__c.2926,"a",@progbits
 2021               	__c.2926:
 2022 0000 353A 2077 		.string	"5: wheel_max_speed: "
 2022      6865 656C 
 2022      5F6D 6178 
 2022      5F73 7065 
 2022      6564 3A20 
 2023               		.section	.progmem.data.__c.2924,"a",@progbits
 2026               	__c.2924:
 2027 0000 0A00      		.string	"\n"
 2028               		.section	.progmem.data.__c.2922,"a",@progbits
 2031               	__c.2922:
 2032 0000 2575 00   		.string	"%u"
 2033               		.section	.progmem.data.__c.2920,"a",@progbits
 2036               	__c.2920:
 2037 0000 343A 2074 		.string	"4: time_to_max: "
 2037      696D 655F 
 2037      746F 5F6D 
 2037      6178 3A20 
 2037      00
 2038               		.section	.progmem.data.__c.2918,"a",@progbits
 2041               	__c.2918:
 2042 0000 0A00      		.string	"\n"
 2043               		.section	.progmem.data.__c.2916,"a",@progbits
 2046               	__c.2916:
 2047 0000 2575 00   		.string	"%u"
 2048               		.section	.progmem.data.__c.2914,"a",@progbits
 2051               	__c.2914:
 2052 0000 333A 206D 		.string	"3: max_speed: "
 2052      6178 5F73 
 2052      7065 6564 
 2052      3A20 00
 2053               		.section	.progmem.data.__c.2912,"a",@progbits
 2056               	__c.2912:
 2057 0000 0A00      		.string	"\n"
 2058               		.section	.progmem.data.__c.2910,"a",@progbits
 2061               	__c.2910:
 2062 0000 2575 00   		.string	"%u"
 2063               		.section	.progmem.data.__c.2908,"a",@progbits
 2066               	__c.2908:
 2067 0000 323A 2069 		.string	"2: interval(ms): "
 2067      6E74 6572 
 2067      7661 6C28 
 2067      6D73 293A 
 2067      2000 
 2068               		.section	.progmem.data.__c.2906,"a",@progbits
 2071               	__c.2906:
 2072 0000 0A00      		.string	"\n"
 2073               		.section	.progmem.data.__c.2904,"a",@progbits
 2076               	__c.2904:
 2077 0000 2575 00   		.string	"%u"
 2078               		.section	.progmem.data.__c.2902,"a",@progbits
 2081               	__c.2902:
 2082 0000 313A 2064 		.string	"1: delay(*10ms): "
 2082      656C 6179 
 2082      282A 3130 
 2082      6D73 293A 
 2082      2000 
 2083               		.section	.progmem.data.__c.2900,"a",@progbits
 2086               	__c.2900:
 2087 0000 0A09 2D20 		.string	"\n\t- Values -\n"
 2087      5661 6C75 
 2087      6573 202D 
 2087      0A00 
 2088               		.section	.progmem.data.__c.3020,"a",@progbits
 2091               	__c.3020:
 2092 0000 4D3E 00   		.string	"M>"
 2093               		.section	.progmem.data.__c.3018,"a",@progbits
 2096               	__c.3018:
 2097 0000 4D25 643E 		.string	"M%d> "
 2097      2000 
 2098               		.section	.progmem.data.__c.3016,"a",@progbits
 2101               	__c.3016:
 2102 0000 3F00      		.string	"?"
 2103               		.section	.progmem.data.__c.3013,"a",@progbits
 2106               	__c.3013:
 2107 0000 7365 7420 		.string	"set default\n"
 2107      6465 6661 
 2107      756C 740A 
 2107      00
 2108               		.section	.progmem.data.__c.2999,"a",@progbits
 2111               	__c.2999:
 2112 0000 433E 2000 		.string	"C> "
 2113               		.section	.progmem.data.__c.2989,"a",@progbits
 2116               	__c.2989:
 2117 0000 7768 6572 		.string	"where delta: cursor=%d, wheel=%d\nSee http://en.wikipedia.org/wiki/Mouse_keys\n"
 2117      6520 6465 
 2117      6C74 613A 
 2117      2063 7572 
 2117      736F 723D 
 2118               		.section	.progmem.data.__c.2987,"a",@progbits
 2121               	__c.2987:
 2122 0000 0A09 2D20 		.string	"\n\t- Mousekey -\nESC/q:\tquit\n1:\tdelay(*10ms)\n2:\tinterval(ms)\n3:\tmax_speed\n4:\tti
 2122      4D6F 7573 
 2122      656B 6579 
 2122      202D 0A45 
 2122      5343 2F71 
 2123               		.section	.progmem.data.__c.2892,"a",@progbits
 2126               	__c.2892:
 2127 0000 3F00      		.string	"?"
 2128               		.section	.progmem.data.__c.2889,"a",@progbits
 2131               	__c.2889:
 2132 0000 4D3E 2000 		.string	"M> "
 2133               		.section	.progmem.data.__c.2894,"a",@progbits
 2136               	__c.2894:
 2137 0000 433E 2000 		.string	"C> "
 2138               		.section	.progmem.data.__c.3038,"a",@progbits
 2141               	__c.3038:
 2142 0000 4C25 640A 		.string	"L%d\n"
 2142      00
 2143               		.section	.progmem.data.__c.2878,"a",@progbits
 2146               	__c.2878:
 2147 0000 0A09 2D20 		.string	"\n\t- Console -\nESC/q:\tquit\nm:\tmousekey\n"
 2147      436F 6E73 
 2147      6F6C 6520 
 2147      2D0A 4553 
 2147      432F 713A 
 2148               		.section	.progmem.data.__c.2710,"a",@progbits
 2151               	__c.2710:
 2152 0000 0A09 2D20 		.string	"\n\t- Magic -\nd:\tdebug\nx:\tdebug matrix\nk:\tdebug keyboard\nm:\tdebug mouse\nv:\tvers
 2152      4D61 6769 
 2152      6320 2D0A 
 2152      643A 0964 
 2152      6562 7567 
 2153               		.section	.progmem.data.__c.2805,"a",@progbits
 2156               	__c.2805:
 2157 0000 0A00      		.string	"\n"
 2158               		.section	.progmem.data.__c.2803,"a",@progbits
 2161               	__c.2803:
 2162 0000 2575 00   		.string	"%u"
 2163               		.section	.progmem.data.__c.2801,"a",@progbits
 2166               	__c.2801:
 2167 0000 2E6E 6B72 		.string	".nkro: "
 2167      6F3A 2000 
 2168               		.section	.progmem.data.__c.2799,"a",@progbits
 2171               	__c.2799:
 2172 0000 0A00      		.string	"\n"
 2173               		.section	.progmem.data.__c.2797,"a",@progbits
 2176               	__c.2797:
 2177 0000 2575 00   		.string	"%u"
 2178               		.section	.progmem.data.__c.2795,"a",@progbits
 2181               	__c.2795:
 2182 0000 2E73 7761 		.string	".swap_backslash_backspace: "
 2182      705F 6261 
 2182      636B 736C 
 2182      6173 685F 
 2182      6261 636B 
 2183               		.section	.progmem.data.__c.2793,"a",@progbits
 2186               	__c.2793:
 2187 0000 0A00      		.string	"\n"
 2188               		.section	.progmem.data.__c.2791,"a",@progbits
 2191               	__c.2791:
 2192 0000 2575 00   		.string	"%u"
 2193               		.section	.progmem.data.__c.2789,"a",@progbits
 2196               	__c.2789:
 2197 0000 2E73 7761 		.string	".swap_grave_esc: "
 2197      705F 6772 
 2197      6176 655F 
 2197      6573 633A 
 2197      2000 
 2198               		.section	.progmem.data.__c.2787,"a",@progbits
 2201               	__c.2787:
 2202 0000 0A00      		.string	"\n"
 2203               		.section	.progmem.data.__c.2785,"a",@progbits
 2206               	__c.2785:
 2207 0000 2575 00   		.string	"%u"
 2208               		.section	.progmem.data.__c.2783,"a",@progbits
 2211               	__c.2783:
 2212 0000 2E6E 6F5F 		.string	".no_gui: "
 2212      6775 693A 
 2212      2000 
 2213               		.section	.progmem.data.__c.2781,"a",@progbits
 2216               	__c.2781:
 2217 0000 0A00      		.string	"\n"
 2218               		.section	.progmem.data.__c.2779,"a",@progbits
 2221               	__c.2779:
 2222 0000 2575 00   		.string	"%u"
 2223               		.section	.progmem.data.__c.2777,"a",@progbits
 2226               	__c.2777:
 2227 0000 2E73 7761 		.string	".swap_ralt_rgui: "
 2227      705F 7261 
 2227      6C74 5F72 
 2227      6775 693A 
 2227      2000 
 2228               		.section	.progmem.data.__c.2775,"a",@progbits
 2231               	__c.2775:
 2232 0000 0A00      		.string	"\n"
 2233               		.section	.progmem.data.__c.2773,"a",@progbits
 2236               	__c.2773:
 2237 0000 2575 00   		.string	"%u"
 2238               		.section	.progmem.data.__c.2771,"a",@progbits
 2241               	__c.2771:
 2242 0000 2E73 7761 		.string	".swap_lalt_lgui: "
 2242      705F 6C61 
 2242      6C74 5F6C 
 2242      6775 693A 
 2242      2000 
 2243               		.section	.progmem.data.__c.2769,"a",@progbits
 2246               	__c.2769:
 2247 0000 0A00      		.string	"\n"
 2248               		.section	.progmem.data.__c.2767,"a",@progbits
 2251               	__c.2767:
 2252 0000 2575 00   		.string	"%u"
 2253               		.section	.progmem.data.__c.2765,"a",@progbits
 2256               	__c.2765:
 2257 0000 2E63 6170 		.string	".capslock_to_control: "
 2257      736C 6F63 
 2257      6B5F 746F 
 2257      5F63 6F6E 
 2257      7472 6F6C 
 2258               		.section	.progmem.data.__c.2763,"a",@progbits
 2261               	__c.2763:
 2262 0000 0A00      		.string	"\n"
 2263               		.section	.progmem.data.__c.2761,"a",@progbits
 2266               	__c.2761:
 2267 0000 2575 00   		.string	"%u"
 2268               		.section	.progmem.data.__c.2759,"a",@progbits
 2271               	__c.2759:
 2272 0000 2E73 7761 		.string	".swap_control_capslock: "
 2272      705F 636F 
 2272      6E74 726F 
 2272      6C5F 6361 
 2272      7073 6C6F 
 2273               		.section	.progmem.data.__c.2757,"a",@progbits
 2276               	__c.2757:
 2277 0000 0A00      		.string	"\n"
 2278               		.section	.progmem.data.__c.2755,"a",@progbits
 2281               	__c.2755:
 2282 0000 2530 3258 		.string	"%02X"
 2282      00
 2283               		.section	.progmem.data.__c.2753,"a",@progbits
 2286               	__c.2753:
 2287 0000 6B65 796D 		.string	"keymap_config.raw: "
 2287      6170 5F63 
 2287      6F6E 6669 
 2287      672E 7261 
 2287      773A 2000 
 2288               		.section	.progmem.data.__c.2750,"a",@progbits
 2291               	__c.2750:
 2292 0000 0A00      		.string	"\n"
 2293               		.section	.progmem.data.__c.2748,"a",@progbits
 2296               	__c.2748:
 2297 0000 2575 00   		.string	"%u"
 2298               		.section	.progmem.data.__c.2746,"a",@progbits
 2301               	__c.2746:
 2302 0000 2E6D 6F75 		.string	".mouse: "
 2302      7365 3A20 
 2302      00
 2303               		.section	.progmem.data.__c.2744,"a",@progbits
 2306               	__c.2744:
 2307 0000 0A00      		.string	"\n"
 2308               		.section	.progmem.data.__c.2742,"a",@progbits
 2311               	__c.2742:
 2312 0000 2575 00   		.string	"%u"
 2313               		.section	.progmem.data.__c.2740,"a",@progbits
 2316               	__c.2740:
 2317 0000 2E6B 6579 		.string	".keyboard: "
 2317      626F 6172 
 2317      643A 2000 
 2318               		.section	.progmem.data.__c.2738,"a",@progbits
 2321               	__c.2738:
 2322 0000 0A00      		.string	"\n"
 2323               		.section	.progmem.data.__c.2736,"a",@progbits
 2326               	__c.2736:
 2327 0000 2575 00   		.string	"%u"
 2328               		.section	.progmem.data.__c.2734,"a",@progbits
 2331               	__c.2734:
 2332 0000 2E6D 6174 		.string	".matrix: "
 2332      7269 783A 
 2332      2000 
 2333               		.section	.progmem.data.__c.2732,"a",@progbits
 2336               	__c.2732:
 2337 0000 0A00      		.string	"\n"
 2338               		.section	.progmem.data.__c.2730,"a",@progbits
 2341               	__c.2730:
 2342 0000 2575 00   		.string	"%u"
 2343               		.section	.progmem.data.__c.2728,"a",@progbits
 2346               	__c.2728:
 2347 0000 2E65 6E61 		.string	".enable: "
 2347      626C 653A 
 2347      2000 
 2348               		.section	.progmem.data.__c.2726,"a",@progbits
 2351               	__c.2726:
 2352 0000 0A00      		.string	"\n"
 2353               		.section	.progmem.data.__c.2724,"a",@progbits
 2356               	__c.2724:
 2357 0000 2530 3258 		.string	"%02X"
 2357      00
 2358               		.section	.progmem.data.__c.2722,"a",@progbits
 2361               	__c.2722:
 2362 0000 6465 6275 		.string	"debug_config.raw: "
 2362      675F 636F 
 2362      6E66 6967 
 2362      2E72 6177 
 2362      3A20 00
 2363               		.section	.progmem.data.__c.2719,"a",@progbits
 2366               	__c.2719:
 2367 0000 0A00      		.string	"\n"
 2368               		.section	.progmem.data.__c.2717,"a",@progbits
 2371               	__c.2717:
 2372 0000 2575 00   		.string	"%u"
 2373               		.section	.progmem.data.__c.2715,"a",@progbits
 2376               	__c.2715:
 2377 0000 6465 6661 		.string	"default_layer: "
 2377      756C 745F 
 2377      6C61 7965 
 2377      723A 2000 
 2378               		.section	.progmem.data.__c.2873,"a",@progbits
 2381               	__c.2873:
 2382 0000 3F00      		.string	"?"
 2383               		.section	.progmem.data.__c.2864,"a",@progbits
 2386               	__c.2864:
 2387 0000 7469 6D65 		.string	"timer_read32(): %04lX\n"
 2387      725F 7265 
 2387      6164 3332 
 2387      2829 3A20 
 2387      2530 346C 
 2388               		.section	.progmem.data.__c.2862,"a",@progbits
 2391               	__c.2862:
 2392 0000 6B65 7962 		.string	"keyboard_idle: %X\n"
 2392      6F61 7264 
 2392      5F69 646C 
 2392      653A 2025 
 2392      580A 00
 2393               		.section	.progmem.data.__c.2860,"a",@progbits
 2396               	__c.2860:
 2397 0000 6B65 7962 		.string	"keyboard_protocol: %X\n"
 2397      6F61 7264 
 2397      5F70 726F 
 2397      746F 636F 
 2397      6C3A 2025 
 2398               		.section	.progmem.data.__c.2858,"a",@progbits
 2401               	__c.2858:
 2402 0000 686F 7374 		.string	"host_keyboard_leds(): %X\n"
 2402      5F6B 6579 
 2402      626F 6172 
 2402      645F 6C65 
 2402      6473 2829 
 2403               		.section	.progmem.data.__c.2856,"a",@progbits
 2406               	__c.2856:
 2407 0000 0A09 2D20 		.string	"\n\t- Status -\n"
 2407      5374 6174 
 2407      7573 202D 
 2407      0A00 
 2408               		.section	.progmem.data.__c.2853,"a",@progbits
 2411               	__c.2853:
 2412 0000 4743 433A 		.string	"GCC: 5.4.0 AVR-LIBC: 2.0.0 AVR_ARCH: avr35\n"
 2412      2035 2E34 
 2412      2E30 2041 
 2412      5652 2D4C 
 2412      4942 433A 
 2413               		.section	.progmem.data.__c.2851,"a",@progbits
 2416               	__c.2851:
 2417 0000 4F50 5449 		.string	"OPTIONS: LUFA BOOTMAGIC MOUSEKEY EXTRAKEY CONSOLE COMMAND 4096\n"
 2417      4F4E 533A 
 2417      204C 5546 
 2417      4120 424F 
 2417      4F54 4D41 
 2418               		.section	.progmem.data.__c.2849,"a",@progbits
 2421               	__c.2849:
 2422 0000 4255 494C 		.string	"BUILD: c5d6cc3-dirty (23:12:56 Dec 24 2021)\n"
 2422      443A 2063 
 2422      3564 3663 
 2422      6333 2D64 
 2422      6972 7479 
 2423               		.section	.progmem.data.__c.2847,"a",@progbits
 2426               	__c.2847:
 2427 0000 5649 443A 		.string	"VID: 0xFEED(TMK) PID: 0x6464(Alps64_AD) VER: 0x0001\n"
 2427      2030 7846 
 2427      4545 4428 
 2427      544D 4B29 
 2427      2050 4944 
 2428               		.section	.progmem.data.__c.2845,"a",@progbits
 2431               	__c.2845:
 2432 0000 4445 5343 		.string	"DESC: TMK keyboard firmware for Alps64\n"
 2432      3A20 544D 
 2432      4B20 6B65 
 2432      7962 6F61 
 2432      7264 2066 
 2433               		.section	.progmem.data.__c.2843,"a",@progbits
 2436               	__c.2843:
 2437 0000 0A09 2D20 		.string	"\n\t- Version -\n"
 2437      5665 7273 
 2437      696F 6E20 
 2437      2D0A 00
 2438               		.section	.progmem.data.__c.2840,"a",@progbits
 2441               	__c.2840:
 2442 0000 0A6D 6F75 		.string	"\nmouse: off\n"
 2442      7365 3A20 
 2442      6F66 660A 
 2442      00
 2443               		.section	.progmem.data.__c.2838,"a",@progbits
 2446               	__c.2838:
 2447 0000 0A6D 6F75 		.string	"\nmouse: on\n"
 2447      7365 3A20 
 2447      6F6E 0A00 
 2448               		.section	.progmem.data.__c.2835,"a",@progbits
 2451               	__c.2835:
 2452 0000 0A6B 6579 		.string	"\nkeyboard: off\n"
 2452      626F 6172 
 2452      643A 206F 
 2452      6666 0A00 
 2453               		.section	.progmem.data.__c.2833,"a",@progbits
 2456               	__c.2833:
 2457 0000 0A6B 6579 		.string	"\nkeyboard: on\n"
 2457      626F 6172 
 2457      643A 206F 
 2457      6E0A 00
 2458               		.section	.progmem.data.__c.2830,"a",@progbits
 2461               	__c.2830:
 2462 0000 0A6D 6174 		.string	"\nmatrix: off\n"
 2462      7269 783A 
 2462      206F 6666 
 2462      0A00 
 2463               		.section	.progmem.data.__c.2828,"a",@progbits
 2466               	__c.2828:
 2467 0000 0A6D 6174 		.string	"\nmatrix: on\n"
 2467      7269 783A 
 2467      206F 6E0A 
 2467      00
 2468               		.section	.progmem.data.__c.2825,"a",@progbits
 2471               	__c.2825:
 2472 0000 0A64 6562 		.string	"\ndebug: on\n"
 2472      7567 3A20 
 2472      6F6E 0A00 
 2473               		.section	.progmem.data.__c.2823,"a",@progbits
 2476               	__c.2823:
 2477 0000 0A64 6562 		.string	"\ndebug: off\n"
 2477      7567 3A20 
 2477      6F66 660A 
 2477      00
 2478               		.section	.progmem.data.__c.2820,"a",@progbits
 2481               	__c.2820:
 2482 0000 0A0A 626F 		.string	"\n\nbootloader... "
 2482      6F74 6C6F 
 2482      6164 6572 
 2482      2E2E 2E20 
 2482      00
 2483               		.section	.progmem.data.__c.2817,"a",@progbits
 2486               	__c.2817:
 2487 0000 433E 2000 		.string	"C> "
 2488               		.section	.progmem.data.__c.2811,"a",@progbits
 2491               	__c.2811:
 2492 0000 6565 636F 		.string	"eeconfig:\n"
 2492      6E66 6967 
 2492      3A0A 00
 2493               		.section	.bss.mousekey_param,"aw",@nobits
 2496               	mousekey_param:
 2497 0000 00        		.zero	1
 2498               	.global	command_state
 2499               		.section	.bss.command_state,"aw",@nobits
 2502               	command_state:
 2503 0000 00        		.zero	1
 2504               		.text
 2505               	.Letext0:
 2506               		.file 3 "/usr/lib/avr/include/stdint.h"
 2507               		.file 4 "../../tmk_core/common/report.h"
 2508               		.file 5 "../../tmk_core/common/keymap.h"
 2509               		.file 6 "../../tmk_core/common/debug.h"
 2510               		.file 7 "../../tmk_core/common/command.h"
 2511               		.file 8 "../../tmk_core/common/host.h"
 2512               		.file 9 "../../tmk_core/common/action_util.h"
 2513               		.file 10 "../../tmk_core/common/mousekey.h"
 2514               		.file 11 "../../tmk_core/common/avr/xprintf.h"
 2515               		.file 12 "../../tmk_core/common/action_layer.h"
 2516               		.file 13 "../../tmk_core/common/action.h"
 2517               		.file 14 "../../tmk_core/common/keycode.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 command.c
     /tmp/ccIgXKHO.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccIgXKHO.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccIgXKHO.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccIgXKHO.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccIgXKHO.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccIgXKHO.s:12     .text.mousekey_console_help:0000000000000000 mousekey_console_help
     /tmp/ccIgXKHO.s:2121   .progmem.data.__c.2987:0000000000000000 __c.2987
     /tmp/ccIgXKHO.s:2116   .progmem.data.__c.2989:0000000000000000 __c.2989
     /tmp/ccIgXKHO.s:66     .text.mousekey_param_inc:0000000000000000 mousekey_param_inc
     /tmp/ccIgXKHO.s:1991   .progmem.data.__c.2943:0000000000000000 __c.2943
     /tmp/ccIgXKHO.s:1986   .progmem.data.__c.2947:0000000000000000 __c.2947
     /tmp/ccIgXKHO.s:1981   .progmem.data.__c.2950:0000000000000000 __c.2950
     /tmp/ccIgXKHO.s:1976   .progmem.data.__c.2953:0000000000000000 __c.2953
     /tmp/ccIgXKHO.s:1971   .progmem.data.__c.2956:0000000000000000 __c.2956
     /tmp/ccIgXKHO.s:1966   .progmem.data.__c.2959:0000000000000000 __c.2959
     /tmp/ccIgXKHO.s:339    .text.mousekey_param_dec:0000000000000000 mousekey_param_dec
     /tmp/ccIgXKHO.s:1961   .progmem.data.__c.2966:0000000000000000 __c.2966
     /tmp/ccIgXKHO.s:1956   .progmem.data.__c.2970:0000000000000000 __c.2970
     /tmp/ccIgXKHO.s:1951   .progmem.data.__c.2973:0000000000000000 __c.2973
     /tmp/ccIgXKHO.s:1946   .progmem.data.__c.2976:0000000000000000 __c.2976
     /tmp/ccIgXKHO.s:1941   .progmem.data.__c.2979:0000000000000000 __c.2979
     /tmp/ccIgXKHO.s:1936   .progmem.data.__c.2982:0000000000000000 __c.2982
     /tmp/ccIgXKHO.s:557    .text.switch_default_layer:0000000000000000 switch_default_layer
     /tmp/ccIgXKHO.s:2141   .progmem.data.__c.3038:0000000000000000 __c.3038
     /tmp/ccIgXKHO.s:626    .text.command_common:0000000000000000 command_common
     /tmp/ccIgXKHO.s:2146   .progmem.data.__c.2878:0000000000000000 __c.2878
     /tmp/ccIgXKHO.s:2486   .progmem.data.__c.2817:0000000000000000 __c.2817
     /tmp/ccIgXKHO.s:2502   .bss.command_state:0000000000000000 command_state
     /tmp/ccIgXKHO.s:2481   .progmem.data.__c.2820:0000000000000000 __c.2820
     /tmp/ccIgXKHO.s:2491   .progmem.data.__c.2811:0000000000000000 __c.2811
     /tmp/ccIgXKHO.s:2376   .progmem.data.__c.2715:0000000000000000 __c.2715
     /tmp/ccIgXKHO.s:2371   .progmem.data.__c.2717:0000000000000000 __c.2717
     /tmp/ccIgXKHO.s:2366   .progmem.data.__c.2719:0000000000000000 __c.2719
     /tmp/ccIgXKHO.s:2361   .progmem.data.__c.2722:0000000000000000 __c.2722
     /tmp/ccIgXKHO.s:2356   .progmem.data.__c.2724:0000000000000000 __c.2724
     /tmp/ccIgXKHO.s:2351   .progmem.data.__c.2726:0000000000000000 __c.2726
     /tmp/ccIgXKHO.s:2346   .progmem.data.__c.2728:0000000000000000 __c.2728
     /tmp/ccIgXKHO.s:2341   .progmem.data.__c.2730:0000000000000000 __c.2730
     /tmp/ccIgXKHO.s:2336   .progmem.data.__c.2732:0000000000000000 __c.2732
     /tmp/ccIgXKHO.s:2331   .progmem.data.__c.2734:0000000000000000 __c.2734
     /tmp/ccIgXKHO.s:2326   .progmem.data.__c.2736:0000000000000000 __c.2736
     /tmp/ccIgXKHO.s:2321   .progmem.data.__c.2738:0000000000000000 __c.2738
     /tmp/ccIgXKHO.s:2316   .progmem.data.__c.2740:0000000000000000 __c.2740
     /tmp/ccIgXKHO.s:2311   .progmem.data.__c.2742:0000000000000000 __c.2742
     /tmp/ccIgXKHO.s:2306   .progmem.data.__c.2744:0000000000000000 __c.2744
     /tmp/ccIgXKHO.s:2301   .progmem.data.__c.2746:0000000000000000 __c.2746
     /tmp/ccIgXKHO.s:2296   .progmem.data.__c.2748:0000000000000000 __c.2748
     /tmp/ccIgXKHO.s:2291   .progmem.data.__c.2750:0000000000000000 __c.2750
     /tmp/ccIgXKHO.s:2286   .progmem.data.__c.2753:0000000000000000 __c.2753
     /tmp/ccIgXKHO.s:2281   .progmem.data.__c.2755:0000000000000000 __c.2755
     /tmp/ccIgXKHO.s:2276   .progmem.data.__c.2757:0000000000000000 __c.2757
     /tmp/ccIgXKHO.s:2271   .progmem.data.__c.2759:0000000000000000 __c.2759
     /tmp/ccIgXKHO.s:2266   .progmem.data.__c.2761:0000000000000000 __c.2761
     /tmp/ccIgXKHO.s:2261   .progmem.data.__c.2763:0000000000000000 __c.2763
     /tmp/ccIgXKHO.s:2256   .progmem.data.__c.2765:0000000000000000 __c.2765
     /tmp/ccIgXKHO.s:2251   .progmem.data.__c.2767:0000000000000000 __c.2767
     /tmp/ccIgXKHO.s:2246   .progmem.data.__c.2769:0000000000000000 __c.2769
     /tmp/ccIgXKHO.s:2241   .progmem.data.__c.2771:0000000000000000 __c.2771
     /tmp/ccIgXKHO.s:2236   .progmem.data.__c.2773:0000000000000000 __c.2773
     /tmp/ccIgXKHO.s:2231   .progmem.data.__c.2775:0000000000000000 __c.2775
     /tmp/ccIgXKHO.s:2226   .progmem.data.__c.2777:0000000000000000 __c.2777
     /tmp/ccIgXKHO.s:2221   .progmem.data.__c.2779:0000000000000000 __c.2779
     /tmp/ccIgXKHO.s:2216   .progmem.data.__c.2781:0000000000000000 __c.2781
     /tmp/ccIgXKHO.s:2211   .progmem.data.__c.2783:0000000000000000 __c.2783
     /tmp/ccIgXKHO.s:2206   .progmem.data.__c.2785:0000000000000000 __c.2785
     /tmp/ccIgXKHO.s:2201   .progmem.data.__c.2787:0000000000000000 __c.2787
     /tmp/ccIgXKHO.s:2196   .progmem.data.__c.2789:0000000000000000 __c.2789
     /tmp/ccIgXKHO.s:2191   .progmem.data.__c.2791:0000000000000000 __c.2791
     /tmp/ccIgXKHO.s:2186   .progmem.data.__c.2793:0000000000000000 __c.2793
     /tmp/ccIgXKHO.s:2181   .progmem.data.__c.2795:0000000000000000 __c.2795
     /tmp/ccIgXKHO.s:2176   .progmem.data.__c.2797:0000000000000000 __c.2797
     /tmp/ccIgXKHO.s:2171   .progmem.data.__c.2799:0000000000000000 __c.2799
     /tmp/ccIgXKHO.s:2166   .progmem.data.__c.2801:0000000000000000 __c.2801
     /tmp/ccIgXKHO.s:2161   .progmem.data.__c.2803:0000000000000000 __c.2803
     /tmp/ccIgXKHO.s:2156   .progmem.data.__c.2805:0000000000000000 __c.2805
     /tmp/ccIgXKHO.s:2151   .progmem.data.__c.2710:0000000000000000 __c.2710
     /tmp/ccIgXKHO.s:2476   .progmem.data.__c.2823:0000000000000000 __c.2823
     /tmp/ccIgXKHO.s:2471   .progmem.data.__c.2825:0000000000000000 __c.2825
     /tmp/ccIgXKHO.s:2466   .progmem.data.__c.2828:0000000000000000 __c.2828
     /tmp/ccIgXKHO.s:2461   .progmem.data.__c.2830:0000000000000000 __c.2830
     /tmp/ccIgXKHO.s:2456   .progmem.data.__c.2833:0000000000000000 __c.2833
     /tmp/ccIgXKHO.s:2451   .progmem.data.__c.2835:0000000000000000 __c.2835
     /tmp/ccIgXKHO.s:2446   .progmem.data.__c.2838:0000000000000000 __c.2838
     /tmp/ccIgXKHO.s:2441   .progmem.data.__c.2840:0000000000000000 __c.2840
     /tmp/ccIgXKHO.s:2436   .progmem.data.__c.2843:0000000000000000 __c.2843
     /tmp/ccIgXKHO.s:2431   .progmem.data.__c.2845:0000000000000000 __c.2845
     /tmp/ccIgXKHO.s:2426   .progmem.data.__c.2847:0000000000000000 __c.2847
     /tmp/ccIgXKHO.s:2421   .progmem.data.__c.2849:0000000000000000 __c.2849
     /tmp/ccIgXKHO.s:2416   .progmem.data.__c.2851:0000000000000000 __c.2851
     /tmp/ccIgXKHO.s:2411   .progmem.data.__c.2853:0000000000000000 __c.2853
     /tmp/ccIgXKHO.s:2406   .progmem.data.__c.2856:0000000000000000 __c.2856
     /tmp/ccIgXKHO.s:2401   .progmem.data.__c.2858:0000000000000000 __c.2858
     /tmp/ccIgXKHO.s:2396   .progmem.data.__c.2860:0000000000000000 __c.2860
     /tmp/ccIgXKHO.s:2391   .progmem.data.__c.2862:0000000000000000 __c.2862
     /tmp/ccIgXKHO.s:2386   .progmem.data.__c.2864:0000000000000000 __c.2864
     /tmp/ccIgXKHO.s:2381   .progmem.data.__c.2873:0000000000000000 __c.2873
     /tmp/ccIgXKHO.s:1425   .text.command_console_extra:0000000000000000 command_console_extra
     /tmp/ccIgXKHO.s:1425   .text.command_console_extra:0000000000000000 command_console_extra.localalias.0
     /tmp/ccIgXKHO.s:1445   .text.command_extra:0000000000000000 command_extra
     /tmp/ccIgXKHO.s:1459   .text.command_proc:0000000000000000 command_proc
     /tmp/ccIgXKHO.s:2131   .progmem.data.__c.2889:0000000000000000 __c.2889
     /tmp/ccIgXKHO.s:2136   .progmem.data.__c.2894:0000000000000000 __c.2894
     /tmp/ccIgXKHO.s:2126   .progmem.data.__c.2892:0000000000000000 __c.2892
     /tmp/ccIgXKHO.s:2106   .progmem.data.__c.3013:0000000000000000 __c.3013
     /tmp/ccIgXKHO.s:2496   .bss.mousekey_param:0000000000000000 mousekey_param
     /tmp/ccIgXKHO.s:2111   .progmem.data.__c.2999:0000000000000000 __c.2999
     /tmp/ccIgXKHO.s:2086   .progmem.data.__c.2900:0000000000000000 __c.2900
     /tmp/ccIgXKHO.s:2081   .progmem.data.__c.2902:0000000000000000 __c.2902
     /tmp/ccIgXKHO.s:2076   .progmem.data.__c.2904:0000000000000000 __c.2904
     /tmp/ccIgXKHO.s:2071   .progmem.data.__c.2906:0000000000000000 __c.2906
     /tmp/ccIgXKHO.s:2066   .progmem.data.__c.2908:0000000000000000 __c.2908
     /tmp/ccIgXKHO.s:2061   .progmem.data.__c.2910:0000000000000000 __c.2910
     /tmp/ccIgXKHO.s:2056   .progmem.data.__c.2912:0000000000000000 __c.2912
     /tmp/ccIgXKHO.s:2051   .progmem.data.__c.2914:0000000000000000 __c.2914
     /tmp/ccIgXKHO.s:2046   .progmem.data.__c.2916:0000000000000000 __c.2916
     /tmp/ccIgXKHO.s:2041   .progmem.data.__c.2918:0000000000000000 __c.2918
     /tmp/ccIgXKHO.s:2036   .progmem.data.__c.2920:0000000000000000 __c.2920
     /tmp/ccIgXKHO.s:2031   .progmem.data.__c.2922:0000000000000000 __c.2922
     /tmp/ccIgXKHO.s:2026   .progmem.data.__c.2924:0000000000000000 __c.2924
     /tmp/ccIgXKHO.s:2021   .progmem.data.__c.2926:0000000000000000 __c.2926
     /tmp/ccIgXKHO.s:2016   .progmem.data.__c.2928:0000000000000000 __c.2928
     /tmp/ccIgXKHO.s:2011   .progmem.data.__c.2930:0000000000000000 __c.2930
     /tmp/ccIgXKHO.s:2006   .progmem.data.__c.2932:0000000000000000 __c.2932
     /tmp/ccIgXKHO.s:2001   .progmem.data.__c.2934:0000000000000000 __c.2934
     /tmp/ccIgXKHO.s:1996   .progmem.data.__c.2936:0000000000000000 __c.2936
     /tmp/ccIgXKHO.s:1922   .rodata.CSWTCH.41:0000000000000000 CSWTCH.41
     /tmp/ccIgXKHO.s:2101   .progmem.data.__c.3016:0000000000000000 __c.3016
     /tmp/ccIgXKHO.s:2096   .progmem.data.__c.3018:0000000000000000 __c.3018
     /tmp/ccIgXKHO.s:2091   .progmem.data.__c.3020:0000000000000000 __c.3020

UNDEFINED SYMBOLS
xputs
__xprintf
mk_delay
mk_interval
mk_max_speed
mk_time_to_max
mk_wheel_max_speed
mk_wheel_time_to_max
default_layer_set
clear_keyboard
debug_config
bootloader_jump
eeconfig_read_default_layer
eeconfig_read_debug
eeconfig_read_keymap
host_keyboard_leds
keyboard_protocol
keyboard_idle
timer_read32
keyboard_report
__do_copy_data
__do_clear_bss
