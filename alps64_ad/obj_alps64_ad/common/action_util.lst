   1               		.file	"action_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.add_key,"ax",@progbits
  11               	.global	add_key
  13               	add_key:
  14               	.LFB2:
  15               		.file 1 "../../tmk_core/common/action_util.c"
   1:../../tmk_core/common/action_util.c **** /*
   2:../../tmk_core/common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/action_util.c **** 
   4:../../tmk_core/common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/action_util.c **** (at your option) any later version.
   8:../../tmk_core/common/action_util.c **** 
   9:../../tmk_core/common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/action_util.c **** GNU General Public License for more details.
  13:../../tmk_core/common/action_util.c **** 
  14:../../tmk_core/common/action_util.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/action_util.c **** */
  17:../../tmk_core/common/action_util.c **** #include "host.h"
  18:../../tmk_core/common/action_util.c **** #include "report.h"
  19:../../tmk_core/common/action_util.c **** #include "debug.h"
  20:../../tmk_core/common/action_util.c **** #include "action_util.h"
  21:../../tmk_core/common/action_util.c **** #include "timer.h"
  22:../../tmk_core/common/action_util.c **** 
  23:../../tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code);
  24:../../tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code);
  25:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  26:../../tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code);
  27:../../tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code);
  28:../../tmk_core/common/action_util.c **** #endif
  29:../../tmk_core/common/action_util.c **** 
  30:../../tmk_core/common/action_util.c **** static uint8_t real_mods = 0;
  31:../../tmk_core/common/action_util.c **** static uint8_t weak_mods = 0;
  32:../../tmk_core/common/action_util.c **** 
  33:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
  34:../../tmk_core/common/action_util.c **** #define RO_ADD(a, b) ((a + b) % KEYBOARD_REPORT_KEYS)
  35:../../tmk_core/common/action_util.c **** #define RO_SUB(a, b) ((a - b + KEYBOARD_REPORT_KEYS) % KEYBOARD_REPORT_KEYS)
  36:../../tmk_core/common/action_util.c **** #define RO_INC(a) RO_ADD(a, 1)
  37:../../tmk_core/common/action_util.c **** #define RO_DEC(a) RO_SUB(a, 1)
  38:../../tmk_core/common/action_util.c **** static int8_t cb_head = 0;
  39:../../tmk_core/common/action_util.c **** static int8_t cb_tail = 0;
  40:../../tmk_core/common/action_util.c **** static int8_t cb_count = 0;
  41:../../tmk_core/common/action_util.c **** #endif
  42:../../tmk_core/common/action_util.c **** 
  43:../../tmk_core/common/action_util.c **** // TODO: pointer variable is not needed
  44:../../tmk_core/common/action_util.c **** //report_keyboard_t keyboard_report = {};
  45:../../tmk_core/common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  46:../../tmk_core/common/action_util.c **** 
  47:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  48:../../tmk_core/common/action_util.c **** static int8_t oneshot_mods = 0;
  49:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  50:../../tmk_core/common/action_util.c **** static int16_t oneshot_time = 0;
  51:../../tmk_core/common/action_util.c **** #endif
  52:../../tmk_core/common/action_util.c **** #endif
  53:../../tmk_core/common/action_util.c **** 
  54:../../tmk_core/common/action_util.c **** 
  55:../../tmk_core/common/action_util.c **** void send_keyboard_report(void) {
  56:../../tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
  57:../../tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
  58:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  59:../../tmk_core/common/action_util.c ****     if (oneshot_mods) {
  60:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  61:../../tmk_core/common/action_util.c ****         if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
  62:../../tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
  63:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
  64:../../tmk_core/common/action_util.c ****         }
  65:../../tmk_core/common/action_util.c **** #endif
  66:../../tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
  67:../../tmk_core/common/action_util.c ****         if (has_anykey()) {
  68:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
  69:../../tmk_core/common/action_util.c ****         }
  70:../../tmk_core/common/action_util.c ****     }
  71:../../tmk_core/common/action_util.c **** #endif
  72:../../tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
  73:../../tmk_core/common/action_util.c **** }
  74:../../tmk_core/common/action_util.c **** 
  75:../../tmk_core/common/action_util.c **** /* key */
  76:../../tmk_core/common/action_util.c **** void add_key(uint8_t key)
  77:../../tmk_core/common/action_util.c **** {
  16               		.loc 1 77 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23               	.LBB4:
  24               	.LBB5:
  78:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  79:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
  80:../../tmk_core/common/action_util.c ****         add_key_bit(key);
  81:../../tmk_core/common/action_util.c ****         return;
  82:../../tmk_core/common/action_util.c ****     }
  83:../../tmk_core/common/action_util.c **** #endif
  84:../../tmk_core/common/action_util.c ****     add_key_byte(key);
  85:../../tmk_core/common/action_util.c **** }
  86:../../tmk_core/common/action_util.c **** 
  87:../../tmk_core/common/action_util.c **** void del_key(uint8_t key)
  88:../../tmk_core/common/action_util.c **** {
  89:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  90:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
  91:../../tmk_core/common/action_util.c ****         del_key_bit(key);
  92:../../tmk_core/common/action_util.c ****         return;
  93:../../tmk_core/common/action_util.c ****     }
  94:../../tmk_core/common/action_util.c **** #endif
  95:../../tmk_core/common/action_util.c ****     del_key_byte(key);
  96:../../tmk_core/common/action_util.c **** }
  97:../../tmk_core/common/action_util.c **** 
  98:../../tmk_core/common/action_util.c **** void clear_keys(void)
  99:../../tmk_core/common/action_util.c **** {
 100:../../tmk_core/common/action_util.c ****     // not clear mods
 101:../../tmk_core/common/action_util.c ****     for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 102:../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 103:../../tmk_core/common/action_util.c ****     }
 104:../../tmk_core/common/action_util.c **** }
 105:../../tmk_core/common/action_util.c **** 
 106:../../tmk_core/common/action_util.c **** 
 107:../../tmk_core/common/action_util.c **** /* modifier */
 108:../../tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 109:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 110:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 111:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 112:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 113:../../tmk_core/common/action_util.c **** 
 114:../../tmk_core/common/action_util.c **** /* weak modifier */
 115:../../tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 116:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 117:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 118:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 119:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 120:../../tmk_core/common/action_util.c **** 
 121:../../tmk_core/common/action_util.c **** /* Oneshot modifier */
 122:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 123:../../tmk_core/common/action_util.c **** void set_oneshot_mods(uint8_t mods)
 124:../../tmk_core/common/action_util.c **** {
 125:../../tmk_core/common/action_util.c ****     oneshot_mods = mods;
 126:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 127:../../tmk_core/common/action_util.c ****     oneshot_time = timer_read();
 128:../../tmk_core/common/action_util.c **** #endif
 129:../../tmk_core/common/action_util.c **** }
 130:../../tmk_core/common/action_util.c **** void clear_oneshot_mods(void)
 131:../../tmk_core/common/action_util.c **** {
 132:../../tmk_core/common/action_util.c ****     oneshot_mods = 0;
 133:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 134:../../tmk_core/common/action_util.c ****     oneshot_time = 0;
 135:../../tmk_core/common/action_util.c **** #endif
 136:../../tmk_core/common/action_util.c **** }
 137:../../tmk_core/common/action_util.c **** #endif
 138:../../tmk_core/common/action_util.c **** 
 139:../../tmk_core/common/action_util.c **** 
 140:../../tmk_core/common/action_util.c **** 
 141:../../tmk_core/common/action_util.c **** 
 142:../../tmk_core/common/action_util.c **** /*
 143:../../tmk_core/common/action_util.c ****  * inspect keyboard state
 144:../../tmk_core/common/action_util.c ****  */
 145:../../tmk_core/common/action_util.c **** uint8_t has_anykey(void)
 146:../../tmk_core/common/action_util.c **** {
 147:../../tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 148:../../tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 149:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 150:../../tmk_core/common/action_util.c ****             cnt++;
 151:../../tmk_core/common/action_util.c ****     }
 152:../../tmk_core/common/action_util.c ****     return cnt;
 153:../../tmk_core/common/action_util.c **** }
 154:../../tmk_core/common/action_util.c **** 
 155:../../tmk_core/common/action_util.c **** uint8_t has_anymod(void)
 156:../../tmk_core/common/action_util.c **** {
 157:../../tmk_core/common/action_util.c ****     return bitpop(real_mods);
 158:../../tmk_core/common/action_util.c **** }
 159:../../tmk_core/common/action_util.c **** 
 160:../../tmk_core/common/action_util.c **** uint8_t get_first_key(void)
 161:../../tmk_core/common/action_util.c **** {
 162:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 163:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
 164:../../tmk_core/common/action_util.c ****         uint8_t i = 0;
 165:../../tmk_core/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 166:../../tmk_core/common/action_util.c ****             ;
 167:../../tmk_core/common/action_util.c ****         return i<<3 | biton(keyboard_report->nkro.bits[i]);
 168:../../tmk_core/common/action_util.c ****     }
 169:../../tmk_core/common/action_util.c **** #endif
 170:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 171:../../tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 172:../../tmk_core/common/action_util.c ****     do {
 173:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] != 0) {
 174:../../tmk_core/common/action_util.c ****             break;
 175:../../tmk_core/common/action_util.c ****         }
 176:../../tmk_core/common/action_util.c ****         i = RO_INC(i);
 177:../../tmk_core/common/action_util.c ****     } while (i != cb_tail);
 178:../../tmk_core/common/action_util.c ****     return keyboard_report->keys[i];
 179:../../tmk_core/common/action_util.c **** #else
 180:../../tmk_core/common/action_util.c ****     return keyboard_report->keys[0];
 181:../../tmk_core/common/action_util.c **** #endif
 182:../../tmk_core/common/action_util.c **** }
 183:../../tmk_core/common/action_util.c **** 
 184:../../tmk_core/common/action_util.c **** 
 185:../../tmk_core/common/action_util.c **** 
 186:../../tmk_core/common/action_util.c **** /* local functions */
 187:../../tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code)
 188:../../tmk_core/common/action_util.c **** {
 189:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 190:../../tmk_core/common/action_util.c ****     int8_t i = cb_head;
 191:../../tmk_core/common/action_util.c ****     int8_t empty = -1;
 192:../../tmk_core/common/action_util.c ****     if (cb_count) {
 193:../../tmk_core/common/action_util.c ****         do {
 194:../../tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 195:../../tmk_core/common/action_util.c ****                 return;
 196:../../tmk_core/common/action_util.c ****             }
 197:../../tmk_core/common/action_util.c ****             if (empty == -1 && keyboard_report->keys[i] == 0) {
 198:../../tmk_core/common/action_util.c ****                 empty = i;
 199:../../tmk_core/common/action_util.c ****             }
 200:../../tmk_core/common/action_util.c ****             i = RO_INC(i);
 201:../../tmk_core/common/action_util.c ****         } while (i != cb_tail);
 202:../../tmk_core/common/action_util.c ****         if (i == cb_tail) {
 203:../../tmk_core/common/action_util.c ****             if (cb_tail == cb_head) {
 204:../../tmk_core/common/action_util.c ****                 // buffer is full
 205:../../tmk_core/common/action_util.c ****                 if (empty == -1) {
 206:../../tmk_core/common/action_util.c ****                     // pop head when has no empty space
 207:../../tmk_core/common/action_util.c ****                     cb_head = RO_INC(cb_head);
 208:../../tmk_core/common/action_util.c ****                     cb_count--;
 209:../../tmk_core/common/action_util.c ****                 }
 210:../../tmk_core/common/action_util.c ****                 else {
 211:../../tmk_core/common/action_util.c ****                     // left shift when has empty space
 212:../../tmk_core/common/action_util.c ****                     uint8_t offset = 1;
 213:../../tmk_core/common/action_util.c ****                     i = RO_INC(empty);
 214:../../tmk_core/common/action_util.c ****                     do {
 215:../../tmk_core/common/action_util.c ****                         if (keyboard_report->keys[i] != 0) {
 216:../../tmk_core/common/action_util.c ****                             keyboard_report->keys[empty] = keyboard_report->keys[i];
 217:../../tmk_core/common/action_util.c ****                             keyboard_report->keys[i] = 0;
 218:../../tmk_core/common/action_util.c ****                             empty = RO_INC(empty);
 219:../../tmk_core/common/action_util.c ****                         }
 220:../../tmk_core/common/action_util.c ****                         else {
 221:../../tmk_core/common/action_util.c ****                             offset++;
 222:../../tmk_core/common/action_util.c ****                         }
 223:../../tmk_core/common/action_util.c ****                         i = RO_INC(i);
 224:../../tmk_core/common/action_util.c ****                     } while (i != cb_tail);
 225:../../tmk_core/common/action_util.c ****                     cb_tail = RO_SUB(cb_tail, offset);
 226:../../tmk_core/common/action_util.c ****                 }
 227:../../tmk_core/common/action_util.c ****             }
 228:../../tmk_core/common/action_util.c ****         }
 229:../../tmk_core/common/action_util.c ****     }
 230:../../tmk_core/common/action_util.c ****     // add to tail
 231:../../tmk_core/common/action_util.c ****     keyboard_report->keys[cb_tail] = code;
 232:../../tmk_core/common/action_util.c ****     cb_tail = RO_INC(cb_tail);
 233:../../tmk_core/common/action_util.c ****     cb_count++;
 234:../../tmk_core/common/action_util.c **** #else
 235:../../tmk_core/common/action_util.c ****     int8_t i = 0;
 236:../../tmk_core/common/action_util.c ****     int8_t empty = -1;
 237:../../tmk_core/common/action_util.c ****     for (; i < KEYBOARD_REPORT_KEYS; i++) {
 238:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
  25               		.loc 1 238 0
  26 0000 2091 0000 		lds r18,keyboard_report
  27 0004 3091 0000 		lds r19,keyboard_report+1
  28 0008 F901      		movw r30,r18
  29 000a 3296      		adiw r30,2
 236:../../tmk_core/common/action_util.c ****     for (; i < KEYBOARD_REPORT_KEYS; i++) {
  30               		.loc 1 236 0
  31 000c 9FEF      		ldi r25,lo8(-1)
 235:../../tmk_core/common/action_util.c ****     int8_t empty = -1;
  32               		.loc 1 235 0
  33 000e 40E0      		ldi r20,0
  34               	.LVL1:
  35               	.L4:
  36               		.loc 1 238 0
  37 0010 5191      		ld r21,Z+
  38 0012 8517      		cp r24,r21
  39 0014 01F0      		breq .L1
 239:../../tmk_core/common/action_util.c ****             break;
 240:../../tmk_core/common/action_util.c ****         }
 241:../../tmk_core/common/action_util.c ****         if (empty == -1 && keyboard_report->keys[i] == 0) {
  40               		.loc 1 241 0
  41 0016 9F3F      		cpi r25,lo8(-1)
  42 0018 01F4      		brne .L3
  43 001a 5111      		cpse r21,__zero_reg__
  44 001c 00C0      		rjmp .L3
  45 001e 942F      		mov r25,r20
  46               	.LVL2:
  47               	.L3:
  48 0020 4F5F      		subi r20,lo8(-(1))
  49               	.LVL3:
 237:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
  50               		.loc 1 237 0
  51 0022 4630      		cpi r20,lo8(6)
  52 0024 01F4      		brne .L4
 242:../../tmk_core/common/action_util.c ****             empty = i;
 243:../../tmk_core/common/action_util.c ****         }
 244:../../tmk_core/common/action_util.c ****     }
 245:../../tmk_core/common/action_util.c ****     if (i == KEYBOARD_REPORT_KEYS) {
 246:../../tmk_core/common/action_util.c ****         if (empty != -1) {
  53               		.loc 1 246 0
  54 0026 9F3F      		cpi r25,lo8(-1)
  55 0028 01F0      		breq .L1
 247:../../tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
  56               		.loc 1 247 0
  57 002a F901      		movw r30,r18
  58 002c E90F      		add r30,r25
  59 002e F11D      		adc r31,__zero_reg__
  60 0030 97FD      		sbrc r25,7
  61 0032 FA95      		dec r31
  62 0034 8283      		std Z+2,r24
  63               	.LVL4:
  64               	.LBE5:
  65               	.LBE4:
  85:../../tmk_core/common/action_util.c **** 
  66               		.loc 1 85 0
  67 0036 0895      		ret
  68               	.LVL5:
  69               	.L1:
  70 0038 0895      		ret
  71               		.cfi_endproc
  72               	.LFE2:
  74               		.section	.text.del_key,"ax",@progbits
  75               	.global	del_key
  77               	del_key:
  78               	.LFB3:
  88:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  79               		.loc 1 88 0
  80               		.cfi_startproc
  81               	.LVL6:
  82               	/* prologue: function */
  83               	/* frame size = 0 */
  84               	/* stack size = 0 */
  85               	.L__stack_usage = 0
  86               	.LBB9:
  87               	.LBB10:
 248:../../tmk_core/common/action_util.c ****         }
 249:../../tmk_core/common/action_util.c ****     }
 250:../../tmk_core/common/action_util.c **** #endif
 251:../../tmk_core/common/action_util.c **** }
 252:../../tmk_core/common/action_util.c **** 
 253:../../tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code)
 254:../../tmk_core/common/action_util.c **** {
 255:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 256:../../tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 257:../../tmk_core/common/action_util.c ****     if (cb_count) {
 258:../../tmk_core/common/action_util.c ****         do {
 259:../../tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 260:../../tmk_core/common/action_util.c ****                 keyboard_report->keys[i] = 0;
 261:../../tmk_core/common/action_util.c ****                 cb_count--;
 262:../../tmk_core/common/action_util.c ****                 if (cb_count == 0) {
 263:../../tmk_core/common/action_util.c ****                     // reset head and tail
 264:../../tmk_core/common/action_util.c ****                     cb_tail = cb_head = 0;
 265:../../tmk_core/common/action_util.c ****                 }
 266:../../tmk_core/common/action_util.c ****                 if (i == RO_DEC(cb_tail)) {
 267:../../tmk_core/common/action_util.c ****                     // left shift when next to tail
 268:../../tmk_core/common/action_util.c ****                     do {
 269:../../tmk_core/common/action_util.c ****                         cb_tail = RO_DEC(cb_tail);
 270:../../tmk_core/common/action_util.c ****                         if (keyboard_report->keys[RO_DEC(cb_tail)] != 0) {
 271:../../tmk_core/common/action_util.c ****                             break;
 272:../../tmk_core/common/action_util.c ****                         }
 273:../../tmk_core/common/action_util.c ****                     } while (cb_tail != cb_head);
 274:../../tmk_core/common/action_util.c ****                 }
 275:../../tmk_core/common/action_util.c ****                 break;
 276:../../tmk_core/common/action_util.c ****             }
 277:../../tmk_core/common/action_util.c ****             i = RO_INC(i);
 278:../../tmk_core/common/action_util.c ****         } while (i != cb_tail);
 279:../../tmk_core/common/action_util.c ****     }
 280:../../tmk_core/common/action_util.c **** #else
 281:../../tmk_core/common/action_util.c ****     for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 282:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
  88               		.loc 1 282 0
  89 0000 E091 0000 		lds r30,keyboard_report
  90 0004 F091 0000 		lds r31,keyboard_report+1
  91 0008 9F01      		movw r18,r30
  92 000a 2A5F      		subi r18,-6
  93 000c 3F4F      		sbci r19,-1
  94               	.LVL7:
  95               	.L12:
  96 000e 9281      		ldd r25,Z+2
  97 0010 8913      		cpse r24,r25
  98 0012 00C0      		rjmp .L11
 283:../../tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
  99               		.loc 1 283 0
 100 0014 1282      		std Z+2,__zero_reg__
 101               	.L11:
 102               	.LVL8:
 103 0016 3196      		adiw r30,1
 104               	.LVL9:
 281:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 105               		.loc 1 281 0
 106 0018 E217      		cp r30,r18
 107 001a F307      		cpc r31,r19
 108 001c 01F4      		brne .L12
 109               	/* epilogue start */
 110               	.LBE10:
 111               	.LBE9:
  96:../../tmk_core/common/action_util.c **** 
 112               		.loc 1 96 0
 113 001e 0895      		ret
 114               		.cfi_endproc
 115               	.LFE3:
 117               		.section	.text.clear_keys,"ax",@progbits
 118               	.global	clear_keys
 120               	clear_keys:
 121               	.LFB4:
  99:../../tmk_core/common/action_util.c ****     // not clear mods
 122               		.loc 1 99 0
 123               		.cfi_startproc
 124               	/* prologue: function */
 125               	/* frame size = 0 */
 126               	/* stack size = 0 */
 127               	.L__stack_usage = 0
 128               	.LVL10:
  99:../../tmk_core/common/action_util.c ****     // not clear mods
 129               		.loc 1 99 0
 130 0000 81E0      		ldi r24,lo8(1)
 131 0002 90E0      		ldi r25,0
 132               	.LVL11:
 133               	.L15:
 134               	.LBB11:
 102:../../tmk_core/common/action_util.c ****     }
 135               		.loc 1 102 0 discriminator 3
 136 0004 E091 0000 		lds r30,keyboard_report
 137 0008 F091 0000 		lds r31,keyboard_report+1
 138 000c E80F      		add r30,r24
 139 000e F91F      		adc r31,r25
 140 0010 1082      		st Z,__zero_reg__
 141               	.LVL12:
 142 0012 0196      		adiw r24,1
 143               	.LVL13:
 101:../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 144               		.loc 1 101 0 discriminator 3
 145 0014 8830      		cpi r24,8
 146 0016 9105      		cpc r25,__zero_reg__
 147 0018 01F4      		brne .L15
 148               	/* epilogue start */
 149               	.LBE11:
 104:../../tmk_core/common/action_util.c **** 
 150               		.loc 1 104 0
 151 001a 0895      		ret
 152               		.cfi_endproc
 153               	.LFE4:
 155               		.section	.text.get_mods,"ax",@progbits
 156               	.global	get_mods
 158               	get_mods:
 159               	.LFB5:
 108:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 160               		.loc 1 108 0
 161               		.cfi_startproc
 162               	/* prologue: function */
 163               	/* frame size = 0 */
 164               	/* stack size = 0 */
 165               	.L__stack_usage = 0
 108:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 166               		.loc 1 108 0
 167 0000 8091 0000 		lds r24,real_mods
 168 0004 0895      		ret
 169               		.cfi_endproc
 170               	.LFE5:
 172               		.section	.text.add_mods,"ax",@progbits
 173               	.global	add_mods
 175               	add_mods:
 176               	.LFB6:
 109:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 177               		.loc 1 109 0
 178               		.cfi_startproc
 179               	.LVL14:
 180               	/* prologue: function */
 181               	/* frame size = 0 */
 182               	/* stack size = 0 */
 183               	.L__stack_usage = 0
 109:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 184               		.loc 1 109 0
 185 0000 9091 0000 		lds r25,real_mods
 186 0004 892B      		or r24,r25
 187               	.LVL15:
 188 0006 8093 0000 		sts real_mods,r24
 189 000a 0895      		ret
 190               		.cfi_endproc
 191               	.LFE6:
 193               		.section	.text.del_mods,"ax",@progbits
 194               	.global	del_mods
 196               	del_mods:
 197               	.LFB7:
 110:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 198               		.loc 1 110 0
 199               		.cfi_startproc
 200               	.LVL16:
 201               	/* prologue: function */
 202               	/* frame size = 0 */
 203               	/* stack size = 0 */
 204               	.L__stack_usage = 0
 110:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 205               		.loc 1 110 0
 206 0000 8095      		com r24
 207               	.LVL17:
 208 0002 9091 0000 		lds r25,real_mods
 209 0006 8923      		and r24,r25
 210               	.LVL18:
 211 0008 8093 0000 		sts real_mods,r24
 212 000c 0895      		ret
 213               		.cfi_endproc
 214               	.LFE7:
 216               		.section	.text.set_mods,"ax",@progbits
 217               	.global	set_mods
 219               	set_mods:
 220               	.LFB8:
 111:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 221               		.loc 1 111 0
 222               		.cfi_startproc
 223               	.LVL19:
 224               	/* prologue: function */
 225               	/* frame size = 0 */
 226               	/* stack size = 0 */
 227               	.L__stack_usage = 0
 111:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 228               		.loc 1 111 0
 229 0000 8093 0000 		sts real_mods,r24
 230 0004 0895      		ret
 231               		.cfi_endproc
 232               	.LFE8:
 234               		.section	.text.clear_mods,"ax",@progbits
 235               	.global	clear_mods
 237               	clear_mods:
 238               	.LFB9:
 112:../../tmk_core/common/action_util.c **** 
 239               		.loc 1 112 0
 240               		.cfi_startproc
 241               	/* prologue: function */
 242               	/* frame size = 0 */
 243               	/* stack size = 0 */
 244               	.L__stack_usage = 0
 112:../../tmk_core/common/action_util.c **** 
 245               		.loc 1 112 0
 246 0000 1092 0000 		sts real_mods,__zero_reg__
 247 0004 0895      		ret
 248               		.cfi_endproc
 249               	.LFE9:
 251               		.section	.text.get_weak_mods,"ax",@progbits
 252               	.global	get_weak_mods
 254               	get_weak_mods:
 255               	.LFB10:
 115:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 256               		.loc 1 115 0
 257               		.cfi_startproc
 258               	/* prologue: function */
 259               	/* frame size = 0 */
 260               	/* stack size = 0 */
 261               	.L__stack_usage = 0
 115:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 262               		.loc 1 115 0
 263 0000 8091 0000 		lds r24,weak_mods
 264 0004 0895      		ret
 265               		.cfi_endproc
 266               	.LFE10:
 268               		.section	.text.add_weak_mods,"ax",@progbits
 269               	.global	add_weak_mods
 271               	add_weak_mods:
 272               	.LFB11:
 116:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 273               		.loc 1 116 0
 274               		.cfi_startproc
 275               	.LVL20:
 276               	/* prologue: function */
 277               	/* frame size = 0 */
 278               	/* stack size = 0 */
 279               	.L__stack_usage = 0
 116:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 280               		.loc 1 116 0
 281 0000 9091 0000 		lds r25,weak_mods
 282 0004 892B      		or r24,r25
 283               	.LVL21:
 284 0006 8093 0000 		sts weak_mods,r24
 285 000a 0895      		ret
 286               		.cfi_endproc
 287               	.LFE11:
 289               		.section	.text.del_weak_mods,"ax",@progbits
 290               	.global	del_weak_mods
 292               	del_weak_mods:
 293               	.LFB12:
 117:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 294               		.loc 1 117 0
 295               		.cfi_startproc
 296               	.LVL22:
 297               	/* prologue: function */
 298               	/* frame size = 0 */
 299               	/* stack size = 0 */
 300               	.L__stack_usage = 0
 117:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 301               		.loc 1 117 0
 302 0000 8095      		com r24
 303               	.LVL23:
 304 0002 9091 0000 		lds r25,weak_mods
 305 0006 8923      		and r24,r25
 306               	.LVL24:
 307 0008 8093 0000 		sts weak_mods,r24
 308 000c 0895      		ret
 309               		.cfi_endproc
 310               	.LFE12:
 312               		.section	.text.set_weak_mods,"ax",@progbits
 313               	.global	set_weak_mods
 315               	set_weak_mods:
 316               	.LFB13:
 118:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 317               		.loc 1 118 0
 318               		.cfi_startproc
 319               	.LVL25:
 320               	/* prologue: function */
 321               	/* frame size = 0 */
 322               	/* stack size = 0 */
 323               	.L__stack_usage = 0
 118:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 324               		.loc 1 118 0
 325 0000 8093 0000 		sts weak_mods,r24
 326 0004 0895      		ret
 327               		.cfi_endproc
 328               	.LFE13:
 330               		.section	.text.clear_weak_mods,"ax",@progbits
 331               	.global	clear_weak_mods
 333               	clear_weak_mods:
 334               	.LFB14:
 119:../../tmk_core/common/action_util.c **** 
 335               		.loc 1 119 0
 336               		.cfi_startproc
 337               	/* prologue: function */
 338               	/* frame size = 0 */
 339               	/* stack size = 0 */
 340               	.L__stack_usage = 0
 119:../../tmk_core/common/action_util.c **** 
 341               		.loc 1 119 0
 342 0000 1092 0000 		sts weak_mods,__zero_reg__
 343 0004 0895      		ret
 344               		.cfi_endproc
 345               	.LFE14:
 347               		.section	.text.set_oneshot_mods,"ax",@progbits
 348               	.global	set_oneshot_mods
 350               	set_oneshot_mods:
 351               	.LFB15:
 124:../../tmk_core/common/action_util.c ****     oneshot_mods = mods;
 352               		.loc 1 124 0
 353               		.cfi_startproc
 354               	.LVL26:
 355               	/* prologue: function */
 356               	/* frame size = 0 */
 357               	/* stack size = 0 */
 358               	.L__stack_usage = 0
 125:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 359               		.loc 1 125 0
 360 0000 8093 0000 		sts oneshot_mods,r24
 361 0004 0895      		ret
 362               		.cfi_endproc
 363               	.LFE15:
 365               		.section	.text.clear_oneshot_mods,"ax",@progbits
 366               	.global	clear_oneshot_mods
 368               	clear_oneshot_mods:
 369               	.LFB16:
 131:../../tmk_core/common/action_util.c ****     oneshot_mods = 0;
 370               		.loc 1 131 0
 371               		.cfi_startproc
 372               	/* prologue: function */
 373               	/* frame size = 0 */
 374               	/* stack size = 0 */
 375               	.L__stack_usage = 0
 132:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 376               		.loc 1 132 0
 377 0000 1092 0000 		sts oneshot_mods,__zero_reg__
 378 0004 0895      		ret
 379               		.cfi_endproc
 380               	.LFE16:
 382               		.section	.text.has_anykey,"ax",@progbits
 383               	.global	has_anykey
 385               	has_anykey:
 386               	.LFB17:
 146:../../tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 387               		.loc 1 146 0
 388               		.cfi_startproc
 389               	/* prologue: function */
 390               	/* frame size = 0 */
 391               	/* stack size = 0 */
 392               	.L__stack_usage = 0
 393               	.LVL27:
 394               	.LBB12:
 149:../../tmk_core/common/action_util.c ****             cnt++;
 395               		.loc 1 149 0
 396 0000 8091 0000 		lds r24,keyboard_report
 397 0004 9091 0000 		lds r25,keyboard_report+1
 398 0008 FC01      		movw r30,r24
 399 000a 3196      		adiw r30,1
 400 000c 9C01      		movw r18,r24
 401 000e 285F      		subi r18,-8
 402 0010 3F4F      		sbci r19,-1
 403               	.LBE12:
 147:../../tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 404               		.loc 1 147 0
 405 0012 80E0      		ldi r24,0
 406               	.LVL28:
 407               	.L31:
 408               	.LBB13:
 149:../../tmk_core/common/action_util.c ****             cnt++;
 409               		.loc 1 149 0
 410 0014 9191      		ld r25,Z+
 411               	.LVL29:
 412 0016 9111      		cpse r25,__zero_reg__
 150:../../tmk_core/common/action_util.c ****     }
 413               		.loc 1 150 0
 414 0018 8F5F      		subi r24,lo8(-(1))
 415               	.LVL30:
 416               	.L30:
 148:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 417               		.loc 1 148 0 discriminator 2
 418 001a E217      		cp r30,r18
 419 001c F307      		cpc r31,r19
 420 001e 01F4      		brne .L31
 421               	/* epilogue start */
 422               	.LBE13:
 153:../../tmk_core/common/action_util.c **** 
 423               		.loc 1 153 0
 424 0020 0895      		ret
 425               		.cfi_endproc
 426               	.LFE17:
 428               		.section	.text.send_keyboard_report,"ax",@progbits
 429               	.global	send_keyboard_report
 431               	send_keyboard_report:
 432               	.LFB1:
  55:../../tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
 433               		.loc 1 55 0
 434               		.cfi_startproc
 435               	/* prologue: function */
 436               	/* frame size = 0 */
 437               	/* stack size = 0 */
 438               	.L__stack_usage = 0
  56:../../tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 439               		.loc 1 56 0
 440 0000 E091 0000 		lds r30,keyboard_report
 441 0004 F091 0000 		lds r31,keyboard_report+1
 442 0008 8091 0000 		lds r24,real_mods
 443 000c 8083      		st Z,r24
  57:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 444               		.loc 1 57 0
 445 000e E091 0000 		lds r30,keyboard_report
 446 0012 F091 0000 		lds r31,keyboard_report+1
 447 0016 9081      		ld r25,Z
 448 0018 8091 0000 		lds r24,weak_mods
 449 001c 892B      		or r24,r25
 450 001e 8083      		st Z,r24
  59:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 451               		.loc 1 59 0
 452 0020 8091 0000 		lds r24,oneshot_mods
 453 0024 8823      		tst r24
 454 0026 01F0      		breq .L38
  66:../../tmk_core/common/action_util.c ****         if (has_anykey()) {
 455               		.loc 1 66 0
 456 0028 E091 0000 		lds r30,keyboard_report
 457 002c F091 0000 		lds r31,keyboard_report+1
 458 0030 9081      		ld r25,Z
 459 0032 892B      		or r24,r25
 460 0034 8083      		st Z,r24
  67:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
 461               		.loc 1 67 0
 462 0036 0E94 0000 		call has_anykey
 463               	.LVL31:
 464 003a 8111      		cpse r24,__zero_reg__
 465               	.LBB16:
 466               	.LBB17:
 132:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 467               		.loc 1 132 0
 468 003c 1092 0000 		sts oneshot_mods,__zero_reg__
 469               	.L38:
 470               	.LBE17:
 471               	.LBE16:
  72:../../tmk_core/common/action_util.c **** }
 472               		.loc 1 72 0
 473 0040 8091 0000 		lds r24,keyboard_report
 474 0044 9091 0000 		lds r25,keyboard_report+1
 475 0048 0C94 0000 		jmp host_keyboard_send
 476               	.LVL32:
 477               		.cfi_endproc
 478               	.LFE1:
 480               		.section	.text.has_anymod,"ax",@progbits
 481               	.global	has_anymod
 483               	has_anymod:
 484               	.LFB18:
 156:../../tmk_core/common/action_util.c ****     return bitpop(real_mods);
 485               		.loc 1 156 0
 486               		.cfi_startproc
 487               	/* prologue: function */
 488               	/* frame size = 0 */
 489               	/* stack size = 0 */
 490               	.L__stack_usage = 0
 157:../../tmk_core/common/action_util.c **** }
 491               		.loc 1 157 0
 492 0000 8091 0000 		lds r24,real_mods
 493 0004 0C94 0000 		jmp bitpop
 494               	.LVL33:
 495               		.cfi_endproc
 496               	.LFE18:
 498               		.section	.text.get_first_key,"ax",@progbits
 499               	.global	get_first_key
 501               	get_first_key:
 502               	.LFB19:
 161:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 503               		.loc 1 161 0
 504               		.cfi_startproc
 505               	/* prologue: function */
 506               	/* frame size = 0 */
 507               	/* stack size = 0 */
 508               	.L__stack_usage = 0
 180:../../tmk_core/common/action_util.c **** #endif
 509               		.loc 1 180 0
 510 0000 E091 0000 		lds r30,keyboard_report
 511 0004 F091 0000 		lds r31,keyboard_report+1
 182:../../tmk_core/common/action_util.c **** 
 512               		.loc 1 182 0
 513 0008 8281      		ldd r24,Z+2
 514 000a 0895      		ret
 515               		.cfi_endproc
 516               	.LFE19:
 518               		.section	.bss.oneshot_mods,"aw",@nobits
 521               	oneshot_mods:
 522 0000 00        		.zero	1
 523               	.global	keyboard_report
 524               		.section	.data.keyboard_report,"aw",@progbits
 527               	keyboard_report:
 528 0000 0000      		.word	__compound_literal.0
 529               		.section	.bss.__compound_literal.0,"aw",@nobits
 532               	__compound_literal.0:
 533 0000 0000 0000 		.zero	8
 533      0000 0000 
 534               		.section	.bss.weak_mods,"aw",@nobits
 537               	weak_mods:
 538 0000 00        		.zero	1
 539               		.section	.bss.real_mods,"aw",@nobits
 542               	real_mods:
 543 0000 00        		.zero	1
 544               		.text
 545               	.Letext0:
 546               		.file 2 "/usr/lib/avr/include/stdint.h"
 547               		.file 3 "../../tmk_core/common/report.h"
 548               		.file 4 "../../tmk_core/common/host.h"
 549               		.file 5 "../../tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_util.c
     /tmp/cc7WwGBi.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc7WwGBi.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc7WwGBi.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc7WwGBi.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc7WwGBi.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc7WwGBi.s:13     .text.add_key:0000000000000000 add_key
     /tmp/cc7WwGBi.s:527    .data.keyboard_report:0000000000000000 keyboard_report
     /tmp/cc7WwGBi.s:77     .text.del_key:0000000000000000 del_key
     /tmp/cc7WwGBi.s:120    .text.clear_keys:0000000000000000 clear_keys
     /tmp/cc7WwGBi.s:158    .text.get_mods:0000000000000000 get_mods
     /tmp/cc7WwGBi.s:542    .bss.real_mods:0000000000000000 real_mods
     /tmp/cc7WwGBi.s:175    .text.add_mods:0000000000000000 add_mods
     /tmp/cc7WwGBi.s:196    .text.del_mods:0000000000000000 del_mods
     /tmp/cc7WwGBi.s:219    .text.set_mods:0000000000000000 set_mods
     /tmp/cc7WwGBi.s:237    .text.clear_mods:0000000000000000 clear_mods
     /tmp/cc7WwGBi.s:254    .text.get_weak_mods:0000000000000000 get_weak_mods
     /tmp/cc7WwGBi.s:537    .bss.weak_mods:0000000000000000 weak_mods
     /tmp/cc7WwGBi.s:271    .text.add_weak_mods:0000000000000000 add_weak_mods
     /tmp/cc7WwGBi.s:292    .text.del_weak_mods:0000000000000000 del_weak_mods
     /tmp/cc7WwGBi.s:315    .text.set_weak_mods:0000000000000000 set_weak_mods
     /tmp/cc7WwGBi.s:333    .text.clear_weak_mods:0000000000000000 clear_weak_mods
     /tmp/cc7WwGBi.s:350    .text.set_oneshot_mods:0000000000000000 set_oneshot_mods
     /tmp/cc7WwGBi.s:521    .bss.oneshot_mods:0000000000000000 oneshot_mods
     /tmp/cc7WwGBi.s:368    .text.clear_oneshot_mods:0000000000000000 clear_oneshot_mods
     /tmp/cc7WwGBi.s:385    .text.has_anykey:0000000000000000 has_anykey
     /tmp/cc7WwGBi.s:431    .text.send_keyboard_report:0000000000000000 send_keyboard_report
     /tmp/cc7WwGBi.s:483    .text.has_anymod:0000000000000000 has_anymod
     /tmp/cc7WwGBi.s:501    .text.get_first_key:0000000000000000 get_first_key
     /tmp/cc7WwGBi.s:532    .bss.__compound_literal.0:0000000000000000 __compound_literal.0

UNDEFINED SYMBOLS
host_keyboard_send
bitpop
__do_copy_data
__do_clear_bss
