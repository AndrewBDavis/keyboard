   1               		.file	"matrix.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.unselect_rows,"ax",@progbits
  12               	unselect_rows:
  13               	.LFB12:
  14               		.file 1 "matrix.c"
   1:matrix.c      **** /*
   2:matrix.c      **** Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:matrix.c      **** 
   4:matrix.c      **** This program is free software: you can redistribute it and/or modify
   5:matrix.c      **** it under the terms of the GNU General Public License as published by
   6:matrix.c      **** the Free Software Foundation, either version 2 of the License, or
   7:matrix.c      **** (at your option) any later version.
   8:matrix.c      **** 
   9:matrix.c      **** This program is distributed in the hope that it will be useful,
  10:matrix.c      **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:matrix.c      **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:matrix.c      **** GNU General Public License for more details.
  13:matrix.c      **** 
  14:matrix.c      **** You should have received a copy of the GNU General Public License
  15:matrix.c      **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:matrix.c      **** */
  17:matrix.c      **** 
  18:matrix.c      **** /*
  19:matrix.c      ****  * scan matrix
  20:matrix.c      ****  */
  21:matrix.c      **** #include <stdint.h>
  22:matrix.c      **** #include <stdbool.h>
  23:matrix.c      **** #include <avr/io.h>
  24:matrix.c      **** #include <util/delay.h>
  25:matrix.c      **** #include "print.h"
  26:matrix.c      **** #include "debug.h"
  27:matrix.c      **** #include "util.h"
  28:matrix.c      **** #include "matrix.h"
  29:matrix.c      **** 
  30:matrix.c      **** 
  31:matrix.c      **** #ifndef DEBOUNCE
  32:matrix.c      **** #   define DEBOUNCE	5
  33:matrix.c      **** #endif
  34:matrix.c      **** static uint8_t debouncing = DEBOUNCE;
  35:matrix.c      **** 
  36:matrix.c      **** /* matrix state(1:on, 0:off) */
  37:matrix.c      **** static matrix_row_t matrix[MATRIX_ROWS];
  38:matrix.c      **** static matrix_row_t matrix_debouncing[MATRIX_ROWS];
  39:matrix.c      **** 
  40:matrix.c      **** static matrix_row_t read_cols(void);
  41:matrix.c      **** static void init_cols(void);
  42:matrix.c      **** static void unselect_rows(void);
  43:matrix.c      **** static void select_row(uint8_t row);
  44:matrix.c      **** 
  45:matrix.c      **** 
  46:matrix.c      **** #define LED_ON()    do { DDRC |= (1<<5); PORTC |= (1<<5); } while (0)
  47:matrix.c      **** #define LED_OFF()   do { DDRC &= ~(1<<5); PORTC &= ~(1<<5); } while (0)
  48:matrix.c      **** #define LED_TGL()   do { DDRC |= (1<<5); PINC |= (1<<5); } while (0)
  49:matrix.c      **** 
  50:matrix.c      **** void matrix_init(void)
  51:matrix.c      **** {
  52:matrix.c      ****     // initialize row and col
  53:matrix.c      ****     unselect_rows();
  54:matrix.c      ****     init_cols();
  55:matrix.c      **** 
  56:matrix.c      ****     // initialize matrix state: all keys off
  57:matrix.c      ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
  58:matrix.c      ****         matrix[i] = 0;
  59:matrix.c      ****         matrix_debouncing[i] = 0;
  60:matrix.c      ****     }
  61:matrix.c      **** 
  62:matrix.c      ****     //debug
  63:matrix.c      ****     debug_matrix = true;
  64:matrix.c      ****     LED_ON();
  65:matrix.c      ****     _delay_ms(500);
  66:matrix.c      ****     LED_OFF();
  67:matrix.c      **** }
  68:matrix.c      **** 
  69:matrix.c      **** uint8_t matrix_scan(void)
  70:matrix.c      **** {
  71:matrix.c      ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
  72:matrix.c      ****         select_row(i);
  73:matrix.c      ****         _delay_us(30);  // without this wait read unstable value.
  74:matrix.c      ****         matrix_row_t cols = read_cols();
  75:matrix.c      ****         if (matrix_debouncing[i] != cols) {
  76:matrix.c      ****             matrix_debouncing[i] = cols;
  77:matrix.c      ****             if (debouncing) {
  78:matrix.c      ****                 debug("bounce!: "); debug_hex(debouncing); debug("\n");
  79:matrix.c      ****             }
  80:matrix.c      ****             debouncing = DEBOUNCE;
  81:matrix.c      ****         }
  82:matrix.c      ****         unselect_rows();
  83:matrix.c      ****     }
  84:matrix.c      **** 
  85:matrix.c      ****     if (debouncing) {
  86:matrix.c      ****         if (--debouncing) {
  87:matrix.c      ****             _delay_ms(1);
  88:matrix.c      ****         } else {
  89:matrix.c      ****             for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
  90:matrix.c      ****                 matrix[i] = matrix_debouncing[i];
  91:matrix.c      ****             }
  92:matrix.c      ****         }
  93:matrix.c      ****     }
  94:matrix.c      **** 
  95:matrix.c      ****     return 1;
  96:matrix.c      **** }
  97:matrix.c      **** 
  98:matrix.c      **** inline
  99:matrix.c      **** matrix_row_t matrix_get_row(uint8_t row)
 100:matrix.c      **** {
 101:matrix.c      ****     return matrix[row];
 102:matrix.c      **** }
 103:matrix.c      **** 
 104:matrix.c      **** /* Column pin configuration
 105:matrix.c      ****  * col: 0   1   2   3   4   5   6   7
 106:matrix.c      ****  * pin: B0  B1  B2  B3  B4  B5  B6  B7
 107:matrix.c      ****  */
 108:matrix.c      **** static void  init_cols(void)
 109:matrix.c      **** {
 110:matrix.c      ****     // Input with pull-up(DDR:0, PORT:1)
 111:matrix.c      ****     DDRB  &= ~0b11111111;
 112:matrix.c      ****     PORTB |=  0b11111111;
 113:matrix.c      **** }
 114:matrix.c      **** 
 115:matrix.c      **** /* Returns status of switches(1:on, 0:off) */
 116:matrix.c      **** static matrix_row_t read_cols(void)
 117:matrix.c      **** {
 118:matrix.c      ****     // Invert because PIN indicates 'switch on' with low(0) and 'off' with high(1)
 119:matrix.c      ****     return ~PINB;
 120:matrix.c      **** }
 121:matrix.c      **** 
 122:matrix.c      **** /* Row pin configuration
 123:matrix.c      ****  * row: 0   1   2   3   4   5   6   7
 124:matrix.c      ****  * pin: D0  D1  D2  D3  D4  D5  D6  C2
 125:matrix.c      ****  */
 126:matrix.c      **** static void unselect_rows(void)
 127:matrix.c      **** {
  15               		.loc 1 127 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 128:matrix.c      ****     // Hi-Z(DDR:0, PORT:0) to unselect
 129:matrix.c      ****     DDRD  &= ~0b01111111;
  21               		.loc 1 129 0
  22 0000 8AB1      		in r24,0xa
  23 0002 8078      		andi r24,lo8(-128)
  24 0004 8AB9      		out 0xa,r24
 130:matrix.c      ****     PORTD &= ~0b01111111;
  25               		.loc 1 130 0
  26 0006 8BB1      		in r24,0xb
  27 0008 8078      		andi r24,lo8(-128)
  28 000a 8BB9      		out 0xb,r24
 131:matrix.c      ****     DDRC  &= ~0b00000100;
  29               		.loc 1 131 0
  30 000c 3A98      		cbi 0x7,2
 132:matrix.c      ****     PORTC &= ~0b00000100;
  31               		.loc 1 132 0
  32 000e 4298      		cbi 0x8,2
  33 0010 0895      		ret
  34               		.cfi_endproc
  35               	.LFE12:
  37               		.section	.text.matrix_init,"ax",@progbits
  38               	.global	matrix_init
  40               	matrix_init:
  41               	.LFB7:
  51:matrix.c      ****     // initialize row and col
  42               		.loc 1 51 0
  43               		.cfi_startproc
  44               	/* prologue: function */
  45               	/* frame size = 0 */
  46               	/* stack size = 0 */
  47               	.L__stack_usage = 0
  53:matrix.c      ****     init_cols();
  48               		.loc 1 53 0
  49 0000 0E94 0000 		call unselect_rows
  50               	.LVL0:
  51               	.LBB20:
  52               	.LBB21:
 111:matrix.c      ****     PORTB |=  0b11111111;
  53               		.loc 1 111 0
  54 0004 84B1      		in r24,0x4
  55 0006 14B8      		out 0x4,__zero_reg__
 112:matrix.c      **** }
  56               		.loc 1 112 0
  57 0008 85B1      		in r24,0x5
  58 000a 8FEF      		ldi r24,lo8(-1)
  59 000c 85B9      		out 0x5,r24
  60               	.LVL1:
  61 000e E0E0      		ldi r30,lo8(matrix)
  62 0010 F0E0      		ldi r31,hi8(matrix)
  63 0012 A0E0      		ldi r26,lo8(matrix_debouncing)
  64 0014 B0E0      		ldi r27,hi8(matrix_debouncing)
  65               	.LVL2:
  66               	.L3:
  67               	.LBE21:
  68               	.LBE20:
  69               	.LBB22:
  58:matrix.c      ****         matrix_debouncing[i] = 0;
  70               		.loc 1 58 0 discriminator 3
  71 0016 1192      		st Z+,__zero_reg__
  72               	.LVL3:
  59:matrix.c      ****     }
  73               		.loc 1 59 0 discriminator 3
  74 0018 1D92      		st X+,__zero_reg__
  75               	.LVL4:
  57:matrix.c      ****         matrix[i] = 0;
  76               		.loc 1 57 0 discriminator 3
  77 001a 20E0      		ldi r18,hi8(matrix+8)
  78 001c E030      		cpi r30,lo8(matrix+8)
  79 001e F207      		cpc r31,r18
  80 0020 01F4      		brne .L3
  81               	.LBE22:
  63:matrix.c      ****     LED_ON();
  82               		.loc 1 63 0
  83 0022 8091 0000 		lds r24,debug_config
  84 0026 8260      		ori r24,lo8(1<<1)
  85 0028 8093 0000 		sts debug_config,r24
  64:matrix.c      ****     _delay_ms(500);
  86               		.loc 1 64 0
  87 002c 3D9A      		sbi 0x7,5
  88 002e 459A      		sbi 0x8,5
  89               	.LVL5:
  90               	.LBB23:
  91               	.LBB24:
  92               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  93               		.loc 2 187 0
  94 0030 8FEF      		ldi r24,lo8(1599999)
  95 0032 99E6      		ldi r25,hi8(1599999)
  96 0034 28E1      		ldi r18,hlo8(1599999)
  97 0036 8150      	1:	subi r24,1
  98 0038 9040      		sbci r25,0
  99 003a 2040      		sbci r18,0
 100 003c 01F4      		brne 1b
 101 003e 00C0      		rjmp .
 102 0040 0000      		nop
 103               	.LVL6:
 104               	.LBE24:
 105               	.LBE23:
  66:matrix.c      **** }
 106               		.loc 1 66 0
 107 0042 3D98      		cbi 0x7,5
 108 0044 4598      		cbi 0x8,5
 109 0046 0895      		ret
 110               		.cfi_endproc
 111               	.LFE7:
 113               		.section	.text.matrix_scan,"ax",@progbits
 114               	.global	matrix_scan
 116               	matrix_scan:
 117               	.LFB8:
  70:matrix.c      ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 118               		.loc 1 70 0
 119               		.cfi_startproc
 120 0000 CF92      		push r12
 121               	.LCFI0:
 122               		.cfi_def_cfa_offset 3
 123               		.cfi_offset 12, -2
 124 0002 DF92      		push r13
 125               	.LCFI1:
 126               		.cfi_def_cfa_offset 4
 127               		.cfi_offset 13, -3
 128 0004 EF92      		push r14
 129               	.LCFI2:
 130               		.cfi_def_cfa_offset 5
 131               		.cfi_offset 14, -4
 132 0006 FF92      		push r15
 133               	.LCFI3:
 134               		.cfi_def_cfa_offset 6
 135               		.cfi_offset 15, -5
 136 0008 0F93      		push r16
 137               	.LCFI4:
 138               		.cfi_def_cfa_offset 7
 139               		.cfi_offset 16, -6
 140 000a 1F93      		push r17
 141               	.LCFI5:
 142               		.cfi_def_cfa_offset 8
 143               		.cfi_offset 17, -7
 144 000c CF93      		push r28
 145               	.LCFI6:
 146               		.cfi_def_cfa_offset 9
 147               		.cfi_offset 28, -8
 148 000e DF93      		push r29
 149               	.LCFI7:
 150               		.cfi_def_cfa_offset 10
 151               		.cfi_offset 29, -9
 152               	/* prologue: function */
 153               	/* frame size = 0 */
 154               	/* stack size = 8 */
 155               	.L__stack_usage = 8
 156               	.LVL7:
 157 0010 00E0      		ldi r16,lo8(matrix_debouncing)
 158 0012 10E0      		ldi r17,hi8(matrix_debouncing)
  70:matrix.c      ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 159               		.loc 1 70 0
 160 0014 E801      		movw r28,r16
 161               	.LBB39:
  71:matrix.c      ****         select_row(i);
 162               		.loc 1 71 0
 163 0016 D12C      		mov r13,__zero_reg__
 164               	.LBB40:
  80:matrix.c      ****         }
 165               		.loc 1 80 0
 166 0018 85E0      		ldi r24,lo8(5)
 167 001a C82E      		mov r12,r24
  78:matrix.c      ****             }
 168               		.loc 1 78 0
 169 001c 90E0      		ldi r25,lo8(__c.1993)
 170 001e E92E      		mov r14,r25
 171 0020 90E0      		ldi r25,hi8(__c.1993)
 172 0022 F92E      		mov r15,r25
 173               	.LVL8:
 174               	.L23:
 175               	.LBB41:
 176               	.LBB42:
 133:matrix.c      **** }
 134:matrix.c      **** 
 135:matrix.c      **** static void select_row(uint8_t row)
 136:matrix.c      **** {
 137:matrix.c      ****     // Output low(DDR:1, PORT:0) to select
 138:matrix.c      ****     switch (row) {
 177               		.loc 1 138 0
 178 0024 8D2D      		mov r24,r13
 179 0026 90E0      		ldi r25,0
 180 0028 FC01      		movw r30,r24
 181 002a 3197      		sbiw r30,1
 182 002c E730      		cpi r30,7
 183 002e F105      		cpc r31,__zero_reg__
 184 0030 00F4      		brsh .L7
 185 0032 E050      		subi r30,lo8(-(gs(.L9)))
 186 0034 F040      		sbci r31,hi8(-(gs(.L9)))
 187 0036 0C94 0000 		jmp __tablejump2__
 188               		.section	.progmem.gcc_sw_table.matrix_scan,"a",@progbits
 189               		.p2align	1
 190               	.L9:
 191 0000 0000      		.word gs(.L8)
 192 0002 0000      		.word gs(.L10)
 193 0004 0000      		.word gs(.L11)
 194 0006 0000      		.word gs(.L12)
 195 0008 0000      		.word gs(.L13)
 196 000a 0000      		.word gs(.L14)
 197 000c 0000      		.word gs(.L15)
 198               		.section	.text.matrix_scan
 199               	.L7:
 139:matrix.c      ****         case 0:
 140:matrix.c      ****             DDRD  |= (1<<0);
 200               		.loc 1 140 0
 201 003a 509A      		sbi 0xa,0
 141:matrix.c      ****             PORTD &= ~(1<<0);
 202               		.loc 1 141 0
 203 003c 5898      		cbi 0xb,0
 204 003e 00C0      		rjmp .L16
 205               	.L8:
 142:matrix.c      ****             break;
 143:matrix.c      ****         case 1:
 144:matrix.c      ****             DDRD  |= (1<<1);
 206               		.loc 1 144 0
 207 0040 519A      		sbi 0xa,1
 145:matrix.c      ****             PORTD &= ~(1<<1);
 208               		.loc 1 145 0
 209 0042 5998      		cbi 0xb,1
 210 0044 00C0      		rjmp .L16
 211               	.L10:
 146:matrix.c      ****             break;
 147:matrix.c      ****         case 2:
 148:matrix.c      ****             DDRD  |= (1<<2);
 212               		.loc 1 148 0
 213 0046 529A      		sbi 0xa,2
 149:matrix.c      ****             PORTD &= ~(1<<2);
 214               		.loc 1 149 0
 215 0048 5A98      		cbi 0xb,2
 216 004a 00C0      		rjmp .L16
 217               	.L11:
 150:matrix.c      ****             break;
 151:matrix.c      ****         case 3:
 152:matrix.c      ****             DDRD  |= (1<<3);
 218               		.loc 1 152 0
 219 004c 539A      		sbi 0xa,3
 153:matrix.c      ****             PORTD &= ~(1<<3);
 220               		.loc 1 153 0
 221 004e 5B98      		cbi 0xb,3
 222 0050 00C0      		rjmp .L16
 223               	.L12:
 154:matrix.c      ****             break;
 155:matrix.c      ****         case 4:
 156:matrix.c      ****             DDRD  |= (1<<4);
 224               		.loc 1 156 0
 225 0052 549A      		sbi 0xa,4
 157:matrix.c      ****             PORTD &= ~(1<<4);
 226               		.loc 1 157 0
 227 0054 5C98      		cbi 0xb,4
 228 0056 00C0      		rjmp .L16
 229               	.L13:
 158:matrix.c      ****             break;
 159:matrix.c      ****         case 5:
 160:matrix.c      ****             DDRD  |= (1<<5);
 230               		.loc 1 160 0
 231 0058 559A      		sbi 0xa,5
 161:matrix.c      ****             PORTD &= ~(1<<5);
 232               		.loc 1 161 0
 233 005a 5D98      		cbi 0xb,5
 234 005c 00C0      		rjmp .L16
 235               	.L14:
 162:matrix.c      ****             break;
 163:matrix.c      ****         case 6:
 164:matrix.c      ****             DDRD  |= (1<<6);
 236               		.loc 1 164 0
 237 005e 569A      		sbi 0xa,6
 165:matrix.c      ****             PORTD &= ~(1<<6);
 238               		.loc 1 165 0
 239 0060 5E98      		cbi 0xb,6
 240 0062 00C0      		rjmp .L16
 241               	.L15:
 166:matrix.c      ****             break;
 167:matrix.c      ****         case 7:
 168:matrix.c      ****             DDRC  |= (1<<2);
 242               		.loc 1 168 0
 243 0064 3A9A      		sbi 0x7,2
 169:matrix.c      ****             PORTC &= ~(1<<2);
 244               		.loc 1 169 0
 245 0066 4298      		cbi 0x8,2
 246               	.L16:
 247               	.LVL9:
 248               	.LBE42:
 249               	.LBE41:
 250               	.LBB43:
 251               	.LBB44:
 188:/usr/lib/avr/include/util/delay.h **** 
 189:/usr/lib/avr/include/util/delay.h **** #else
 190:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/lib/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/lib/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/lib/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/lib/avr/include/util/delay.h **** 	{
 196:/usr/lib/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/lib/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/lib/avr/include/util/delay.h **** 		{
 200:/usr/lib/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/lib/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/lib/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/lib/avr/include/util/delay.h **** 		}
 204:/usr/lib/avr/include/util/delay.h **** 		return;
 205:/usr/lib/avr/include/util/delay.h **** 	}
 206:/usr/lib/avr/include/util/delay.h **** 	else
 207:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/lib/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/lib/avr/include/util/delay.h **** #endif
 210:/usr/lib/avr/include/util/delay.h **** }
 211:/usr/lib/avr/include/util/delay.h **** 
 212:/usr/lib/avr/include/util/delay.h **** /**
 213:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/lib/avr/include/util/delay.h **** 
 215:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/lib/avr/include/util/delay.h **** 
 217:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/lib/avr/include/util/delay.h **** 
 220:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/lib/avr/include/util/delay.h **** 
 222:/usr/lib/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/lib/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/lib/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/lib/avr/include/util/delay.h **** 
 226:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/lib/avr/include/util/delay.h **** 
 231:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/lib/avr/include/util/delay.h **** 
 236:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/lib/avr/include/util/delay.h ****    respectively.
 240:/usr/lib/avr/include/util/delay.h **** 
 241:/usr/lib/avr/include/util/delay.h ****    \note
 242:/usr/lib/avr/include/util/delay.h **** 
 243:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/lib/avr/include/util/delay.h **** 
 253:/usr/lib/avr/include/util/delay.h ****  */
 254:/usr/lib/avr/include/util/delay.h **** void
 255:/usr/lib/avr/include/util/delay.h **** _delay_us(double __us)
 256:/usr/lib/avr/include/util/delay.h **** {
 257:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 258:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 262:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:/usr/lib/avr/include/util/delay.h **** 
 265:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/lib/avr/include/util/delay.h **** 
 268:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/lib/avr/include/util/delay.h **** 
 271:/usr/lib/avr/include/util/delay.h **** 	#else
 272:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 273:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:/usr/lib/avr/include/util/delay.h **** 	#endif
 275:/usr/lib/avr/include/util/delay.h **** 
 276:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 252               		.loc 2 276 0
 253 0068 80EA      		ldi r24,lo8(-96)
 254 006a 8A95      	1:	dec r24
 255 006c 01F4      		brne 1b
 256               	.LVL10:
 257               	.LBE44:
 258               	.LBE43:
 259               	.LBB45:
 260               	.LBB46:
 119:matrix.c      **** }
 261               		.loc 1 119 0
 262 006e 83B1      		in r24,0x3
 263 0070 8095      		com r24
 264               	.LBE46:
 265               	.LBE45:
  75:matrix.c      ****             matrix_debouncing[i] = cols;
 266               		.loc 1 75 0
 267 0072 9881      		ld r25,Y
 268 0074 9817      		cp r25,r24
 269 0076 01F0      		breq .L17
  76:matrix.c      ****             if (debouncing) {
 270               		.loc 1 76 0
 271 0078 8883      		st Y,r24
  77:matrix.c      ****                 debug("bounce!: "); debug_hex(debouncing); debug("\n");
 272               		.loc 1 77 0
 273 007a 8091 0000 		lds r24,debouncing
 274 007e 8823      		tst r24
 275 0080 01F0      		breq .L19
  78:matrix.c      ****             }
 276               		.loc 1 78 0
 277 0082 8091 0000 		lds r24,debug_config
 278 0086 80FF      		sbrs r24,0
 279 0088 00C0      		rjmp .L20
  78:matrix.c      ****             }
 280               		.loc 1 78 0 is_stmt 0 discriminator 1
 281 008a 80E0      		ldi r24,lo8(__c.1991)
 282 008c 90E0      		ldi r25,hi8(__c.1991)
 283 008e 0E94 0000 		call xputs
 284               	.LVL11:
 285               	.L20:
  78:matrix.c      ****             }
 286               		.loc 1 78 0 discriminator 3
 287 0092 8091 0000 		lds r24,debug_config
 288 0096 80FF      		sbrs r24,0
 289 0098 00C0      		rjmp .L21
  78:matrix.c      ****             }
 290               		.loc 1 78 0 discriminator 4
 291 009a 8091 0000 		lds r24,debouncing
 292 009e 1F92      		push __zero_reg__
 293               	.LCFI8:
 294               		.cfi_def_cfa_offset 11
 295 00a0 8F93      		push r24
 296               	.LCFI9:
 297               		.cfi_def_cfa_offset 12
 298 00a2 FF92      		push r15
 299               	.LCFI10:
 300               		.cfi_def_cfa_offset 13
 301 00a4 EF92      		push r14
 302               	.LCFI11:
 303               		.cfi_def_cfa_offset 14
 304 00a6 0E94 0000 		call __xprintf
 305               	.LVL12:
 306 00aa 0F90      		pop __tmp_reg__
 307 00ac 0F90      		pop __tmp_reg__
 308 00ae 0F90      		pop __tmp_reg__
 309 00b0 0F90      		pop __tmp_reg__
 310               	.LCFI12:
 311               		.cfi_def_cfa_offset 10
 312               	.L21:
  78:matrix.c      ****             }
 313               		.loc 1 78 0 discriminator 6
 314 00b2 8091 0000 		lds r24,debug_config
 315 00b6 80FF      		sbrs r24,0
 316 00b8 00C0      		rjmp .L19
  78:matrix.c      ****             }
 317               		.loc 1 78 0 discriminator 7
 318 00ba 80E0      		ldi r24,lo8(__c.1995)
 319 00bc 90E0      		ldi r25,hi8(__c.1995)
 320 00be 0E94 0000 		call xputs
 321               	.LVL13:
 322               	.L19:
  80:matrix.c      ****         }
 323               		.loc 1 80 0 is_stmt 1
 324 00c2 C092 0000 		sts debouncing,r12
 325               	.L17:
  82:matrix.c      ****     }
 326               		.loc 1 82 0 discriminator 2
 327 00c6 0E94 0000 		call unselect_rows
 328               	.LVL14:
 329               	.LBE40:
  71:matrix.c      ****         select_row(i);
 330               		.loc 1 71 0 discriminator 2
 331 00ca D394      		inc r13
 332               	.LVL15:
 333 00cc 2196      		adiw r28,1
 334 00ce 98E0      		ldi r25,lo8(8)
 335 00d0 D912      		cpse r13,r25
 336 00d2 00C0      		rjmp .L23
 337               	.LVL16:
 338               	.LBE39:
  85:matrix.c      ****         if (--debouncing) {
 339               		.loc 1 85 0
 340 00d4 8091 0000 		lds r24,debouncing
 341 00d8 8823      		tst r24
 342 00da 01F0      		breq .L25
  86:matrix.c      ****             _delay_ms(1);
 343               		.loc 1 86 0
 344 00dc 8150      		subi r24,lo8(-(-1))
 345 00de 8093 0000 		sts debouncing,r24
 346 00e2 8823      		tst r24
 347 00e4 01F0      		breq .L26
 348               	.LVL17:
 349               	.LBB47:
 350               	.LBB48:
 187:/usr/lib/avr/include/util/delay.h **** 
 351               		.loc 2 187 0
 352 00e6 AFE9      		ldi r26,lo8(3999)
 353 00e8 BFE0      		ldi r27,hi8(3999)
 354 00ea 1197      	1:	sbiw r26,1
 355 00ec 01F4      		brne 1b
 356 00ee 00C0      		rjmp .
 357 00f0 0000      		nop
 358 00f2 00C0      		rjmp .L25
 359               	.LVL18:
 360               	.L26:
 361 00f4 E0E0      		ldi r30,lo8(matrix)
 362 00f6 F0E0      		ldi r31,hi8(matrix)
 363               	.L27:
 364               	.LVL19:
 365               	.LBE48:
 366               	.LBE47:
 367               	.LBB49:
  90:matrix.c      ****             }
 368               		.loc 1 90 0 discriminator 3
 369 00f8 D801      		movw r26,r16
 370 00fa 8D91      		ld r24,X+
 371 00fc 8D01      		movw r16,r26
 372               	.LVL20:
 373 00fe 8193      		st Z+,r24
 374               	.LVL21:
  89:matrix.c      ****                 matrix[i] = matrix_debouncing[i];
 375               		.loc 1 89 0 discriminator 3
 376 0100 B0E0      		ldi r27,hi8(matrix_debouncing+8)
 377 0102 0030      		cpi r16,lo8(matrix_debouncing+8)
 378 0104 1B07      		cpc r17,r27
 379 0106 01F4      		brne .L27
 380               	.LVL22:
 381               	.L25:
 382               	.LBE49:
  96:matrix.c      **** 
 383               		.loc 1 96 0
 384 0108 81E0      		ldi r24,lo8(1)
 385               	/* epilogue start */
 386 010a DF91      		pop r29
 387 010c CF91      		pop r28
 388 010e 1F91      		pop r17
 389 0110 0F91      		pop r16
 390 0112 FF90      		pop r15
 391 0114 EF90      		pop r14
 392 0116 DF90      		pop r13
 393 0118 CF90      		pop r12
 394 011a 0895      		ret
 395               		.cfi_endproc
 396               	.LFE8:
 398               		.section	.text.matrix_get_row,"ax",@progbits
 399               	.global	matrix_get_row
 401               	matrix_get_row:
 402               	.LFB9:
 100:matrix.c      ****     return matrix[row];
 403               		.loc 1 100 0
 404               		.cfi_startproc
 405               	.LVL23:
 406               	/* prologue: function */
 407               	/* frame size = 0 */
 408               	/* stack size = 0 */
 409               	.L__stack_usage = 0
 101:matrix.c      **** }
 410               		.loc 1 101 0
 411 0000 E82F      		mov r30,r24
 412 0002 F0E0      		ldi r31,0
 413 0004 E050      		subi r30,lo8(-(matrix))
 414 0006 F040      		sbci r31,hi8(-(matrix))
 102:matrix.c      **** 
 415               		.loc 1 102 0
 416 0008 8081      		ld r24,Z
 417               	.LVL24:
 418 000a 0895      		ret
 419               		.cfi_endproc
 420               	.LFE9:
 422               		.section	.progmem.data.__c.1995,"a",@progbits
 425               	__c.1995:
 426 0000 0A00      		.string	"\n"
 427               		.section	.progmem.data.__c.1993,"a",@progbits
 430               	__c.1993:
 431 0000 2530 3258 		.string	"%02X"
 431      00
 432               		.section	.progmem.data.__c.1991,"a",@progbits
 435               	__c.1991:
 436 0000 626F 756E 		.string	"bounce!: "
 436      6365 213A 
 436      2000 
 437               		.section	.bss.matrix_debouncing,"aw",@nobits
 440               	matrix_debouncing:
 441 0000 0000 0000 		.zero	8
 441      0000 0000 
 442               		.section	.bss.matrix,"aw",@nobits
 445               	matrix:
 446 0000 0000 0000 		.zero	8
 446      0000 0000 
 447               		.section	.data.debouncing,"aw",@progbits
 450               	debouncing:
 451 0000 05        		.byte	5
 452               		.text
 453               	.Letext0:
 454               		.file 3 "/usr/lib/avr/include/stdint.h"
 455               		.file 4 "../../tmk_core/common/debug.h"
 456               		.file 5 "../../tmk_core/common/matrix.h"
 457               		.file 6 "../../tmk_core/common/avr/xprintf.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 matrix.c
     /tmp/ccmdV3k5.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccmdV3k5.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccmdV3k5.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccmdV3k5.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccmdV3k5.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccmdV3k5.s:12     .text.unselect_rows:0000000000000000 unselect_rows
     /tmp/ccmdV3k5.s:40     .text.matrix_init:0000000000000000 matrix_init
     /tmp/ccmdV3k5.s:445    .bss.matrix:0000000000000000 matrix
     /tmp/ccmdV3k5.s:440    .bss.matrix_debouncing:0000000000000000 matrix_debouncing
     /tmp/ccmdV3k5.s:116    .text.matrix_scan:0000000000000000 matrix_scan
     /tmp/ccmdV3k5.s:430    .progmem.data.__c.1993:0000000000000000 __c.1993
     /tmp/ccmdV3k5.s:450    .data.debouncing:0000000000000000 debouncing
     /tmp/ccmdV3k5.s:435    .progmem.data.__c.1991:0000000000000000 __c.1991
     /tmp/ccmdV3k5.s:425    .progmem.data.__c.1995:0000000000000000 __c.1995
     /tmp/ccmdV3k5.s:401    .text.matrix_get_row:0000000000000000 matrix_get_row

UNDEFINED SYMBOLS
debug_config
__tablejump2__
xputs
__xprintf
__do_copy_data
__do_clear_bss
