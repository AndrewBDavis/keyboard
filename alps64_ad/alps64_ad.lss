
alps64_ad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00005264  000052f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005264  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d9  00800134  00800134  0000532c  2**0
                  ALLOC
  3 .noinit       00000004  0080020d  0080020d  0000532c  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  0000532c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000073  00000000  00000000  00005be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00005c57  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005c68  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 00000908  00000000  00000000  00005ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000fd81  00000000  00000000  000065b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003e4a  00000000  00000000  00016331  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000073fb  00000000  00000000  0001a17b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000019dc  00000000  00000000  00021578  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004241  00000000  00000000  00022f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000862f  00000000  00000000  00027195  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a10  00000000  00000000  0002f7c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__ctors_end>
       4:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__bad_interrupt>
       8:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__bad_interrupt>
       c:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__bad_interrupt>
      10:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__bad_interrupt>
      14:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__bad_interrupt>
      18:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__bad_interrupt>
      1c:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__bad_interrupt>
      20:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__bad_interrupt>
      24:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__bad_interrupt>
      28:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__bad_interrupt>
      2c:	0c 94 47 0c 	jmp	0x188e	; 0x188e <__vector_11>
      30:	0c 94 f6 0c 	jmp	0x19ec	; 0x19ec <__vector_12>
      34:	0c 94 0b 1c 	jmp	0x3816	; 0x3816 <__vector_13>
      38:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__bad_interrupt>
      3c:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__bad_interrupt>
      40:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__bad_interrupt>
      44:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__bad_interrupt>
      48:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__bad_interrupt>
      4c:	0c 94 7f 1c 	jmp	0x38fe	; 0x38fe <__vector_19>
      50:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__bad_interrupt>
      54:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__bad_interrupt>
      58:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__bad_interrupt>
      5c:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__bad_interrupt>
      60:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__bad_interrupt>
      64:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__bad_interrupt>
      68:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__bad_interrupt>
      6c:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__bad_interrupt>
      70:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__bad_interrupt>
      74:	cd 06       	cpc	r12, r29
      76:	d0 06       	cpc	r13, r16
      78:	d3 06       	cpc	r13, r19
      7a:	d6 06       	cpc	r13, r22
      7c:	d9 06       	cpc	r13, r25
      7e:	dc 06       	cpc	r13, r28
      80:	df 06       	cpc	r13, r31
      82:	63 0d       	add	r22, r3
      84:	85 0d       	add	r24, r5
      86:	78 0e       	add	r7, r24
      88:	85 0d       	add	r24, r5
      8a:	78 0e       	add	r7, r24
      8c:	ca 0d       	add	r28, r10
      8e:	ed 0d       	add	r30, r13
      90:	78 0e       	add	r7, r24
      92:	42 0e       	add	r4, r18
      94:	55 0e       	add	r5, r21
      96:	25 12       	cpse	r2, r21
      98:	25 12       	cpse	r2, r21
      9a:	4f 12       	cpse	r4, r31
      9c:	4f 12       	cpse	r4, r31
      9e:	aa 12       	cpse	r10, r26
      a0:	de 12       	cpse	r13, r30
      a2:	ce 14       	cp	r12, r14
      a4:	ce 14       	cp	r12, r14
      a6:	f5 12       	cpse	r15, r21
      a8:	ce 14       	cp	r12, r14
      aa:	e0 13       	cpse	r30, r16
      ac:	e0 13       	cpse	r30, r16
      ae:	a6 14       	cp	r10, r6
      b0:	ce 14       	cp	r12, r14
      b2:	ce 14       	cp	r12, r14
      b4:	bb 14       	cp	r11, r11

000000b6 <__trampolines_end>:
      b6:	00 00       	nop
      b8:	f1 a1       	ldd	r31, Z+33	; 0x21
      ba:	04 8a       	std	Z+20, r0	; 0x14

000000bc <keymaps>:
      bc:	c1 10 36 0e 0f 12 27 2d c2 37 38 33 34 13 2f 2e     ..6...'-.7834./.
      cc:	00 e5 00 28 2a 30 31 4c 00 e1 e0 04 2b 14 29 1e     ...(*01L....+.).
      dc:	e0 e2 1d 16 1a 08 1f 20 e3 1b 07 09 15 17 21 22     ....... ......!"
      ec:	2c 06 19 0a 1c 18 23 24 e2 05 11 0b 0d 0c 25 26     ,.....#$......%&
      fc:	01 01 01 01 4a 47 43 44 01 4d 51 50 4f 48 52 45     ....JGCD.MQPOHRE
     10c:	01 01 01 01 4b 4e 01 49 01 01 01 aa 39 01 35 3a     ....KN.I....9.5:
     11c:	01 01 01 a9 01 01 3b 3c 01 01 a8 01 01 01 3d 3e     ......;<......=>
     12c:	01 01 01 01 01 01 3f 40 01 01 01 01 01 46 41 42     ......?@.....FAB
     13c:	01 62 01 5a 5b 5e 01 56 01 63 54 01 55 01 01 57     .b.Z[^.V.cT.U..W
     14c:	01 01 01 01 01 01 01 01 01 01 01 50 39 01 01 01     ...........P9...
     15c:	01 01 01 51 52 01 01 01 01 01 4f 01 01 01 01 01     ...QR.....O.....
     16c:	01 01 01 01 01 5c 01 5f 01 01 01 01 59 5d 60 61     .....\._....Y]`a

0000017c <__c.1995>:
     17c:	0a 00                                               ..

0000017e <__c.1993>:
     17e:	25 30 32 58 00                                      %02X.

00000183 <__c.1991>:
     183:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

0000018d <__c.5007>:
     18d:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     19d:	00                                                  .

0000019e <__c.5005>:
     19e:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     1ae:	00                                                  .

000001af <__c.4996>:
     1af:	0d 0a 69 6e 69 74 0a 00                             ..init..

000001b7 <ProductString>:
     1b7:	14 03 41 00 6c 00 70 00 73 00 36 00 34 00 5f 00     ..A.l.p.s.6.4._.
     1c7:	41 00 44 00 00 00                                   A.D...

000001cd <ManufacturerString>:
     1cd:	08 03 54 00 4d 00 4b 00 00 00                       ..T.M.K...

000001d7 <LanguageString>:
     1d7:	04 03 09 04                                         ....

000001db <ConfigurationDescriptor>:
     1db:	09 02 74 00 04 01 00 a0 32 09 04 00 00 01 03 01     ..t.....2.......
     1eb:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
     1fb:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     20b:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     21b:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     22b:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     23b:	01 00 01 22 22 00 07 05 84 03 20 00 01 07 05 04     ...""..... .....
     24b:	03 20 00 01                                         . ..

0000024f <DeviceDescriptor>:
     24f:	12 01 10 01 00 00 00 08 ed fe 64 64 01 00 01 02     ..........dd....
     25f:	00 01                                               ..

00000261 <ConsoleReport>:
     261:	06 31 ff 09 74 a1 01 09 75 15 00 26 ff 00 95 20     .1..t...u..&... 
     271:	75 08 81 02 09 76 15 00 26 ff 00 95 20 75 08 91     u....v..&... u..
     281:	02 c0                                               ..

00000283 <ExtrakeyReport>:
     283:	05 01 09 80 a1 01 85 02 16 81 00 26 b7 00 1a 81     ...........&....
     293:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     2a3:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     2b3:	10 95 01 81 00 c0                                   ......

000002b9 <MouseReport>:
     2b9:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     2c9:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     2d9:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     2e9:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     2f9:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

00000306 <KeyboardReport>:
     306:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     316:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     326:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     336:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

00000346 <__c.2192>:
     346:	63 6f 6e 73 75 6d 65 72 3a 20 25 30 34 58 0a 00     consumer: %04X..

00000356 <__c.2187>:
     356:	73 79 73 74 65 6d 3a 20 25 30 34 58 0a 00           system: %04X..

00000364 <__c.2179>:
     364:	0a 00                                               ..

00000366 <__c.2174>:
     366:	25 30 32 58 20 00                                   %02X .

0000036c <__c.2171>:
     36c:	6b 65 79 62 6f 61 72 64 3a 20 00                    keyboard: .

00000377 <__c.2537>:
     377:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

00000382 <__c.1851>:
     382:	25 30 32 58 3a 20 25 30 38 62 25 73 0a 00           %02X: %08b%s..

00000390 <__c.1848>:
     390:	72 2f 63 20 30 31 32 33 34 35 36 37 0a 00           r/c 01234567..

0000039e <__c.2616>:
     39e:	64 6f 6e 65 2e 0a 00                                done...

000003a5 <__c.2610>:
     3a5:	62 6f 6f 74 6d 61 67 69 63 20 73 63 61 6e 3a 20     bootmagic scan: 
     3b5:	2e 2e 2e 20 00                                      ... .

000003ba <__c.2252>:
     3ba:	29 0a 00                                            )..

000003bd <__c.2250>:
     3bd:	25 75 00                                            %u.

000003c0 <__c.2248>:
     3c0:	2f 00                                               /.

000003c2 <__c.2246>:
     3c2:	25 75 00                                            %u.

000003c5 <__c.2244>:
     3c5:	5d 28 00                                            ](.

000003c8 <__c.2242>:
     3c8:	25 64 00                                            %d.

000003cb <__c.2240>:
     3cb:	20 00                                                .

000003cd <__c.2238>:
     3cd:	25 64 00                                            %d.

000003d0 <__c.2236>:
     3d0:	20 00                                                .

000003d2 <__c.2234>:
     3d2:	25 64 00                                            %d.

000003d5 <__c.2232>:
     3d5:	20 00                                                .

000003d7 <__c.2230>:
     3d7:	25 64 00                                            %d.

000003da <__c.2228>:
     3da:	7c 00                                               |.

000003dc <__c.2226>:
     3dc:	25 30 32 58 00                                      %02X.

000003e1 <__c.2224>:
     3e1:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     3f1:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     401:	20 5b 00                                             [.

00000404 <__c.2982>:
     404:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     414:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

0000041f <__c.2979>:
     41f:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     42f:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000438 <__c.2976>:
     438:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     448:	20 25 64 0a 00                                       %d..

0000044d <__c.2973>:
     44d:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     45d:	64 0a 00                                            d..

00000460 <__c.2970>:
     460:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     470:	0a 00                                               ..

00000472 <__c.2966>:
     472:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000481 <__c.2959>:
     481:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     491:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

0000049c <__c.2956>:
     49c:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     4ac:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000004b5 <__c.2953>:
     4b5:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     4c5:	20 25 64 0a 00                                       %d..

000004ca <__c.2950>:
     4ca:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     4da:	64 0a 00                                            d..

000004dd <__c.2947>:
     4dd:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     4ed:	0a 00                                               ..

000004ef <__c.2943>:
     4ef:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

000004fe <__c.2936>:
     4fe:	0a 00                                               ..

00000500 <__c.2934>:
     500:	25 75 00                                            %u.

00000503 <__c.2932>:
     503:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     513:	5f 6d 61 78 3a 20 00                                _max: .

0000051a <__c.2930>:
     51a:	0a 00                                               ..

0000051c <__c.2928>:
     51c:	25 75 00                                            %u.

0000051f <__c.2926>:
     51f:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     52f:	65 64 3a 20 00                                      ed: .

00000534 <__c.2924>:
     534:	0a 00                                               ..

00000536 <__c.2922>:
     536:	25 75 00                                            %u.

00000539 <__c.2920>:
     539:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     549:	00                                                  .

0000054a <__c.2918>:
     54a:	0a 00                                               ..

0000054c <__c.2916>:
     54c:	25 75 00                                            %u.

0000054f <__c.2914>:
     54f:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

0000055e <__c.2912>:
     55e:	0a 00                                               ..

00000560 <__c.2910>:
     560:	25 75 00                                            %u.

00000563 <__c.2908>:
     563:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     573:	20 00                                                .

00000575 <__c.2906>:
     575:	0a 00                                               ..

00000577 <__c.2904>:
     577:	25 75 00                                            %u.

0000057a <__c.2902>:
     57a:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     58a:	20 00                                                .

0000058c <__c.2900>:
     58c:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

0000059a <__c.3020>:
     59a:	4d 3e 00                                            M>.

0000059d <__c.3018>:
     59d:	4d 25 64 3e 20 00                                   M%d> .

000005a3 <__c.3016>:
     5a3:	3f 00                                               ?.

000005a5 <__c.3013>:
     5a5:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

000005b2 <__c.2999>:
     5b2:	43 3e 20 00                                         C> .

000005b6 <__c.2989>:
     5b6:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     5c6:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     5d6:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     5e6:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     5f6:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

00000604 <__c.2987>:
     604:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     614:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     624:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     634:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     644:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     654:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     664:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     674:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     684:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     694:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     6a4:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     6b4:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     6c4:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     6d4:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     6e4:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     6f4:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

000006ff <__c.2892>:
     6ff:	3f 00                                               ?.

00000701 <__c.2889>:
     701:	4d 3e 20 00                                         M> .

00000705 <__c.2894>:
     705:	43 3e 20 00                                         C> .

00000709 <__c.3038>:
     709:	4c 25 64 0a 00                                      L%d..

0000070e <__c.2878>:
     70e:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     71e:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     72e:	73 65 6b 65 79 0a 00                                sekey..

00000735 <__c.2710>:
     735:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     745:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     755:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     765:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     775:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     785:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     795:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     7a5:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     7b5:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     7c5:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 00              r.e:.eeprom..

000007d2 <__c.2805>:
     7d2:	0a 00                                               ..

000007d4 <__c.2803>:
     7d4:	25 75 00                                            %u.

000007d7 <__c.2801>:
     7d7:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

000007df <__c.2799>:
     7df:	0a 00                                               ..

000007e1 <__c.2797>:
     7e1:	25 75 00                                            %u.

000007e4 <__c.2795>:
     7e4:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     7f4:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000800 <__c.2793>:
     800:	0a 00                                               ..

00000802 <__c.2791>:
     802:	25 75 00                                            %u.

00000805 <__c.2789>:
     805:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     815:	20 00                                                .

00000817 <__c.2787>:
     817:	0a 00                                               ..

00000819 <__c.2785>:
     819:	25 75 00                                            %u.

0000081c <__c.2783>:
     81c:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

00000826 <__c.2781>:
     826:	0a 00                                               ..

00000828 <__c.2779>:
     828:	25 75 00                                            %u.

0000082b <__c.2777>:
     82b:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     83b:	20 00                                                .

0000083d <__c.2775>:
     83d:	0a 00                                               ..

0000083f <__c.2773>:
     83f:	25 75 00                                            %u.

00000842 <__c.2771>:
     842:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     852:	20 00                                                .

00000854 <__c.2769>:
     854:	0a 00                                               ..

00000856 <__c.2767>:
     856:	25 75 00                                            %u.

00000859 <__c.2765>:
     859:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     869:	74 72 6f 6c 3a 20 00                                trol: .

00000870 <__c.2763>:
     870:	0a 00                                               ..

00000872 <__c.2761>:
     872:	25 75 00                                            %u.

00000875 <__c.2759>:
     875:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     885:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

0000088e <__c.2757>:
     88e:	0a 00                                               ..

00000890 <__c.2755>:
     890:	25 30 32 58 00                                      %02X.

00000895 <__c.2753>:
     895:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     8a5:	77 3a 20 00                                         w: .

000008a9 <__c.2750>:
     8a9:	0a 00                                               ..

000008ab <__c.2748>:
     8ab:	25 75 00                                            %u.

000008ae <__c.2746>:
     8ae:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

000008b7 <__c.2744>:
     8b7:	0a 00                                               ..

000008b9 <__c.2742>:
     8b9:	25 75 00                                            %u.

000008bc <__c.2740>:
     8bc:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

000008c8 <__c.2738>:
     8c8:	0a 00                                               ..

000008ca <__c.2736>:
     8ca:	25 75 00                                            %u.

000008cd <__c.2734>:
     8cd:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

000008d7 <__c.2732>:
     8d7:	0a 00                                               ..

000008d9 <__c.2730>:
     8d9:	25 75 00                                            %u.

000008dc <__c.2728>:
     8dc:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

000008e6 <__c.2726>:
     8e6:	0a 00                                               ..

000008e8 <__c.2724>:
     8e8:	25 30 32 58 00                                      %02X.

000008ed <__c.2722>:
     8ed:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     8fd:	3a 20 00                                            : .

00000900 <__c.2719>:
     900:	0a 00                                               ..

00000902 <__c.2717>:
     902:	25 75 00                                            %u.

00000905 <__c.2715>:
     905:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000915 <__c.2873>:
     915:	3f 00                                               ?.

00000917 <__c.2864>:
     917:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     927:	25 30 34 6c 58 0a 00                                %04lX..

0000092e <__c.2862>:
     92e:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     93e:	58 0a 00                                            X..

00000941 <__c.2860>:
     941:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     951:	6c 3a 20 25 58 0a 00                                l: %X..

00000958 <__c.2858>:
     958:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     968:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000972 <__c.2856>:
     972:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000980 <__c.2853>:
     980:	47 43 43 3a 20 35 2e 34 2e 30 20 41 56 52 2d 4c     GCC: 5.4.0 AVR-L
     990:	49 42 43 3a 20 32 2e 30 2e 30 20 41 56 52 5f 41     IBC: 2.0.0 AVR_A
     9a0:	52 43 48 3a 20 61 76 72 33 35 0a 00                 RCH: avr35..

000009ac <__c.2851>:
     9ac:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     9bc:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     9cc:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     9dc:	45 20 43 4f 4d 4d 41 4e 44 20 34 30 39 36 0a 00     E COMMAND 4096..

000009ec <__c.2849>:
     9ec:	42 55 49 4c 44 3a 20 63 35 64 36 63 63 33 2d 64     BUILD: c5d6cc3-d
     9fc:	69 72 74 79 20 28 32 33 3a 31 32 3a 35 36 20 44     irty (23:12:56 D
     a0c:	65 63 20 32 34 20 32 30 32 31 29 0a 00              ec 24 2021)..

00000a19 <__c.2847>:
     a19:	56 49 44 3a 20 30 78 46 45 45 44 28 54 4d 4b 29     VID: 0xFEED(TMK)
     a29:	20 50 49 44 3a 20 30 78 36 34 36 34 28 41 6c 70      PID: 0x6464(Alp
     a39:	73 36 34 5f 41 44 29 20 56 45 52 3a 20 30 78 30     s64_AD) VER: 0x0
     a49:	30 30 31 0a 00                                      001..

00000a4e <__c.2845>:
     a4e:	44 45 53 43 3a 20 54 4d 4b 20 6b 65 79 62 6f 61     DESC: TMK keyboa
     a5e:	72 64 20 66 69 72 6d 77 61 72 65 20 66 6f 72 20     rd firmware for 
     a6e:	41 6c 70 73 36 34 0a 00                             Alps64..

00000a76 <__c.2843>:
     a76:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000a85 <__c.2840>:
     a85:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000a92 <__c.2838>:
     a92:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000a9e <__c.2835>:
     a9e:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000aae <__c.2833>:
     aae:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000abd <__c.2830>:
     abd:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000acb <__c.2828>:
     acb:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000ad8 <__c.2825>:
     ad8:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000ae4 <__c.2823>:
     ae4:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000af1 <__c.2820>:
     af1:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     b01:	00                                                  .

00000b02 <__c.2817>:
     b02:	43 3e 20 00                                         C> .

00000b06 <__c.2811>:
     b06:	65 65 63 6f 6e 66 69 67 3a 0a 00 00                 eeconfig:...

00000b12 <__ctors_end>:
     b12:	11 24       	eor	r1, r1
     b14:	1f be       	out	0x3f, r1	; 63
     b16:	cf ef       	ldi	r28, 0xFF	; 255
     b18:	d4 e0       	ldi	r29, 0x04	; 4
     b1a:	de bf       	out	0x3e, r29	; 62
     b1c:	cd bf       	out	0x3d, r28	; 61

00000b1e <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     b1e:	04 b6       	in	r0, 0x34	; 52
     b20:	03 fe       	sbrs	r0, 3
     b22:	27 c0       	rjmp	.+78     	; 0xb72 <__do_copy_data>
     b24:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <__bss_end>
     b28:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <__bss_end+0x1>
     b2c:	a0 91 0f 02 	lds	r26, 0x020F	; 0x80020f <__bss_end+0x2>
     b30:	b0 91 10 02 	lds	r27, 0x0210	; 0x800210 <__bss_end+0x3>
     b34:	87 30       	cpi	r24, 0x07	; 7
     b36:	90 4b       	sbci	r25, 0xB0	; 176
     b38:	a7 40       	sbci	r26, 0x07	; 7
     b3a:	b0 4b       	sbci	r27, 0xB0	; 176
     b3c:	d1 f4       	brne	.+52     	; 0xb72 <__do_copy_data>
        reset_key = 0;
     b3e:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <__bss_end>
     b42:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <__bss_end+0x1>
     b46:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <__bss_end+0x2>
     b4a:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <__bss_end+0x3>

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     b4e:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     b50:	84 b7       	in	r24, 0x34	; 52
     b52:	87 7f       	andi	r24, 0xF7	; 247
     b54:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	a8 95       	wdr
     b5c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     b60:	88 61       	ori	r24, 0x18	; 24
     b62:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     b66:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     b6a:	0f be       	out	0x3f, r0	; 63
        wdt_disable();

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     b6c:	e0 e0       	ldi	r30, 0x00	; 0
     b6e:	f8 e3       	ldi	r31, 0x38	; 56
     b70:	09 95       	icall

00000b72 <__do_copy_data>:
     b72:	11 e0       	ldi	r17, 0x01	; 1
     b74:	a0 e0       	ldi	r26, 0x00	; 0
     b76:	b1 e0       	ldi	r27, 0x01	; 1
     b78:	e4 e6       	ldi	r30, 0x64	; 100
     b7a:	f2 e5       	ldi	r31, 0x52	; 82
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <__do_copy_data+0x10>
     b7e:	05 90       	lpm	r0, Z+
     b80:	0d 92       	st	X+, r0
     b82:	a4 33       	cpi	r26, 0x34	; 52
     b84:	b1 07       	cpc	r27, r17
     b86:	d9 f7       	brne	.-10     	; 0xb7e <__do_copy_data+0xc>

00000b88 <__do_clear_bss>:
     b88:	22 e0       	ldi	r18, 0x02	; 2
     b8a:	a4 e3       	ldi	r26, 0x34	; 52
     b8c:	b1 e0       	ldi	r27, 0x01	; 1
     b8e:	01 c0       	rjmp	.+2      	; 0xb92 <.do_clear_bss_start>

00000b90 <.do_clear_bss_loop>:
     b90:	1d 92       	st	X+, r1

00000b92 <.do_clear_bss_start>:
     b92:	ad 30       	cpi	r26, 0x0D	; 13
     b94:	b2 07       	cpc	r27, r18
     b96:	e1 f7       	brne	.-8      	; 0xb90 <.do_clear_bss_loop>
     b98:	0e 94 8e 09 	call	0x131c	; 0x131c <main>
     b9c:	0c 94 30 29 	jmp	0x5260	; 0x5260 <_exit>

00000ba0 <__bad_interrupt>:
     ba0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000ba4 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     ba4:	ff 93       	push	r31
	push	ZL
     ba6:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     ba8:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <__data_end>
	lds	ZH, xfunc_out+1	;/
     bac:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <__data_end+0x1>
	sbiw	ZL, 0		;Skip if null
     bb0:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     bb2:	09 f0       	breq	.+2      	; 0xbb6 <xputc+0x12>
	icall
     bb4:	09 95       	icall
2:	pop	ZL
     bb6:	ef 91       	pop	r30
	pop	ZH
     bb8:	ff 91       	pop	r31
	ret
     bba:	08 95       	ret

00000bbc <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     bbc:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     bbe:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     bc0:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     bc2:	11 f0       	breq	.+4      	; 0xbc8 <xputs+0xc>
	rcall	xputc
     bc4:	ef df       	rcall	.-34     	; 0xba4 <xputc>
	rjmp	1b
     bc6:	fb cf       	rjmp	.-10     	; 0xbbe <xputs+0x2>
2:	ret
     bc8:	08 95       	ret

00000bca <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     bca:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     bcc:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     bce:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     bd0:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     bd2:	0c c0       	rjmp	.+24     	; 0xbec <xitoa+0x22>
	neg	r20		;
     bd4:	41 95       	neg	r20
	sbrs	r25, 7		;
     bd6:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     bd8:	09 c0       	rjmp	.+18     	; 0xbec <xitoa+0x22>
	ldi	r30, '-'	;
     bda:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     bdc:	60 95       	com	r22
	com	r23		;
     bde:	70 95       	com	r23
	com	r24		;
     be0:	80 95       	com	r24
	com	r25		;
     be2:	90 95       	com	r25
	adc	r22, r1		;
     be4:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     be6:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     be8:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     bea:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     bec:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <xitoa+0x2a>
	neg	r18		;
     bf0:	21 95       	neg	r18
	ldi	r19, '0'	;/
     bf2:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     bf4:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     bf6:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     bf8:	66 0f       	add	r22, r22
	rol	r23		;
     bfa:	77 1f       	adc	r23, r23
	rol	r24		;
     bfc:	88 1f       	adc	r24, r24
	rol	r25		;
     bfe:	99 1f       	adc	r25, r25
	rol	r26		;
     c00:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     c02:	a4 17       	cp	r26, r20
	brcs	3f		;
     c04:	10 f0       	brcs	.+4      	; 0xc0a <xitoa+0x40>
	sub	r26, r20	;
     c06:	a4 1b       	sub	r26, r20
	inc	r22		;
     c08:	63 95       	inc	r22
3:	dec	r21		;
     c0a:	5a 95       	dec	r21
	brne	2b		;/
     c0c:	a9 f7       	brne	.-22     	; 0xbf8 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     c0e:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     c10:	08 f0       	brcs	.+2      	; 0xc14 <xitoa+0x4a>
	subi	r26, -7		;
     c12:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     c14:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     c16:	af 93       	push	r26
	inc	r31		;/
     c18:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     c1a:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     c1c:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     c1e:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     c20:	91 05       	cpc	r25, r1
	brne	1b		;/
     c22:	41 f7       	brne	.-48     	; 0xbf4 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     c24:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     c26:	11 f4       	brne	.+4      	; 0xc2c <xitoa+0x62>
	push	r30		;
     c28:	ef 93       	push	r30
	inc	r31		;/
     c2a:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     c2c:	f2 17       	cp	r31, r18
	brcc	6f		;
     c2e:	18 f4       	brcc	.+6      	; 0xc36 <xitoa+0x6c>
	push	r19		;
     c30:	3f 93       	push	r19
	inc	r31		;
     c32:	f3 95       	inc	r31
	rjmp	5b		;/
     c34:	fb cf       	rjmp	.-10     	; 0xc2c <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     c36:	8f 91       	pop	r24
	rcall	xputc		;
     c38:	b5 df       	rcall	.-150    	; 0xba4 <xputc>
	dec	r31		;
     c3a:	fa 95       	dec	r31
	brne	6b		;/
     c3c:	e1 f7       	brne	.-8      	; 0xc36 <xitoa+0x6c>

	ret
     c3e:	08 95       	ret

00000c40 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     c40:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     c42:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     c44:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     c46:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     c48:	21 f0       	breq	.+8      	; 0xc52 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     c4a:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     c4c:	19 f0       	breq	.+6      	; 0xc54 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     c4e:	aa df       	rcall	.-172    	; 0xba4 <xputc>
	rjmp	0b		;/
     c50:	f9 cf       	rjmp	.-14     	; 0xc44 <xvprintf+0x4>
90:	ret
     c52:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     c54:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     c56:	e8 94       	clt
	_LPMI	r21		;Get flags
     c58:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     c5a:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     c5c:	c1 f3       	breq	.-16     	; 0xc4e <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     c5e:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     c60:	11 f4       	brne	.+4      	; 0xc66 <xvprintf+0x26>
	set			;/
     c62:	68 94       	set
22:	_LPMI	r21		;Get width
     c64:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     c66:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     c68:	48 f4       	brcc	.+18     	; 0xc7c <xvprintf+0x3c>
	subi	r21, '0'	;
     c6a:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     c6c:	90 f3       	brcs	.-28     	; 0xc52 <xvprintf+0x12>
	lsl	r18		;
     c6e:	22 0f       	add	r18, r18
	mov	r0, r18		;
     c70:	02 2e       	mov	r0, r18
	lsl	r18		;
     c72:	22 0f       	add	r18, r18
	lsl	r18		;
     c74:	22 0f       	add	r18, r18
	add	r18, r0		;
     c76:	20 0d       	add	r18, r0
	add	r18, r21	;
     c78:	25 0f       	add	r18, r21
	rjmp	22b		;/
     c7a:	f4 cf       	rjmp	.-24     	; 0xc64 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     c7c:	0e f4       	brtc	.+2      	; 0xc80 <xvprintf+0x40>
	neg	r18		;
     c7e:	21 95       	neg	r18
25:	ld	r24, Y+		;
     c80:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     c82:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     c84:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     c86:	19 f3       	breq	.-58     	; 0xc4e <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     c88:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     c8a:	29 f1       	breq	.+74     	; 0xcd6 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     c8c:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     c8e:	59 f1       	breq	.+86     	; 0xce6 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     c90:	bc 01       	movw	r22, r24
	clr	r24		;
     c92:	88 27       	eor	r24, r24
	clr	r25		;
     c94:	99 27       	eor	r25, r25
	clt			;/
     c96:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     c98:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     c9a:	21 f4       	brne	.+8      	; 0xca4 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     c9c:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     c9e:	99 91       	ld	r25, Y+
	set			;
     ca0:	68 94       	set
	_LPMI	r21		;/
     ca2:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     ca4:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     ca6:	39 f4       	brne	.+14     	; 0xcb6 <xvprintf+0x76>
	ldi	r20, -10	;
     ca8:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     caa:	7e f0       	brts	.+30     	; 0xcca <xvprintf+0x8a>
	sbrs	r23, 7		;
     cac:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     cae:	0d c0       	rjmp	.+26     	; 0xcca <xvprintf+0x8a>
	ldi	r24, -1		;
     cb0:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     cb2:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     cb4:	0a c0       	rjmp	.+20     	; 0xcca <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     cb6:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     cb8:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     cba:	39 f0       	breq	.+14     	; 0xcca <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     cbc:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     cbe:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     cc0:	21 f0       	breq	.+8      	; 0xcca <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     cc2:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     cc4:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     cc6:	09 f0       	breq	.+2      	; 0xcca <xvprintf+0x8a>
	ret			;abort
     cc8:	08 95       	ret
40:	push	ZH		;Output the value
     cca:	ff 93       	push	r31
	push	ZL		;
     ccc:	ef 93       	push	r30
	rcall	xitoa		;
     cce:	7d df       	rcall	.-262    	; 0xbca <xitoa>
42:	pop	ZL		;
     cd0:	ef 91       	pop	r30
	pop	ZH		;
     cd2:	ff 91       	pop	r31
	rjmp	0b		;/
     cd4:	b7 cf       	rjmp	.-146    	; 0xc44 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     cd6:	ff 93       	push	r31
	push	ZL
     cd8:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     cda:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     cdc:	81 91       	ld	r24, Z+
	cpi	r24, 0
     cde:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     ce0:	b9 f3       	breq	.-18     	; 0xcd0 <xvprintf+0x90>
	rcall	xputc
     ce2:	60 df       	rcall	.-320    	; 0xba4 <xputc>
	rjmp	51b
     ce4:	fb cf       	rjmp	.-10     	; 0xcdc <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     ce6:	ff 93       	push	r31
	push	ZL
     ce8:	ef 93       	push	r30
	rcall	xputs
     cea:	68 df       	rcall	.-304    	; 0xbbc <xputs>
	rjmp	42b
     cec:	f1 cf       	rjmp	.-30     	; 0xcd0 <xvprintf+0x90>

00000cee <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     cee:	df 93       	push	r29
	push	YL
     cf0:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     cf2:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     cf4:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     cf6:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     cf8:	a3 df       	rcall	.-186    	; 0xc40 <xvprintf>
	pop	YL
     cfa:	cf 91       	pop	r28
	pop	YH
     cfc:	df 91       	pop	r29
	ret
     cfe:	08 95       	ret

00000d00 <unselect_rows>:
 * pin: D0  D1  D2  D3  D4  D5  D6  C2
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRD  &= ~0b01111111;
     d00:	8a b1       	in	r24, 0x0a	; 10
     d02:	80 78       	andi	r24, 0x80	; 128
     d04:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~0b01111111;
     d06:	8b b1       	in	r24, 0x0b	; 11
     d08:	80 78       	andi	r24, 0x80	; 128
     d0a:	8b b9       	out	0x0b, r24	; 11
    DDRC  &= ~0b00000100;
     d0c:	3a 98       	cbi	0x07, 2	; 7
    PORTC &= ~0b00000100;
     d0e:	42 98       	cbi	0x08, 2	; 8
     d10:	08 95       	ret

00000d12 <matrix_init>:
#define LED_TGL()   do { DDRC |= (1<<5); PINC |= (1<<5); } while (0)

void matrix_init(void)
{
    // initialize row and col
    unselect_rows();
     d12:	0e 94 80 06 	call	0xd00	; 0xd00 <unselect_rows>
 * pin: B0  B1  B2  B3  B4  B5  B6  B7
 */
static void  init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    DDRB  &= ~0b11111111;
     d16:	84 b1       	in	r24, 0x04	; 4
     d18:	14 b8       	out	0x04, r1	; 4
    PORTB |=  0b11111111;
     d1a:	85 b1       	in	r24, 0x05	; 5
     d1c:	8f ef       	ldi	r24, 0xFF	; 255
     d1e:	85 b9       	out	0x05, r24	; 5
     d20:	ee e3       	ldi	r30, 0x3E	; 62
     d22:	f1 e0       	ldi	r31, 0x01	; 1
     d24:	a6 e3       	ldi	r26, 0x36	; 54
     d26:	b1 e0       	ldi	r27, 0x01	; 1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     d28:	11 92       	st	Z+, r1
        matrix_debouncing[i] = 0;
     d2a:	1d 92       	st	X+, r1
    // initialize row and col
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
     d2c:	21 e0       	ldi	r18, 0x01	; 1
     d2e:	e6 34       	cpi	r30, 0x46	; 70
     d30:	f2 07       	cpc	r31, r18
     d32:	d1 f7       	brne	.-12     	; 0xd28 <matrix_init+0x16>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }

    //debug
    debug_matrix = true;
     d34:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <debug_config>
     d38:	82 60       	ori	r24, 0x02	; 2
     d3a:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <debug_config>
    LED_ON();
     d3e:	3d 9a       	sbi	0x07, 5	; 7
     d40:	45 9a       	sbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d42:	8f ef       	ldi	r24, 0xFF	; 255
     d44:	99 e6       	ldi	r25, 0x69	; 105
     d46:	28 e1       	ldi	r18, 0x18	; 24
     d48:	81 50       	subi	r24, 0x01	; 1
     d4a:	90 40       	sbci	r25, 0x00	; 0
     d4c:	20 40       	sbci	r18, 0x00	; 0
     d4e:	e1 f7       	brne	.-8      	; 0xd48 <matrix_init+0x36>
     d50:	00 c0       	rjmp	.+0      	; 0xd52 <matrix_init+0x40>
     d52:	00 00       	nop
    _delay_ms(500);
    LED_OFF();
     d54:	3d 98       	cbi	0x07, 5	; 7
     d56:	45 98       	cbi	0x08, 5	; 8
     d58:	08 95       	ret

00000d5a <matrix_scan>:
}

uint8_t matrix_scan(void)
{
     d5a:	cf 92       	push	r12
     d5c:	df 92       	push	r13
     d5e:	ef 92       	push	r14
     d60:	ff 92       	push	r15
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	06 e3       	ldi	r16, 0x36	; 54
     d6c:	11 e0       	ldi	r17, 0x01	; 1
     d6e:	e8 01       	movw	r28, r16
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     d70:	d1 2c       	mov	r13, r1
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
            }
            debouncing = DEBOUNCE;
     d72:	85 e0       	ldi	r24, 0x05	; 5
     d74:	c8 2e       	mov	r12, r24
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
     d76:	9e e7       	ldi	r25, 0x7E	; 126
     d78:	e9 2e       	mov	r14, r25
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	f9 2e       	mov	r15, r25
}

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
    switch (row) {
     d7e:	8d 2d       	mov	r24, r13
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	fc 01       	movw	r30, r24
     d84:	31 97       	sbiw	r30, 0x01	; 1
     d86:	e7 30       	cpi	r30, 0x07	; 7
     d88:	f1 05       	cpc	r31, r1
     d8a:	20 f4       	brcc	.+8      	; 0xd94 <matrix_scan+0x3a>
     d8c:	e6 5c       	subi	r30, 0xC6	; 198
     d8e:	ff 4f       	sbci	r31, 0xFF	; 255
     d90:	0c 94 e5 28 	jmp	0x51ca	; 0x51ca <__tablejump2__>
        case 0:
            DDRD  |= (1<<0);
     d94:	50 9a       	sbi	0x0a, 0	; 10
            PORTD &= ~(1<<0);
     d96:	58 98       	cbi	0x0b, 0	; 11
     d98:	14 c0       	rjmp	.+40     	; 0xdc2 <matrix_scan+0x68>
            break;
        case 1:
            DDRD  |= (1<<1);
     d9a:	51 9a       	sbi	0x0a, 1	; 10
            PORTD &= ~(1<<1);
     d9c:	59 98       	cbi	0x0b, 1	; 11
     d9e:	11 c0       	rjmp	.+34     	; 0xdc2 <matrix_scan+0x68>
            break;
        case 2:
            DDRD  |= (1<<2);
     da0:	52 9a       	sbi	0x0a, 2	; 10
            PORTD &= ~(1<<2);
     da2:	5a 98       	cbi	0x0b, 2	; 11
     da4:	0e c0       	rjmp	.+28     	; 0xdc2 <matrix_scan+0x68>
            break;
        case 3:
            DDRD  |= (1<<3);
     da6:	53 9a       	sbi	0x0a, 3	; 10
            PORTD &= ~(1<<3);
     da8:	5b 98       	cbi	0x0b, 3	; 11
     daa:	0b c0       	rjmp	.+22     	; 0xdc2 <matrix_scan+0x68>
            break;
        case 4:
            DDRD  |= (1<<4);
     dac:	54 9a       	sbi	0x0a, 4	; 10
            PORTD &= ~(1<<4);
     dae:	5c 98       	cbi	0x0b, 4	; 11
     db0:	08 c0       	rjmp	.+16     	; 0xdc2 <matrix_scan+0x68>
            break;
        case 5:
            DDRD  |= (1<<5);
     db2:	55 9a       	sbi	0x0a, 5	; 10
            PORTD &= ~(1<<5);
     db4:	5d 98       	cbi	0x0b, 5	; 11
     db6:	05 c0       	rjmp	.+10     	; 0xdc2 <matrix_scan+0x68>
            break;
        case 6:
            DDRD  |= (1<<6);
     db8:	56 9a       	sbi	0x0a, 6	; 10
            PORTD &= ~(1<<6);
     dba:	5e 98       	cbi	0x0b, 6	; 11
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <matrix_scan+0x68>
            break;
        case 7:
            DDRC  |= (1<<2);
     dbe:	3a 9a       	sbi	0x07, 2	; 7
            PORTC &= ~(1<<2);
     dc0:	42 98       	cbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dc2:	80 ea       	ldi	r24, 0xA0	; 160
     dc4:	8a 95       	dec	r24
     dc6:	f1 f7       	brne	.-4      	; 0xdc4 <matrix_scan+0x6a>

/* Returns status of switches(1:on, 0:off) */
static matrix_row_t read_cols(void)
{
    // Invert because PIN indicates 'switch on' with low(0) and 'off' with high(1)
    return ~PINB;
     dc8:	83 b1       	in	r24, 0x03	; 3
     dca:	80 95       	com	r24
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
     dcc:	98 81       	ld	r25, Y
     dce:	98 17       	cp	r25, r24
     dd0:	39 f1       	breq	.+78     	; 0xe20 <matrix_scan+0xc6>
            matrix_debouncing[i] = cols;
     dd2:	88 83       	st	Y, r24
            if (debouncing) {
     dd4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     dd8:	88 23       	and	r24, r24
     dda:	01 f1       	breq	.+64     	; 0xe1c <matrix_scan+0xc2>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
     ddc:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <debug_config>
     de0:	80 ff       	sbrs	r24, 0
     de2:	04 c0       	rjmp	.+8      	; 0xdec <matrix_scan+0x92>
     de4:	83 e8       	ldi	r24, 0x83	; 131
     de6:	91 e0       	ldi	r25, 0x01	; 1
     de8:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
     dec:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <debug_config>
     df0:	80 ff       	sbrs	r24, 0
     df2:	0c c0       	rjmp	.+24     	; 0xe0c <matrix_scan+0xb2>
     df4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     df8:	1f 92       	push	r1
     dfa:	8f 93       	push	r24
     dfc:	ff 92       	push	r15
     dfe:	ef 92       	push	r14
     e00:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <debug_config>
     e10:	80 ff       	sbrs	r24, 0
     e12:	04 c0       	rjmp	.+8      	; 0xe1c <matrix_scan+0xc2>
     e14:	8c e7       	ldi	r24, 0x7C	; 124
     e16:	91 e0       	ldi	r25, 0x01	; 1
     e18:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
            }
            debouncing = DEBOUNCE;
     e1c:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
        }
        unselect_rows();
     e20:	0e 94 80 06 	call	0xd00	; 0xd00 <unselect_rows>
    LED_OFF();
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     e24:	d3 94       	inc	r13
     e26:	21 96       	adiw	r28, 0x01	; 1
     e28:	98 e0       	ldi	r25, 0x08	; 8
     e2a:	d9 12       	cpse	r13, r25
     e2c:	a8 cf       	rjmp	.-176    	; 0xd7e <matrix_scan+0x24>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
     e2e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     e32:	88 23       	and	r24, r24
     e34:	b1 f0       	breq	.+44     	; 0xe62 <matrix_scan+0x108>
        if (--debouncing) {
     e36:	81 50       	subi	r24, 0x01	; 1
     e38:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     e3c:	88 23       	and	r24, r24
     e3e:	39 f0       	breq	.+14     	; 0xe4e <matrix_scan+0xf4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e40:	af e9       	ldi	r26, 0x9F	; 159
     e42:	bf e0       	ldi	r27, 0x0F	; 15
     e44:	11 97       	sbiw	r26, 0x01	; 1
     e46:	f1 f7       	brne	.-4      	; 0xe44 <matrix_scan+0xea>
     e48:	00 c0       	rjmp	.+0      	; 0xe4a <matrix_scan+0xf0>
     e4a:	00 00       	nop
     e4c:	0a c0       	rjmp	.+20     	; 0xe62 <matrix_scan+0x108>
     e4e:	ee e3       	ldi	r30, 0x3E	; 62
     e50:	f1 e0       	ldi	r31, 0x01	; 1
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
     e52:	d8 01       	movw	r26, r16
     e54:	8d 91       	ld	r24, X+
     e56:	8d 01       	movw	r16, r26
     e58:	81 93       	st	Z+, r24

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     e5a:	b1 e0       	ldi	r27, 0x01	; 1
     e5c:	0e 33       	cpi	r16, 0x3E	; 62
     e5e:	1b 07       	cpc	r17, r27
     e60:	c1 f7       	brne	.-16     	; 0xe52 <matrix_scan+0xf8>
            }
        }
    }

    return 1;
}
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	df 90       	pop	r13
     e72:	cf 90       	pop	r12
     e74:	08 95       	ret

00000e76 <matrix_get_row>:

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
     e76:	e8 2f       	mov	r30, r24
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	e2 5c       	subi	r30, 0xC2	; 194
     e7c:	fe 4f       	sbci	r31, 0xFE	; 254
}
     e7e:	80 81       	ld	r24, Z
     e80:	08 95       	ret

00000e82 <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
     e82:	81 ff       	sbrs	r24, 1
     e84:	03 c0       	rjmp	.+6      	; 0xe8c <led_set+0xa>
        // output high
        DDRC |= (1<<5);
     e86:	3d 9a       	sbi	0x07, 5	; 7
        PORTC |= (1<<5);
     e88:	45 9a       	sbi	0x08, 5	; 8
     e8a:	08 95       	ret
    } else {
        // Hi-Z
        DDRC &= ~(1<<5);
     e8c:	3d 98       	cbi	0x07, 5	; 7
        PORTC &= ~(1<<5);
     e8e:	45 98       	cbi	0x08, 5	; 8
     e90:	08 95       	ret

00000e92 <keyboard_leds>:

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    /* For battery powered device */
    USB_IsInitialized = false;
     e92:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <keyboard_led_stats>
     e96:	08 95       	ret

00000e98 <sendchar>:
     e98:	9f b7       	in	r25, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <console_flush>
     ea0:	9f bf       	out	0x3f, r25	; 63
     ea2:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <USB_DeviceState>
     ea6:	94 30       	cpi	r25, 0x04	; 4
     ea8:	09 f0       	breq	.+2      	; 0xeac <sendchar+0x14>
     eaa:	57 c0       	rjmp	.+174    	; 0xf5a <sendchar+0xc2>
     eac:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     eb0:	9f 70       	andi	r25, 0x0F	; 15
     eb2:	30 91 ec 00 	lds	r19, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     eb6:	23 2f       	mov	r18, r19
     eb8:	21 70       	andi	r18, 0x01	; 1
     eba:	30 fd       	sbrc	r19, 0
     ebc:	20 e8       	ldi	r18, 0x80	; 128
     ebe:	92 2b       	or	r25, r18
     ec0:	24 e0       	ldi	r18, 0x04	; 4
     ec2:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     ec6:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     eca:	20 ff       	sbrs	r18, 0
     ecc:	43 c0       	rjmp	.+134    	; 0xf54 <sendchar+0xbc>
     ece:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
     ed2:	27 ff       	sbrs	r18, 7
     ed4:	3f c0       	rjmp	.+126    	; 0xf54 <sendchar+0xbc>
     ed6:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <timeouted.4973>
     eda:	22 23       	and	r18, r18
     edc:	21 f0       	breq	.+8      	; 0xee6 <sendchar+0x4e>
     ede:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     ee2:	25 ff       	sbrs	r18, 5
     ee4:	37 c0       	rjmp	.+110    	; 0xf54 <sendchar+0xbc>
     ee6:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <timeouted.4973>
     eea:	26 e0       	ldi	r18, 0x06	; 6
     eec:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     ef0:	35 fd       	sbrc	r19, 5
     ef2:	15 c0       	rjmp	.+42     	; 0xf1e <sendchar+0x86>
     ef4:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <USB_DeviceState>
     ef8:	34 30       	cpi	r19, 0x04	; 4
     efa:	61 f5       	brne	.+88     	; 0xf54 <sendchar+0xbc>
     efc:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     f00:	35 fd       	sbrc	r19, 5
     f02:	28 c0       	rjmp	.+80     	; 0xf54 <sendchar+0xbc>
     f04:	21 50       	subi	r18, 0x01	; 1
     f06:	21 f4       	brne	.+8      	; 0xf10 <sendchar+0x78>
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <timeouted.4973>
     f0e:	22 c0       	rjmp	.+68     	; 0xf54 <sendchar+0xbc>
     f10:	ef e9       	ldi	r30, 0x9F	; 159
     f12:	ff e0       	ldi	r31, 0x0F	; 15
     f14:	31 97       	sbiw	r30, 0x01	; 1
     f16:	f1 f7       	brne	.-4      	; 0xf14 <sendchar+0x7c>
     f18:	00 c0       	rjmp	.+0      	; 0xf1a <sendchar+0x82>
     f1a:	00 00       	nop
     f1c:	e7 cf       	rjmp	.-50     	; 0xeec <sendchar+0x54>
     f1e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     f22:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     f26:	85 fd       	sbrc	r24, 5
     f28:	0a c0       	rjmp	.+20     	; 0xf3e <sendchar+0xa6>
     f2a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     f2e:	80 ff       	sbrs	r24, 0
     f30:	fc cf       	rjmp	.-8      	; 0xf2a <sendchar+0x92>
     f32:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     f36:	8e 77       	andi	r24, 0x7E	; 126
     f38:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     f3c:	06 c0       	rjmp	.+12     	; 0xf4a <sendchar+0xb2>
     f3e:	8f b7       	in	r24, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	21 e0       	ldi	r18, 0x01	; 1
     f44:	20 93 49 01 	sts	0x0149, r18	; 0x800149 <console_flush>
     f48:	8f bf       	out	0x3f, r24	; 63
     f4a:	9f 70       	andi	r25, 0x0F	; 15
     f4c:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	08 95       	ret
     f54:	9f 70       	andi	r25, 0x0F	; 15
     f56:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     f5a:	8f ef       	ldi	r24, 0xFF	; 255
     f5c:	08 95       	ret

00000f5e <send_consumer>:
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	00 d0       	rcall	.+0      	; 0xf64 <send_consumer+0x6>
     f64:	1f 92       	push	r1
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	9c 01       	movw	r18, r24
     f6c:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USB_DeviceState>
     f70:	84 30       	cpi	r24, 0x04	; 4
     f72:	19 f5       	brne	.+70     	; 0xfba <send_consumer+0x5c>
     f74:	93 e0       	ldi	r25, 0x03	; 3
     f76:	99 83       	std	Y+1, r25	; 0x01
     f78:	3b 83       	std	Y+3, r19	; 0x03
     f7a:	2a 83       	std	Y+2, r18	; 0x02
     f7c:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     f80:	8f ef       	ldi	r24, 0xFF	; 255
     f82:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     f86:	81 50       	subi	r24, 0x01	; 1
     f88:	95 fd       	sbrc	r25, 5
     f8a:	06 c0       	rjmp	.+12     	; 0xf98 <send_consumer+0x3a>
     f8c:	95 ed       	ldi	r25, 0xD5	; 213
     f8e:	9a 95       	dec	r25
     f90:	f1 f7       	brne	.-4      	; 0xf8e <send_consumer+0x30>
     f92:	00 00       	nop
     f94:	81 11       	cpse	r24, r1
     f96:	f5 cf       	rjmp	.-22     	; 0xf82 <send_consumer+0x24>
     f98:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     f9c:	85 ff       	sbrs	r24, 5
     f9e:	0d c0       	rjmp	.+26     	; 0xfba <send_consumer+0x5c>
     fa0:	40 e0       	ldi	r20, 0x00	; 0
     fa2:	50 e0       	ldi	r21, 0x00	; 0
     fa4:	63 e0       	ldi	r22, 0x03	; 3
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	ce 01       	movw	r24, r28
     faa:	01 96       	adiw	r24, 0x01	; 1
     fac:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <Endpoint_Write_Stream_LE>
     fb0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     fb4:	8e 77       	andi	r24, 0x7E	; 126
     fb6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	08 95       	ret

00000fc6 <send_system>:
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	00 d0       	rcall	.+0      	; 0xfcc <send_system+0x6>
     fcc:	1f 92       	push	r1
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <USB_DeviceState>
     fd6:	24 30       	cpi	r18, 0x04	; 4
     fd8:	21 f5       	brne	.+72     	; 0x1022 <send_system+0x5c>
     fda:	22 e0       	ldi	r18, 0x02	; 2
     fdc:	29 83       	std	Y+1, r18	; 0x01
     fde:	9b 83       	std	Y+3, r25	; 0x03
     fe0:	8a 83       	std	Y+2, r24	; 0x02
     fe2:	83 e0       	ldi	r24, 0x03	; 3
     fe4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     fe8:	8f ef       	ldi	r24, 0xFF	; 255
     fea:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     fee:	81 50       	subi	r24, 0x01	; 1
     ff0:	95 fd       	sbrc	r25, 5
     ff2:	06 c0       	rjmp	.+12     	; 0x1000 <send_system+0x3a>
     ff4:	95 ed       	ldi	r25, 0xD5	; 213
     ff6:	9a 95       	dec	r25
     ff8:	f1 f7       	brne	.-4      	; 0xff6 <send_system+0x30>
     ffa:	00 00       	nop
     ffc:	81 11       	cpse	r24, r1
     ffe:	f5 cf       	rjmp	.-22     	; 0xfea <send_system+0x24>
    1000:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1004:	85 ff       	sbrs	r24, 5
    1006:	0d c0       	rjmp	.+26     	; 0x1022 <send_system+0x5c>
    1008:	40 e0       	ldi	r20, 0x00	; 0
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	63 e0       	ldi	r22, 0x03	; 3
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	ce 01       	movw	r24, r28
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <Endpoint_Write_Stream_LE>
    1018:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    101c:	8e 77       	andi	r24, 0x7E	; 126
    101e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	08 95       	ret

0000102e <send_mouse>:
    102e:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <USB_DeviceState>
    1032:	24 30       	cpi	r18, 0x04	; 4
    1034:	f1 f4       	brne	.+60     	; 0x1072 <send_mouse+0x44>
    1036:	22 e0       	ldi	r18, 0x02	; 2
    1038:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
    103c:	2f ef       	ldi	r18, 0xFF	; 255
    103e:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1042:	21 50       	subi	r18, 0x01	; 1
    1044:	35 fd       	sbrc	r19, 5
    1046:	06 c0       	rjmp	.+12     	; 0x1054 <send_mouse+0x26>
    1048:	35 ed       	ldi	r19, 0xD5	; 213
    104a:	3a 95       	dec	r19
    104c:	f1 f7       	brne	.-4      	; 0x104a <send_mouse+0x1c>
    104e:	00 00       	nop
    1050:	21 11       	cpse	r18, r1
    1052:	f5 cf       	rjmp	.-22     	; 0x103e <send_mouse+0x10>
    1054:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1058:	25 ff       	sbrs	r18, 5
    105a:	0b c0       	rjmp	.+22     	; 0x1072 <send_mouse+0x44>
    105c:	40 e0       	ldi	r20, 0x00	; 0
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	65 e0       	ldi	r22, 0x05	; 5
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <Endpoint_Write_Stream_LE>
    1068:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    106c:	8e 77       	andi	r24, 0x7E	; 126
    106e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1072:	08 95       	ret

00001074 <send_keyboard>:
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <USB_DeviceState>
    107c:	24 30       	cpi	r18, 0x04	; 4
    107e:	39 f5       	brne	.+78     	; 0x10ce <send_keyboard+0x5a>
    1080:	21 e0       	ldi	r18, 0x01	; 1
    1082:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
    1086:	2f ef       	ldi	r18, 0xFF	; 255
    1088:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    108c:	21 50       	subi	r18, 0x01	; 1
    108e:	35 fd       	sbrc	r19, 5
    1090:	06 c0       	rjmp	.+12     	; 0x109e <send_keyboard+0x2a>
    1092:	35 ed       	ldi	r19, 0xD5	; 213
    1094:	3a 95       	dec	r19
    1096:	f1 f7       	brne	.-4      	; 0x1094 <send_keyboard+0x20>
    1098:	00 00       	nop
    109a:	21 11       	cpse	r18, r1
    109c:	f5 cf       	rjmp	.-22     	; 0x1088 <send_keyboard+0x14>
    109e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    10a2:	25 ff       	sbrs	r18, 5
    10a4:	14 c0       	rjmp	.+40     	; 0x10ce <send_keyboard+0x5a>
    10a6:	ec 01       	movw	r28, r24
    10a8:	40 e0       	ldi	r20, 0x00	; 0
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	68 e0       	ldi	r22, 0x08	; 8
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <Endpoint_Write_Stream_LE>
    10b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    10b8:	8e 77       	andi	r24, 0x7E	; 126
    10ba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    10be:	88 e0       	ldi	r24, 0x08	; 8
    10c0:	fe 01       	movw	r30, r28
    10c2:	aa e4       	ldi	r26, 0x4A	; 74
    10c4:	b1 e0       	ldi	r27, 0x01	; 1
    10c6:	01 90       	ld	r0, Z+
    10c8:	0d 92       	st	X+, r0
    10ca:	8a 95       	dec	r24
    10cc:	e1 f7       	brne	.-8      	; 0x10c6 <send_keyboard+0x52>
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	08 95       	ret

000010d4 <EVENT_USB_Device_Reset>:
    }
*/
}

void EVENT_USB_Device_Reset(void)
{
    10d4:	08 95       	ret

000010d6 <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    10d6:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <count.4907>
    10da:	2f 5f       	subi	r18, 0xFF	; 255
    10dc:	82 2f       	mov	r24, r18
    10de:	62 e3       	ldi	r22, 0x32	; 50
    10e0:	0e 94 c5 28 	call	0x518a	; 0x518a <__udivmodqi4>
    10e4:	99 23       	and	r25, r25
    10e6:	19 f0       	breq	.+6      	; 0x10ee <EVENT_USB_Device_StartOfFrame+0x18>
    10e8:	20 93 47 01 	sts	0x0147, r18	; 0x800147 <count.4907>
    10ec:	08 95       	ret
    count = 0;
    10ee:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <count.4907>

    if (!console_flush) return;
    10f2:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <console_flush>
    10f6:	88 23       	and	r24, r24
    10f8:	71 f1       	breq	.+92     	; 0x1156 <EVENT_USB_Device_StartOfFrame+0x80>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    10fa:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USB_DeviceState>
    10fe:	84 30       	cpi	r24, 0x04	; 4
    1100:	41 f5       	brne	.+80     	; 0x1152 <EVENT_USB_Device_StartOfFrame+0x7c>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1102:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
    1106:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1108:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
    110c:	92 2f       	mov	r25, r18
    110e:	91 70       	andi	r25, 0x01	; 1
    1110:	20 fd       	sbrc	r18, 0
    1112:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1114:	89 2b       	or	r24, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1116:	94 e0       	ldi	r25, 0x04	; 4
    1118:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    111c:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1120:	90 ff       	sbrs	r25, 0
    1122:	14 c0       	rjmp	.+40     	; 0x114c <EVENT_USB_Device_StartOfFrame+0x76>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1124:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
    1128:	97 ff       	sbrs	r25, 7
    112a:	10 c0       	rjmp	.+32     	; 0x114c <EVENT_USB_Device_StartOfFrame+0x76>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    112c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    1130:	95 ff       	sbrs	r25, 5
    1132:	03 c0       	rjmp	.+6      	; 0x113a <EVENT_USB_Device_StartOfFrame+0x64>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1134:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
    1138:	f9 cf       	rjmp	.-14     	; 0x112c <EVENT_USB_Device_StartOfFrame+0x56>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    113a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    113e:	90 ff       	sbrs	r25, 0
    1140:	05 c0       	rjmp	.+10     	; 0x114c <EVENT_USB_Device_StartOfFrame+0x76>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1142:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1146:	9e 77       	andi	r25, 0x7E	; 126
    1148:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    114c:	8f 70       	andi	r24, 0x0F	; 15
    114e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    1152:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <console_flush>
    1156:	08 95       	ret

00001158 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1158:	42 e0       	ldi	r20, 0x02	; 2
    115a:	61 ec       	ldi	r22, 0xC1	; 193
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <Endpoint_ConfigureEndpoint_Prv>
    1162:	42 e0       	ldi	r20, 0x02	; 2
    1164:	61 ec       	ldi	r22, 0xC1	; 193
    1166:	82 e0       	ldi	r24, 0x02	; 2
    1168:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <Endpoint_ConfigureEndpoint_Prv>
    116c:	42 e0       	ldi	r20, 0x02	; 2
    116e:	61 ec       	ldi	r22, 0xC1	; 193
    1170:	83 e0       	ldi	r24, 0x03	; 3
    1172:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <Endpoint_ConfigureEndpoint_Prv>
    1176:	42 e2       	ldi	r20, 0x22	; 34
    1178:	61 ec       	ldi	r22, 0xC1	; 193
    117a:	84 e0       	ldi	r24, 0x04	; 4
    117c:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <Endpoint_ConfigureEndpoint_Prv>

00001180 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    1180:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <USB_ControlRequest+0x1>
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	09 f4       	brne	.+2      	; 0x118a <EVENT_USB_Device_ControlRequest+0xa>
    1188:	53 c0       	rjmp	.+166    	; 0x1230 <EVENT_USB_Device_ControlRequest+0xb0>
    118a:	30 f4       	brcc	.+12     	; 0x1198 <EVENT_USB_Device_ControlRequest+0x18>
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	71 f0       	breq	.+28     	; 0x11ac <EVENT_USB_Device_ControlRequest+0x2c>
    1190:	82 30       	cpi	r24, 0x02	; 2
    1192:	09 f4       	brne	.+2      	; 0x1196 <EVENT_USB_Device_ControlRequest+0x16>
    1194:	8c c0       	rjmp	.+280    	; 0x12ae <EVENT_USB_Device_ControlRequest+0x12e>
    1196:	08 95       	ret
    1198:	8a 30       	cpi	r24, 0x0A	; 10
    119a:	09 f4       	brne	.+2      	; 0x119e <EVENT_USB_Device_ControlRequest+0x1e>
    119c:	78 c0       	rjmp	.+240    	; 0x128e <EVENT_USB_Device_ControlRequest+0x10e>
    119e:	8b 30       	cpi	r24, 0x0B	; 11
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <EVENT_USB_Device_ControlRequest+0x24>
    11a2:	5e c0       	rjmp	.+188    	; 0x1260 <EVENT_USB_Device_ControlRequest+0xe0>
    11a4:	89 30       	cpi	r24, 0x09	; 9
    11a6:	09 f0       	breq	.+2      	; 0x11aa <EVENT_USB_Device_ControlRequest+0x2a>
    11a8:	9a c0       	rjmp	.+308    	; 0x12de <EVENT_USB_Device_ControlRequest+0x15e>
    11aa:	20 c0       	rjmp	.+64     	; 0x11ec <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    11ac:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <USB_ControlRequest>
    11b0:	81 3a       	cpi	r24, 0xA1	; 161
    11b2:	09 f0       	breq	.+2      	; 0x11b6 <EVENT_USB_Device_ControlRequest+0x36>
    11b4:	94 c0       	rjmp	.+296    	; 0x12de <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    11ba:	87 7f       	andi	r24, 0xF7	; 247
    11bc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    11c0:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <USB_ControlRequest+0x4>
    11c4:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <USB_ControlRequest+0x5>
    11c8:	89 2b       	or	r24, r25
    11ca:	21 f4       	brne	.+8      	; 0x11d4 <EVENT_USB_Device_ControlRequest+0x54>
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    11cc:	68 e0       	ldi	r22, 0x08	; 8

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    11ce:	8a e4       	ldi	r24, 0x4A	; 74
    11d0:	91 e0       	ldi	r25, 0x01	; 1
    11d2:	03 c0       	rjmp	.+6      	; 0x11da <EVENT_USB_Device_ControlRequest+0x5a>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    11d4:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	90 e0       	ldi	r25, 0x00	; 0
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    11da:	70 e0       	ldi	r23, 0x00	; 0
    11dc:	0e 94 a4 0a 	call	0x1548	; 0x1548 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    11e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    11e4:	8b 77       	andi	r24, 0x7B	; 123
    11e6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    11ea:	08 95       	ret
#endif
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    11ec:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <USB_ControlRequest>
    11f0:	81 32       	cpi	r24, 0x21	; 33
    11f2:	09 f0       	breq	.+2      	; 0x11f6 <EVENT_USB_Device_ControlRequest+0x76>
    11f4:	74 c0       	rjmp	.+232    	; 0x12de <EVENT_USB_Device_ControlRequest+0x15e>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    11f6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <USB_ControlRequest+0x4>
    11fa:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <USB_ControlRequest+0x5>
    11fe:	89 2b       	or	r24, r25
    1200:	09 f0       	breq	.+2      	; 0x1204 <EVENT_USB_Device_ControlRequest+0x84>
    1202:	6d c0       	rjmp	.+218    	; 0x12de <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1204:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1208:	87 7f       	andi	r24, 0xF7	; 247
    120a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    120e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    1212:	82 fd       	sbrc	r24, 2
    1214:	05 c0       	rjmp	.+10     	; 0x1220 <EVENT_USB_Device_ControlRequest+0xa0>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1216:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USB_DeviceState>
    121a:	81 11       	cpse	r24, r1
    121c:	f8 cf       	rjmp	.-16     	; 0x120e <EVENT_USB_Device_ControlRequest+0x8e>
    121e:	5f c0       	rjmp	.+190    	; 0x12de <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1220:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    1224:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <keyboard_led_stats>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1228:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    122c:	8b 77       	andi	r24, 0x7B	; 123
    122e:	53 c0       	rjmp	.+166    	; 0x12d6 <EVENT_USB_Device_ControlRequest+0x156>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1230:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <USB_ControlRequest>
    1234:	81 3a       	cpi	r24, 0xA1	; 161
    1236:	09 f0       	breq	.+2      	; 0x123a <EVENT_USB_Device_ControlRequest+0xba>
    1238:	52 c0       	rjmp	.+164    	; 0x12de <EVENT_USB_Device_ControlRequest+0x15e>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    123a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <USB_ControlRequest+0x4>
    123e:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <USB_ControlRequest+0x5>
    1242:	89 2b       	or	r24, r25
    1244:	09 f0       	breq	.+2      	; 0x1248 <EVENT_USB_Device_ControlRequest+0xc8>
    1246:	4b c0       	rjmp	.+150    	; 0x12de <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1248:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    124c:	87 7f       	andi	r24, 0xF7	; 247
    124e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1252:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    1256:	80 ff       	sbrs	r24, 0
    1258:	fc cf       	rjmp	.-8      	; 0x1252 <EVENT_USB_Device_ControlRequest+0xd2>
                    Endpoint_Write_8(keyboard_protocol);
    125a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <keyboard_protocol>
    125e:	36 c0       	rjmp	.+108    	; 0x12cc <EVENT_USB_Device_ControlRequest+0x14c>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1260:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <USB_ControlRequest>
    1264:	81 32       	cpi	r24, 0x21	; 33
    1266:	d9 f5       	brne	.+118    	; 0x12de <EVENT_USB_Device_ControlRequest+0x15e>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1268:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <USB_ControlRequest+0x4>
    126c:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <USB_ControlRequest+0x5>
    1270:	89 2b       	or	r24, r25
    1272:	a9 f5       	brne	.+106    	; 0x12de <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1274:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1278:	87 7f       	andi	r24, 0xF7	; 247
    127a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    127e:	0e 94 92 0b 	call	0x1724	; 0x1724 <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    1282:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <USB_ControlRequest+0x2>
    1286:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <keyboard_protocol>
                    clear_keyboard();
    128a:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    128e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <USB_ControlRequest>
    1292:	81 32       	cpi	r24, 0x21	; 33
    1294:	21 f5       	brne	.+72     	; 0x12de <EVENT_USB_Device_ControlRequest+0x15e>
    1296:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    129a:	87 7f       	andi	r24, 0xF7	; 247
    129c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    12a0:	0e 94 92 0b 	call	0x1724	; 0x1724 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    12a4:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <USB_ControlRequest+0x3>
    12a8:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <keyboard_idle>
    12ac:	08 95       	ret
#endif
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    12ae:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <USB_ControlRequest>
    12b2:	81 3a       	cpi	r24, 0xA1	; 161
    12b4:	a1 f4       	brne	.+40     	; 0x12de <EVENT_USB_Device_ControlRequest+0x15e>
    12b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    12ba:	87 7f       	andi	r24, 0xF7	; 247
    12bc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    12c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    12c4:	80 ff       	sbrs	r24, 0
    12c6:	fc cf       	rjmp	.-8      	; 0x12c0 <EVENT_USB_Device_ControlRequest+0x140>
                Endpoint_Write_8(keyboard_idle);
    12c8:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <keyboard_idle>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    12cc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    12d4:	8e 77       	andi	r24, 0x7E	; 126
    12d6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    12da:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <Endpoint_ClearStatusStage>
    12de:	08 95       	ret

000012e0 <hook_late_init>:
/* hooks */
__attribute__((weak))
void hook_early_init(void) {}

__attribute__((weak))
void hook_late_init(void) {}
    12e0:	08 95       	ret

000012e2 <hook_early_init>:
    12e2:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <hook_late_init>

000012e6 <hook_usb_suspend_entry>:
void hook_usb_suspend_entry(void)
{
    // Turn LED off to save power
    // Set 0 with putting aside status before suspend and restore
    // it after wakeup, then LED is updated at keyboard_task() in main loop
    _led_stats = keyboard_led_stats;
    12e6:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <keyboard_led_stats>
    12ea:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <_led_stats>
    keyboard_led_stats = 0;
    12ee:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <keyboard_led_stats>
    led_set(keyboard_led_stats);
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	0e 94 41 07 	call	0xe82	; 0xe82 <led_set>

    matrix_clear();
    12f8:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <matrix_clear>
    clear_keyboard();
    12fc:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <clear_keyboard>

00001300 <EVENT_USB_Device_Suspend>:
void EVENT_USB_Device_Suspend()
{
#ifdef LUFA_DEBUG
    print("[S]");
#endif
    hook_usb_suspend_entry();
    1300:	0c 94 73 09 	jmp	0x12e6	; 0x12e6 <hook_usb_suspend_entry>

00001304 <hook_usb_suspend_loop>:
}

__attribute__((weak))
void hook_usb_suspend_loop(void)
{
    suspend_power_down();
    1304:	0e 94 ca 1b 	call	0x3794	; 0x3794 <suspend_power_down>
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1308:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <USB_Device_RemoteWakeupEnabled>
    130c:	88 23       	and	r24, r24
    130e:	29 f0       	breq	.+10     	; 0x131a <hook_usb_suspend_loop+0x16>
    1310:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <suspend_wakeup_condition>
    1314:	81 11       	cpse	r24, r1
        USB_Device_SendRemoteWakeup();
    1316:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <USB_Device_SendRemoteWakeup>
    131a:	08 95       	ret

0000131c <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    131c:	84 b7       	in	r24, 0x34	; 52
    131e:	87 7f       	andi	r24, 0xF7	; 247
    1320:	84 bf       	out	0x34, r24	; 52
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	a8 95       	wdr
    1328:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    132c:	88 61       	ori	r24, 0x18	; 24
    132e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    1332:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    1336:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	80 e8       	ldi	r24, 0x80	; 128
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
    1344:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
    1348:	0f be       	out	0x3f, r0	; 63

#ifdef LUFA_DEBUG_SUART
    SUART_OUT_DDR |= (1<<SUART_OUT_BIT);
    SUART_OUT_PORT |= (1<<SUART_OUT_BIT);
#endif
    print_set_sendchar(sendchar);
    134a:	8c e4       	ldi	r24, 0x4C	; 76
    134c:	97 e0       	ldi	r25, 0x07	; 7
    134e:	0e 94 9e 1b 	call	0x373c	; 0x373c <print_set_sendchar>
    print("\r\ninit\n");
    1352:	8f ea       	ldi	r24, 0xAF	; 175
    1354:	91 e0       	ldi	r25, 0x01	; 1
    1356:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>

    hook_early_init();
    135a:	0e 94 71 09 	call	0x12e2	; 0x12e2 <hook_early_init>
    keyboard_setup();
    135e:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    1362:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <USB_Disable>

    USB_Init();
    1366:	0e 94 37 0c 	call	0x186e	; 0x186e <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    136a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    136e:	84 60       	ori	r24, 0x04	; 4
    1370:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    print("\r\ninit\n");

    hook_early_init();
    keyboard_setup();
    setup_usb();
    sei();
    1374:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1376:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USB_DeviceState>
    137a:	84 30       	cpi	r24, 0x04	; 4
    137c:	e1 f7       	brne	.-8      	; 0x1376 <main+0x5a>
    137e:	81 ed       	ldi	r24, 0xD1	; 209
    1380:	97 e0       	ldi	r25, 0x07	; 7
    1382:	01 97       	sbiw	r24, 0x01	; 1
    }

    /* wait for Console startup */
    // TODO: long delay often works anyhoo but proper startup would be better
    uint16_t delay = 2000;
    while (delay--) {
    1384:	39 f0       	breq	.+14     	; 0x1394 <main+0x78>
    1386:	ef e9       	ldi	r30, 0x9F	; 159
    1388:	ff e0       	ldi	r31, 0x0F	; 15
    138a:	31 97       	sbiw	r30, 0x01	; 1
    138c:	f1 f7       	brne	.-4      	; 0x138a <main+0x6e>
    138e:	00 c0       	rjmp	.+0      	; 0x1390 <main+0x74>
    1390:	00 00       	nop
    1392:	f7 cf       	rjmp	.-18     	; 0x1382 <main+0x66>
        USB_USBTask();
#endif
        _delay_ms(1);
    }

    print("USB configured.\n");
    1394:	8e e9       	ldi	r24, 0x9E	; 158
    1396:	91 e0       	ldi	r25, 0x01	; 1
    1398:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>

    /* init modules */
    keyboard_init();
    139c:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <keyboard_init>
    host_set_driver(&lufa_driver);
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	91 e0       	ldi	r25, 0x01	; 1
    13a4:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    13a8:	8d e8       	ldi	r24, 0x8D	; 141
    13aa:	91 e0       	ldi	r25, 0x01	; 1
    13ac:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    hook_late_init();
    13b0:	0e 94 70 09 	call	0x12e0	; 0x12e0 <hook_late_init>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    13b4:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USB_DeviceState>
    13b8:	85 30       	cpi	r24, 0x05	; 5
    13ba:	19 f4       	brne	.+6      	; 0x13c2 <main+0xa6>
#ifdef LUFA_DEBUG
            print("[s]");
#endif
            hook_usb_suspend_loop();
    13bc:	0e 94 82 09 	call	0x1304	; 0x1304 <hook_usb_suspend_loop>
    13c0:	f9 cf       	rjmp	.-14     	; 0x13b4 <main+0x98>
        }

        keyboard_task();
    13c2:	0e 94 57 0f 	call	0x1eae	; 0x1eae <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    13c6:	f6 cf       	rjmp	.-20     	; 0x13b4 <main+0x98>

000013c8 <hook_usb_wakeup>:
}

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    13c8:	0e 94 07 1c 	call	0x380e	; 0x380e <suspend_wakeup_init>
    // Restore LED status
    // BIOS/grub won't recognize/enumerate if led_set() takes long(around 40ms?)
    // Converters fall into the case and miss wakeup event(timeout to reply?) in the end.
    //led_set(host_keyboard_leds());
    // Instead, restore stats and update at keyboard_task() in main loop
    keyboard_led_stats = _led_stats;
    13cc:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <_led_stats>
    13d0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <keyboard_led_stats>
    13d4:	08 95       	ret

000013d6 <EVENT_USB_Device_WakeUp>:
void EVENT_USB_Device_WakeUp()
{
#ifdef LUFA_DEBUG
    print("[W]");
#endif
    hook_usb_wakeup();
    13d6:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <hook_usb_wakeup>

000013da <CALLBACK_USB_GetDescriptor>:
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    13da:	29 2f       	mov	r18, r25
    13dc:	33 27       	eor	r19, r19
    13de:	23 30       	cpi	r18, 0x03	; 3
    13e0:	31 05       	cpc	r19, r1
    13e2:	c9 f0       	breq	.+50     	; 0x1416 <CALLBACK_USB_GetDescriptor+0x3c>
    13e4:	60 f4       	brcc	.+24     	; 0x13fe <CALLBACK_USB_GetDescriptor+0x24>
    13e6:	21 30       	cpi	r18, 0x01	; 1
    13e8:	31 05       	cpc	r19, r1
    13ea:	81 f0       	breq	.+32     	; 0x140c <CALLBACK_USB_GetDescriptor+0x32>
    13ec:	22 30       	cpi	r18, 0x02	; 2
    13ee:	31 05       	cpc	r19, r1
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <CALLBACK_USB_GetDescriptor+0x1a>
    13f2:	41 c0       	rjmp	.+130    	; 0x1476 <CALLBACK_USB_GetDescriptor+0x9c>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    13f4:	84 e7       	ldi	r24, 0x74	; 116
    13f6:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    13f8:	2b ed       	ldi	r18, 0xDB	; 219
    13fa:	31 e0       	ldi	r19, 0x01	; 1
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    13fc:	40 c0       	rjmp	.+128    	; 0x147e <CALLBACK_USB_GetDescriptor+0xa4>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    13fe:	21 32       	cpi	r18, 0x21	; 33
    1400:	31 05       	cpc	r19, r1
    1402:	e1 f0       	breq	.+56     	; 0x143c <CALLBACK_USB_GetDescriptor+0x62>
    1404:	22 32       	cpi	r18, 0x22	; 34
    1406:	31 05       	cpc	r19, r1
    1408:	31 f1       	breq	.+76     	; 0x1456 <CALLBACK_USB_GetDescriptor+0x7c>
    140a:	35 c0       	rjmp	.+106    	; 0x1476 <CALLBACK_USB_GetDescriptor+0x9c>
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    140c:	82 e1       	ldi	r24, 0x12	; 18
    140e:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    1410:	2f e4       	ldi	r18, 0x4F	; 79
    1412:	32 e0       	ldi	r19, 0x02	; 2
    1414:	34 c0       	rjmp	.+104    	; 0x147e <CALLBACK_USB_GetDescriptor+0xa4>
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    1416:	99 27       	eor	r25, r25
    1418:	81 30       	cpi	r24, 0x01	; 1
    141a:	91 05       	cpc	r25, r1
    141c:	49 f0       	breq	.+18     	; 0x1430 <CALLBACK_USB_GetDescriptor+0x56>
    141e:	28 f0       	brcs	.+10     	; 0x142a <CALLBACK_USB_GetDescriptor+0x50>
    1420:	02 97       	sbiw	r24, 0x02	; 2
    1422:	49 f5       	brne	.+82     	; 0x1476 <CALLBACK_USB_GetDescriptor+0x9c>
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1424:	e7 eb       	ldi	r30, 0xB7	; 183
    1426:	f1 e0       	ldi	r31, 0x01	; 1
    1428:	05 c0       	rjmp	.+10     	; 0x1434 <CALLBACK_USB_GetDescriptor+0x5a>
        case DTYPE_String:
            switch (DescriptorIndex )
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    142a:	e7 ed       	ldi	r30, 0xD7	; 215
    142c:	f1 e0       	ldi	r31, 0x01	; 1
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <CALLBACK_USB_GetDescriptor+0x5a>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1430:	ed ec       	ldi	r30, 0xCD	; 205
    1432:	f1 e0       	ldi	r31, 0x01	; 1
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1434:	84 91       	lpm	r24, Z
    1436:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    1438:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    143a:	21 c0       	rjmp	.+66     	; 0x147e <CALLBACK_USB_GetDescriptor+0xa4>
    143c:	64 30       	cpi	r22, 0x04	; 4
    143e:	d8 f4       	brcc	.+54     	; 0x1476 <CALLBACK_USB_GetDescriptor+0x9c>
    1440:	e6 2f       	mov	r30, r22
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	ee 0f       	add	r30, r30
    1446:	ff 1f       	adc	r31, r31
    1448:	e0 5e       	subi	r30, 0xE0	; 224
    144a:	fe 4f       	sbci	r31, 0xFE	; 254
    144c:	20 81       	ld	r18, Z
    144e:	31 81       	ldd	r19, Z+1	; 0x01
    1450:	89 e0       	ldi	r24, 0x09	; 9
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	14 c0       	rjmp	.+40     	; 0x147e <CALLBACK_USB_GetDescriptor+0xa4>
    1456:	64 30       	cpi	r22, 0x04	; 4
    1458:	70 f4       	brcc	.+28     	; 0x1476 <CALLBACK_USB_GetDescriptor+0x9c>
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	fb 01       	movw	r30, r22
    145e:	ee 0f       	add	r30, r30
    1460:	ff 1f       	adc	r31, r31
    1462:	e8 5e       	subi	r30, 0xE8	; 232
    1464:	fe 4f       	sbci	r31, 0xFE	; 254
    1466:	20 81       	ld	r18, Z
    1468:	31 81       	ldd	r19, Z+1	; 0x01
    146a:	fb 01       	movw	r30, r22
    146c:	ec 5e       	subi	r30, 0xEC	; 236
    146e:	fe 4f       	sbci	r31, 0xFE	; 254
    1470:	80 81       	ld	r24, Z
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	04 c0       	rjmp	.+8      	; 0x147e <CALLBACK_USB_GetDescriptor+0xa4>
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    147e:	fa 01       	movw	r30, r20
    1480:	31 83       	std	Z+1, r19	; 0x01
    1482:	20 83       	st	Z, r18
    return Size;
}
    1484:	08 95       	ret

00001486 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1486:	84 e0       	ldi	r24, 0x04	; 4
    1488:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    148a:	86 e0       	ldi	r24, 0x06	; 6
    148c:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    148e:	09 b4       	in	r0, 0x29	; 41
    1490:	00 fe       	sbrs	r0, 0
    1492:	fd cf       	rjmp	.-6      	; 0x148e <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1494:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
    1498:	8f 7d       	andi	r24, 0xDF	; 223
    149a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    149e:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
    14a2:	82 60       	ori	r24, 0x02	; 2
    14a4:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
	while (UDCON & (1 << RMWKUP));
    14a8:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
    14ac:	81 fd       	sbrc	r24, 1
    14ae:	fc cf       	rjmp	.-8      	; 0x14a8 <USB_Device_SendRemoteWakeup+0x22>
}
    14b0:	08 95       	ret

000014b2 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    14b2:	cf 92       	push	r12
    14b4:	df 92       	push	r13
    14b6:	ef 92       	push	r14
    14b8:	ff 92       	push	r15
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	ec 01       	movw	r28, r24
    14c4:	8b 01       	movw	r16, r22
    14c6:	7a 01       	movw	r14, r20
    14c8:	0e 94 b1 0b 	call	0x1762	; 0x1762 <Endpoint_WaitUntilReady>
    14cc:	81 11       	cpse	r24, r1
    14ce:	33 c0       	rjmp	.+102    	; 0x1536 <Endpoint_Write_Stream_LE+0x84>
    14d0:	e1 14       	cp	r14, r1
    14d2:	f1 04       	cpc	r15, r1
    14d4:	39 f0       	breq	.+14     	; 0x14e4 <Endpoint_Write_Stream_LE+0x32>
    14d6:	f7 01       	movw	r30, r14
    14d8:	80 81       	ld	r24, Z
    14da:	91 81       	ldd	r25, Z+1	; 0x01
    14dc:	08 1b       	sub	r16, r24
    14de:	19 0b       	sbc	r17, r25
    14e0:	c8 0f       	add	r28, r24
    14e2:	d9 1f       	adc	r29, r25
    14e4:	c1 2c       	mov	r12, r1
    14e6:	d1 2c       	mov	r13, r1
    14e8:	01 15       	cp	r16, r1
    14ea:	11 05       	cpc	r17, r1
    14ec:	19 f1       	breq	.+70     	; 0x1534 <Endpoint_Write_Stream_LE+0x82>
    14ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    14f2:	85 fd       	sbrc	r24, 5
    14f4:	16 c0       	rjmp	.+44     	; 0x1522 <Endpoint_Write_Stream_LE+0x70>
    14f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    14fa:	8e 77       	andi	r24, 0x7E	; 126
    14fc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1500:	e1 14       	cp	r14, r1
    1502:	f1 04       	cpc	r15, r1
    1504:	49 f0       	breq	.+18     	; 0x1518 <Endpoint_Write_Stream_LE+0x66>
    1506:	f7 01       	movw	r30, r14
    1508:	80 81       	ld	r24, Z
    150a:	91 81       	ldd	r25, Z+1	; 0x01
    150c:	c8 0e       	add	r12, r24
    150e:	d9 1e       	adc	r13, r25
    1510:	d1 82       	std	Z+1, r13	; 0x01
    1512:	c0 82       	st	Z, r12
    1514:	85 e0       	ldi	r24, 0x05	; 5
    1516:	0f c0       	rjmp	.+30     	; 0x1536 <Endpoint_Write_Stream_LE+0x84>
    1518:	0e 94 b1 0b 	call	0x1762	; 0x1762 <Endpoint_WaitUntilReady>
    151c:	88 23       	and	r24, r24
    151e:	21 f3       	breq	.-56     	; 0x14e8 <Endpoint_Write_Stream_LE+0x36>
    1520:	0a c0       	rjmp	.+20     	; 0x1536 <Endpoint_Write_Stream_LE+0x84>
    1522:	89 91       	ld	r24, Y+
    1524:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
    1528:	01 50       	subi	r16, 0x01	; 1
    152a:	11 09       	sbc	r17, r1
    152c:	ff ef       	ldi	r31, 0xFF	; 255
    152e:	cf 1a       	sub	r12, r31
    1530:	df 0a       	sbc	r13, r31
    1532:	da cf       	rjmp	.-76     	; 0x14e8 <Endpoint_Write_Stream_LE+0x36>
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	1f 91       	pop	r17
    153c:	0f 91       	pop	r16
    153e:	ff 90       	pop	r15
    1540:	ef 90       	pop	r14
    1542:	df 90       	pop	r13
    1544:	cf 90       	pop	r12
    1546:	08 95       	ret

00001548 <Endpoint_Write_Control_Stream_LE>:
    1548:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <USB_ControlRequest+0x6>
    154c:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <USB_ControlRequest+0x7>
    1550:	26 17       	cp	r18, r22
    1552:	37 07       	cpc	r19, r23
    1554:	48 f0       	brcs	.+18     	; 0x1568 <Endpoint_Write_Control_Stream_LE+0x20>
    1556:	61 15       	cp	r22, r1
    1558:	71 05       	cpc	r23, r1
    155a:	39 f4       	brne	.+14     	; 0x156a <Endpoint_Write_Control_Stream_LE+0x22>
    155c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1560:	2e 77       	andi	r18, 0x7E	; 126
    1562:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1566:	01 c0       	rjmp	.+2      	; 0x156a <Endpoint_Write_Control_Stream_LE+0x22>
    1568:	b9 01       	movw	r22, r18
    156a:	fc 01       	movw	r30, r24
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	61 15       	cp	r22, r1
    1570:	71 05       	cpc	r23, r1
    1572:	61 f1       	breq	.+88     	; 0x15cc <Endpoint_Write_Control_Stream_LE+0x84>
    1574:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USB_DeviceState>
    1578:	88 23       	and	r24, r24
    157a:	d9 f1       	breq	.+118    	; 0x15f2 <Endpoint_Write_Control_Stream_LE+0xaa>
    157c:	85 30       	cpi	r24, 0x05	; 5
    157e:	d9 f1       	breq	.+118    	; 0x15f6 <Endpoint_Write_Control_Stream_LE+0xae>
    1580:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1584:	83 fd       	sbrc	r24, 3
    1586:	39 c0       	rjmp	.+114    	; 0x15fa <Endpoint_Write_Control_Stream_LE+0xb2>
    1588:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    158c:	82 fd       	sbrc	r24, 2
    158e:	2b c0       	rjmp	.+86     	; 0x15e6 <Endpoint_Write_Control_Stream_LE+0x9e>
    1590:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1594:	80 ff       	sbrs	r24, 0
    1596:	eb cf       	rjmp	.-42     	; 0x156e <Endpoint_Write_Control_Stream_LE+0x26>
    1598:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	61 15       	cp	r22, r1
    15a0:	71 05       	cpc	r23, r1
    15a2:	51 f0       	breq	.+20     	; 0x15b8 <Endpoint_Write_Control_Stream_LE+0x70>
    15a4:	88 30       	cpi	r24, 0x08	; 8
    15a6:	91 05       	cpc	r25, r1
    15a8:	38 f4       	brcc	.+14     	; 0x15b8 <Endpoint_Write_Control_Stream_LE+0x70>
    15aa:	21 91       	ld	r18, Z+
    15ac:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
    15b0:	61 50       	subi	r22, 0x01	; 1
    15b2:	71 09       	sbc	r23, r1
    15b4:	01 96       	adiw	r24, 0x01	; 1
    15b6:	f3 cf       	rjmp	.-26     	; 0x159e <Endpoint_Write_Control_Stream_LE+0x56>
    15b8:	21 e0       	ldi	r18, 0x01	; 1
    15ba:	08 97       	sbiw	r24, 0x08	; 8
    15bc:	09 f0       	breq	.+2      	; 0x15c0 <Endpoint_Write_Control_Stream_LE+0x78>
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    15c4:	8e 77       	andi	r24, 0x7E	; 126
    15c6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    15ca:	d1 cf       	rjmp	.-94     	; 0x156e <Endpoint_Write_Control_Stream_LE+0x26>
    15cc:	21 11       	cpse	r18, r1
    15ce:	d2 cf       	rjmp	.-92     	; 0x1574 <Endpoint_Write_Control_Stream_LE+0x2c>
    15d0:	0a c0       	rjmp	.+20     	; 0x15e6 <Endpoint_Write_Control_Stream_LE+0x9e>
    15d2:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USB_DeviceState>
    15d6:	88 23       	and	r24, r24
    15d8:	61 f0       	breq	.+24     	; 0x15f2 <Endpoint_Write_Control_Stream_LE+0xaa>
    15da:	85 30       	cpi	r24, 0x05	; 5
    15dc:	61 f0       	breq	.+24     	; 0x15f6 <Endpoint_Write_Control_Stream_LE+0xae>
    15de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    15e2:	83 fd       	sbrc	r24, 3
    15e4:	0a c0       	rjmp	.+20     	; 0x15fa <Endpoint_Write_Control_Stream_LE+0xb2>
    15e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    15ea:	82 ff       	sbrs	r24, 2
    15ec:	f2 cf       	rjmp	.-28     	; 0x15d2 <Endpoint_Write_Control_Stream_LE+0x8a>
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	08 95       	ret
    15f2:	82 e0       	ldi	r24, 0x02	; 2
    15f4:	08 95       	ret
    15f6:	83 e0       	ldi	r24, 0x03	; 3
    15f8:	08 95       	ret
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	08 95       	ret

000015fe <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    15fe:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <USB_ControlRequest+0x6>
    1602:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <USB_ControlRequest+0x7>
    1606:	26 17       	cp	r18, r22
    1608:	37 07       	cpc	r19, r23
    160a:	48 f0       	brcs	.+18     	; 0x161e <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    160c:	61 15       	cp	r22, r1
    160e:	71 05       	cpc	r23, r1
    1610:	39 f4       	brne	.+14     	; 0x1620 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1612:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1616:	2e 77       	andi	r18, 0x7E	; 126
    1618:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    161c:	01 c0       	rjmp	.+2      	; 0x1620 <Endpoint_Write_Control_PStream_LE+0x22>
    161e:	b9 01       	movw	r22, r18
    1620:	fc 01       	movw	r30, r24
    1622:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1624:	61 15       	cp	r22, r1
    1626:	71 05       	cpc	r23, r1
    1628:	79 f1       	breq	.+94     	; 0x1688 <Endpoint_Write_Control_PStream_LE+0x8a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    162a:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    162e:	88 23       	and	r24, r24
    1630:	09 f4       	brne	.+2      	; 0x1634 <Endpoint_Write_Control_PStream_LE+0x36>
    1632:	3d c0       	rjmp	.+122    	; 0x16ae <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1634:	85 30       	cpi	r24, 0x05	; 5
    1636:	09 f4       	brne	.+2      	; 0x163a <Endpoint_Write_Control_PStream_LE+0x3c>
    1638:	3c c0       	rjmp	.+120    	; 0x16b2 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    163a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    163e:	83 fd       	sbrc	r24, 3
    1640:	3a c0       	rjmp	.+116    	; 0x16b6 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1642:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1646:	82 fd       	sbrc	r24, 2
    1648:	2c c0       	rjmp	.+88     	; 0x16a2 <Endpoint_Write_Control_PStream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    164a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  break;

		if (Endpoint_IsINReady())
    164e:	80 ff       	sbrs	r24, 0
    1650:	e9 cf       	rjmp	.-46     	; 0x1624 <Endpoint_Write_Control_PStream_LE+0x26>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1652:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
    1656:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1658:	61 15       	cp	r22, r1
    165a:	71 05       	cpc	r23, r1
    165c:	59 f0       	breq	.+22     	; 0x1674 <Endpoint_Write_Control_PStream_LE+0x76>
    165e:	88 30       	cpi	r24, 0x08	; 8
    1660:	91 05       	cpc	r25, r1
    1662:	40 f4       	brcc	.+16     	; 0x1674 <Endpoint_Write_Control_PStream_LE+0x76>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1664:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1666:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    166a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    166c:	61 50       	subi	r22, 0x01	; 1
    166e:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1670:	01 96       	adiw	r24, 0x01	; 1
    1672:	f2 cf       	rjmp	.-28     	; 0x1658 <Endpoint_Write_Control_PStream_LE+0x5a>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1674:	21 e0       	ldi	r18, 0x01	; 1
    1676:	08 97       	sbiw	r24, 0x08	; 8
    1678:	09 f0       	breq	.+2      	; 0x167c <Endpoint_Write_Control_PStream_LE+0x7e>
    167a:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    167c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1680:	8e 77       	andi	r24, 0x7E	; 126
    1682:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1686:	ce cf       	rjmp	.-100    	; 0x1624 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1688:	21 11       	cpse	r18, r1
    168a:	cf cf       	rjmp	.-98     	; 0x162a <Endpoint_Write_Control_PStream_LE+0x2c>
    168c:	0a c0       	rjmp	.+20     	; 0x16a2 <Endpoint_Write_Control_PStream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    168e:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1692:	88 23       	and	r24, r24
    1694:	61 f0       	breq	.+24     	; 0x16ae <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1696:	85 30       	cpi	r24, 0x05	; 5
    1698:	61 f0       	breq	.+24     	; 0x16b2 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    169a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    169e:	83 fd       	sbrc	r24, 3
    16a0:	0a c0       	rjmp	.+20     	; 0x16b6 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    16a2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    16a6:	82 ff       	sbrs	r24, 2
    16a8:	f2 cf       	rjmp	.-28     	; 0x168e <Endpoint_Write_Control_PStream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    16ae:	82 e0       	ldi	r24, 0x02	; 2
    16b0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    16b2:	83 e0       	ldi	r24, 0x03	; 3
    16b4:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    16b6:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    16b8:	08 95       	ret

000016ba <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    16ba:	98 2f       	mov	r25, r24
    16bc:	95 30       	cpi	r25, 0x05	; 5
    16be:	68 f5       	brcc	.+90     	; 0x171a <Endpoint_ConfigureEndpoint_Prv+0x60>
    16c0:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
    16c4:	98 17       	cp	r25, r24
    16c6:	39 f0       	breq	.+14     	; 0x16d6 <Endpoint_ConfigureEndpoint_Prv+0x1c>
    16c8:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
    16cc:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
    16d0:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
    16d4:	03 c0       	rjmp	.+6      	; 0x16dc <Endpoint_ConfigureEndpoint_Prv+0x22>
    16d6:	24 2f       	mov	r18, r20
    16d8:	76 2f       	mov	r23, r22
    16da:	50 e0       	ldi	r21, 0x00	; 0
    16dc:	21 fd       	sbrc	r18, 1
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <Endpoint_ConfigureEndpoint_Prv+0x2a>
    16e0:	9f 5f       	subi	r25, 0xFF	; 255
    16e2:	ec cf       	rjmp	.-40     	; 0x16bc <Endpoint_ConfigureEndpoint_Prv+0x2>
    16e4:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
    16e8:	3e 7f       	andi	r19, 0xFE	; 254
    16ea:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
    16ee:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
    16f2:	3d 7f       	andi	r19, 0xFD	; 253
    16f4:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
    16f8:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
    16fc:	31 60       	ori	r19, 0x01	; 1
    16fe:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
    1702:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
    1706:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
    170a:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
    170e:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
    1712:	27 fd       	sbrc	r18, 7
    1714:	e5 cf       	rjmp	.-54     	; 0x16e0 <Endpoint_ConfigureEndpoint_Prv+0x26>
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	08 95       	ret
    171a:	8f 70       	andi	r24, 0x0F	; 15
    171c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	08 95       	ret

00001724 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1724:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <USB_ControlRequest>
    1728:	87 ff       	sbrs	r24, 7
    172a:	11 c0       	rjmp	.+34     	; 0x174e <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    172c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    1730:	82 fd       	sbrc	r24, 2
    1732:	05 c0       	rjmp	.+10     	; 0x173e <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1734:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USB_DeviceState>
    1738:	81 11       	cpse	r24, r1
    173a:	f8 cf       	rjmp	.-16     	; 0x172c <Endpoint_ClearStatusStage+0x8>
    173c:	11 c0       	rjmp	.+34     	; 0x1760 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    173e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1742:	8b 77       	andi	r24, 0x7B	; 123
    1744:	0b c0       	rjmp	.+22     	; 0x175c <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1746:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USB_DeviceState>
    174a:	88 23       	and	r24, r24
    174c:	49 f0       	breq	.+18     	; 0x1760 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    174e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1752:	80 ff       	sbrs	r24, 0
    1754:	f8 cf       	rjmp	.-16     	; 0x1746 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1756:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    175a:	8e 77       	andi	r24, 0x7E	; 126
    175c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1760:	08 95       	ret

00001762 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1762:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
    1766:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
    176a:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    176c:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
    1770:	84 2f       	mov	r24, r20
    1772:	81 70       	andi	r24, 0x01	; 1
    1774:	40 ff       	sbrs	r20, 0
    1776:	23 c0       	rjmp	.+70     	; 0x17be <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1778:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    177c:	80 fd       	sbrc	r24, 0
    177e:	1d c0       	rjmp	.+58     	; 0x17ba <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1780:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1784:	88 23       	and	r24, r24
    1786:	99 f0       	breq	.+38     	; 0x17ae <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1788:	85 30       	cpi	r24, 0x05	; 5
    178a:	99 f0       	breq	.+38     	; 0x17b2 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    178c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1790:	85 fd       	sbrc	r24, 5
    1792:	11 c0       	rjmp	.+34     	; 0x17b6 <Endpoint_WaitUntilReady+0x54>
    1794:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
    1798:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    179c:	24 17       	cp	r18, r20
    179e:	35 07       	cpc	r19, r21
    17a0:	29 f3       	breq	.-54     	; 0x176c <Endpoint_WaitUntilReady+0xa>
    17a2:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    17a4:	11 f0       	breq	.+4      	; 0x17aa <Endpoint_WaitUntilReady+0x48>
    17a6:	9a 01       	movw	r18, r20
    17a8:	e1 cf       	rjmp	.-62     	; 0x176c <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    17aa:	84 e0       	ldi	r24, 0x04	; 4
    17ac:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    17ae:	82 e0       	ldi	r24, 0x02	; 2
    17b0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    17b2:	83 e0       	ldi	r24, 0x03	; 3
    17b4:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    17be:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    17c2:	42 ff       	sbrs	r20, 2
    17c4:	dd cf       	rjmp	.-70     	; 0x1780 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    17c6:	08 95       	ret

000017c8 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    17c8:	0e 94 41 0c 	call	0x1882	; 0x1882 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    17cc:	0e 94 44 0c 	call	0x1888	; 0x1888 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    17d0:	e0 ee       	ldi	r30, 0xE0	; 224
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	81 60       	ori	r24, 0x01	; 1
    17d8:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    17da:	e8 ed       	ldi	r30, 0xD8	; 216
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	8f 77       	andi	r24, 0x7F	; 127
    17e2:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    17e4:	19 bc       	out	0x29, r1	; 41
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
			#else
				REGCR  |=  (1 << REGDIS);
    17e6:	e3 e6       	ldi	r30, 0x63	; 99
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	81 60       	ori	r24, 0x01	; 1
    17ee:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    17f0:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <USB_IsInitialized>
    17f4:	08 95       	ret

000017f6 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    17f6:	0e 94 41 0c 	call	0x1882	; 0x1882 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    17fa:	0e 94 44 0c 	call	0x1888	; 0x1888 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    17fe:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
    1802:	8f 77       	andi	r24, 0x7F	; 127
    1804:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON |=  (1 << USBE);
    1808:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
    180c:	80 68       	ori	r24, 0x80	; 128
    180e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1812:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
    1816:	8f 7d       	andi	r24, 0xDF	; 223
    1818:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    181c:	84 e0       	ldi	r24, 0x04	; 4
    181e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1820:	86 e0       	ldi	r24, 0x06	; 6
    1822:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1824:	09 b4       	in	r0, 0x29	; 41
    1826:	00 fe       	sbrs	r0, 0
    1828:	fd cf       	rjmp	.-6      	; 0x1824 <USB_ResetInterface+0x2e>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    182a:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    182e:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1832:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1836:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <USB_Device_CurrentlySelfPowered>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    183a:	42 e0       	ldi	r20, 0x02	; 2
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1844:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
    1848:	8e 7f       	andi	r24, 0xFE	; 254
    184a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    184e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    1852:	81 60       	ori	r24, 0x01	; 1
    1854:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1858:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    185c:	88 60       	ori	r24, 0x08	; 8
    185e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1862:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
    1866:	8e 7f       	andi	r24, 0xFE	; 254
    1868:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
    186c:	08 95       	ret

0000186e <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
    186e:	e3 e6       	ldi	r30, 0x63	; 99
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	8e 7f       	andi	r24, 0xFE	; 254
    1876:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <USB_IsInitialized>

	USB_ResetInterface();
    187e:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <USB_ResetInterface>

00001882 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1882:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    1886:	08 95       	ret

00001888 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1888:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
    188c:	08 95       	ret

0000188e <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    188e:	1f 92       	push	r1
    1890:	0f 92       	push	r0
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	0f 92       	push	r0
    1896:	11 24       	eor	r1, r1
    1898:	2f 93       	push	r18
    189a:	3f 93       	push	r19
    189c:	4f 93       	push	r20
    189e:	5f 93       	push	r21
    18a0:	6f 93       	push	r22
    18a2:	7f 93       	push	r23
    18a4:	8f 93       	push	r24
    18a6:	9f 93       	push	r25
    18a8:	af 93       	push	r26
    18aa:	bf 93       	push	r27
    18ac:	ef 93       	push	r30
    18ae:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    18b0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    18b4:	82 ff       	sbrs	r24, 2
    18b6:	0b c0       	rjmp	.+22     	; 0x18ce <__vector_11+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    18b8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    18bc:	82 ff       	sbrs	r24, 2
    18be:	07 c0       	rjmp	.+14     	; 0x18ce <__vector_11+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    18c0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
    18c4:	8b 7f       	andi	r24, 0xFB	; 251
    18c6:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    18ca:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <EVENT_USB_Device_StartOfFrame>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    18ce:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    18d2:	80 ff       	sbrs	r24, 0
    18d4:	19 c0       	rjmp	.+50     	; 0x1908 <__vector_11+0x7a>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    18d6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    18da:	80 ff       	sbrs	r24, 0
    18dc:	15 c0       	rjmp	.+42     	; 0x1908 <__vector_11+0x7a>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    18de:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    18e2:	8e 7f       	andi	r24, 0xFE	; 254
    18e4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    18e8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    18ec:	80 61       	ori	r24, 0x10	; 16
    18ee:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    18f2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
    18f6:	80 62       	ori	r24, 0x20	; 32
    18f8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    18fc:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    18fe:	85 e0       	ldi	r24, 0x05	; 5
    1900:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    1904:	0e 94 80 09 	call	0x1300	; 0x1300 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1908:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    190c:	84 ff       	sbrs	r24, 4
    190e:	30 c0       	rjmp	.+96     	; 0x1970 <__vector_11+0xe2>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1910:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    1914:	84 ff       	sbrs	r24, 4
    1916:	2c c0       	rjmp	.+88     	; 0x1970 <__vector_11+0xe2>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1918:	84 e0       	ldi	r24, 0x04	; 4
    191a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    191c:	86 e0       	ldi	r24, 0x06	; 6
    191e:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1920:	09 b4       	in	r0, 0x29	; 41
    1922:	00 fe       	sbrs	r0, 0
    1924:	fd cf       	rjmp	.-6      	; 0x1920 <__vector_11+0x92>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1926:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
    192a:	8f 7d       	andi	r24, 0xDF	; 223
    192c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1930:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
    1934:	8f 7e       	andi	r24, 0xEF	; 239
    1936:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    193a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    193e:	8f 7e       	andi	r24, 0xEF	; 239
    1940:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1944:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    1948:	81 60       	ori	r24, 0x01	; 1
    194a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    194e:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <USB_Device_ConfigurationNumber>
    1952:	88 23       	and	r24, r24
    1954:	11 f0       	breq	.+4      	; 0x195a <__vector_11+0xcc>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1956:	84 e0       	ldi	r24, 0x04	; 4
    1958:	07 c0       	rjmp	.+14     	; 0x1968 <__vector_11+0xda>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    195a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    195e:	87 fd       	sbrc	r24, 7
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <__vector_11+0xd8>
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	01 c0       	rjmp	.+2      	; 0x1968 <__vector_11+0xda>
    1966:	83 e0       	ldi	r24, 0x03	; 3
    1968:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    196c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1970:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1974:	83 ff       	sbrs	r24, 3
    1976:	29 c0       	rjmp	.+82     	; 0x19ca <__vector_11+0x13c>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1978:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    197c:	83 ff       	sbrs	r24, 3
    197e:	25 c0       	rjmp	.+74     	; 0x19ca <__vector_11+0x13c>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1980:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
    1984:	87 7f       	andi	r24, 0xF7	; 247
    1986:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    198a:	82 e0       	ldi	r24, 0x02	; 2
    198c:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1990:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1994:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
    1998:	8e 7f       	andi	r24, 0xFE	; 254
    199a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    199e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    19a2:	8e 7f       	andi	r24, 0xFE	; 254
    19a4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    19a8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    19ac:	80 61       	ori	r24, 0x10	; 16
    19ae:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    19b2:	42 e0       	ldi	r20, 0x02	; 2
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    19bc:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
    19c0:	88 60       	ori	r24, 0x08	; 8
    19c2:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    19c6:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    19ca:	ff 91       	pop	r31
    19cc:	ef 91       	pop	r30
    19ce:	bf 91       	pop	r27
    19d0:	af 91       	pop	r26
    19d2:	9f 91       	pop	r25
    19d4:	8f 91       	pop	r24
    19d6:	7f 91       	pop	r23
    19d8:	6f 91       	pop	r22
    19da:	5f 91       	pop	r21
    19dc:	4f 91       	pop	r20
    19de:	3f 91       	pop	r19
    19e0:	2f 91       	pop	r18
    19e2:	0f 90       	pop	r0
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	0f 90       	pop	r0
    19e8:	1f 90       	pop	r1
    19ea:	18 95       	reti

000019ec <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    19ec:	1f 92       	push	r1
    19ee:	0f 92       	push	r0
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	0f 92       	push	r0
    19f4:	11 24       	eor	r1, r1
    19f6:	2f 93       	push	r18
    19f8:	3f 93       	push	r19
    19fa:	4f 93       	push	r20
    19fc:	5f 93       	push	r21
    19fe:	6f 93       	push	r22
    1a00:	7f 93       	push	r23
    1a02:	8f 93       	push	r24
    1a04:	9f 93       	push	r25
    1a06:	af 93       	push	r26
    1a08:	bf 93       	push	r27
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	ef 93       	push	r30
    1a10:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1a12:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
    1a16:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1a18:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
    1a1c:	d8 2f       	mov	r29, r24
    1a1e:	d1 70       	andi	r29, 0x01	; 1
    1a20:	80 fd       	sbrc	r24, 0
    1a22:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a24:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1a28:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
    1a2c:	87 7f       	andi	r24, 0xF7	; 247
    1a2e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1a32:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1a34:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <USB_Device_ProcessControlRequest>
    1a38:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1a3c:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
    1a40:	88 60       	ori	r24, 0x08	; 8
    1a42:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
    1a46:	cd 2b       	or	r28, r29
    1a48:	cf 70       	andi	r28, 0x0F	; 15
    1a4a:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1a4e:	ff 91       	pop	r31
    1a50:	ef 91       	pop	r30
    1a52:	df 91       	pop	r29
    1a54:	cf 91       	pop	r28
    1a56:	bf 91       	pop	r27
    1a58:	af 91       	pop	r26
    1a5a:	9f 91       	pop	r25
    1a5c:	8f 91       	pop	r24
    1a5e:	7f 91       	pop	r23
    1a60:	6f 91       	pop	r22
    1a62:	5f 91       	pop	r21
    1a64:	4f 91       	pop	r20
    1a66:	3f 91       	pop	r19
    1a68:	2f 91       	pop	r18
    1a6a:	0f 90       	pop	r0
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	0f 90       	pop	r0
    1a70:	1f 90       	pop	r1
    1a72:	18 95       	reti

00001a74 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1a74:	1f 93       	push	r17
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
    1a7e:	aa 97       	sbiw	r28, 0x2a	; 42
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	e4 e0       	ldi	r30, 0x04	; 4
    1a8c:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1a8e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1a92:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1a94:	22 e0       	ldi	r18, 0x02	; 2
    1a96:	ec 30       	cpi	r30, 0x0C	; 12
    1a98:	f2 07       	cpc	r31, r18
    1a9a:	c9 f7       	brne	.-14     	; 0x1a8e <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1a9c:	0e 94 c0 08 	call	0x1180	; 0x1180 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1aa0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	if (Endpoint_IsSETUPReceived())
    1aa4:	83 ff       	sbrs	r24, 3
    1aa6:	24 c1       	rjmp	.+584    	; 0x1cf0 <USB_Device_ProcessControlRequest+0x27c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1aa8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    1aac:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <USB_ControlRequest+0x1>
    1ab0:	49 2f       	mov	r20, r25
    1ab2:	50 e0       	ldi	r21, 0x00	; 0
    1ab4:	4a 30       	cpi	r20, 0x0A	; 10
    1ab6:	51 05       	cpc	r21, r1
    1ab8:	08 f0       	brcs	.+2      	; 0x1abc <USB_Device_ProcessControlRequest+0x48>
    1aba:	1a c1       	rjmp	.+564    	; 0x1cf0 <USB_Device_ProcessControlRequest+0x27c>
    1abc:	fa 01       	movw	r30, r20
    1abe:	ef 5b       	subi	r30, 0xBF	; 191
    1ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac2:	0c 94 e5 28 	jmp	0x51ca	; 0x51ca <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ac6:	80 38       	cpi	r24, 0x80	; 128
    1ac8:	81 f0       	breq	.+32     	; 0x1aea <USB_Device_ProcessControlRequest+0x76>
    1aca:	82 38       	cpi	r24, 0x82	; 130
    1acc:	09 f0       	breq	.+2      	; 0x1ad0 <USB_Device_ProcessControlRequest+0x5c>
    1ace:	10 c1       	rjmp	.+544    	; 0x1cf0 <USB_Device_ProcessControlRequest+0x27c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ad0:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <USB_ControlRequest+0x4>
    1ad4:	8f 70       	andi	r24, 0x0F	; 15
    1ad6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1ada:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    1ade:	85 fb       	bst	r24, 5
    1ae0:	88 27       	eor	r24, r24
    1ae2:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ae4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
    1ae8:	06 c0       	rjmp	.+12     	; 0x1af6 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1aea:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1aee:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <USB_Device_RemoteWakeupEnabled>
    1af2:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1af4:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1af6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1afa:	97 7f       	andi	r25, 0xF7	; 247
    1afc:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1b00:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
    1b04:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
    1b08:	c8 c0       	rjmp	.+400    	; 0x1c9a <USB_Device_ProcessControlRequest+0x226>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	2d 7f       	andi	r18, 0xFD	; 253
    1b0e:	09 f0       	breq	.+2      	; 0x1b12 <USB_Device_ProcessControlRequest+0x9e>
    1b10:	ef c0       	rjmp	.+478    	; 0x1cf0 <USB_Device_ProcessControlRequest+0x27c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1b12:	88 23       	and	r24, r24
    1b14:	19 f0       	breq	.+6      	; 0x1b1c <USB_Device_ProcessControlRequest+0xa8>
    1b16:	82 30       	cpi	r24, 0x02	; 2
    1b18:	61 f0       	breq	.+24     	; 0x1b32 <USB_Device_ProcessControlRequest+0xbe>
    1b1a:	ea c0       	rjmp	.+468    	; 0x1cf0 <USB_Device_ProcessControlRequest+0x27c>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1b1c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <USB_ControlRequest+0x2>
    1b20:	81 30       	cpi	r24, 0x01	; 1
    1b22:	09 f0       	breq	.+2      	; 0x1b26 <USB_Device_ProcessControlRequest+0xb2>
    1b24:	e5 c0       	rjmp	.+458    	; 0x1cf0 <USB_Device_ProcessControlRequest+0x27c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1b26:	93 30       	cpi	r25, 0x03	; 3
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <USB_Device_ProcessControlRequest+0xb8>
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <USB_Device_RemoteWakeupEnabled>
    1b30:	2b c0       	rjmp	.+86     	; 0x1b88 <USB_Device_ProcessControlRequest+0x114>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1b32:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <USB_ControlRequest+0x2>
    1b36:	81 11       	cpse	r24, r1
    1b38:	27 c0       	rjmp	.+78     	; 0x1b88 <USB_Device_ProcessControlRequest+0x114>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1b3a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <USB_ControlRequest+0x4>
    1b3e:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <USB_Device_ProcessControlRequest+0xd0>
    1b42:	d6 c0       	rjmp	.+428    	; 0x1cf0 <USB_Device_ProcessControlRequest+0x27c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b44:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1b48:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1b4c:	20 ff       	sbrs	r18, 0
    1b4e:	1c c0       	rjmp	.+56     	; 0x1b88 <USB_Device_ProcessControlRequest+0x114>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1b50:	93 30       	cpi	r25, 0x03	; 3
    1b52:	21 f4       	brne	.+8      	; 0x1b5c <USB_Device_ProcessControlRequest+0xe8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1b54:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
    1b58:	80 62       	ori	r24, 0x20	; 32
    1b5a:	14 c0       	rjmp	.+40     	; 0x1b84 <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1b5c:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
    1b60:	90 61       	ori	r25, 0x10	; 16
    1b62:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1b66:	21 e0       	ldi	r18, 0x01	; 1
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	a9 01       	movw	r20, r18
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <USB_Device_ProcessControlRequest+0xfe>
    1b6e:	44 0f       	add	r20, r20
    1b70:	55 1f       	adc	r21, r21
    1b72:	8a 95       	dec	r24
    1b74:	e2 f7       	brpl	.-8      	; 0x1b6e <USB_Device_ProcessControlRequest+0xfa>
    1b76:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UERST = 0;
    1b7a:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1b7e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
    1b82:	88 60       	ori	r24, 0x08	; 8
    1b84:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b88:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b8c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1b90:	87 7f       	andi	r24, 0xF7	; 247
    1b92:	86 c0       	rjmp	.+268    	; 0x1ca0 <USB_Device_ProcessControlRequest+0x22c>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1b94:	81 11       	cpse	r24, r1
    1b96:	ac c0       	rjmp	.+344    	; 0x1cf0 <USB_Device_ProcessControlRequest+0x27c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1b98:	10 91 06 02 	lds	r17, 0x0206	; 0x800206 <USB_ControlRequest+0x2>
    1b9c:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1b9e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
    1ba2:	80 78       	andi	r24, 0x80	; 128
    1ba4:	81 2b       	or	r24, r17
    1ba6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
    1baa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1bae:	87 7f       	andi	r24, 0xF7	; 247
    1bb0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1bb4:	0e 94 92 0b 	call	0x1724	; 0x1724 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1bb8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	while (!(Endpoint_IsINReady()));
    1bbc:	80 ff       	sbrs	r24, 0
    1bbe:	fc cf       	rjmp	.-8      	; 0x1bb8 <USB_Device_ProcessControlRequest+0x144>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1bc0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
    1bc4:	80 68       	ori	r24, 0x80	; 128
    1bc6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1bca:	11 11       	cpse	r17, r1
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <USB_Device_ProcessControlRequest+0x15e>
    1bce:	82 e0       	ldi	r24, 0x02	; 2
    1bd0:	01 c0       	rjmp	.+2      	; 0x1bd4 <USB_Device_ProcessControlRequest+0x160>
    1bd2:	83 e0       	ldi	r24, 0x03	; 3
    1bd4:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <USB_DeviceState>
    1bd8:	8b c0       	rjmp	.+278    	; 0x1cf0 <USB_Device_ProcessControlRequest+0x27c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1bda:	80 58       	subi	r24, 0x80	; 128
    1bdc:	82 30       	cpi	r24, 0x02	; 2
    1bde:	08 f0       	brcs	.+2      	; 0x1be2 <USB_Device_ProcessControlRequest+0x16e>
    1be0:	87 c0       	rjmp	.+270    	; 0x1cf0 <USB_Device_ProcessControlRequest+0x27c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1be2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <USB_ControlRequest+0x2>
    1be6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <USB_ControlRequest+0x3>
    1bea:	8c 3d       	cpi	r24, 0xDC	; 220
    1bec:	53 e0       	ldi	r21, 0x03	; 3
    1bee:	95 07       	cpc	r25, r21
    1bf0:	79 f5       	brne	.+94     	; 0x1c50 <USB_Device_ProcessControlRequest+0x1dc>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1bf2:	83 e0       	ldi	r24, 0x03	; 3
    1bf4:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1bf6:	8a e2       	ldi	r24, 0x2A	; 42
    1bf8:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1bfa:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1bfc:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1bfe:	de 01       	movw	r26, r28
    1c00:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1c02:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1c04:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1c06:	51 e2       	ldi	r21, 0x21	; 33
    1c08:	e3 2f       	mov	r30, r19
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
    1c10:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1c12:	20 ff       	sbrs	r18, 0
    1c14:	03 c0       	rjmp	.+6      	; 0x1c1c <USB_Device_ProcessControlRequest+0x1a8>
					{
						SerialByte >>= 4;
    1c16:	e2 95       	swap	r30
    1c18:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1c1a:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1c1c:	ef 70       	andi	r30, 0x0F	; 15
    1c1e:	8e 2f       	mov	r24, r30
    1c20:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1c22:	ea 30       	cpi	r30, 0x0A	; 10
    1c24:	10 f0       	brcs	.+4      	; 0x1c2a <USB_Device_ProcessControlRequest+0x1b6>
    1c26:	c7 96       	adiw	r24, 0x37	; 55
    1c28:	01 c0       	rjmp	.+2      	; 0x1c2c <USB_Device_ProcessControlRequest+0x1b8>
    1c2a:	c0 96       	adiw	r24, 0x30	; 48
    1c2c:	8d 93       	st	X+, r24
    1c2e:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1c30:	2f 5f       	subi	r18, 0xFF	; 255
    1c32:	24 31       	cpi	r18, 0x14	; 20
    1c34:	49 f7       	brne	.-46     	; 0x1c08 <USB_Device_ProcessControlRequest+0x194>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1c36:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1c38:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1c3c:	87 7f       	andi	r24, 0xF7	; 247
    1c3e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1c42:	6a e2       	ldi	r22, 0x2A	; 42
    1c44:	70 e0       	ldi	r23, 0x00	; 0
    1c46:	ce 01       	movw	r24, r28
    1c48:	01 96       	adiw	r24, 0x01	; 1
    1c4a:	0e 94 a4 0a 	call	0x1548	; 0x1548 <Endpoint_Write_Control_Stream_LE>
    1c4e:	14 c0       	rjmp	.+40     	; 0x1c78 <USB_Device_ProcessControlRequest+0x204>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1c50:	ae 01       	movw	r20, r28
    1c52:	4f 5f       	subi	r20, 0xFF	; 255
    1c54:	5f 4f       	sbci	r21, 0xFF	; 255
    1c56:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <USB_ControlRequest+0x4>
    1c5a:	0e 94 ed 09 	call	0x13da	; 0x13da <CALLBACK_USB_GetDescriptor>
    1c5e:	bc 01       	movw	r22, r24
    1c60:	89 2b       	or	r24, r25
    1c62:	09 f4       	brne	.+2      	; 0x1c66 <USB_Device_ProcessControlRequest+0x1f2>
    1c64:	45 c0       	rjmp	.+138    	; 0x1cf0 <USB_Device_ProcessControlRequest+0x27c>
    1c66:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1c6a:	97 7f       	andi	r25, 0xF7	; 247
    1c6c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	9a 81       	ldd	r25, Y+2	; 0x02
    1c74:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1c78:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1c7c:	8b 77       	andi	r24, 0x7B	; 123
    1c7e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1c82:	36 c0       	rjmp	.+108    	; 0x1cf0 <USB_Device_ProcessControlRequest+0x27c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1c84:	80 38       	cpi	r24, 0x80	; 128
    1c86:	a1 f5       	brne	.+104    	; 0x1cf0 <USB_Device_ProcessControlRequest+0x27c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1c88:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1c8c:	87 7f       	andi	r24, 0xF7	; 247
    1c8e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1c92:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1c96:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1c9e:	8e 77       	andi	r24, 0x7E	; 126
    1ca0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1ca4:	0e 94 92 0b 	call	0x1724	; 0x1724 <Endpoint_ClearStatusStage>
    1ca8:	23 c0       	rjmp	.+70     	; 0x1cf0 <USB_Device_ProcessControlRequest+0x27c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1caa:	81 11       	cpse	r24, r1
    1cac:	21 c0       	rjmp	.+66     	; 0x1cf0 <USB_Device_ProcessControlRequest+0x27c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1cae:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <USB_ControlRequest+0x2>
    1cb2:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <USB_ControlRequest+0x3>
    1cb6:	99 27       	eor	r25, r25
    1cb8:	02 97       	sbiw	r24, 0x02	; 2
    1cba:	d4 f4       	brge	.+52     	; 0x1cf0 <USB_Device_ProcessControlRequest+0x27c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1cbc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1cc0:	87 7f       	andi	r24, 0xF7	; 247
    1cc2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1cc6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <USB_ControlRequest+0x2>
    1cca:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    1cce:	0e 94 92 0b 	call	0x1724	; 0x1724 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1cd2:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <USB_Device_ConfigurationNumber>
    1cd6:	81 11       	cpse	r24, r1
    1cd8:	06 c0       	rjmp	.+12     	; 0x1ce6 <USB_Device_ProcessControlRequest+0x272>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1cda:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1cde:	87 fd       	sbrc	r24, 7
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <USB_Device_ProcessControlRequest+0x272>
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	01 c0       	rjmp	.+2      	; 0x1ce8 <USB_Device_ProcessControlRequest+0x274>
    1ce6:	84 e0       	ldi	r24, 0x04	; 4
    1ce8:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    1cec:	0e 94 ac 08 	call	0x1158	; 0x1158 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1cf0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1cf4:	83 ff       	sbrs	r24, 3
    1cf6:	0a c0       	rjmp	.+20     	; 0x1d0c <USB_Device_ProcessControlRequest+0x298>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1cf8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1cfc:	87 7f       	andi	r24, 0xF7	; 247
    1cfe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1d02:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
    1d06:	80 62       	ori	r24, 0x20	; 32
    1d08:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1d0c:	aa 96       	adiw	r28, 0x2a	; 42
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	f8 94       	cli
    1d12:	de bf       	out	0x3e, r29	; 62
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	cd bf       	out	0x3d, r28	; 61
    1d18:	df 91       	pop	r29
    1d1a:	cf 91       	pop	r28
    1d1c:	1f 91       	pop	r17
    1d1e:	08 95       	ret

00001d20 <host_set_driver>:
}

host_driver_t *host_get_driver(void)
{
    return driver;
}
    1d20:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <driver+0x1>
    1d24:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <driver>
    1d28:	08 95       	ret

00001d2a <host_keyboard_leds>:

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    1d2a:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <driver>
    1d2e:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <driver+0x1>
    1d32:	30 97       	sbiw	r30, 0x00	; 0
    1d34:	21 f0       	breq	.+8      	; 0x1d3e <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    1d36:	01 90       	ld	r0, Z+
    1d38:	f0 81       	ld	r31, Z
    1d3a:	e0 2d       	mov	r30, r0
    1d3c:	09 94       	ijmp
}
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	08 95       	ret

00001d42 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    1d42:	ef 92       	push	r14
    1d44:	ff 92       	push	r15
    1d46:	0f 93       	push	r16
    1d48:	1f 93       	push	r17
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
    if (!driver) return;
    1d4e:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <driver>
    1d52:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <driver+0x1>
    1d56:	30 97       	sbiw	r30, 0x00	; 0
    1d58:	b1 f1       	breq	.+108    	; 0x1dc6 <host_keyboard_send+0x84>
    1d5a:	8c 01       	movw	r16, r24
    (*driver->send_keyboard)(report);
    1d5c:	02 80       	ldd	r0, Z+2	; 0x02
    1d5e:	f3 81       	ldd	r31, Z+3	; 0x03
    1d60:	e0 2d       	mov	r30, r0
    1d62:	09 95       	icall

    if (debug_keyboard) {
    1d64:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <debug_config>
    1d68:	82 ff       	sbrs	r24, 2
    1d6a:	2d c0       	rjmp	.+90     	; 0x1dc6 <host_keyboard_send+0x84>
        dprint("keyboard: ");
    1d6c:	80 ff       	sbrs	r24, 0
    1d6e:	04 c0       	rjmp	.+8      	; 0x1d78 <host_keyboard_send+0x36>
    1d70:	8c e6       	ldi	r24, 0x6C	; 108
    1d72:	93 e0       	ldi	r25, 0x03	; 3
    1d74:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    1d78:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    1d7a:	18 e0       	ldi	r17, 0x08	; 8
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    1d7c:	86 e6       	ldi	r24, 0x66	; 102
    1d7e:	e8 2e       	mov	r14, r24
    1d80:	83 e0       	ldi	r24, 0x03	; 3
    1d82:	f8 2e       	mov	r15, r24
    1d84:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <debug_config>
    1d88:	80 ff       	sbrs	r24, 0
    1d8a:	0b c0       	rjmp	.+22     	; 0x1da2 <host_keyboard_send+0x60>
    1d8c:	88 81       	ld	r24, Y
    1d8e:	1f 92       	push	r1
    1d90:	8f 93       	push	r24
    1d92:	ff 92       	push	r15
    1d94:	ef 92       	push	r14
    1d96:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	11 50       	subi	r17, 0x01	; 1
    1da4:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    1da6:	11 11       	cpse	r17, r1
    1da8:	ed cf       	rjmp	.-38     	; 0x1d84 <host_keyboard_send+0x42>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    1daa:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <debug_config>
    1dae:	80 ff       	sbrs	r24, 0
    1db0:	0a c0       	rjmp	.+20     	; 0x1dc6 <host_keyboard_send+0x84>
    1db2:	84 e6       	ldi	r24, 0x64	; 100
    1db4:	93 e0       	ldi	r25, 0x03	; 3
    }
}
    1db6:	df 91       	pop	r29
    1db8:	cf 91       	pop	r28
    1dba:	1f 91       	pop	r17
    1dbc:	0f 91       	pop	r16
    1dbe:	ff 90       	pop	r15
    1dc0:	ef 90       	pop	r14
    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    1dc2:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <xputs>
    }
}
    1dc6:	df 91       	pop	r29
    1dc8:	cf 91       	pop	r28
    1dca:	1f 91       	pop	r17
    1dcc:	0f 91       	pop	r16
    1dce:	ff 90       	pop	r15
    1dd0:	ef 90       	pop	r14
    1dd2:	08 95       	ret

00001dd4 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    1dd4:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <driver>
    1dd8:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <driver+0x1>
    1ddc:	30 97       	sbiw	r30, 0x00	; 0
    1dde:	21 f0       	breq	.+8      	; 0x1de8 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    1de0:	04 80       	ldd	r0, Z+4	; 0x04
    1de2:	f5 81       	ldd	r31, Z+5	; 0x05
    1de4:	e0 2d       	mov	r30, r0
    1de6:	09 94       	ijmp
    1de8:	08 95       	ret

00001dea <host_system_send>:
}

void host_system_send(uint16_t report)
{
    1dea:	cf 93       	push	r28
    1dec:	df 93       	push	r29
    if (report == last_system_report) return;
    1dee:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <last_system_report>
    1df2:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <last_system_report+0x1>
    1df6:	28 17       	cp	r18, r24
    1df8:	39 07       	cpc	r19, r25
    1dfa:	09 f1       	breq	.+66     	; 0x1e3e <host_system_send+0x54>
    last_system_report = report;
    1dfc:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <last_system_report+0x1>
    1e00:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <last_system_report>

    if (!driver) return;
    1e04:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <driver>
    1e08:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <driver+0x1>
    1e0c:	30 97       	sbiw	r30, 0x00	; 0
    1e0e:	b9 f0       	breq	.+46     	; 0x1e3e <host_system_send+0x54>
    1e10:	ec 01       	movw	r28, r24
    (*driver->send_system)(report);
    1e12:	06 80       	ldd	r0, Z+6	; 0x06
    1e14:	f7 81       	ldd	r31, Z+7	; 0x07
    1e16:	e0 2d       	mov	r30, r0
    1e18:	09 95       	icall

    if (debug_keyboard) {
    1e1a:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <debug_config>
    1e1e:	82 ff       	sbrs	r24, 2
    1e20:	0e c0       	rjmp	.+28     	; 0x1e3e <host_system_send+0x54>
        dprintf("system: %04X\n", report);
    1e22:	80 ff       	sbrs	r24, 0
    1e24:	0c c0       	rjmp	.+24     	; 0x1e3e <host_system_send+0x54>
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	86 e5       	ldi	r24, 0x56	; 86
    1e2c:	93 e0       	ldi	r25, 0x03	; 3
    1e2e:	9f 93       	push	r25
    1e30:	8f 93       	push	r24
    1e32:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    }
}
    1e3e:	df 91       	pop	r29
    1e40:	cf 91       	pop	r28
    1e42:	08 95       	ret

00001e44 <host_consumer_send>:

void host_consumer_send(uint16_t report)
{
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    if (report == last_consumer_report) return;
    1e48:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <last_consumer_report>
    1e4c:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <last_consumer_report+0x1>
    1e50:	28 17       	cp	r18, r24
    1e52:	39 07       	cpc	r19, r25
    1e54:	09 f1       	breq	.+66     	; 0x1e98 <host_consumer_send+0x54>
    last_consumer_report = report;
    1e56:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <last_consumer_report+0x1>
    1e5a:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <last_consumer_report>

    if (!driver) return;
    1e5e:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <driver>
    1e62:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <driver+0x1>
    1e66:	30 97       	sbiw	r30, 0x00	; 0
    1e68:	b9 f0       	breq	.+46     	; 0x1e98 <host_consumer_send+0x54>
    1e6a:	ec 01       	movw	r28, r24
    (*driver->send_consumer)(report);
    1e6c:	00 84       	ldd	r0, Z+8	; 0x08
    1e6e:	f1 85       	ldd	r31, Z+9	; 0x09
    1e70:	e0 2d       	mov	r30, r0
    1e72:	09 95       	icall

    if (debug_keyboard) {
    1e74:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <debug_config>
    1e78:	82 ff       	sbrs	r24, 2
    1e7a:	0e c0       	rjmp	.+28     	; 0x1e98 <host_consumer_send+0x54>
        dprintf("consumer: %04X\n", report);
    1e7c:	80 ff       	sbrs	r24, 0
    1e7e:	0c c0       	rjmp	.+24     	; 0x1e98 <host_consumer_send+0x54>
    1e80:	df 93       	push	r29
    1e82:	cf 93       	push	r28
    1e84:	86 e4       	ldi	r24, 0x46	; 70
    1e86:	93 e0       	ldi	r25, 0x03	; 3
    1e88:	9f 93       	push	r25
    1e8a:	8f 93       	push	r24
    1e8c:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    }
}
    1e98:	df 91       	pop	r29
    1e9a:	cf 91       	pop	r28
    1e9c:	08 95       	ret

00001e9e <keyboard_setup>:
#endif


void keyboard_setup(void)
{
    matrix_setup();
    1e9e:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <matrix_setup>

00001ea2 <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    1ea2:	0e 94 34 1c 	call	0x3868	; 0x3868 <timer_init>
    matrix_init();
    1ea6:	0e 94 89 06 	call	0xd12	; 0xd12 <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    1eaa:	0c 94 3f 1e 	jmp	0x3c7e	; 0x3c7e <bootmagic>

00001eae <keyboard_task>:
/*
 * Do keyboard routine jobs: scan matrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    1eae:	bf 92       	push	r11
    1eb0:	cf 92       	push	r12
    1eb2:	df 92       	push	r13
    1eb4:	ef 92       	push	r14
    1eb6:	ff 92       	push	r15
    1eb8:	0f 93       	push	r16
    1eba:	1f 93       	push	r17
    1ebc:	cf 93       	push	r28
    1ebe:	df 93       	push	r29
    1ec0:	00 d0       	rcall	.+0      	; 0x1ec2 <keyboard_task+0x14>
    1ec2:	00 d0       	rcall	.+0      	; 0x1ec4 <keyboard_task+0x16>
    1ec4:	1f 92       	push	r1
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    1eca:	0e 94 ad 06 	call	0xd5a	; 0xd5a <matrix_scan>
    1ece:	0b e5       	ldi	r16, 0x5B	; 91
    1ed0:	11 e0       	ldi	r17, 0x01	; 1
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    1ed2:	f1 2c       	mov	r15, r1
        matrix_row = matrix_get_row(r);
    1ed4:	8f 2d       	mov	r24, r15
    1ed6:	0e 94 3b 07 	call	0xe76	; 0xe76 <matrix_get_row>
    1eda:	b8 2e       	mov	r11, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    1edc:	f8 01       	movw	r30, r16
    1ede:	c0 80       	ld	r12, Z
    1ee0:	c8 26       	eor	r12, r24
        if (matrix_change) {
    1ee2:	39 f4       	brne	.+14     	; 0x1ef2 <keyboard_task+0x44>
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    1ee4:	f3 94       	inc	r15
    1ee6:	0f 5f       	subi	r16, 0xFF	; 255
    1ee8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eea:	f8 e0       	ldi	r31, 0x08	; 8
    1eec:	ff 12       	cpse	r15, r31
    1eee:	f2 cf       	rjmp	.-28     	; 0x1ed4 <keyboard_task+0x26>
    1ef0:	30 c0       	rjmp	.+96     	; 0x1f52 <keyboard_task+0xa4>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    1ef2:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <debug_config>
    1ef6:	81 fd       	sbrc	r24, 1
    1ef8:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <matrix_print>
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    1efc:	d1 2c       	mov	r13, r1
    1efe:	ee 24       	eor	r14, r14
    1f00:	e3 94       	inc	r14
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            matrix_row_t col_mask = 1;
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
                if (matrix_change & col_mask) {
    1f02:	8c 2d       	mov	r24, r12
    1f04:	8e 21       	and	r24, r14
    1f06:	f9 f0       	breq	.+62     	; 0x1f46 <keyboard_task+0x98>
                    keyevent_t e = (keyevent_t){
    1f08:	d9 82       	std	Y+1, r13	; 0x01
    1f0a:	fa 82       	std	Y+2, r15	; 0x02
    1f0c:	91 e0       	ldi	r25, 0x01	; 1
    1f0e:	8b 2d       	mov	r24, r11
    1f10:	8e 21       	and	r24, r14
    1f12:	09 f4       	brne	.+2      	; 0x1f16 <keyboard_task+0x68>
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	9b 83       	std	Y+3, r25	; 0x03
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & col_mask),
                        .time = (timer_read() | 1) /* time should not be 0 */
    1f18:	0e 94 3d 1c 	call	0x387a	; 0x387a <timer_read>
#endif
            if (debug_matrix) matrix_print();
            matrix_row_t col_mask = 1;
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
                if (matrix_change & col_mask) {
                    keyevent_t e = (keyevent_t){
    1f1c:	81 60       	ori	r24, 0x01	; 1
    1f1e:	78 2f       	mov	r23, r24
    1f20:	9d 83       	std	Y+5, r25	; 0x05
    1f22:	8c 83       	std	Y+4, r24	; 0x04
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & col_mask),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    };
                    action_exec(e);
    1f24:	49 81       	ldd	r20, Y+1	; 0x01
    1f26:	5a 81       	ldd	r21, Y+2	; 0x02
    1f28:	6b 81       	ldd	r22, Y+3	; 0x03
    1f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2c:	0e 94 34 10 	call	0x2068	; 0x2068 <action_exec>
                    hook_matrix_change(e);
    1f30:	49 81       	ldd	r20, Y+1	; 0x01
    1f32:	5a 81       	ldd	r21, Y+2	; 0x02
    1f34:	6b 81       	ldd	r22, Y+3	; 0x03
    1f36:	7c 81       	ldd	r23, Y+4	; 0x04
    1f38:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3a:	0e 94 b6 1b 	call	0x376c	; 0x376c <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= col_mask;
    1f3e:	f8 01       	movw	r30, r16
    1f40:	80 81       	ld	r24, Z
    1f42:	8e 25       	eor	r24, r14
    1f44:	80 83       	st	Z, r24
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            matrix_row_t col_mask = 1;
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
    1f46:	d3 94       	inc	r13
    1f48:	ee 0c       	add	r14, r14
    1f4a:	f8 e0       	ldi	r31, 0x08	; 8
    1f4c:	df 12       	cpse	r13, r31
    1f4e:	d9 cf       	rjmp	.-78     	; 0x1f02 <keyboard_task+0x54>
    1f50:	c9 cf       	rjmp	.-110    	; 0x1ee4 <keyboard_task+0x36>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    1f52:	8f ef       	ldi	r24, 0xFF	; 255
    1f54:	89 83       	std	Y+1, r24	; 0x01
    1f56:	8a 83       	std	Y+2, r24	; 0x02
    1f58:	1b 82       	std	Y+3, r1	; 0x03
    1f5a:	0e 94 3d 1c 	call	0x387a	; 0x387a <timer_read>
    1f5e:	81 60       	ori	r24, 0x01	; 1
    1f60:	78 2f       	mov	r23, r24
    1f62:	9d 83       	std	Y+5, r25	; 0x05
    1f64:	8c 83       	std	Y+4, r24	; 0x04
    1f66:	49 81       	ldd	r20, Y+1	; 0x01
    1f68:	5a 81       	ldd	r21, Y+2	; 0x02
    1f6a:	6b 81       	ldd	r22, Y+3	; 0x03
    1f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6e:	0e 94 34 10 	call	0x2068	; 0x2068 <action_exec>

//MATRIX_LOOP_END:

    hook_keyboard_loop();
    1f72:	0e 94 b5 1b 	call	0x376a	; 0x376a <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    1f76:	0e 94 c6 21 	call	0x438c	; 0x438c <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    1f7a:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <host_keyboard_leds>
    1f7e:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <led_status.2520>
    1f82:	89 17       	cp	r24, r25
    1f84:	41 f1       	breq	.+80     	; 0x1fd6 <keyboard_task+0x128>
        led_status = host_keyboard_leds();
    1f86:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <host_keyboard_leds>
    1f8a:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <led_status.2520>
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    1f8e:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <debug_config>
    1f92:	92 ff       	sbrs	r25, 2
    1f94:	0e c0       	rjmp	.+28     	; 0x1fb2 <keyboard_task+0x104>
    1f96:	90 ff       	sbrs	r25, 0
    1f98:	0c c0       	rjmp	.+24     	; 0x1fb2 <keyboard_task+0x104>
    1f9a:	1f 92       	push	r1
    1f9c:	8f 93       	push	r24
    1f9e:	87 e7       	ldi	r24, 0x77	; 119
    1fa0:	93 e0       	ldi	r25, 0x03	; 3
    1fa2:	9f 93       	push	r25
    1fa4:	8f 93       	push	r24
    1fa6:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    1fb2:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <led_status.2520>
    }
}
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	df 91       	pop	r29
    1fc2:	cf 91       	pop	r28
    1fc4:	1f 91       	pop	r17
    1fc6:	0f 91       	pop	r16
    1fc8:	ff 90       	pop	r15
    1fca:	ef 90       	pop	r14
    1fcc:	df 90       	pop	r13
    1fce:	cf 90       	pop	r12
    1fd0:	bf 90       	pop	r11

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    1fd2:	0c 94 c7 1b 	jmp	0x378e	; 0x378e <hook_keyboard_leds_change>
    }
}
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	df 91       	pop	r29
    1fe2:	cf 91       	pop	r28
    1fe4:	1f 91       	pop	r17
    1fe6:	0f 91       	pop	r16
    1fe8:	ff 90       	pop	r15
    1fea:	ef 90       	pop	r14
    1fec:	df 90       	pop	r13
    1fee:	cf 90       	pop	r12
    1ff0:	bf 90       	pop	r11
    1ff2:	08 95       	ret

00001ff4 <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    1ff4:	0c 94 41 07 	jmp	0xe82	; 0xe82 <led_set>

00001ff8 <matrix_clear>:
    1ff8:	08 95       	ret

00001ffa <matrix_setup>:
    1ffa:	08 95       	ret

00001ffc <matrix_print>:
    return (matrix_get_row(row) & (1<<col));
}

__attribute__ ((weak))
void matrix_print(void)
{
    1ffc:	ef 92       	push	r14
    1ffe:	ff 92       	push	r15
    2000:	0f 93       	push	r16
    2002:	1f 93       	push	r17
    2004:	cf 93       	push	r28
    2006:	df 93       	push	r29
#if (MATRIX_COLS <= 8)
    print("r/c 01234567\n");
    2008:	80 e9       	ldi	r24, 0x90	; 144
    200a:	93 e0       	ldi	r25, 0x03	; 3
    200c:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    2010:	c0 e0       	ldi	r28, 0x00	; 0
    2012:	d0 e0       	ldi	r29, 0x00	; 0
#endif

    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {

#if (MATRIX_COLS <= 8)
        xprintf("%02X: %08b%s\n", row, bitrev(matrix_get_row(row)),
    2014:	88 e2       	ldi	r24, 0x28	; 40
    2016:	e8 2e       	mov	r14, r24
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	f8 2e       	mov	r15, r24
    201c:	02 e8       	ldi	r16, 0x82	; 130
    201e:	13 e0       	ldi	r17, 0x03	; 3
    2020:	8c 2f       	mov	r24, r28
    2022:	0e 94 3b 07 	call	0xe76	; 0xe76 <matrix_get_row>
    2026:	0e 94 a3 1b 	call	0x3746	; 0x3746 <bitrev>
    202a:	ff 92       	push	r15
    202c:	ef 92       	push	r14
    202e:	1f 92       	push	r1
    2030:	8f 93       	push	r24
    2032:	df 93       	push	r29
    2034:	cf 93       	push	r28
    2036:	1f 93       	push	r17
    2038:	0f 93       	push	r16
    203a:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    203e:	21 96       	adiw	r28, 0x01	; 1
    print("r/c 0123456789ABCDEF\n");
#elif (MATRIX_COLS <= 32)
    print("r/c 0123456789ABCDEF0123456789ABCDEF\n");
#endif

    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    2040:	8d b7       	in	r24, 0x3d	; 61
    2042:	9e b7       	in	r25, 0x3e	; 62
    2044:	08 96       	adiw	r24, 0x08	; 8
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	9e bf       	out	0x3e, r25	; 62
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	8d bf       	out	0x3d, r24	; 61
    2050:	c8 30       	cpi	r28, 0x08	; 8
    2052:	d1 05       	cpc	r29, r1
    2054:	29 f7       	brne	.-54     	; 0x2020 <matrix_print+0x24>
#else
        ""
#endif
        );
    }
}
    2056:	df 91       	pop	r29
    2058:	cf 91       	pop	r28
    205a:	1f 91       	pop	r17
    205c:	0f 91       	pop	r16
    205e:	ff 90       	pop	r15
    2060:	ef 90       	pop	r14
    2062:	08 95       	ret

00002064 <matrix_power_up>:
    2064:	08 95       	ret

00002066 <matrix_power_down>:
    return false;
}
#endif

__attribute__ ((weak)) void matrix_power_up(void) {}
__attribute__ ((weak)) void matrix_power_down(void) {}
    2066:	08 95       	ret

00002068 <action_exec>:
}

void type_code(uint8_t code)
{
    register_code(code);
    unregister_code(code);
    2068:	cf 93       	push	r28
    206a:	df 93       	push	r29
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
    2070:	2b 97       	sbiw	r28, 0x0b	; 11
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	f8 94       	cli
    2076:	de bf       	out	0x3e, r29	; 62
    2078:	0f be       	out	0x3f, r0	; 63
    207a:	cd bf       	out	0x3d, r28	; 61
    207c:	94 2f       	mov	r25, r20
    207e:	4f 83       	std	Y+7, r20	; 0x07
    2080:	25 2f       	mov	r18, r21
    2082:	58 87       	std	Y+8, r21	; 0x08
    2084:	69 87       	std	Y+9, r22	; 0x09
    2086:	7a 87       	std	Y+10, r23	; 0x0a
    2088:	8b 87       	std	Y+11, r24	; 0x0b
    208a:	4a 85       	ldd	r20, Y+10	; 0x0a
    208c:	5b 85       	ldd	r21, Y+11	; 0x0b
    208e:	45 2b       	or	r20, r21
    2090:	31 f0       	breq	.+12     	; 0x209e <action_exec+0x36>
    2092:	2f 3f       	cpi	r18, 0xFF	; 255
    2094:	31 f4       	brne	.+12     	; 0x20a2 <action_exec+0x3a>
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	9f 3f       	cpi	r25, 0xFF	; 255
    209a:	19 f4       	brne	.+6      	; 0x20a2 <action_exec+0x3a>
    209c:	03 c0       	rjmp	.+6      	; 0x20a4 <action_exec+0x3c>
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	01 c0       	rjmp	.+2      	; 0x20a4 <action_exec+0x3c>
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	80 fd       	sbrc	r24, 0
    20a6:	07 c0       	rjmp	.+14     	; 0x20b6 <action_exec+0x4e>
    20a8:	4f 81       	ldd	r20, Y+7	; 0x07
    20aa:	58 85       	ldd	r21, Y+8	; 0x08
    20ac:	69 85       	ldd	r22, Y+9	; 0x09
    20ae:	7a 85       	ldd	r23, Y+10	; 0x0a
    20b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    20b2:	0e 94 b6 1b 	call	0x376c	; 0x376c <hook_matrix_change>
    20b6:	de 01       	movw	r26, r28
    20b8:	11 96       	adiw	r26, 0x01	; 1
    20ba:	86 e0       	ldi	r24, 0x06	; 6
    20bc:	fd 01       	movw	r30, r26
    20be:	11 92       	st	Z+, r1
    20c0:	8a 95       	dec	r24
    20c2:	e9 f7       	brne	.-6      	; 0x20be <action_exec+0x56>
    20c4:	85 e0       	ldi	r24, 0x05	; 5
    20c6:	fe 01       	movw	r30, r28
    20c8:	37 96       	adiw	r30, 0x07	; 7
    20ca:	01 90       	ld	r0, Z+
    20cc:	0d 92       	st	X+, r0
    20ce:	8a 95       	dec	r24
    20d0:	e1 f7       	brne	.-8      	; 0x20ca <action_exec+0x62>
    20d2:	49 81       	ldd	r20, Y+1	; 0x01
    20d4:	5a 81       	ldd	r21, Y+2	; 0x02
    20d6:	6b 81       	ldd	r22, Y+3	; 0x03
    20d8:	7c 81       	ldd	r23, Y+4	; 0x04
    20da:	8d 81       	ldd	r24, Y+5	; 0x05
    20dc:	9e 81       	ldd	r25, Y+6	; 0x06
    20de:	0e 94 0c 18 	call	0x3018	; 0x3018 <action_tapping_process>
    20e2:	2b 96       	adiw	r28, 0x0b	; 11
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	f8 94       	cli
    20e8:	de bf       	out	0x3e, r29	; 62
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	cd bf       	out	0x3d, r28	; 61
    20ee:	df 91       	pop	r29
    20f0:	cf 91       	pop	r28
    20f2:	08 95       	ret

000020f4 <register_code>:
    20f4:	cf 93       	push	r28
    20f6:	88 23       	and	r24, r24
    20f8:	09 f4       	brne	.+2      	; 0x20fc <register_code+0x8>
    20fa:	e8 c0       	rjmp	.+464    	; 0x22cc <register_code+0x1d8>
    20fc:	c8 2f       	mov	r28, r24
    20fe:	82 38       	cpi	r24, 0x82	; 130
    2100:	a1 f4       	brne	.+40     	; 0x212a <register_code+0x36>
    2102:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <host_keyboard_leds>
    2106:	81 fd       	sbrc	r24, 1
    2108:	e1 c0       	rjmp	.+450    	; 0x22cc <register_code+0x1d8>
    210a:	89 e3       	ldi	r24, 0x39	; 57
    210c:	0e 94 00 1b 	call	0x3600	; 0x3600 <add_key>
    2110:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <send_keyboard_report>
    2114:	2f ef       	ldi	r18, 0xFF	; 255
    2116:	81 ee       	ldi	r24, 0xE1	; 225
    2118:	94 e0       	ldi	r25, 0x04	; 4
    211a:	21 50       	subi	r18, 0x01	; 1
    211c:	80 40       	sbci	r24, 0x00	; 0
    211e:	90 40       	sbci	r25, 0x00	; 0
    2120:	e1 f7       	brne	.-8      	; 0x211a <register_code+0x26>
    2122:	00 c0       	rjmp	.+0      	; 0x2124 <register_code+0x30>
    2124:	00 00       	nop
    2126:	89 e3       	ldi	r24, 0x39	; 57
    2128:	15 c0       	rjmp	.+42     	; 0x2154 <register_code+0x60>
    212a:	83 38       	cpi	r24, 0x83	; 131
    212c:	c1 f4       	brne	.+48     	; 0x215e <register_code+0x6a>
    212e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <host_keyboard_leds>
    2132:	80 fd       	sbrc	r24, 0
    2134:	cb c0       	rjmp	.+406    	; 0x22cc <register_code+0x1d8>
    2136:	83 e5       	ldi	r24, 0x53	; 83
    2138:	0e 94 00 1b 	call	0x3600	; 0x3600 <add_key>
    213c:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <send_keyboard_report>
    2140:	2f ef       	ldi	r18, 0xFF	; 255
    2142:	81 ee       	ldi	r24, 0xE1	; 225
    2144:	94 e0       	ldi	r25, 0x04	; 4
    2146:	21 50       	subi	r18, 0x01	; 1
    2148:	80 40       	sbci	r24, 0x00	; 0
    214a:	90 40       	sbci	r25, 0x00	; 0
    214c:	e1 f7       	brne	.-8      	; 0x2146 <register_code+0x52>
    214e:	00 c0       	rjmp	.+0      	; 0x2150 <register_code+0x5c>
    2150:	00 00       	nop
    2152:	83 e5       	ldi	r24, 0x53	; 83
    2154:	0e 94 1d 1b 	call	0x363a	; 0x363a <del_key>
    2158:	cf 91       	pop	r28
    215a:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <send_keyboard_report>
    215e:	84 38       	cpi	r24, 0x84	; 132
    2160:	a1 f4       	brne	.+40     	; 0x218a <register_code+0x96>
    2162:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <host_keyboard_leds>
    2166:	82 fd       	sbrc	r24, 2
    2168:	b1 c0       	rjmp	.+354    	; 0x22cc <register_code+0x1d8>
    216a:	87 e4       	ldi	r24, 0x47	; 71
    216c:	0e 94 00 1b 	call	0x3600	; 0x3600 <add_key>
    2170:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <send_keyboard_report>
    2174:	2f ef       	ldi	r18, 0xFF	; 255
    2176:	81 ee       	ldi	r24, 0xE1	; 225
    2178:	94 e0       	ldi	r25, 0x04	; 4
    217a:	21 50       	subi	r18, 0x01	; 1
    217c:	80 40       	sbci	r24, 0x00	; 0
    217e:	90 40       	sbci	r25, 0x00	; 0
    2180:	e1 f7       	brne	.-8      	; 0x217a <register_code+0x86>
    2182:	00 c0       	rjmp	.+0      	; 0x2184 <register_code+0x90>
    2184:	00 00       	nop
    2186:	87 e4       	ldi	r24, 0x47	; 71
    2188:	e5 cf       	rjmp	.-54     	; 0x2154 <register_code+0x60>
    218a:	8c ef       	ldi	r24, 0xFC	; 252
    218c:	8c 0f       	add	r24, r28
    218e:	81 3a       	cpi	r24, 0xA1	; 161
    2190:	48 f4       	brcc	.+18     	; 0x21a4 <register_code+0xb0>
    2192:	8c 2f       	mov	r24, r28
    2194:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <command_proc>
    2198:	81 11       	cpse	r24, r1
    219a:	98 c0       	rjmp	.+304    	; 0x22cc <register_code+0x1d8>
    219c:	8c 2f       	mov	r24, r28
    219e:	0e 94 00 1b 	call	0x3600	; 0x3600 <add_key>
    21a2:	da cf       	rjmp	.-76     	; 0x2158 <register_code+0x64>
    21a4:	80 e2       	ldi	r24, 0x20	; 32
    21a6:	8c 0f       	add	r24, r28
    21a8:	88 30       	cpi	r24, 0x08	; 8
    21aa:	48 f4       	brcc	.+18     	; 0x21be <register_code+0xca>
    21ac:	c7 70       	andi	r28, 0x07	; 7
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	01 c0       	rjmp	.+2      	; 0x21b4 <register_code+0xc0>
    21b2:	88 0f       	add	r24, r24
    21b4:	ca 95       	dec	r28
    21b6:	ea f7       	brpl	.-6      	; 0x21b2 <register_code+0xbe>
    21b8:	0e 94 3e 1b 	call	0x367c	; 0x367c <add_mods>
    21bc:	cd cf       	rjmp	.-102    	; 0x2158 <register_code+0x64>
    21be:	8b e5       	ldi	r24, 0x5B	; 91
    21c0:	8c 0f       	add	r24, r28
    21c2:	83 30       	cpi	r24, 0x03	; 3
    21c4:	78 f4       	brcc	.+30     	; 0x21e4 <register_code+0xf0>
    21c6:	c5 3a       	cpi	r28, 0xA5	; 165
    21c8:	29 f0       	breq	.+10     	; 0x21d4 <register_code+0xe0>
    21ca:	c6 3a       	cpi	r28, 0xA6	; 166
    21cc:	31 f0       	breq	.+12     	; 0x21da <register_code+0xe6>
    21ce:	83 e8       	ldi	r24, 0x83	; 131
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	05 c0       	rjmp	.+10     	; 0x21de <register_code+0xea>
    21d4:	81 e8       	ldi	r24, 0x81	; 129
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	02 c0       	rjmp	.+4      	; 0x21de <register_code+0xea>
    21da:	82 e8       	ldi	r24, 0x82	; 130
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	cf 91       	pop	r28
    21e0:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <host_system_send>
    21e4:	88 e5       	ldi	r24, 0x58	; 88
    21e6:	8c 0f       	add	r24, r28
    21e8:	85 31       	cpi	r24, 0x15	; 21
    21ea:	08 f0       	brcs	.+2      	; 0x21ee <register_code+0xfa>
    21ec:	6f c0       	rjmp	.+222    	; 0x22cc <register_code+0x1d8>
    21ee:	c8 3a       	cpi	r28, 0xA8	; 168
    21f0:	61 f1       	breq	.+88     	; 0x224a <register_code+0x156>
    21f2:	c9 3a       	cpi	r28, 0xA9	; 169
    21f4:	69 f1       	breq	.+90     	; 0x2250 <register_code+0x15c>
    21f6:	ca 3a       	cpi	r28, 0xAA	; 170
    21f8:	71 f1       	breq	.+92     	; 0x2256 <register_code+0x162>
    21fa:	cb 3a       	cpi	r28, 0xAB	; 171
    21fc:	79 f1       	breq	.+94     	; 0x225c <register_code+0x168>
    21fe:	cc 3a       	cpi	r28, 0xAC	; 172
    2200:	81 f1       	breq	.+96     	; 0x2262 <register_code+0x16e>
    2202:	cd 3a       	cpi	r28, 0xAD	; 173
    2204:	89 f1       	breq	.+98     	; 0x2268 <register_code+0x174>
    2206:	ce 3a       	cpi	r28, 0xAE	; 174
    2208:	91 f1       	breq	.+100    	; 0x226e <register_code+0x17a>
    220a:	cf 3a       	cpi	r28, 0xAF	; 175
    220c:	99 f1       	breq	.+102    	; 0x2274 <register_code+0x180>
    220e:	c1 3b       	cpi	r28, 0xB1	; 177
    2210:	a1 f1       	breq	.+104    	; 0x227a <register_code+0x186>
    2212:	c0 3b       	cpi	r28, 0xB0	; 176
    2214:	a9 f1       	breq	.+106    	; 0x2280 <register_code+0x18c>
    2216:	c2 3b       	cpi	r28, 0xB2	; 178
    2218:	b1 f1       	breq	.+108    	; 0x2286 <register_code+0x192>
    221a:	c3 3b       	cpi	r28, 0xB3	; 179
    221c:	b9 f1       	breq	.+110    	; 0x228c <register_code+0x198>
    221e:	c4 3b       	cpi	r28, 0xB4	; 180
    2220:	c1 f1       	breq	.+112    	; 0x2292 <register_code+0x19e>
    2222:	c5 3b       	cpi	r28, 0xB5	; 181
    2224:	c9 f1       	breq	.+114    	; 0x2298 <register_code+0x1a4>
    2226:	c6 3b       	cpi	r28, 0xB6	; 182
    2228:	d1 f1       	breq	.+116    	; 0x229e <register_code+0x1aa>
    222a:	c7 3b       	cpi	r28, 0xB7	; 183
    222c:	d9 f1       	breq	.+118    	; 0x22a4 <register_code+0x1b0>
    222e:	c8 3b       	cpi	r28, 0xB8	; 184
    2230:	e1 f1       	breq	.+120    	; 0x22aa <register_code+0x1b6>
    2232:	c9 3b       	cpi	r28, 0xB9	; 185
    2234:	e9 f1       	breq	.+122    	; 0x22b0 <register_code+0x1bc>
    2236:	ca 3b       	cpi	r28, 0xBA	; 186
    2238:	f1 f1       	breq	.+124    	; 0x22b6 <register_code+0x1c2>
    223a:	cb 3b       	cpi	r28, 0xBB	; 187
    223c:	f9 f1       	breq	.+126    	; 0x22bc <register_code+0x1c8>
    223e:	cc 3b       	cpi	r28, 0xBC	; 188
    2240:	09 f4       	brne	.+2      	; 0x2244 <register_code+0x150>
    2242:	3f c0       	rjmp	.+126    	; 0x22c2 <register_code+0x1ce>
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	3e c0       	rjmp	.+124    	; 0x22c6 <register_code+0x1d2>
    224a:	82 ee       	ldi	r24, 0xE2	; 226
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	3b c0       	rjmp	.+118    	; 0x22c6 <register_code+0x1d2>
    2250:	89 ee       	ldi	r24, 0xE9	; 233
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	38 c0       	rjmp	.+112    	; 0x22c6 <register_code+0x1d2>
    2256:	8a ee       	ldi	r24, 0xEA	; 234
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	35 c0       	rjmp	.+106    	; 0x22c6 <register_code+0x1d2>
    225c:	85 eb       	ldi	r24, 0xB5	; 181
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	32 c0       	rjmp	.+100    	; 0x22c6 <register_code+0x1d2>
    2262:	86 eb       	ldi	r24, 0xB6	; 182
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	2f c0       	rjmp	.+94     	; 0x22c6 <register_code+0x1d2>
    2268:	83 eb       	ldi	r24, 0xB3	; 179
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	2c c0       	rjmp	.+88     	; 0x22c6 <register_code+0x1d2>
    226e:	84 eb       	ldi	r24, 0xB4	; 180
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	29 c0       	rjmp	.+82     	; 0x22c6 <register_code+0x1d2>
    2274:	87 eb       	ldi	r24, 0xB7	; 183
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	26 c0       	rjmp	.+76     	; 0x22c6 <register_code+0x1d2>
    227a:	8c ec       	ldi	r24, 0xCC	; 204
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	23 c0       	rjmp	.+70     	; 0x22c6 <register_code+0x1d2>
    2280:	8d ec       	ldi	r24, 0xCD	; 205
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	20 c0       	rjmp	.+64     	; 0x22c6 <register_code+0x1d2>
    2286:	83 e8       	ldi	r24, 0x83	; 131
    2288:	91 e0       	ldi	r25, 0x01	; 1
    228a:	1d c0       	rjmp	.+58     	; 0x22c6 <register_code+0x1d2>
    228c:	8a e8       	ldi	r24, 0x8A	; 138
    228e:	91 e0       	ldi	r25, 0x01	; 1
    2290:	1a c0       	rjmp	.+52     	; 0x22c6 <register_code+0x1d2>
    2292:	82 e9       	ldi	r24, 0x92	; 146
    2294:	91 e0       	ldi	r25, 0x01	; 1
    2296:	17 c0       	rjmp	.+46     	; 0x22c6 <register_code+0x1d2>
    2298:	84 e9       	ldi	r24, 0x94	; 148
    229a:	91 e0       	ldi	r25, 0x01	; 1
    229c:	14 c0       	rjmp	.+40     	; 0x22c6 <register_code+0x1d2>
    229e:	81 e2       	ldi	r24, 0x21	; 33
    22a0:	92 e0       	ldi	r25, 0x02	; 2
    22a2:	11 c0       	rjmp	.+34     	; 0x22c6 <register_code+0x1d2>
    22a4:	83 e2       	ldi	r24, 0x23	; 35
    22a6:	92 e0       	ldi	r25, 0x02	; 2
    22a8:	0e c0       	rjmp	.+28     	; 0x22c6 <register_code+0x1d2>
    22aa:	84 e2       	ldi	r24, 0x24	; 36
    22ac:	92 e0       	ldi	r25, 0x02	; 2
    22ae:	0b c0       	rjmp	.+22     	; 0x22c6 <register_code+0x1d2>
    22b0:	85 e2       	ldi	r24, 0x25	; 37
    22b2:	92 e0       	ldi	r25, 0x02	; 2
    22b4:	08 c0       	rjmp	.+16     	; 0x22c6 <register_code+0x1d2>
    22b6:	86 e2       	ldi	r24, 0x26	; 38
    22b8:	92 e0       	ldi	r25, 0x02	; 2
    22ba:	05 c0       	rjmp	.+10     	; 0x22c6 <register_code+0x1d2>
    22bc:	87 e2       	ldi	r24, 0x27	; 39
    22be:	92 e0       	ldi	r25, 0x02	; 2
    22c0:	02 c0       	rjmp	.+4      	; 0x22c6 <register_code+0x1d2>
    22c2:	8a e2       	ldi	r24, 0x2A	; 42
    22c4:	92 e0       	ldi	r25, 0x02	; 2
    22c6:	cf 91       	pop	r28
    22c8:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <host_consumer_send>
    22cc:	cf 91       	pop	r28
    22ce:	08 95       	ret

000022d0 <unregister_code>:
    22d0:	88 23       	and	r24, r24
    22d2:	09 f4       	brne	.+2      	; 0x22d6 <unregister_code+0x6>
    22d4:	66 c0       	rjmp	.+204    	; 0x23a2 <unregister_code+0xd2>
    22d6:	82 38       	cpi	r24, 0x82	; 130
    22d8:	a1 f4       	brne	.+40     	; 0x2302 <unregister_code+0x32>
    22da:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <host_keyboard_leds>
    22de:	81 ff       	sbrs	r24, 1
    22e0:	60 c0       	rjmp	.+192    	; 0x23a2 <unregister_code+0xd2>
    22e2:	89 e3       	ldi	r24, 0x39	; 57
    22e4:	0e 94 00 1b 	call	0x3600	; 0x3600 <add_key>
    22e8:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <send_keyboard_report>
    22ec:	2f ef       	ldi	r18, 0xFF	; 255
    22ee:	81 ee       	ldi	r24, 0xE1	; 225
    22f0:	94 e0       	ldi	r25, 0x04	; 4
    22f2:	21 50       	subi	r18, 0x01	; 1
    22f4:	80 40       	sbci	r24, 0x00	; 0
    22f6:	90 40       	sbci	r25, 0x00	; 0
    22f8:	e1 f7       	brne	.-8      	; 0x22f2 <unregister_code+0x22>
    22fa:	00 c0       	rjmp	.+0      	; 0x22fc <unregister_code+0x2c>
    22fc:	00 00       	nop
    22fe:	89 e3       	ldi	r24, 0x39	; 57
    2300:	15 c0       	rjmp	.+42     	; 0x232c <unregister_code+0x5c>
    2302:	83 38       	cpi	r24, 0x83	; 131
    2304:	b9 f4       	brne	.+46     	; 0x2334 <unregister_code+0x64>
    2306:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <host_keyboard_leds>
    230a:	80 ff       	sbrs	r24, 0
    230c:	4a c0       	rjmp	.+148    	; 0x23a2 <unregister_code+0xd2>
    230e:	83 e5       	ldi	r24, 0x53	; 83
    2310:	0e 94 00 1b 	call	0x3600	; 0x3600 <add_key>
    2314:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <send_keyboard_report>
    2318:	2f ef       	ldi	r18, 0xFF	; 255
    231a:	81 ee       	ldi	r24, 0xE1	; 225
    231c:	94 e0       	ldi	r25, 0x04	; 4
    231e:	21 50       	subi	r18, 0x01	; 1
    2320:	80 40       	sbci	r24, 0x00	; 0
    2322:	90 40       	sbci	r25, 0x00	; 0
    2324:	e1 f7       	brne	.-8      	; 0x231e <unregister_code+0x4e>
    2326:	00 c0       	rjmp	.+0      	; 0x2328 <unregister_code+0x58>
    2328:	00 00       	nop
    232a:	83 e5       	ldi	r24, 0x53	; 83
    232c:	0e 94 1d 1b 	call	0x363a	; 0x363a <del_key>
    2330:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <send_keyboard_report>
    2334:	84 38       	cpi	r24, 0x84	; 132
    2336:	a1 f4       	brne	.+40     	; 0x2360 <unregister_code+0x90>
    2338:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <host_keyboard_leds>
    233c:	82 ff       	sbrs	r24, 2
    233e:	31 c0       	rjmp	.+98     	; 0x23a2 <unregister_code+0xd2>
    2340:	87 e4       	ldi	r24, 0x47	; 71
    2342:	0e 94 00 1b 	call	0x3600	; 0x3600 <add_key>
    2346:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <send_keyboard_report>
    234a:	2f ef       	ldi	r18, 0xFF	; 255
    234c:	81 ee       	ldi	r24, 0xE1	; 225
    234e:	94 e0       	ldi	r25, 0x04	; 4
    2350:	21 50       	subi	r18, 0x01	; 1
    2352:	80 40       	sbci	r24, 0x00	; 0
    2354:	90 40       	sbci	r25, 0x00	; 0
    2356:	e1 f7       	brne	.-8      	; 0x2350 <unregister_code+0x80>
    2358:	00 c0       	rjmp	.+0      	; 0x235a <unregister_code+0x8a>
    235a:	00 00       	nop
    235c:	87 e4       	ldi	r24, 0x47	; 71
    235e:	e6 cf       	rjmp	.-52     	; 0x232c <unregister_code+0x5c>
    2360:	9c ef       	ldi	r25, 0xFC	; 252
    2362:	98 0f       	add	r25, r24
    2364:	91 3a       	cpi	r25, 0xA1	; 161
    2366:	10 f3       	brcs	.-60     	; 0x232c <unregister_code+0x5c>
    2368:	90 e2       	ldi	r25, 0x20	; 32
    236a:	98 0f       	add	r25, r24
    236c:	98 30       	cpi	r25, 0x08	; 8
    236e:	50 f4       	brcc	.+20     	; 0x2384 <unregister_code+0xb4>
    2370:	87 70       	andi	r24, 0x07	; 7
    2372:	91 e0       	ldi	r25, 0x01	; 1
    2374:	01 c0       	rjmp	.+2      	; 0x2378 <unregister_code+0xa8>
    2376:	99 0f       	add	r25, r25
    2378:	8a 95       	dec	r24
    237a:	ea f7       	brpl	.-6      	; 0x2376 <unregister_code+0xa6>
    237c:	89 2f       	mov	r24, r25
    237e:	0e 94 44 1b 	call	0x3688	; 0x3688 <del_mods>
    2382:	d6 cf       	rjmp	.-84     	; 0x2330 <unregister_code+0x60>
    2384:	9b e5       	ldi	r25, 0x5B	; 91
    2386:	98 0f       	add	r25, r24
    2388:	93 30       	cpi	r25, 0x03	; 3
    238a:	20 f4       	brcc	.+8      	; 0x2394 <unregister_code+0xc4>
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <host_system_send>
    2394:	88 5a       	subi	r24, 0xA8	; 168
    2396:	85 31       	cpi	r24, 0x15	; 21
    2398:	20 f4       	brcc	.+8      	; 0x23a2 <unregister_code+0xd2>
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <host_consumer_send>
    23a2:	08 95       	ret

000023a4 <register_mods>:
}

void register_mods(uint8_t mods)
{
    if (mods) {
    23a4:	88 23       	and	r24, r24
    23a6:	21 f0       	breq	.+8      	; 0x23b0 <register_mods+0xc>
        add_mods(mods);
    23a8:	0e 94 3e 1b 	call	0x367c	; 0x367c <add_mods>
        send_keyboard_report();
    23ac:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <send_keyboard_report>
    23b0:	08 95       	ret

000023b2 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    23b2:	88 23       	and	r24, r24
    23b4:	21 f0       	breq	.+8      	; 0x23be <unregister_mods+0xc>
        del_mods(mods);
    23b6:	0e 94 44 1b 	call	0x3688	; 0x3688 <del_mods>
        send_keyboard_report();
    23ba:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <send_keyboard_report>
    23be:	08 95       	ret

000023c0 <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    23c0:	cf 92       	push	r12
    23c2:	df 92       	push	r13
    23c4:	ef 92       	push	r14
    23c6:	ff 92       	push	r15
    23c8:	0f 93       	push	r16
    23ca:	1f 93       	push	r17
    23cc:	cf 93       	push	r28
    23ce:	df 93       	push	r29
    23d0:	00 d0       	rcall	.+0      	; 0x23d2 <process_action+0x12>
    23d2:	00 d0       	rcall	.+0      	; 0x23d4 <process_action+0x14>
    23d4:	1f 92       	push	r1
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
    23da:	6c 01       	movw	r12, r24
    keyevent_t event = record->event;
    23dc:	85 e0       	ldi	r24, 0x05	; 5
    23de:	f6 01       	movw	r30, r12
    23e0:	de 01       	movw	r26, r28
    23e2:	11 96       	adiw	r26, 0x01	; 1
    23e4:	01 90       	ld	r0, Z+
    23e6:	0d 92       	st	X+, r0
    23e8:	8a 95       	dec	r24
    23ea:	e1 f7       	brne	.-8      	; 0x23e4 <process_action+0x24>
    23ec:	f6 01       	movw	r30, r12
    23ee:	40 81       	ld	r20, Z
    23f0:	51 81       	ldd	r21, Z+1	; 0x01
    23f2:	23 81       	ldd	r18, Z+3	; 0x03
    23f4:	34 81       	ldd	r19, Z+4	; 0x04

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    23f6:	21 15       	cp	r18, r1
    23f8:	31 05       	cpc	r19, r1
    23fa:	31 f0       	breq	.+12     	; 0x2408 <process_action+0x48>
    23fc:	5f 3f       	cpi	r21, 0xFF	; 255
    23fe:	31 f4       	brne	.+12     	; 0x240c <process_action+0x4c>
    2400:	91 e0       	ldi	r25, 0x01	; 1
    2402:	4f 3f       	cpi	r20, 0xFF	; 255
    2404:	19 f4       	brne	.+6      	; 0x240c <process_action+0x4c>
    2406:	03 c0       	rjmp	.+6      	; 0x240e <process_action+0x4e>
    2408:	91 e0       	ldi	r25, 0x01	; 1
    240a:	01 c0       	rjmp	.+2      	; 0x240e <process_action+0x4e>
    240c:	90 e0       	ldi	r25, 0x00	; 0
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
#endif

    if (IS_NOEVENT(event)) { return; }
    240e:	90 fd       	sbrc	r25, 0
    2410:	c5 c2       	rjmp	.+1418   	; 0x299c <process_action+0x5dc>
#endif
}

void process_action(keyrecord_t *record)
{
    keyevent_t event = record->event;
    2412:	f6 01       	movw	r30, r12
    2414:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    2416:	e5 80       	ldd	r14, Z+5	; 0x05
    2418:	e2 94       	swap	r14
    241a:	8f e0       	ldi	r24, 0x0F	; 15
    241c:	e8 22       	and	r14, r24
#endif

    if (IS_NOEVENT(event)) { return; }

    action_t action = layer_switch_get_action(event);
    241e:	72 2f       	mov	r23, r18
    2420:	3d 83       	std	Y+5, r19	; 0x05
    2422:	2c 83       	std	Y+4, r18	; 0x04
    2424:	6f 2d       	mov	r22, r15
    2426:	8d 81       	ldd	r24, Y+5	; 0x05
    2428:	0e 94 75 1a 	call	0x34ea	; 0x34ea <layer_switch_get_action>
    242c:	8c 01       	movw	r16, r24
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    242e:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2432:	0e 94 64 19 	call	0x32c8	; 0x32c8 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    2436:	e1 2f       	mov	r30, r17
    2438:	e2 95       	swap	r30
    243a:	ef 70       	andi	r30, 0x0F	; 15
    243c:	8e 2f       	mov	r24, r30
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	fc 01       	movw	r30, r24
    2442:	e5 5b       	subi	r30, 0xB5	; 181
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	0c 94 e5 28 	jmp	0x51ca	; 0x51ca <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    244a:	81 2f       	mov	r24, r17
    244c:	80 7f       	andi	r24, 0xF0	; 240
    244e:	1f 70       	andi	r17, 0x0F	; 15
    2450:	88 23       	and	r24, r24
    2452:	11 f0       	breq	.+4      	; 0x2458 <process_action+0x98>
    2454:	12 95       	swap	r17
    2456:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    2458:	ff 20       	and	r15, r15
    245a:	49 f0       	breq	.+18     	; 0x246e <process_action+0xae>
                    if (mods) {
    245c:	11 23       	and	r17, r17
    245e:	09 f4       	brne	.+2      	; 0x2462 <process_action+0xa2>
    2460:	52 c2       	rjmp	.+1188   	; 0x2906 <process_action+0x546>
                        add_weak_mods(mods);
    2462:	81 2f       	mov	r24, r17
    2464:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <add_weak_mods>
                        send_keyboard_report();
    2468:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <send_keyboard_report>
    246c:	4c c2       	rjmp	.+1176   	; 0x2906 <process_action+0x546>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    246e:	80 2f       	mov	r24, r16
    2470:	0e 94 68 11 	call	0x22d0	; 0x22d0 <unregister_code>
                    if (mods) {
    2474:	11 23       	and	r17, r17
    2476:	09 f4       	brne	.+2      	; 0x247a <process_action+0xba>
    2478:	91 c2       	rjmp	.+1314   	; 0x299c <process_action+0x5dc>
                        del_weak_mods(mods);
    247a:	81 2f       	mov	r24, r17
    247c:	0e 94 57 1b 	call	0x36ae	; 0x36ae <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    2480:	0f 90       	pop	r0
    2482:	0f 90       	pop	r0
    2484:	0f 90       	pop	r0
    2486:	0f 90       	pop	r0
    2488:	0f 90       	pop	r0
    248a:	df 91       	pop	r29
    248c:	cf 91       	pop	r28
    248e:	1f 91       	pop	r17
    2490:	0f 91       	pop	r16
    2492:	ff 90       	pop	r15
    2494:	ef 90       	pop	r14
    2496:	df 90       	pop	r13
    2498:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    249a:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    249e:	81 2f       	mov	r24, r17
    24a0:	80 7f       	andi	r24, 0xF0	; 240
    24a2:	1f 70       	andi	r17, 0x0F	; 15
    24a4:	80 32       	cpi	r24, 0x20	; 32
    24a6:	11 f0       	breq	.+4      	; 0x24ac <process_action+0xec>
    24a8:	12 95       	swap	r17
    24aa:	10 7f       	andi	r17, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.key.code) {
    24ac:	00 23       	and	r16, r16
    24ae:	19 f0       	breq	.+6      	; 0x24b6 <process_action+0xf6>
    24b0:	01 30       	cpi	r16, 0x01	; 1
    24b2:	09 f1       	breq	.+66     	; 0x24f6 <process_action+0x136>
    24b4:	2b c0       	rjmp	.+86     	; 0x250c <process_action+0x14c>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    24b6:	ff 20       	and	r15, r15
    24b8:	a9 f0       	breq	.+42     	; 0x24e4 <process_action+0x124>
                            if (tap_count == 0) {
    24ba:	ee 20       	and	r14, r14
    24bc:	59 f1       	breq	.+86     	; 0x2514 <process_action+0x154>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    24be:	f1 e0       	ldi	r31, 0x01	; 1
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    24c0:	81 2f       	mov	r24, r17
                        // Oneshot modifier
                        if (event.pressed) {
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    24c2:	ef 12       	cpse	r14, r31
    24c4:	28 c0       	rjmp	.+80     	; 0x2516 <process_action+0x156>
            break;
#endif
        default:
            break;
    }
}
    24c6:	0f 90       	pop	r0
    24c8:	0f 90       	pop	r0
    24ca:	0f 90       	pop	r0
    24cc:	0f 90       	pop	r0
    24ce:	0f 90       	pop	r0
    24d0:	df 91       	pop	r29
    24d2:	cf 91       	pop	r28
    24d4:	1f 91       	pop	r17
    24d6:	0f 91       	pop	r16
    24d8:	ff 90       	pop	r15
    24da:	ef 90       	pop	r14
    24dc:	df 90       	pop	r13
    24de:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    24e0:	0c 94 61 1b 	jmp	0x36c2	; 0x36c2 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    24e4:	ee 20       	and	r14, r14
    24e6:	21 f0       	breq	.+8      	; 0x24f0 <process_action+0x130>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	e8 16       	cp	r14, r24
    24ec:	09 f4       	brne	.+2      	; 0x24f0 <process_action+0x130>
    24ee:	56 c2       	rjmp	.+1196   	; 0x299c <process_action+0x5dc>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    24f0:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <clear_oneshot_mods>
    24f4:	2d c0       	rjmp	.+90     	; 0x2550 <process_action+0x190>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    24f6:	ff 20       	and	r15, r15
    24f8:	e9 f0       	breq	.+58     	; 0x2534 <process_action+0x174>
                            if (tap_count <= TAPPING_TOGGLE) {
    24fa:	e5 e0       	ldi	r30, 0x05	; 5
    24fc:	ee 15       	cp	r30, r14
    24fe:	08 f4       	brcc	.+2      	; 0x2502 <process_action+0x142>
    2500:	4d c2       	rjmp	.+1178   	; 0x299c <process_action+0x5dc>
                                if (mods & get_mods()) {
    2502:	0e 94 3b 1b 	call	0x3676	; 0x3676 <get_mods>
    2506:	81 23       	and	r24, r17
    2508:	29 f0       	breq	.+10     	; 0x2514 <process_action+0x154>
    250a:	22 c0       	rjmp	.+68     	; 0x2550 <process_action+0x190>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    250c:	ff 20       	and	r15, r15
    250e:	f1 f0       	breq	.+60     	; 0x254c <process_action+0x18c>
                            if (tap_count > 0) {
    2510:	e1 10       	cpse	r14, r1
    2512:	15 c0       	rjmp	.+42     	; 0x253e <process_action+0x17e>
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    2514:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	0f 90       	pop	r0
    251c:	0f 90       	pop	r0
    251e:	0f 90       	pop	r0
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	1f 91       	pop	r17
    2526:	0f 91       	pop	r16
    2528:	ff 90       	pop	r15
    252a:	ef 90       	pop	r14
    252c:	df 90       	pop	r13
    252e:	cf 90       	pop	r12
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    2530:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <register_mods>
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    2534:	f4 e0       	ldi	r31, 0x04	; 4
    2536:	fe 15       	cp	r31, r14
    2538:	08 f4       	brcc	.+2      	; 0x253c <process_action+0x17c>
    253a:	30 c2       	rjmp	.+1120   	; 0x299c <process_action+0x5dc>
    253c:	09 c0       	rjmp	.+18     	; 0x2550 <process_action+0x190>
                        }
                        break;
                    default:
                        if (event.pressed) {
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
    253e:	f6 01       	movw	r30, r12
    2540:	85 81       	ldd	r24, Z+5	; 0x05
    2542:	80 ff       	sbrs	r24, 0
    2544:	e0 c1       	rjmp	.+960    	; 0x2906 <process_action+0x546>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2546:	8f 70       	andi	r24, 0x0F	; 15
    2548:	85 83       	std	Z+5, r24	; 0x05
    254a:	e4 cf       	rjmp	.-56     	; 0x2514 <process_action+0x154>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    254c:	e1 10       	cpse	r14, r1
    254e:	ee c1       	rjmp	.+988    	; 0x292c <process_action+0x56c>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    2550:	81 2f       	mov	r24, r17
    2552:	61 c1       	rjmp	.+706    	; 0x2816 <process_action+0x456>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    2554:	81 2f       	mov	r24, r17
    2556:	86 95       	lsr	r24
    2558:	86 95       	lsr	r24
    255a:	83 70       	andi	r24, 0x03	; 3
    255c:	19 f0       	breq	.+6      	; 0x2564 <process_action+0x1a4>
    255e:	81 30       	cpi	r24, 0x01	; 1
    2560:	b9 f0       	breq	.+46     	; 0x2590 <process_action+0x1d0>
    2562:	1c c2       	rjmp	.+1080   	; 0x299c <process_action+0x5dc>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2564:	ff 20       	and	r15, r15
    2566:	19 f0       	breq	.+6      	; 0x256e <process_action+0x1ae>
                        host_system_send(action.usage.code);
    2568:	c8 01       	movw	r24, r16
    256a:	93 70       	andi	r25, 0x03	; 3
    256c:	02 c0       	rjmp	.+4      	; 0x2572 <process_action+0x1b2>
                    } else {
                        host_system_send(0);
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	0f 90       	pop	r0
    2578:	0f 90       	pop	r0
    257a:	0f 90       	pop	r0
    257c:	df 91       	pop	r29
    257e:	cf 91       	pop	r28
    2580:	1f 91       	pop	r17
    2582:	0f 91       	pop	r16
    2584:	ff 90       	pop	r15
    2586:	ef 90       	pop	r14
    2588:	df 90       	pop	r13
    258a:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    258c:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    2590:	ff 20       	and	r15, r15
    2592:	19 f0       	breq	.+6      	; 0x259a <process_action+0x1da>
                        host_consumer_send(action.usage.code);
    2594:	c8 01       	movw	r24, r16
    2596:	93 70       	andi	r25, 0x03	; 3
    2598:	02 c0       	rjmp	.+4      	; 0x259e <process_action+0x1de>
                    } else {
                        host_consumer_send(0);
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	df 91       	pop	r29
    25aa:	cf 91       	pop	r28
    25ac:	1f 91       	pop	r17
    25ae:	0f 91       	pop	r16
    25b0:	ff 90       	pop	r15
    25b2:	ef 90       	pop	r14
    25b4:	df 90       	pop	r13
    25b6:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    25b8:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    25bc:	80 2f       	mov	r24, r16
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    25be:	ff 20       	and	r15, r15
    25c0:	19 f0       	breq	.+6      	; 0x25c8 <process_action+0x208>
                mousekey_on(action.key.code);
    25c2:	0e 94 4c 20 	call	0x4098	; 0x4098 <mousekey_on>
    25c6:	02 c0       	rjmp	.+4      	; 0x25cc <process_action+0x20c>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    25c8:	0e 94 b4 20 	call	0x4168	; 0x4168 <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	0f 90       	pop	r0
    25d6:	df 91       	pop	r29
    25d8:	cf 91       	pop	r28
    25da:	1f 91       	pop	r17
    25dc:	0f 91       	pop	r16
    25de:	ff 90       	pop	r15
    25e0:	ef 90       	pop	r14
    25e2:	df 90       	pop	r13
    25e4:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    25e6:	0c 94 39 21 	jmp	0x4272	; 0x4272 <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    25ea:	81 2f       	mov	r24, r17
    25ec:	83 70       	andi	r24, 0x03	; 3
    25ee:	09 f0       	breq	.+2      	; 0x25f2 <process_action+0x232>
    25f0:	70 c0       	rjmp	.+224    	; 0x26d2 <process_action+0x312>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    25f2:	f1 10       	cpse	r15, r1
    25f4:	d3 c1       	rjmp	.+934    	; 0x299c <process_action+0x5dc>
                    uint8_t shift = action.layer_bitop.part*4;
    25f6:	20 2f       	mov	r18, r16
    25f8:	22 95       	swap	r18
    25fa:	26 95       	lsr	r18
    25fc:	27 70       	andi	r18, 0x07	; 7
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    25fe:	22 0f       	add	r18, r18
    2600:	22 0f       	add	r18, r18
    2602:	60 2f       	mov	r22, r16
    2604:	6f 70       	andi	r22, 0x0F	; 15
    2606:	86 2f       	mov	r24, r22
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	a0 e0       	ldi	r26, 0x00	; 0
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	6c 01       	movw	r12, r24
    2610:	7d 01       	movw	r14, r26
    2612:	02 2e       	mov	r0, r18
    2614:	04 c0       	rjmp	.+8      	; 0x261e <process_action+0x25e>
    2616:	cc 0c       	add	r12, r12
    2618:	dd 1c       	adc	r13, r13
    261a:	ee 1c       	adc	r14, r14
    261c:	ff 1c       	adc	r15, r15
    261e:	0a 94       	dec	r0
    2620:	d2 f7       	brpl	.-12     	; 0x2616 <process_action+0x256>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2622:	04 ff       	sbrs	r16, 4
    2624:	12 c0       	rjmp	.+36     	; 0x264a <process_action+0x28a>
    2626:	8f e0       	ldi	r24, 0x0F	; 15
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	a0 e0       	ldi	r26, 0x00	; 0
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	04 c0       	rjmp	.+8      	; 0x2638 <process_action+0x278>
    2630:	88 0f       	add	r24, r24
    2632:	99 1f       	adc	r25, r25
    2634:	aa 1f       	adc	r26, r26
    2636:	bb 1f       	adc	r27, r27
    2638:	2a 95       	dec	r18
    263a:	d2 f7       	brpl	.-12     	; 0x2630 <process_action+0x270>
    263c:	bc 01       	movw	r22, r24
    263e:	cd 01       	movw	r24, r26
    2640:	60 95       	com	r22
    2642:	70 95       	com	r23
    2644:	80 95       	com	r24
    2646:	90 95       	com	r25
    2648:	03 c0       	rjmp	.+6      	; 0x2650 <process_action+0x290>
    264a:	60 e0       	ldi	r22, 0x00	; 0
    264c:	70 e0       	ldi	r23, 0x00	; 0
    264e:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2650:	16 95       	lsr	r17
    2652:	16 95       	lsr	r17
    2654:	13 70       	andi	r17, 0x03	; 3
    2656:	12 30       	cpi	r17, 0x02	; 2
    2658:	b1 f0       	breq	.+44     	; 0x2686 <process_action+0x2c6>
    265a:	40 f5       	brcc	.+80     	; 0x26ac <process_action+0x2ec>
    265c:	6c 29       	or	r22, r12
    265e:	7d 29       	or	r23, r13
    2660:	8e 29       	or	r24, r14
    2662:	9f 29       	or	r25, r15
    2664:	11 30       	cpi	r17, 0x01	; 1
    2666:	31 f1       	breq	.+76     	; 0x26b4 <process_action+0x2f4>
            break;
#endif
        default:
            break;
    }
}
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	0f 90       	pop	r0
    2672:	df 91       	pop	r29
    2674:	cf 91       	pop	r28
    2676:	1f 91       	pop	r17
    2678:	0f 91       	pop	r16
    267a:	ff 90       	pop	r15
    267c:	ef 90       	pop	r14
    267e:	df 90       	pop	r13
    2680:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2682:	0c 94 89 19 	jmp	0x3312	; 0x3312 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2686:	6c 29       	or	r22, r12
    2688:	7d 29       	or	r23, r13
    268a:	8e 29       	or	r24, r14
    268c:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    268e:	0f 90       	pop	r0
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	0f 90       	pop	r0
    2698:	df 91       	pop	r29
    269a:	cf 91       	pop	r28
    269c:	1f 91       	pop	r17
    269e:	0f 91       	pop	r16
    26a0:	ff 90       	pop	r15
    26a2:	ef 90       	pop	r14
    26a4:	df 90       	pop	r13
    26a6:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    26a8:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    26ac:	0e 94 89 19 	call	0x3312	; 0x3312 <default_layer_and>
    26b0:	c7 01       	movw	r24, r14
    26b2:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    26b4:	0f 90       	pop	r0
    26b6:	0f 90       	pop	r0
    26b8:	0f 90       	pop	r0
    26ba:	0f 90       	pop	r0
    26bc:	0f 90       	pop	r0
    26be:	df 91       	pop	r29
    26c0:	cf 91       	pop	r28
    26c2:	1f 91       	pop	r17
    26c4:	0f 91       	pop	r16
    26c6:	ff 90       	pop	r15
    26c8:	ef 90       	pop	r14
    26ca:	df 90       	pop	r13
    26cc:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    26ce:	0c 94 6f 19 	jmp	0x32de	; 0x32de <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    26d2:	ff 20       	and	r15, r15
    26d4:	19 f0       	breq	.+6      	; 0x26dc <process_action+0x31c>
    26d6:	81 2f       	mov	r24, r17
    26d8:	81 70       	andi	r24, 0x01	; 1
    26da:	01 c0       	rjmp	.+2      	; 0x26de <process_action+0x31e>
    26dc:	86 95       	lsr	r24
    26de:	88 23       	and	r24, r24
    26e0:	09 f4       	brne	.+2      	; 0x26e4 <process_action+0x324>
    26e2:	5c c1       	rjmp	.+696    	; 0x299c <process_action+0x5dc>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    26e4:	20 2f       	mov	r18, r16
    26e6:	22 95       	swap	r18
    26e8:	26 95       	lsr	r18
    26ea:	27 70       	andi	r18, 0x07	; 7
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    26ec:	22 0f       	add	r18, r18
    26ee:	22 0f       	add	r18, r18
    26f0:	60 2f       	mov	r22, r16
    26f2:	6f 70       	andi	r22, 0x0F	; 15
    26f4:	86 2f       	mov	r24, r22
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	a0 e0       	ldi	r26, 0x00	; 0
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	6c 01       	movw	r12, r24
    26fe:	7d 01       	movw	r14, r26
    2700:	02 2e       	mov	r0, r18
    2702:	04 c0       	rjmp	.+8      	; 0x270c <process_action+0x34c>
    2704:	cc 0c       	add	r12, r12
    2706:	dd 1c       	adc	r13, r13
    2708:	ee 1c       	adc	r14, r14
    270a:	ff 1c       	adc	r15, r15
    270c:	0a 94       	dec	r0
    270e:	d2 f7       	brpl	.-12     	; 0x2704 <process_action+0x344>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2710:	04 ff       	sbrs	r16, 4
    2712:	12 c0       	rjmp	.+36     	; 0x2738 <process_action+0x378>
    2714:	8f e0       	ldi	r24, 0x0F	; 15
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	a0 e0       	ldi	r26, 0x00	; 0
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	04 c0       	rjmp	.+8      	; 0x2726 <process_action+0x366>
    271e:	88 0f       	add	r24, r24
    2720:	99 1f       	adc	r25, r25
    2722:	aa 1f       	adc	r26, r26
    2724:	bb 1f       	adc	r27, r27
    2726:	2a 95       	dec	r18
    2728:	d2 f7       	brpl	.-12     	; 0x271e <process_action+0x35e>
    272a:	bc 01       	movw	r22, r24
    272c:	cd 01       	movw	r24, r26
    272e:	60 95       	com	r22
    2730:	70 95       	com	r23
    2732:	80 95       	com	r24
    2734:	90 95       	com	r25
    2736:	03 c0       	rjmp	.+6      	; 0x273e <process_action+0x37e>
    2738:	60 e0       	ldi	r22, 0x00	; 0
    273a:	70 e0       	ldi	r23, 0x00	; 0
    273c:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    273e:	16 95       	lsr	r17
    2740:	16 95       	lsr	r17
    2742:	13 70       	andi	r17, 0x03	; 3
    2744:	12 30       	cpi	r17, 0x02	; 2
    2746:	b1 f0       	breq	.+44     	; 0x2774 <process_action+0x3b4>
    2748:	40 f5       	brcc	.+80     	; 0x279a <process_action+0x3da>
    274a:	6c 29       	or	r22, r12
    274c:	7d 29       	or	r23, r13
    274e:	8e 29       	or	r24, r14
    2750:	9f 29       	or	r25, r15
    2752:	11 30       	cpi	r17, 0x01	; 1
    2754:	31 f1       	breq	.+76     	; 0x27a2 <process_action+0x3e2>
            break;
#endif
        default:
            break;
    }
}
    2756:	0f 90       	pop	r0
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	df 91       	pop	r29
    2762:	cf 91       	pop	r28
    2764:	1f 91       	pop	r17
    2766:	0f 91       	pop	r16
    2768:	ff 90       	pop	r15
    276a:	ef 90       	pop	r14
    276c:	df 90       	pop	r13
    276e:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2770:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2774:	6c 29       	or	r22, r12
    2776:	7d 29       	or	r23, r13
    2778:	8e 29       	or	r24, r14
    277a:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	df 91       	pop	r29
    2788:	cf 91       	pop	r28
    278a:	1f 91       	pop	r17
    278c:	0f 91       	pop	r16
    278e:	ff 90       	pop	r15
    2790:	ef 90       	pop	r14
    2792:	df 90       	pop	r13
    2794:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2796:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    279a:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <layer_and>
    279e:	c7 01       	movw	r24, r14
    27a0:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    27a2:	0f 90       	pop	r0
    27a4:	0f 90       	pop	r0
    27a6:	0f 90       	pop	r0
    27a8:	0f 90       	pop	r0
    27aa:	0f 90       	pop	r0
    27ac:	df 91       	pop	r29
    27ae:	cf 91       	pop	r28
    27b0:	1f 91       	pop	r17
    27b2:	0f 91       	pop	r16
    27b4:	ff 90       	pop	r15
    27b6:	ef 90       	pop	r14
    27b8:	df 90       	pop	r13
    27ba:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    27bc:	0c 94 3e 1a 	jmp	0x347c	; 0x347c <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    27c0:	00 3f       	cpi	r16, 0xF0	; 240
    27c2:	c1 f1       	breq	.+112    	; 0x2834 <process_action+0x474>
    27c4:	28 f4       	brcc	.+10     	; 0x27d0 <process_action+0x410>
    27c6:	80 e4       	ldi	r24, 0x40	; 64
    27c8:	80 0f       	add	r24, r16
    27ca:	80 32       	cpi	r24, 0x20	; 32
    27cc:	50 f0       	brcs	.+20     	; 0x27e2 <process_action+0x422>
    27ce:	96 c0       	rjmp	.+300    	; 0x28fc <process_action+0x53c>
    27d0:	02 3f       	cpi	r16, 0xF2	; 242
    27d2:	09 f4       	brne	.+2      	; 0x27d6 <process_action+0x416>
    27d4:	5e c0       	rjmp	.+188    	; 0x2892 <process_action+0x4d2>
    27d6:	08 f4       	brcc	.+2      	; 0x27da <process_action+0x41a>
    27d8:	49 c0       	rjmp	.+146    	; 0x286c <process_action+0x4ac>
    27da:	03 3f       	cpi	r16, 0xF3	; 243
    27dc:	09 f4       	brne	.+2      	; 0x27e0 <process_action+0x420>
    27de:	6c c0       	rjmp	.+216    	; 0x28b8 <process_action+0x4f8>
    27e0:	8d c0       	rjmp	.+282    	; 0x28fc <process_action+0x53c>
    27e2:	f0 2f       	mov	r31, r16
    27e4:	f0 71       	andi	r31, 0x10	; 16
    27e6:	ef 2e       	mov	r14, r31
    27e8:	81 2f       	mov	r24, r17
    27ea:	8f 71       	andi	r24, 0x1F	; 31
                case 0xc0 ... 0xdf:
                    /* layer On/Off with modifiers */
                    if (event.pressed) {
    27ec:	ff 20       	and	r15, r15
    27ee:	51 f0       	breq	.+20     	; 0x2804 <process_action+0x444>
                        layer_on(action.layer_tap.val);
    27f0:	0e 94 d7 19 	call	0x33ae	; 0x33ae <layer_on>
                        register_mods((action.layer_tap.code & 0x10) ?
    27f4:	80 2f       	mov	r24, r16
    27f6:	ee 20       	and	r14, r14
    27f8:	19 f0       	breq	.+6      	; 0x2800 <process_action+0x440>
    27fa:	82 95       	swap	r24
    27fc:	80 7f       	andi	r24, 0xF0	; 240
    27fe:	8b ce       	rjmp	.-746    	; 0x2516 <process_action+0x156>
    2800:	8f 70       	andi	r24, 0x0F	; 15
    2802:	89 ce       	rjmp	.-750    	; 0x2516 <process_action+0x156>
                                (action.layer_tap.code & 0x0f) << 4 :
                                (action.layer_tap.code & 0x0f));
                    } else {
                        layer_off(action.layer_tap.val);
    2804:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <layer_off>
                        unregister_mods((action.layer_tap.code & 0x10) ?
    2808:	80 2f       	mov	r24, r16
    280a:	ee 20       	and	r14, r14
    280c:	19 f0       	breq	.+6      	; 0x2814 <process_action+0x454>
    280e:	82 95       	swap	r24
    2810:	80 7f       	andi	r24, 0xF0	; 240
    2812:	01 c0       	rjmp	.+2      	; 0x2816 <process_action+0x456>
    2814:	8f 70       	andi	r24, 0x0F	; 15
            break;
#endif
        default:
            break;
    }
}
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	0f 90       	pop	r0
    2820:	df 91       	pop	r29
    2822:	cf 91       	pop	r28
    2824:	1f 91       	pop	r17
    2826:	0f 91       	pop	r16
    2828:	ff 90       	pop	r15
    282a:	ef 90       	pop	r14
    282c:	df 90       	pop	r13
    282e:	cf 90       	pop	r12
                        register_mods((action.layer_tap.code & 0x10) ?
                                (action.layer_tap.code & 0x0f) << 4 :
                                (action.layer_tap.code & 0x0f));
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods((action.layer_tap.code & 0x10) ?
    2830:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <unregister_mods>
                                (action.layer_tap.code & 0x0f));
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2834:	ff 20       	and	r15, r15
    2836:	a9 f0       	breq	.+42     	; 0x2862 <process_action+0x4a2>
                        if (tap_count < TAPPING_TOGGLE) {
    2838:	84 e0       	ldi	r24, 0x04	; 4
    283a:	8e 15       	cp	r24, r14
    283c:	08 f4       	brcc	.+2      	; 0x2840 <process_action+0x480>
    283e:	ae c0       	rjmp	.+348    	; 0x299c <process_action+0x5dc>
                            layer_invert(action.layer_tap.val);
    2840:	81 2f       	mov	r24, r17
    2842:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2844:	0f 90       	pop	r0
    2846:	0f 90       	pop	r0
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	df 91       	pop	r29
    2850:	cf 91       	pop	r28
    2852:	1f 91       	pop	r17
    2854:	0f 91       	pop	r16
    2856:	ff 90       	pop	r15
    2858:	ef 90       	pop	r14
    285a:	df 90       	pop	r13
    285c:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    285e:	0c 94 1d 1a 	jmp	0x343a	; 0x343a <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2862:	e5 e0       	ldi	r30, 0x05	; 5
    2864:	ee 15       	cp	r30, r14
    2866:	08 f4       	brcc	.+2      	; 0x286a <process_action+0x4aa>
    2868:	99 c0       	rjmp	.+306    	; 0x299c <process_action+0x5dc>
    286a:	ea cf       	rjmp	.-44     	; 0x2840 <process_action+0x480>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    286c:	ff 20       	and	r15, r15
    286e:	99 f0       	breq	.+38     	; 0x2896 <process_action+0x4d6>
    2870:	81 2f       	mov	r24, r17
    2872:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2874:	0f 90       	pop	r0
    2876:	0f 90       	pop	r0
    2878:	0f 90       	pop	r0
    287a:	0f 90       	pop	r0
    287c:	0f 90       	pop	r0
    287e:	df 91       	pop	r29
    2880:	cf 91       	pop	r28
    2882:	1f 91       	pop	r17
    2884:	0f 91       	pop	r16
    2886:	ff 90       	pop	r15
    2888:	ef 90       	pop	r14
    288a:	df 90       	pop	r13
    288c:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    288e:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2892:	ff 20       	and	r15, r15
    2894:	69 f3       	breq	.-38     	; 0x2870 <process_action+0x4b0>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2896:	81 2f       	mov	r24, r17
    2898:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    289a:	0f 90       	pop	r0
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	0f 90       	pop	r0
    28a2:	0f 90       	pop	r0
    28a4:	df 91       	pop	r29
    28a6:	cf 91       	pop	r28
    28a8:	1f 91       	pop	r17
    28aa:	0f 91       	pop	r16
    28ac:	ff 90       	pop	r15
    28ae:	ef 90       	pop	r14
    28b0:	df 90       	pop	r13
    28b2:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    28b4:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    28b8:	ff 20       	and	r15, r15
    28ba:	89 f0       	breq	.+34     	; 0x28de <process_action+0x51e>
    28bc:	81 2f       	mov	r24, r17
    28be:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    28c0:	0f 90       	pop	r0
    28c2:	0f 90       	pop	r0
    28c4:	0f 90       	pop	r0
    28c6:	0f 90       	pop	r0
    28c8:	0f 90       	pop	r0
    28ca:	df 91       	pop	r29
    28cc:	cf 91       	pop	r28
    28ce:	1f 91       	pop	r17
    28d0:	0f 91       	pop	r16
    28d2:	ff 90       	pop	r15
    28d4:	ef 90       	pop	r14
    28d6:	df 90       	pop	r13
    28d8:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    28da:	0c 94 c2 19 	jmp	0x3384	; 0x3384 <layer_move>
            break;
#endif
        default:
            break;
    }
}
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	0f 90       	pop	r0
    28e6:	0f 90       	pop	r0
    28e8:	df 91       	pop	r29
    28ea:	cf 91       	pop	r28
    28ec:	1f 91       	pop	r17
    28ee:	0f 91       	pop	r16
    28f0:	ff 90       	pop	r15
    28f2:	ef 90       	pop	r14
    28f4:	df 90       	pop	r13
    28f6:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    28f8:	0c 94 bd 19 	jmp	0x337a	; 0x337a <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    28fc:	ff 20       	and	r15, r15
    28fe:	99 f0       	breq	.+38     	; 0x2926 <process_action+0x566>
                        if (tap_count > 0) {
    2900:	ee 20       	and	r14, r14
    2902:	09 f4       	brne	.+2      	; 0x2906 <process_action+0x546>
    2904:	b5 cf       	rjmp	.-150    	; 0x2870 <process_action+0x4b0>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2906:	80 2f       	mov	r24, r16
            break;
#endif
        default:
            break;
    }
}
    2908:	0f 90       	pop	r0
    290a:	0f 90       	pop	r0
    290c:	0f 90       	pop	r0
    290e:	0f 90       	pop	r0
    2910:	0f 90       	pop	r0
    2912:	df 91       	pop	r29
    2914:	cf 91       	pop	r28
    2916:	1f 91       	pop	r17
    2918:	0f 91       	pop	r16
    291a:	ff 90       	pop	r15
    291c:	ef 90       	pop	r14
    291e:	df 90       	pop	r13
    2920:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2922:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    2926:	ee 20       	and	r14, r14
    2928:	09 f4       	brne	.+2      	; 0x292c <process_action+0x56c>
    292a:	b5 cf       	rjmp	.-150    	; 0x2896 <process_action+0x4d6>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    292c:	80 2f       	mov	r24, r16
            break;
#endif
        default:
            break;
    }
}
    292e:	0f 90       	pop	r0
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	df 91       	pop	r29
    293a:	cf 91       	pop	r28
    293c:	1f 91       	pop	r17
    293e:	0f 91       	pop	r16
    2940:	ff 90       	pop	r15
    2942:	ef 90       	pop	r14
    2944:	df 90       	pop	r13
    2946:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2948:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    294c:	41 2f       	mov	r20, r17
    294e:	4f 70       	andi	r20, 0x0F	; 15
    2950:	60 2f       	mov	r22, r16
    2952:	c6 01       	movw	r24, r12
    2954:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    2958:	0f 90       	pop	r0
    295a:	0f 90       	pop	r0
    295c:	0f 90       	pop	r0
    295e:	0f 90       	pop	r0
    2960:	0f 90       	pop	r0
    2962:	df 91       	pop	r29
    2964:	cf 91       	pop	r28
    2966:	1f 91       	pop	r17
    2968:	0f 91       	pop	r16
    296a:	ff 90       	pop	r15
    296c:	ef 90       	pop	r14
    296e:	df 90       	pop	r13
    2970:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2972:	0c 94 bf 18 	jmp	0x317e	; 0x317e <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2976:	41 2f       	mov	r20, r17
    2978:	4f 70       	andi	r20, 0x0F	; 15
    297a:	60 2f       	mov	r22, r16
    297c:	c6 01       	movw	r24, r12
            break;
#endif
        default:
            break;
    }
}
    297e:	0f 90       	pop	r0
    2980:	0f 90       	pop	r0
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	df 91       	pop	r29
    298a:	cf 91       	pop	r28
    298c:	1f 91       	pop	r17
    298e:	0f 91       	pop	r16
    2990:	ff 90       	pop	r15
    2992:	ef 90       	pop	r14
    2994:	df 90       	pop	r13
    2996:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2998:	0c 94 5d 1d 	jmp	0x3aba	; 0x3aba <action_function>
            break;
#endif
        default:
            break;
    }
}
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	0f 90       	pop	r0
    29a2:	0f 90       	pop	r0
    29a4:	0f 90       	pop	r0
    29a6:	df 91       	pop	r29
    29a8:	cf 91       	pop	r28
    29aa:	1f 91       	pop	r17
    29ac:	0f 91       	pop	r16
    29ae:	ff 90       	pop	r15
    29b0:	ef 90       	pop	r14
    29b2:	df 90       	pop	r13
    29b4:	cf 90       	pop	r12
    29b6:	08 95       	ret

000029b8 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    29b8:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <clear_weak_mods>
    clear_keys();
    29bc:	0e 94 2d 1b 	call	0x365a	; 0x365a <clear_keys>
    send_keyboard_report();
    29c0:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    29c4:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <mousekey_clear>
    mousekey_send();
    29c8:	0e 94 39 21 	call	0x4272	; 0x4272 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <host_system_send>
    host_consumer_send(0);
    29d4:	80 e0       	ldi	r24, 0x00	; 0
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <host_consumer_send>

000029dc <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    29dc:	0e 94 4e 1b 	call	0x369c	; 0x369c <clear_mods>
    clear_keyboard_but_mods();
    29e0:	0c 94 dc 14 	jmp	0x29b8	; 0x29b8 <clear_keyboard_but_mods>

000029e4 <is_tap_key>:
    host_consumer_send(0);
#endif
}

bool is_tap_key(keyevent_t event)
{
    29e4:	1f 93       	push	r17
    29e6:	cf 93       	push	r28
    29e8:	df 93       	push	r29
    29ea:	00 d0       	rcall	.+0      	; 0x29ec <is_tap_key+0x8>
    29ec:	00 d0       	rcall	.+0      	; 0x29ee <is_tap_key+0xa>
    29ee:	1f 92       	push	r1
    29f0:	cd b7       	in	r28, 0x3d	; 61
    29f2:	de b7       	in	r29, 0x3e	; 62
    29f4:	94 2f       	mov	r25, r20
    29f6:	49 83       	std	Y+1, r20	; 0x01
    29f8:	25 2f       	mov	r18, r21
    29fa:	5a 83       	std	Y+2, r21	; 0x02
    29fc:	6b 83       	std	Y+3, r22	; 0x03
    29fe:	7c 83       	std	Y+4, r23	; 0x04
    2a00:	8d 83       	std	Y+5, r24	; 0x05
    2a02:	4c 81       	ldd	r20, Y+4	; 0x04
    2a04:	5d 81       	ldd	r21, Y+5	; 0x05
    2a06:	45 2b       	or	r20, r21
    2a08:	31 f0       	breq	.+12     	; 0x2a16 <is_tap_key+0x32>
    2a0a:	2f 3f       	cpi	r18, 0xFF	; 255
    2a0c:	31 f4       	brne	.+12     	; 0x2a1a <is_tap_key+0x36>
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	9f 3f       	cpi	r25, 0xFF	; 255
    2a12:	19 f4       	brne	.+6      	; 0x2a1a <is_tap_key+0x36>
    2a14:	03 c0       	rjmp	.+6      	; 0x2a1c <is_tap_key+0x38>
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	01 c0       	rjmp	.+2      	; 0x2a1c <is_tap_key+0x38>
    2a1a:	80 e0       	ldi	r24, 0x00	; 0
    if (IS_NOEVENT(event)) { return false; }
    2a1c:	18 2f       	mov	r17, r24
    2a1e:	11 70       	andi	r17, 0x01	; 1
    2a20:	80 fd       	sbrc	r24, 0
    2a22:	31 c0       	rjmp	.+98     	; 0x2a86 <is_tap_key+0xa2>

    action_t action = layer_switch_get_action(event);
    2a24:	49 81       	ldd	r20, Y+1	; 0x01
    2a26:	5a 81       	ldd	r21, Y+2	; 0x02
    2a28:	6b 81       	ldd	r22, Y+3	; 0x03
    2a2a:	7c 81       	ldd	r23, Y+4	; 0x04
    2a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2e:	0e 94 75 1a 	call	0x34ea	; 0x34ea <layer_switch_get_action>

    switch (action.kind.id) {
    2a32:	29 2f       	mov	r18, r25
    2a34:	22 95       	swap	r18
    2a36:	2f 70       	andi	r18, 0x0F	; 15
    2a38:	2c 30       	cpi	r18, 0x0C	; 12
    2a3a:	30 f4       	brcc	.+12     	; 0x2a48 <is_tap_key+0x64>
    2a3c:	2a 30       	cpi	r18, 0x0A	; 10
    2a3e:	a0 f4       	brcc	.+40     	; 0x2a68 <is_tap_key+0x84>
    2a40:	22 50       	subi	r18, 0x02	; 2
    2a42:	22 30       	cpi	r18, 0x02	; 2
    2a44:	30 f0       	brcs	.+12     	; 0x2a52 <is_tap_key+0x6e>
    2a46:	22 c0       	rjmp	.+68     	; 0x2a8c <is_tap_key+0xa8>
    2a48:	2c 30       	cpi	r18, 0x0C	; 12
    2a4a:	c9 f0       	breq	.+50     	; 0x2a7e <is_tap_key+0x9a>
    2a4c:	2f 30       	cpi	r18, 0x0F	; 15
    2a4e:	b9 f0       	breq	.+46     	; 0x2a7e <is_tap_key+0x9a>
    2a50:	1d c0       	rjmp	.+58     	; 0x2a8c <is_tap_key+0xa8>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            switch (action.key.code) {
    2a52:	85 3a       	cpi	r24, 0xA5	; 165
    2a54:	28 f4       	brcc	.+10     	; 0x2a60 <is_tap_key+0x7c>
    2a56:	84 30       	cpi	r24, 0x04	; 4
    2a58:	c0 f4       	brcc	.+48     	; 0x2a8a <is_tap_key+0xa6>
    2a5a:	82 30       	cpi	r24, 0x02	; 2
    2a5c:	28 f4       	brcc	.+10     	; 0x2a68 <is_tap_key+0x84>
    2a5e:	15 c0       	rjmp	.+42     	; 0x2a8a <is_tap_key+0xa6>
    2a60:	90 e2       	ldi	r25, 0x20	; 32
    2a62:	98 0f       	add	r25, r24
    2a64:	98 30       	cpi	r25, 0x08	; 8
    2a66:	88 f0       	brcs	.+34     	; 0x2a8a <is_tap_key+0xa6>
                case KC_LCTRL ... KC_RGUI:              // tap key
                    return true;
            }
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2a68:	88 3e       	cpi	r24, 0xE8	; 232
    2a6a:	30 f4       	brcc	.+12     	; 0x2a78 <is_tap_key+0x94>
    2a6c:	80 3e       	cpi	r24, 0xE0	; 224
    2a6e:	68 f4       	brcc	.+26     	; 0x2a8a <is_tap_key+0xa6>
    2a70:	84 50       	subi	r24, 0x04	; 4
    2a72:	81 3a       	cpi	r24, 0xA1	; 161
    2a74:	58 f4       	brcc	.+22     	; 0x2a8c <is_tap_key+0xa8>
    2a76:	09 c0       	rjmp	.+18     	; 0x2a8a <is_tap_key+0xa6>
    2a78:	80 3f       	cpi	r24, 0xF0	; 240
    2a7a:	41 f4       	brne	.+16     	; 0x2a8c <is_tap_key+0xa8>
    2a7c:	06 c0       	rjmp	.+12     	; 0x2a8a <is_tap_key+0xa6>
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2a7e:	93 fb       	bst	r25, 3
    2a80:	11 27       	eor	r17, r17
    2a82:	10 f9       	bld	r17, 0
    2a84:	03 c0       	rjmp	.+6      	; 0x2a8c <is_tap_key+0xa8>
#endif
}

bool is_tap_key(keyevent_t event)
{
    if (IS_NOEVENT(event)) { return false; }
    2a86:	10 e0       	ldi	r17, 0x00	; 0
    2a88:	01 c0       	rjmp	.+2      	; 0x2a8c <is_tap_key+0xa8>
            switch (action.key.code) {
                case MODS_ONESHOT:
                case MODS_TAP_TOGGLE:
                case KC_A ... KC_EXSEL:                 // tap key
                case KC_LCTRL ... KC_RGUI:              // tap key
                    return true;
    2a8a:	11 e0       	ldi	r17, 0x01	; 1
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2a8c:	81 2f       	mov	r24, r17
    2a8e:	0f 90       	pop	r0
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	df 91       	pop	r29
    2a9a:	cf 91       	pop	r28
    2a9c:	1f 91       	pop	r17
    2a9e:	08 95       	ret

00002aa0 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2aa0:	cf 93       	push	r28
    2aa2:	df 93       	push	r29
    2aa4:	00 d0       	rcall	.+0      	; 0x2aa6 <debug_event+0x6>
    2aa6:	00 d0       	rcall	.+0      	; 0x2aa8 <debug_event+0x8>
    2aa8:	1f 92       	push	r1
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2aae:	0f 90       	pop	r0
    2ab0:	0f 90       	pop	r0
    2ab2:	0f 90       	pop	r0
    2ab4:	0f 90       	pop	r0
    2ab6:	0f 90       	pop	r0
    2ab8:	df 91       	pop	r29
    2aba:	cf 91       	pop	r28
    2abc:	08 95       	ret

00002abe <debug_record>:

void debug_record(keyrecord_t record)
{
    2abe:	cf 93       	push	r28
    2ac0:	df 93       	push	r29
    2ac2:	00 d0       	rcall	.+0      	; 0x2ac4 <debug_record+0x6>
    2ac4:	00 d0       	rcall	.+0      	; 0x2ac6 <debug_record+0x8>
    2ac6:	00 d0       	rcall	.+0      	; 0x2ac8 <debug_record+0xa>
    2ac8:	cd b7       	in	r28, 0x3d	; 61
    2aca:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2acc:	26 96       	adiw	r28, 0x06	; 6
    2ace:	0f b6       	in	r0, 0x3f	; 63
    2ad0:	f8 94       	cli
    2ad2:	de bf       	out	0x3e, r29	; 62
    2ad4:	0f be       	out	0x3f, r0	; 63
    2ad6:	cd bf       	out	0x3d, r28	; 61
    2ad8:	df 91       	pop	r29
    2ada:	cf 91       	pop	r28
    2adc:	08 95       	ret

00002ade <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2ade:	cf 93       	push	r28
    2ae0:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2ae2:	c0 91 63 01 	lds	r28, 0x0163	; 0x800163 <waiting_buffer_tail>
    2ae6:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <waiting_buffer_head>
    2aea:	c8 17       	cp	r28, r24
    2aec:	a1 f0       	breq	.+40     	; 0x2b16 <debug_waiting_buffer+0x38>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2aee:	d0 e0       	ldi	r29, 0x00	; 0
    2af0:	ce 01       	movw	r24, r28
    2af2:	66 e0       	ldi	r22, 0x06	; 6
    2af4:	70 e0       	ldi	r23, 0x00	; 0
    2af6:	0e 94 b4 28 	call	0x5168	; 0x5168 <__mulhi3>
    2afa:	fc 01       	movw	r30, r24
    2afc:	eb 59       	subi	r30, 0x9B	; 155
    2afe:	fe 4f       	sbci	r31, 0xFE	; 254
    2b00:	40 81       	ld	r20, Z
    2b02:	51 81       	ldd	r21, Z+1	; 0x01
    2b04:	62 81       	ldd	r22, Z+2	; 0x02
    2b06:	73 81       	ldd	r23, Z+3	; 0x03
    2b08:	84 81       	ldd	r24, Z+4	; 0x04
    2b0a:	95 81       	ldd	r25, Z+5	; 0x05
    2b0c:	0e 94 5f 15 	call	0x2abe	; 0x2abe <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2b10:	21 96       	adiw	r28, 0x01	; 1
    2b12:	c7 70       	andi	r28, 0x07	; 7
    2b14:	e8 cf       	rjmp	.-48     	; 0x2ae6 <debug_waiting_buffer+0x8>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2b16:	df 91       	pop	r29
    2b18:	cf 91       	pop	r28
    2b1a:	08 95       	ret

00002b1c <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2b1c:	40 91 95 01 	lds	r20, 0x0195	; 0x800195 <tapping_key>
    2b20:	50 91 96 01 	lds	r21, 0x0196	; 0x800196 <tapping_key+0x1>
    2b24:	60 91 97 01 	lds	r22, 0x0197	; 0x800197 <tapping_key+0x2>
    2b28:	70 91 98 01 	lds	r23, 0x0198	; 0x800198 <tapping_key+0x3>
    2b2c:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <tapping_key+0x4>
    2b30:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <tapping_key+0x5>
    2b34:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <debug_record>

00002b38 <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    2b38:	1f 93       	push	r17
    2b3a:	cf 93       	push	r28
    2b3c:	df 93       	push	r29
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2b3e:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <tapping_key+0x5>
    2b42:	82 95       	swap	r24
    2b44:	8f 70       	andi	r24, 0x0F	; 15
    2b46:	09 f0       	breq	.+2      	; 0x2b4a <waiting_buffer_scan_tap+0x12>
    2b48:	66 c0       	rjmp	.+204    	; 0x2c16 <waiting_buffer_scan_tap+0xde>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2b4a:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <tapping_key+0x2>
    2b4e:	88 23       	and	r24, r24
    2b50:	09 f4       	brne	.+2      	; 0x2b54 <waiting_buffer_scan_tap+0x1c>
    2b52:	61 c0       	rjmp	.+194    	; 0x2c16 <waiting_buffer_scan_tap+0xde>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2b54:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <waiting_buffer_tail>
    2b58:	10 91 64 01 	lds	r17, 0x0164	; 0x800164 <waiting_buffer_head>
    2b5c:	c0 91 95 01 	lds	r28, 0x0195	; 0x800195 <tapping_key>
    2b60:	d0 91 96 01 	lds	r29, 0x0196	; 0x800196 <tapping_key+0x1>
    2b64:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <tapping_key+0x3>
    2b68:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <tapping_key+0x4>
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	cf 3f       	cpi	r28, 0xFF	; 255
    2b70:	09 f0       	breq	.+2      	; 0x2b74 <waiting_buffer_scan_tap+0x3c>
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	48 2f       	mov	r20, r24
    2b76:	21 17       	cp	r18, r17
    2b78:	09 f4       	brne	.+2      	; 0x2b7c <waiting_buffer_scan_tap+0x44>
    2b7a:	4d c0       	rjmp	.+154    	; 0x2c16 <waiting_buffer_scan_tap+0xde>
    2b7c:	30 97       	sbiw	r30, 0x00	; 0
    2b7e:	21 f0       	breq	.+8      	; 0x2b88 <waiting_buffer_scan_tap+0x50>
    2b80:	df 3f       	cpi	r29, 0xFF	; 255
    2b82:	21 f0       	breq	.+8      	; 0x2b8c <waiting_buffer_scan_tap+0x54>
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	03 c0       	rjmp	.+6      	; 0x2b8e <waiting_buffer_scan_tap+0x56>
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	01 c0       	rjmp	.+2      	; 0x2b8e <waiting_buffer_scan_tap+0x56>
    2b8c:	84 2f       	mov	r24, r20
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2b90:	80 fd       	sbrc	r24, 0
    2b92:	3d c0       	rjmp	.+122    	; 0x2c0e <waiting_buffer_scan_tap+0xd6>
    2b94:	c9 01       	movw	r24, r18
    2b96:	66 e0       	ldi	r22, 0x06	; 6
    2b98:	70 e0       	ldi	r23, 0x00	; 0
    2b9a:	0e 94 b4 28 	call	0x5168	; 0x5168 <__mulhi3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	ab 59       	subi	r26, 0x9B	; 155
    2ba2:	be 4f       	sbci	r27, 0xFE	; 254
    2ba4:	11 96       	adiw	r26, 0x01	; 1
    2ba6:	8c 91       	ld	r24, X
    2ba8:	11 97       	sbiw	r26, 0x01	; 1
    2baa:	8d 13       	cpse	r24, r29
    2bac:	30 c0       	rjmp	.+96     	; 0x2c0e <waiting_buffer_scan_tap+0xd6>
    2bae:	8c 91       	ld	r24, X
    2bb0:	8c 13       	cpse	r24, r28
    2bb2:	2d c0       	rjmp	.+90     	; 0x2c0e <waiting_buffer_scan_tap+0xd6>
    2bb4:	12 96       	adiw	r26, 0x02	; 2
    2bb6:	8c 91       	ld	r24, X
    2bb8:	12 97       	sbiw	r26, 0x02	; 2
    2bba:	81 11       	cpse	r24, r1
    2bbc:	28 c0       	rjmp	.+80     	; 0x2c0e <waiting_buffer_scan_tap+0xd6>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2bbe:	13 96       	adiw	r26, 0x03	; 3
    2bc0:	8d 91       	ld	r24, X+
    2bc2:	9c 91       	ld	r25, X
    2bc4:	14 97       	sbiw	r26, 0x04	; 4
    2bc6:	8e 17       	cp	r24, r30
    2bc8:	9f 07       	cpc	r25, r31
    2bca:	08 f4       	brcc	.+2      	; 0x2bce <waiting_buffer_scan_tap+0x96>
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	8e 1b       	sub	r24, r30
    2bd0:	9f 0b       	sbc	r25, r31
    2bd2:	88 3c       	cpi	r24, 0xC8	; 200
    2bd4:	91 05       	cpc	r25, r1
    2bd6:	d8 f4       	brcc	.+54     	; 0x2c0e <waiting_buffer_scan_tap+0xd6>
            tapping_key.tap.count = 1;
    2bd8:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <tapping_key+0x5>
    2bdc:	8f 70       	andi	r24, 0x0F	; 15
    2bde:	80 61       	ori	r24, 0x10	; 16
    2be0:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <tapping_key+0x5>
            waiting_buffer[i].tap.count = 1;
    2be4:	c9 01       	movw	r24, r18
    2be6:	66 e0       	ldi	r22, 0x06	; 6
    2be8:	70 e0       	ldi	r23, 0x00	; 0
    2bea:	0e 94 b4 28 	call	0x5168	; 0x5168 <__mulhi3>
    2bee:	fc 01       	movw	r30, r24
    2bf0:	e6 59       	subi	r30, 0x96	; 150
    2bf2:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf4:	90 81       	ld	r25, Z
    2bf6:	9f 70       	andi	r25, 0x0F	; 15
    2bf8:	90 61       	ori	r25, 0x10	; 16
    2bfa:	90 83       	st	Z, r25
            process_action(&tapping_key);
    2bfc:	85 e9       	ldi	r24, 0x95	; 149
    2bfe:	91 e0       	ldi	r25, 0x01	; 1
    2c00:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2c04:	df 91       	pop	r29
    2c06:	cf 91       	pop	r28
    2c08:	1f 91       	pop	r17
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    2c0a:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2c0e:	2f 5f       	subi	r18, 0xFF	; 255
    2c10:	3f 4f       	sbci	r19, 0xFF	; 255
    2c12:	27 70       	andi	r18, 0x07	; 7
    2c14:	b0 cf       	rjmp	.-160    	; 0x2b76 <waiting_buffer_scan_tap+0x3e>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2c16:	df 91       	pop	r29
    2c18:	cf 91       	pop	r28
    2c1a:	1f 91       	pop	r17
    2c1c:	08 95       	ret

00002c1e <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    2c1e:	af 92       	push	r10
    2c20:	bf 92       	push	r11
    2c22:	cf 92       	push	r12
    2c24:	df 92       	push	r13
    2c26:	ef 92       	push	r14
    2c28:	ff 92       	push	r15
    2c2a:	0f 93       	push	r16
    2c2c:	1f 93       	push	r17
    2c2e:	cf 93       	push	r28
    2c30:	df 93       	push	r29
    2c32:	cd b7       	in	r28, 0x3d	; 61
    2c34:	de b7       	in	r29, 0x3e	; 62
    2c36:	61 97       	sbiw	r28, 0x11	; 17
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	f8 94       	cli
    2c3c:	de bf       	out	0x3e, r29	; 62
    2c3e:	0f be       	out	0x3f, r0	; 63
    2c40:	cd bf       	out	0x3d, r28	; 61
    2c42:	7c 01       	movw	r14, r24
    keyevent_t event = keyp->event;
    2c44:	85 e0       	ldi	r24, 0x05	; 5
    2c46:	f7 01       	movw	r30, r14
    2c48:	de 01       	movw	r26, r28
    2c4a:	1d 96       	adiw	r26, 0x0d	; 13
    2c4c:	01 90       	ld	r0, Z+
    2c4e:	0d 92       	st	X+, r0
    2c50:	8a 95       	dec	r24
    2c52:	e1 f7       	brne	.-8      	; 0x2c4c <process_tapping+0x2e>
    2c54:	d7 01       	movw	r26, r14
    2c56:	4c 91       	ld	r20, X
    2c58:	11 96       	adiw	r26, 0x01	; 1
    2c5a:	2c 91       	ld	r18, X
    2c5c:	11 97       	sbiw	r26, 0x01	; 1
    2c5e:	12 96       	adiw	r26, 0x02	; 2
    2c60:	dc 90       	ld	r13, X
    2c62:	12 97       	sbiw	r26, 0x02	; 2
    2c64:	13 96       	adiw	r26, 0x03	; 3
    2c66:	0d 91       	ld	r16, X+
    2c68:	1c 91       	ld	r17, X
    2c6a:	14 97       	sbiw	r26, 0x04	; 4
    2c6c:	50 91 95 01 	lds	r21, 0x0195	; 0x800195 <tapping_key>
    2c70:	60 91 96 01 	lds	r22, 0x0196	; 0x800196 <tapping_key+0x1>
    2c74:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <tapping_key+0x3>
    2c78:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <tapping_key+0x4>
    2c7c:	00 97       	sbiw	r24, 0x00	; 0
    2c7e:	31 f0       	breq	.+12     	; 0x2c8c <process_tapping+0x6e>
    2c80:	6f 3f       	cpi	r22, 0xFF	; 255
    2c82:	31 f4       	brne	.+12     	; 0x2c90 <process_tapping+0x72>
    2c84:	31 e0       	ldi	r19, 0x01	; 1
    2c86:	5f 3f       	cpi	r21, 0xFF	; 255
    2c88:	19 f4       	brne	.+6      	; 0x2c90 <process_tapping+0x72>
    2c8a:	03 c0       	rjmp	.+6      	; 0x2c92 <process_tapping+0x74>
    2c8c:	31 e0       	ldi	r19, 0x01	; 1
    2c8e:	01 c0       	rjmp	.+2      	; 0x2c92 <process_tapping+0x74>
    2c90:	30 e0       	ldi	r19, 0x00	; 0

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2c92:	b3 2f       	mov	r27, r19
    2c94:	b1 70       	andi	r27, 0x01	; 1
    2c96:	bb 2e       	mov	r11, r27
    2c98:	30 fd       	sbrc	r19, 0
    2c9a:	76 c1       	rjmp	.+748    	; 0x2f88 <process_tapping+0x36a>
    2c9c:	a0 90 97 01 	lds	r10, 0x0197	; 0x800197 <tapping_key+0x2>
    2ca0:	aa 20       	and	r10, r10
    2ca2:	09 f4       	brne	.+2      	; 0x2ca6 <process_tapping+0x88>
    2ca4:	d2 c0       	rjmp	.+420    	; 0x2e4a <process_tapping+0x22c>
    2ca6:	30 91 9a 01 	lds	r19, 0x019A	; 0x80019a <tapping_key+0x5>
        if (WITHIN_TAPPING_TERM(event)) {
    2caa:	08 17       	cp	r16, r24
    2cac:	19 07       	cpc	r17, r25
    2cae:	28 f0       	brcs	.+10     	; 0x2cba <process_tapping+0x9c>
    2cb0:	f8 01       	movw	r30, r16
    2cb2:	e8 1b       	sub	r30, r24
    2cb4:	f9 0b       	sbc	r31, r25
    2cb6:	cf 01       	movw	r24, r30
    2cb8:	04 c0       	rjmp	.+8      	; 0x2cc2 <process_tapping+0xa4>
    2cba:	80 95       	com	r24
    2cbc:	90 95       	com	r25
    2cbe:	80 0f       	add	r24, r16
    2cc0:	91 1f       	adc	r25, r17
    2cc2:	cc 24       	eor	r12, r12
    2cc4:	c3 94       	inc	r12
    2cc6:	88 3c       	cpi	r24, 0xC8	; 200
    2cc8:	91 05       	cpc	r25, r1
    2cca:	88 f0       	brcs	.+34     	; 0x2cee <process_tapping+0xd0>
    2ccc:	c1 2c       	mov	r12, r1
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    2cce:	30 7f       	andi	r19, 0xF0	; 240
    2cd0:	09 f0       	breq	.+2      	; 0x2cd4 <process_tapping+0xb6>
    2cd2:	a6 c0       	rjmp	.+332    	; 0x2e20 <process_tapping+0x202>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    2cd4:	70 2f       	mov	r23, r16
    2cd6:	19 8b       	std	Y+17, r17	; 0x11
    2cd8:	08 8b       	std	Y+16, r16	; 0x10
    2cda:	52 2f       	mov	r21, r18
    2cdc:	6d 2d       	mov	r22, r13
    2cde:	89 89       	ldd	r24, Y+17	; 0x11
    2ce0:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <debug_event>
                process_action(&tapping_key);
    2ce4:	85 e9       	ldi	r24, 0x95	; 149
    2ce6:	91 e0       	ldi	r25, 0x01	; 1
    2ce8:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <process_action>
    2cec:	c3 c0       	rjmp	.+390    	; 0x2e74 <process_tapping+0x256>
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
    2cee:	83 2f       	mov	r24, r19
    2cf0:	80 7f       	andi	r24, 0xF0	; 240
    2cf2:	09 f0       	breq	.+2      	; 0x2cf6 <process_tapping+0xd8>
    2cf4:	59 c0       	rjmp	.+178    	; 0x2da8 <process_tapping+0x18a>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2cf6:	26 13       	cpse	r18, r22
    2cf8:	15 c0       	rjmp	.+42     	; 0x2d24 <process_tapping+0x106>
    2cfa:	45 13       	cpse	r20, r21
    2cfc:	13 c0       	rjmp	.+38     	; 0x2d24 <process_tapping+0x106>
    2cfe:	cd 2c       	mov	r12, r13
    2d00:	d1 10       	cpse	r13, r1
    2d02:	10 c0       	rjmp	.+32     	; 0x2d24 <process_tapping+0x106>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    2d04:	3f 70       	andi	r19, 0x0F	; 15
    2d06:	30 61       	ori	r19, 0x10	; 16
    2d08:	30 93 9a 01 	sts	0x019A, r19	; 0x80019a <tapping_key+0x5>
                    debug_tapping_key();
    2d0c:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <debug_tapping_key>
                    process_action(&tapping_key);
    2d10:	85 e9       	ldi	r24, 0x95	; 149
    2d12:	91 e0       	ldi	r25, 0x01	; 1
    2d14:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    2d18:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <tapping_key+0x5>
    2d1c:	d7 01       	movw	r26, r14
    2d1e:	15 96       	adiw	r26, 0x05	; 5
    2d20:	8c 93       	st	X, r24
                    // enqueue
                    return false;
    2d22:	68 c1       	rjmp	.+720    	; 0x2ff4 <process_tapping+0x3d6>
    2d24:	01 15       	cp	r16, r1
    2d26:	11 05       	cpc	r17, r1
    2d28:	31 f0       	breq	.+12     	; 0x2d36 <process_tapping+0x118>
    2d2a:	2f 3f       	cpi	r18, 0xFF	; 255
    2d2c:	31 f4       	brne	.+12     	; 0x2d3a <process_tapping+0x11c>
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	4f 3f       	cpi	r20, 0xFF	; 255
    2d32:	19 f4       	brne	.+6      	; 0x2d3a <process_tapping+0x11c>
    2d34:	03 c0       	rjmp	.+6      	; 0x2d3c <process_tapping+0x11e>
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	01 c0       	rjmp	.+2      	; 0x2d3c <process_tapping+0x11e>
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    2d3c:	80 fd       	sbrc	r24, 0
    2d3e:	03 c0       	rjmp	.+6      	; 0x2d46 <process_tapping+0x128>
    2d40:	81 e0       	ldi	r24, 0x01	; 1
    2d42:	8d 25       	eor	r24, r13
    2d44:	02 c0       	rjmp	.+4      	; 0x2d4a <process_tapping+0x12c>
    2d46:	80 e0       	ldi	r24, 0x00	; 0
    2d48:	90 e0       	ldi	r25, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    2d4a:	b8 2f       	mov	r27, r24
    2d4c:	b1 70       	andi	r27, 0x01	; 1
    2d4e:	cb 2e       	mov	r12, r27
    2d50:	80 ff       	sbrs	r24, 0
    2d52:	1f c0       	rjmp	.+62     	; 0x2d92 <process_tapping+0x174>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d54:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <waiting_buffer_tail>
    2d58:	30 91 64 01 	lds	r19, 0x0164	; 0x800164 <waiting_buffer_head>
    2d5c:	e3 17       	cp	r30, r19
    2d5e:	09 f4       	brne	.+2      	; 0x2d62 <process_tapping+0x144>
    2d60:	25 c1       	rjmp	.+586    	; 0x2fac <process_tapping+0x38e>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	cf 01       	movw	r24, r30
    2d66:	66 e0       	ldi	r22, 0x06	; 6
    2d68:	70 e0       	ldi	r23, 0x00	; 0
    2d6a:	0e 94 b4 28 	call	0x5168	; 0x5168 <__mulhi3>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	ab 59       	subi	r26, 0x9B	; 155
    2d72:	be 4f       	sbci	r27, 0xFE	; 254
    2d74:	11 96       	adiw	r26, 0x01	; 1
    2d76:	8c 91       	ld	r24, X
    2d78:	11 97       	sbiw	r26, 0x01	; 1
    2d7a:	28 13       	cpse	r18, r24
    2d7c:	07 c0       	rjmp	.+14     	; 0x2d8c <process_tapping+0x16e>
    2d7e:	8c 91       	ld	r24, X
    2d80:	48 13       	cpse	r20, r24
    2d82:	04 c0       	rjmp	.+8      	; 0x2d8c <process_tapping+0x16e>
    2d84:	12 96       	adiw	r26, 0x02	; 2
    2d86:	8c 91       	ld	r24, X
    2d88:	d8 12       	cpse	r13, r24
    2d8a:	03 c0       	rjmp	.+6      	; 0x2d92 <process_tapping+0x174>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d8c:	31 96       	adiw	r30, 0x01	; 1
    2d8e:	e7 70       	andi	r30, 0x07	; 7
    2d90:	e5 cf       	rjmp	.-54     	; 0x2d5c <process_tapping+0x13e>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    2d92:	cd 2c       	mov	r12, r13
    2d94:	dd 20       	and	r13, r13
    2d96:	09 f4       	brne	.+2      	; 0x2d9a <process_tapping+0x17c>
    2d98:	2d c1       	rjmp	.+602    	; 0x2ff4 <process_tapping+0x3d6>
                        tapping_key.tap.interrupted = true;
    2d9a:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <tapping_key+0x5>
    2d9e:	81 60       	ori	r24, 0x01	; 1
    2da0:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <tapping_key+0x5>
                    }
                    // enqueue 
                    return false;
    2da4:	c1 2c       	mov	r12, r1
    2da6:	26 c1       	rjmp	.+588    	; 0x2ff4 <process_tapping+0x3d6>
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2da8:	26 13       	cpse	r18, r22
    2daa:	08 c0       	rjmp	.+16     	; 0x2dbc <process_tapping+0x19e>
    2dac:	45 13       	cpse	r20, r21
    2dae:	06 c0       	rjmp	.+12     	; 0x2dbc <process_tapping+0x19e>
    2db0:	d1 10       	cpse	r13, r1
    2db2:	04 c0       	rjmp	.+8      	; 0x2dbc <process_tapping+0x19e>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    2db4:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <tapping_key+0x5>
    2db8:	d7 01       	movw	r26, r14
    2dba:	b9 c0       	rjmp	.+370    	; 0x2f2e <process_tapping+0x310>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event) && event.pressed) {
    2dbc:	4d 87       	std	Y+13, r20	; 0x0d
    2dbe:	2e 87       	std	Y+14, r18	; 0x0e
    2dc0:	df 86       	std	Y+15, r13	; 0x0f
    2dc2:	70 2f       	mov	r23, r16
    2dc4:	19 8b       	std	Y+17, r17	; 0x11
    2dc6:	08 8b       	std	Y+16, r16	; 0x10
    2dc8:	52 2f       	mov	r21, r18
    2dca:	6d 2d       	mov	r22, r13
    2dcc:	89 89       	ldd	r24, Y+17	; 0x11
    2dce:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <is_tap_key>
    2dd2:	88 23       	and	r24, r24
    2dd4:	a1 f1       	breq	.+104    	; 0x2e3e <process_tapping+0x220>
    2dd6:	dd 20       	and	r13, r13
    2dd8:	91 f1       	breq	.+100    	; 0x2e3e <process_tapping+0x220>
                    if (tapping_key.tap.count > 1) {
    2dda:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <tapping_key+0x5>
    2dde:	82 2f       	mov	r24, r18
    2de0:	82 95       	swap	r24
    2de2:	8f 70       	andi	r24, 0x0F	; 15
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	02 97       	sbiw	r24, 0x02	; 2
    2de8:	74 f0       	brlt	.+28     	; 0x2e06 <process_tapping+0x1e8>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2dea:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <tapping_key>
    2dee:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <tapping_key+0x1>
    2df2:	98 87       	std	Y+8, r25	; 0x08
    2df4:	8f 83       	std	Y+7, r24	; 0x07
    2df6:	19 86       	std	Y+9, r1	; 0x09
    2df8:	1b 87       	std	Y+11, r17	; 0x0b
    2dfa:	0a 87       	std	Y+10, r16	; 0x0a
    2dfc:	2c 87       	std	Y+12, r18	; 0x0c
    2dfe:	ce 01       	movw	r24, r28
    2e00:	07 96       	adiw	r24, 0x07	; 7
    2e02:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
    2e06:	86 e0       	ldi	r24, 0x06	; 6
    2e08:	f7 01       	movw	r30, r14
    2e0a:	a5 e9       	ldi	r26, 0x95	; 149
    2e0c:	b1 e0       	ldi	r27, 0x01	; 1
    2e0e:	01 90       	ld	r0, Z+
    2e10:	0d 92       	st	X+, r0
    2e12:	8a 95       	dec	r24
    2e14:	e1 f7       	brne	.-8      	; 0x2e0e <process_tapping+0x1f0>
                    waiting_buffer_scan_tap();
    2e16:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    2e1a:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <debug_tapping_key>
    2e1e:	12 c0       	rjmp	.+36     	; 0x2e44 <process_tapping+0x226>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2e20:	26 17       	cp	r18, r22
    2e22:	91 f1       	breq	.+100    	; 0x2e88 <process_tapping+0x26a>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event) && event.pressed) {
    2e24:	4d 87       	std	Y+13, r20	; 0x0d
    2e26:	2e 87       	std	Y+14, r18	; 0x0e
    2e28:	df 86       	std	Y+15, r13	; 0x0f
    2e2a:	70 2f       	mov	r23, r16
    2e2c:	19 8b       	std	Y+17, r17	; 0x11
    2e2e:	08 8b       	std	Y+16, r16	; 0x10
    2e30:	52 2f       	mov	r21, r18
    2e32:	6d 2d       	mov	r22, r13
    2e34:	89 89       	ldd	r24, Y+17	; 0x11
    2e36:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <is_tap_key>
    2e3a:	81 11       	cpse	r24, r1
    2e3c:	39 c0       	rjmp	.+114    	; 0x2eb0 <process_tapping+0x292>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    2e3e:	c7 01       	movw	r24, r14
    2e40:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <process_action>
                    return true;
    2e44:	cc 24       	eor	r12, r12
    2e46:	c3 94       	inc	r12
    2e48:	d5 c0       	rjmp	.+426    	; 0x2ff4 <process_tapping+0x3d6>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    2e4a:	08 17       	cp	r16, r24
    2e4c:	19 07       	cpc	r17, r25
    2e4e:	08 f4       	brcc	.+2      	; 0x2e52 <process_tapping+0x234>
    2e50:	47 c0       	rjmp	.+142    	; 0x2ee0 <process_tapping+0x2c2>
    2e52:	f8 01       	movw	r30, r16
    2e54:	e8 1b       	sub	r30, r24
    2e56:	f9 0b       	sbc	r31, r25
    2e58:	cf 01       	movw	r24, r30
    2e5a:	88 3c       	cpi	r24, 0xC8	; 200
    2e5c:	91 05       	cpc	r25, r1
    2e5e:	08 f4       	brcc	.+2      	; 0x2e62 <process_tapping+0x244>
    2e60:	44 c0       	rjmp	.+136    	; 0x2eea <process_tapping+0x2cc>
    2e62:	c1 2c       	mov	r12, r1
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    2e64:	70 2f       	mov	r23, r16
    2e66:	19 8b       	std	Y+17, r17	; 0x11
    2e68:	08 8b       	std	Y+16, r16	; 0x10
    2e6a:	52 2f       	mov	r21, r18
    2e6c:	6d 2d       	mov	r22, r13
    2e6e:	89 89       	ldd	r24, Y+17	; 0x11
    2e70:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <debug_event>
        else {
            if (tapping_key.tap.count == 0) {
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
    2e74:	e5 e9       	ldi	r30, 0x95	; 149
    2e76:	f1 e0       	ldi	r31, 0x01	; 1
    2e78:	86 e0       	ldi	r24, 0x06	; 6
    2e7a:	df 01       	movw	r26, r30
    2e7c:	1d 92       	st	X+, r1
    2e7e:	8a 95       	dec	r24
    2e80:	e9 f7       	brne	.-6      	; 0x2e7c <process_tapping+0x25e>
                debug_tapping_key();
    2e82:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <debug_tapping_key>
                return false;
    2e86:	b6 c0       	rjmp	.+364    	; 0x2ff4 <process_tapping+0x3d6>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2e88:	45 13       	cpse	r20, r21
    2e8a:	cc cf       	rjmp	.-104    	; 0x2e24 <process_tapping+0x206>
    2e8c:	d1 10       	cpse	r13, r1
    2e8e:	ca cf       	rjmp	.-108    	; 0x2e24 <process_tapping+0x206>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    2e90:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <tapping_key+0x5>
    2e94:	f7 01       	movw	r30, r14
    2e96:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    2e98:	c7 01       	movw	r24, r14
    2e9a:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <process_action>
                    tapping_key = (keyrecord_t){};
    2e9e:	86 e0       	ldi	r24, 0x06	; 6
    2ea0:	e5 e9       	ldi	r30, 0x95	; 149
    2ea2:	f1 e0       	ldi	r31, 0x01	; 1
    2ea4:	df 01       	movw	r26, r30
    2ea6:	1d 92       	st	X+, r1
    2ea8:	8a 95       	dec	r24
    2eaa:	e9 f7       	brne	.-6      	; 0x2ea6 <process_tapping+0x288>
                    return true;
    2eac:	ca 2c       	mov	r12, r10
    2eae:	a2 c0       	rjmp	.+324    	; 0x2ff4 <process_tapping+0x3d6>
                }
                else if (is_tap_key(event) && event.pressed) {
    2eb0:	dd 20       	and	r13, r13
    2eb2:	29 f2       	breq	.-118    	; 0x2e3e <process_tapping+0x220>
                    if (tapping_key.tap.count > 1) {
    2eb4:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <tapping_key+0x5>
    2eb8:	82 2f       	mov	r24, r18
    2eba:	82 95       	swap	r24
    2ebc:	8f 70       	andi	r24, 0x0F	; 15
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	02 97       	sbiw	r24, 0x02	; 2
    2ec2:	0c f4       	brge	.+2      	; 0x2ec6 <process_tapping+0x2a8>
    2ec4:	a0 cf       	rjmp	.-192    	; 0x2e06 <process_tapping+0x1e8>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2ec6:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <tapping_key>
    2eca:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <tapping_key+0x1>
    2ece:	9a 83       	std	Y+2, r25	; 0x02
    2ed0:	89 83       	std	Y+1, r24	; 0x01
    2ed2:	1b 82       	std	Y+3, r1	; 0x03
    2ed4:	1d 83       	std	Y+5, r17	; 0x05
    2ed6:	0c 83       	std	Y+4, r16	; 0x04
    2ed8:	2e 83       	std	Y+6, r18	; 0x06
    2eda:	ce 01       	movw	r24, r28
    2edc:	01 96       	adiw	r24, 0x01	; 1
    2ede:	91 cf       	rjmp	.-222    	; 0x2e02 <process_tapping+0x1e4>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    2ee0:	80 95       	com	r24
    2ee2:	90 95       	com	r25
    2ee4:	80 0f       	add	r24, r16
    2ee6:	91 1f       	adc	r25, r17
    2ee8:	b8 cf       	rjmp	.-144    	; 0x2e5a <process_tapping+0x23c>
            if (event.pressed) {
    2eea:	cd 2c       	mov	r12, r13
    2eec:	dd 20       	and	r13, r13
    2eee:	09 f4       	brne	.+2      	; 0x2ef2 <process_tapping+0x2d4>
    2ef0:	a6 cf       	rjmp	.-180    	; 0x2e3e <process_tapping+0x220>
                if (IS_TAPPING_KEY(event.key)) {
    2ef2:	26 13       	cpse	r18, r22
    2ef4:	33 c0       	rjmp	.+102    	; 0x2f5c <process_tapping+0x33e>
    2ef6:	45 13       	cpse	r20, r21
    2ef8:	31 c0       	rjmp	.+98     	; 0x2f5c <process_tapping+0x33e>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    2efa:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <tapping_key+0x5>
    2efe:	20 fd       	sbrc	r18, 0
    2f00:	24 c0       	rjmp	.+72     	; 0x2f4a <process_tapping+0x32c>
    2f02:	82 2f       	mov	r24, r18
    2f04:	82 95       	swap	r24
    2f06:	8f 70       	andi	r24, 0x0F	; 15
    2f08:	48 2f       	mov	r20, r24
    2f0a:	50 e0       	ldi	r21, 0x00	; 0
    2f0c:	41 15       	cp	r20, r1
    2f0e:	51 05       	cpc	r21, r1
    2f10:	e1 f0       	breq	.+56     	; 0x2f4a <process_tapping+0x32c>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    2f12:	d7 01       	movw	r26, r14
    2f14:	15 96       	adiw	r26, 0x05	; 5
    2f16:	2c 93       	st	X, r18
    2f18:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    2f1a:	4f 30       	cpi	r20, 0x0F	; 15
    2f1c:	51 05       	cpc	r21, r1
    2f1e:	49 f0       	breq	.+18     	; 0x2f32 <process_tapping+0x314>
    2f20:	8f 5f       	subi	r24, 0xFF	; 255
    2f22:	98 2f       	mov	r25, r24
    2f24:	92 95       	swap	r25
    2f26:	90 7f       	andi	r25, 0xF0	; 240
    2f28:	82 2f       	mov	r24, r18
    2f2a:	8f 70       	andi	r24, 0x0F	; 15
    2f2c:	89 2b       	or	r24, r25
    2f2e:	15 96       	adiw	r26, 0x05	; 5
    2f30:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    2f32:	c7 01       	movw	r24, r14
    2f34:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <process_action>
                        tapping_key = *keyp;
    2f38:	86 e0       	ldi	r24, 0x06	; 6
    2f3a:	f7 01       	movw	r30, r14
    2f3c:	a5 e9       	ldi	r26, 0x95	; 149
    2f3e:	b1 e0       	ldi	r27, 0x01	; 1
    2f40:	01 90       	ld	r0, Z+
    2f42:	0d 92       	st	X+, r0
    2f44:	8a 95       	dec	r24
    2f46:	e1 f7       	brne	.-8      	; 0x2f40 <process_tapping+0x322>
    2f48:	9c cf       	rjmp	.-200    	; 0x2e82 <process_tapping+0x264>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    2f4a:	86 e0       	ldi	r24, 0x06	; 6
    2f4c:	f7 01       	movw	r30, r14
    2f4e:	a5 e9       	ldi	r26, 0x95	; 149
    2f50:	b1 e0       	ldi	r27, 0x01	; 1
    2f52:	01 90       	ld	r0, Z+
    2f54:	0d 92       	st	X+, r0
    2f56:	8a 95       	dec	r24
    2f58:	e1 f7       	brne	.-8      	; 0x2f52 <process_tapping+0x334>
                        return true;
    2f5a:	4c c0       	rjmp	.+152    	; 0x2ff4 <process_tapping+0x3d6>
                    }
                } else if (is_tap_key(event)) {
    2f5c:	4d 87       	std	Y+13, r20	; 0x0d
    2f5e:	2e 87       	std	Y+14, r18	; 0x0e
    2f60:	df 86       	std	Y+15, r13	; 0x0f
    2f62:	70 2f       	mov	r23, r16
    2f64:	19 8b       	std	Y+17, r17	; 0x11
    2f66:	08 8b       	std	Y+16, r16	; 0x10
    2f68:	52 2f       	mov	r21, r18
    2f6a:	6d 2d       	mov	r22, r13
    2f6c:	89 89       	ldd	r24, Y+17	; 0x11
    2f6e:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <is_tap_key>
    2f72:	81 11       	cpse	r24, r1
    2f74:	48 cf       	rjmp	.-368    	; 0x2e06 <process_tapping+0x1e8>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    2f76:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <tapping_key+0x5>
    2f7a:	81 60       	ori	r24, 0x01	; 1
    2f7c:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <tapping_key+0x5>
                    process_action(keyp);
    2f80:	c7 01       	movw	r24, r14
    2f82:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <process_action>
                    return true;
    2f86:	36 c0       	rjmp	.+108    	; 0x2ff4 <process_tapping+0x3d6>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event)) {
    2f88:	dd 20       	and	r13, r13
    2f8a:	09 f4       	brne	.+2      	; 0x2f8e <process_tapping+0x370>
    2f8c:	58 cf       	rjmp	.-336    	; 0x2e3e <process_tapping+0x220>
    2f8e:	4d 87       	std	Y+13, r20	; 0x0d
    2f90:	2e 87       	std	Y+14, r18	; 0x0e
    2f92:	df 86       	std	Y+15, r13	; 0x0f
    2f94:	70 2f       	mov	r23, r16
    2f96:	19 8b       	std	Y+17, r17	; 0x11
    2f98:	08 8b       	std	Y+16, r16	; 0x10
    2f9a:	52 2f       	mov	r21, r18
    2f9c:	6d 2d       	mov	r22, r13
    2f9e:	89 89       	ldd	r24, Y+17	; 0x11
    2fa0:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <is_tap_key>
    2fa4:	88 23       	and	r24, r24
    2fa6:	09 f4       	brne	.+2      	; 0x2faa <process_tapping+0x38c>
    2fa8:	4a cf       	rjmp	.-364    	; 0x2e3e <process_tapping+0x220>
    2faa:	2d cf       	rjmp	.-422    	; 0x2e06 <process_tapping+0x1e8>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event);
    2fac:	70 2f       	mov	r23, r16
    2fae:	19 8b       	std	Y+17, r17	; 0x11
    2fb0:	08 8b       	std	Y+16, r16	; 0x10
    2fb2:	52 2f       	mov	r21, r18
    2fb4:	6d 2d       	mov	r22, r13
    2fb6:	89 89       	ldd	r24, Y+17	; 0x11
    2fb8:	0e 94 75 1a 	call	0x34ea	; 0x34ea <layer_switch_get_action>
                    switch (action.kind.id) {
    2fbc:	29 2f       	mov	r18, r25
    2fbe:	22 95       	swap	r18
    2fc0:	2f 70       	andi	r18, 0x0F	; 15
    2fc2:	22 30       	cpi	r18, 0x02	; 2
    2fc4:	28 f4       	brcc	.+10     	; 0x2fd0 <process_tapping+0x3b2>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    2fc6:	9f 70       	andi	r25, 0x0F	; 15
    2fc8:	39 f0       	breq	.+14     	; 0x2fd8 <process_tapping+0x3ba>
    2fca:	81 11       	cpse	r24, r1
    2fcc:	05 c0       	rjmp	.+10     	; 0x2fd8 <process_tapping+0x3ba>
    2fce:	0b c0       	rjmp	.+22     	; 0x2fe6 <process_tapping+0x3c8>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event);
                    switch (action.kind.id) {
    2fd0:	24 30       	cpi	r18, 0x04	; 4
    2fd2:	28 f4       	brcc	.+10     	; 0x2fde <process_tapping+0x3c0>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    2fd4:	9f 70       	andi	r25, 0x0F	; 15
    2fd6:	49 f4       	brne	.+18     	; 0x2fea <process_tapping+0x3cc>
                            if (IS_MOD(action.key.code)) return false;
    2fd8:	80 5e       	subi	r24, 0xE0	; 224
    2fda:	88 30       	cpi	r24, 0x08	; 8
    2fdc:	20 f0       	brcs	.+8      	; 0x2fe6 <process_tapping+0x3c8>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    2fde:	c7 01       	movw	r24, r14
    2fe0:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <process_action>
                    return true;
    2fe4:	bc 2c       	mov	r11, r12
    2fe6:	cb 2c       	mov	r12, r11
    2fe8:	05 c0       	rjmp	.+10     	; 0x2ff4 <process_tapping+0x3d6>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    2fea:	f7 01       	movw	r30, r14
    2fec:	95 81       	ldd	r25, Z+5	; 0x05
    2fee:	90 7f       	andi	r25, 0xF0	; 240
    2ff0:	99 f7       	brne	.-26     	; 0x2fd8 <process_tapping+0x3ba>
    2ff2:	f9 cf       	rjmp	.-14     	; 0x2fe6 <process_tapping+0x3c8>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    2ff4:	8c 2d       	mov	r24, r12
    2ff6:	61 96       	adiw	r28, 0x11	; 17
    2ff8:	0f b6       	in	r0, 0x3f	; 63
    2ffa:	f8 94       	cli
    2ffc:	de bf       	out	0x3e, r29	; 62
    2ffe:	0f be       	out	0x3f, r0	; 63
    3000:	cd bf       	out	0x3d, r28	; 61
    3002:	df 91       	pop	r29
    3004:	cf 91       	pop	r28
    3006:	1f 91       	pop	r17
    3008:	0f 91       	pop	r16
    300a:	ff 90       	pop	r15
    300c:	ef 90       	pop	r14
    300e:	df 90       	pop	r13
    3010:	cf 90       	pop	r12
    3012:	bf 90       	pop	r11
    3014:	af 90       	pop	r10
    3016:	08 95       	ret

00003018 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    3018:	cf 93       	push	r28
    301a:	df 93       	push	r29
    301c:	cd b7       	in	r28, 0x3d	; 61
    301e:	de b7       	in	r29, 0x3e	; 62
    3020:	2c 97       	sbiw	r28, 0x0c	; 12
    3022:	0f b6       	in	r0, 0x3f	; 63
    3024:	f8 94       	cli
    3026:	de bf       	out	0x3e, r29	; 62
    3028:	0f be       	out	0x3f, r0	; 63
    302a:	cd bf       	out	0x3d, r28	; 61
    302c:	4f 83       	std	Y+7, r20	; 0x07
    302e:	58 87       	std	Y+8, r21	; 0x08
    3030:	69 87       	std	Y+9, r22	; 0x09
    3032:	7a 87       	std	Y+10, r23	; 0x0a
    3034:	8b 87       	std	Y+11, r24	; 0x0b
    3036:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    3038:	ce 01       	movw	r24, r28
    303a:	07 96       	adiw	r24, 0x07	; 7
    303c:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <process_tapping>
    3040:	88 23       	and	r24, r24
    3042:	d1 f0       	breq	.+52     	; 0x3078 <action_tapping_process+0x60>
    3044:	9f 81       	ldd	r25, Y+7	; 0x07
    3046:	88 85       	ldd	r24, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    3048:	2a 85       	ldd	r18, Y+10	; 0x0a
    304a:	3b 85       	ldd	r19, Y+11	; 0x0b
    304c:	23 2b       	or	r18, r19
    304e:	31 f0       	breq	.+12     	; 0x305c <action_tapping_process+0x44>
    3050:	8f 3f       	cpi	r24, 0xFF	; 255
    3052:	31 f4       	brne	.+12     	; 0x3060 <action_tapping_process+0x48>
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	9f 3f       	cpi	r25, 0xFF	; 255
    3058:	19 f4       	brne	.+6      	; 0x3060 <action_tapping_process+0x48>
    305a:	03 c0       	rjmp	.+6      	; 0x3062 <action_tapping_process+0x4a>
    305c:	81 e0       	ldi	r24, 0x01	; 1
    305e:	01 c0       	rjmp	.+2      	; 0x3062 <action_tapping_process+0x4a>
    3060:	80 e0       	ldi	r24, 0x00	; 0
        if (!IS_NOEVENT(record.event)) {
    3062:	80 fd       	sbrc	r24, 0
    3064:	6f c0       	rjmp	.+222    	; 0x3144 <action_tapping_process+0x12c>
            debug("processed: "); debug_record(record); debug("\n");
    3066:	4f 81       	ldd	r20, Y+7	; 0x07
    3068:	58 85       	ldd	r21, Y+8	; 0x08
    306a:	69 85       	ldd	r22, Y+9	; 0x09
    306c:	7a 85       	ldd	r23, Y+10	; 0x0a
    306e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3070:	9c 85       	ldd	r25, Y+12	; 0x0c
    3072:	0e 94 5f 15 	call	0x2abe	; 0x2abe <debug_record>
    3076:	66 c0       	rjmp	.+204    	; 0x3144 <action_tapping_process+0x12c>
    3078:	86 e0       	ldi	r24, 0x06	; 6
    307a:	fe 01       	movw	r30, r28
    307c:	37 96       	adiw	r30, 0x07	; 7
    307e:	de 01       	movw	r26, r28
    3080:	11 96       	adiw	r26, 0x01	; 1
    3082:	01 90       	ld	r0, Z+
    3084:	0d 92       	st	X+, r0
    3086:	8a 95       	dec	r24
    3088:	e1 f7       	brne	.-8      	; 0x3082 <action_tapping_process+0x6a>
    308a:	ff 81       	ldd	r31, Y+7	; 0x07
    308c:	e8 85       	ldd	r30, Y+8	; 0x08
    308e:	6a 85       	ldd	r22, Y+10	; 0x0a
    3090:	7b 85       	ldd	r23, Y+11	; 0x0b
    3092:	61 15       	cp	r22, r1
    3094:	71 05       	cpc	r23, r1
    3096:	31 f0       	breq	.+12     	; 0x30a4 <action_tapping_process+0x8c>
    3098:	ef 3f       	cpi	r30, 0xFF	; 255
    309a:	31 f4       	brne	.+12     	; 0x30a8 <action_tapping_process+0x90>
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	ff 3f       	cpi	r31, 0xFF	; 255
    30a0:	19 f4       	brne	.+6      	; 0x30a8 <action_tapping_process+0x90>
    30a2:	03 c0       	rjmp	.+6      	; 0x30aa <action_tapping_process+0x92>
    30a4:	81 e0       	ldi	r24, 0x01	; 1
    30a6:	01 c0       	rjmp	.+2      	; 0x30aa <action_tapping_process+0x92>
    30a8:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    30aa:	80 fd       	sbrc	r24, 0
    30ac:	4b c0       	rjmp	.+150    	; 0x3144 <action_tapping_process+0x12c>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    30ae:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <waiting_buffer_head>
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	9c 01       	movw	r18, r24
    30b6:	2f 5f       	subi	r18, 0xFF	; 255
    30b8:	3f 4f       	sbci	r19, 0xFF	; 255
    30ba:	27 70       	andi	r18, 0x07	; 7
    30bc:	33 27       	eor	r19, r19
    30be:	40 91 63 01 	lds	r20, 0x0163	; 0x800163 <waiting_buffer_tail>
    30c2:	50 e0       	ldi	r21, 0x00	; 0
    30c4:	24 17       	cp	r18, r20
    30c6:	35 07       	cpc	r19, r21
    30c8:	09 f4       	brne	.+2      	; 0x30cc <action_tapping_process+0xb4>
    30ca:	43 c0       	rjmp	.+134    	; 0x3152 <action_tapping_process+0x13a>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    30cc:	f9 83       	std	Y+1, r31	; 0x01
    30ce:	ea 83       	std	Y+2, r30	; 0x02
    30d0:	7d 83       	std	Y+5, r23	; 0x05
    30d2:	6c 83       	std	Y+4, r22	; 0x04
    30d4:	66 e0       	ldi	r22, 0x06	; 6
    30d6:	70 e0       	ldi	r23, 0x00	; 0
    30d8:	0e 94 b4 28 	call	0x5168	; 0x5168 <__mulhi3>
    30dc:	dc 01       	movw	r26, r24
    30de:	ab 59       	subi	r26, 0x9B	; 155
    30e0:	be 4f       	sbci	r27, 0xFE	; 254
    30e2:	96 e0       	ldi	r25, 0x06	; 6
    30e4:	fe 01       	movw	r30, r28
    30e6:	31 96       	adiw	r30, 0x01	; 1
    30e8:	01 90       	ld	r0, Z+
    30ea:	0d 92       	st	X+, r0
    30ec:	9a 95       	dec	r25
    30ee:	e1 f7       	brne	.-8      	; 0x30e8 <action_tapping_process+0xd0>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    30f0:	20 93 64 01 	sts	0x0164, r18	; 0x800164 <waiting_buffer_head>

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    30f4:	0e 94 6f 15 	call	0x2ade	; 0x2ade <debug_waiting_buffer>
    30f8:	25 c0       	rjmp	.+74     	; 0x3144 <action_tapping_process+0x12c>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	66 e0       	ldi	r22, 0x06	; 6
    30fe:	70 e0       	ldi	r23, 0x00	; 0
    3100:	0e 94 b4 28 	call	0x5168	; 0x5168 <__mulhi3>
    3104:	8b 59       	subi	r24, 0x9B	; 155
    3106:	9e 4f       	sbci	r25, 0xFE	; 254
    3108:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <process_tapping>
    310c:	88 23       	and	r24, r24
    310e:	71 f1       	breq	.+92     	; 0x316c <action_tapping_process+0x154>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    3110:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <waiting_buffer_tail>
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	66 e0       	ldi	r22, 0x06	; 6
    3118:	70 e0       	ldi	r23, 0x00	; 0
    311a:	0e 94 b4 28 	call	0x5168	; 0x5168 <__mulhi3>
    311e:	fc 01       	movw	r30, r24
    3120:	eb 59       	subi	r30, 0x9B	; 155
    3122:	fe 4f       	sbci	r31, 0xFE	; 254
    3124:	40 81       	ld	r20, Z
    3126:	51 81       	ldd	r21, Z+1	; 0x01
    3128:	62 81       	ldd	r22, Z+2	; 0x02
    312a:	73 81       	ldd	r23, Z+3	; 0x03
    312c:	84 81       	ldd	r24, Z+4	; 0x04
    312e:	95 81       	ldd	r25, Z+5	; 0x05
    3130:	0e 94 5f 15 	call	0x2abe	; 0x2abe <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3134:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <waiting_buffer_tail>
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	01 96       	adiw	r24, 0x01	; 1
    313c:	87 70       	andi	r24, 0x07	; 7
    313e:	99 27       	eor	r25, r25
    3140:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <waiting_buffer_tail>
    3144:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <waiting_buffer_tail>
    3148:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <waiting_buffer_head>
    314c:	89 13       	cpse	r24, r25
    314e:	d5 cf       	rjmp	.-86     	; 0x30fa <action_tapping_process+0xe2>
    3150:	0d c0       	rjmp	.+26     	; 0x316c <action_tapping_process+0x154>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    3152:	0e 94 ee 14 	call	0x29dc	; 0x29dc <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    3156:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <waiting_buffer_head>
    waiting_buffer_tail = 0;
    315a:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <waiting_buffer_tail>
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    315e:	e5 e9       	ldi	r30, 0x95	; 149
    3160:	f1 e0       	ldi	r31, 0x01	; 1
    3162:	86 e0       	ldi	r24, 0x06	; 6
    3164:	df 01       	movw	r26, r30
    3166:	1d 92       	st	X+, r1
    3168:	8a 95       	dec	r24
    316a:	e9 f7       	brne	.-6      	; 0x3166 <action_tapping_process+0x14e>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    316c:	2c 96       	adiw	r28, 0x0c	; 12
    316e:	0f b6       	in	r0, 0x3f	; 63
    3170:	f8 94       	cli
    3172:	de bf       	out	0x3e, r29	; 62
    3174:	0f be       	out	0x3f, r0	; 63
    3176:	cd bf       	out	0x3d, r28	; 61
    3178:	df 91       	pop	r29
    317a:	cf 91       	pop	r28
    317c:	08 95       	ret

0000317e <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    317e:	df 92       	push	r13
    3180:	ef 92       	push	r14
    3182:	ff 92       	push	r15
    3184:	0f 93       	push	r16
    3186:	1f 93       	push	r17
    3188:	cf 93       	push	r28
    318a:	df 93       	push	r29
    318c:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    318e:	89 2b       	or	r24, r25
    3190:	09 f4       	brne	.+2      	; 0x3194 <action_macro_play+0x16>
    3192:	88 c0       	rjmp	.+272    	; 0x32a4 <action_macro_play+0x126>
    3194:	e1 2c       	mov	r14, r1
    3196:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    3198:	dd 24       	eor	r13, r13
    319a:	d3 94       	inc	r13

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    319c:	ef 01       	movw	r28, r30
    319e:	21 96       	adiw	r28, 0x01	; 1
    31a0:	84 91       	lpm	r24, Z
    31a2:	85 37       	cpi	r24, 0x75	; 117
    31a4:	09 f4       	brne	.+2      	; 0x31a8 <action_macro_play+0x2a>
    31a6:	60 c0       	rjmp	.+192    	; 0x3268 <action_macro_play+0xea>
    31a8:	58 f4       	brcc	.+22     	; 0x31c0 <action_macro_play+0x42>
    31aa:	84 37       	cpi	r24, 0x74	; 116
    31ac:	08 f0       	brcs	.+2      	; 0x31b0 <action_macro_play+0x32>
    31ae:	4e c0       	rjmp	.+156    	; 0x324c <action_macro_play+0xce>
    31b0:	84 30       	cpi	r24, 0x04	; 4
    31b2:	08 f0       	brcs	.+2      	; 0x31b6 <action_macro_play+0x38>
    31b4:	68 c0       	rjmp	.+208    	; 0x3286 <action_macro_play+0x108>
    31b6:	81 30       	cpi	r24, 0x01	; 1
    31b8:	d1 f0       	breq	.+52     	; 0x31ee <action_macro_play+0x70>
    31ba:	82 30       	cpi	r24, 0x02	; 2
    31bc:	71 f1       	breq	.+92     	; 0x321a <action_macro_play+0x9c>
    31be:	72 c0       	rjmp	.+228    	; 0x32a4 <action_macro_play+0x126>
    31c0:	88 37       	cpi	r24, 0x78	; 120
    31c2:	09 f4       	brne	.+2      	; 0x31c6 <action_macro_play+0x48>
    31c4:	5b c0       	rjmp	.+182    	; 0x327c <action_macro_play+0xfe>
    31c6:	50 f4       	brcc	.+20     	; 0x31dc <action_macro_play+0x5e>
    31c8:	86 37       	cpi	r24, 0x76	; 118
    31ca:	09 f4       	brne	.+2      	; 0x31ce <action_macro_play+0x50>
    31cc:	53 c0       	rjmp	.+166    	; 0x3274 <action_macro_play+0xf6>
    31ce:	87 37       	cpi	r24, 0x77	; 119
    31d0:	09 f0       	breq	.+2      	; 0x31d4 <action_macro_play+0x56>
    31d2:	68 c0       	rjmp	.+208    	; 0x32a4 <action_macro_play+0x126>
                break;
            case MOD_STORE:
                mod_storage = get_mods();
                break;
            case MOD_RESTORE:
                set_mods(mod_storage);
    31d4:	8e 2d       	mov	r24, r14
    31d6:	0e 94 4b 1b 	call	0x3696	; 0x3696 <set_mods>
    31da:	52 c0       	rjmp	.+164    	; 0x3280 <action_macro_play+0x102>

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    31dc:	9c e7       	ldi	r25, 0x7C	; 124
    31de:	98 0f       	add	r25, r24
    31e0:	90 37       	cpi	r25, 0x70	; 112
    31e2:	08 f0       	brcs	.+2      	; 0x31e6 <action_macro_play+0x68>
    31e4:	5f c0       	rjmp	.+190    	; 0x32a4 <action_macro_play+0x126>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    31e6:	8f 77       	andi	r24, 0x7F	; 127
    31e8:	0e 94 68 11 	call	0x22d0	; 0x22d0 <unregister_code>
                break;
    31ec:	4e c0       	rjmp	.+156    	; 0x328a <action_macro_play+0x10c>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    31ee:	8f 01       	movw	r16, r30
    31f0:	0e 5f       	subi	r16, 0xFE	; 254
    31f2:	1f 4f       	sbci	r17, 0xFF	; 255
    31f4:	fe 01       	movw	r30, r28
    31f6:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    31f8:	90 e2       	ldi	r25, 0x20	; 32
    31fa:	98 0f       	add	r25, r24
    31fc:	98 30       	cpi	r25, 0x08	; 8
    31fe:	50 f4       	brcc	.+20     	; 0x3214 <action_macro_play+0x96>
                    add_weak_mods(MOD_BIT(macro));
    3200:	87 70       	andi	r24, 0x07	; 7
    3202:	fd 2d       	mov	r31, r13
    3204:	01 c0       	rjmp	.+2      	; 0x3208 <action_macro_play+0x8a>
    3206:	ff 0f       	add	r31, r31
    3208:	8a 95       	dec	r24
    320a:	ea f7       	brpl	.-6      	; 0x3206 <action_macro_play+0x88>
    320c:	8f 2f       	mov	r24, r31
    320e:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <add_weak_mods>
    3212:	15 c0       	rjmp	.+42     	; 0x323e <action_macro_play+0xc0>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    3214:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <register_code>
    3218:	14 c0       	rjmp	.+40     	; 0x3242 <action_macro_play+0xc4>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    321a:	8f 01       	movw	r16, r30
    321c:	0e 5f       	subi	r16, 0xFE	; 254
    321e:	1f 4f       	sbci	r17, 0xFF	; 255
    3220:	fe 01       	movw	r30, r28
    3222:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3224:	90 e2       	ldi	r25, 0x20	; 32
    3226:	98 0f       	add	r25, r24
    3228:	98 30       	cpi	r25, 0x08	; 8
    322a:	68 f4       	brcc	.+26     	; 0x3246 <action_macro_play+0xc8>
                    del_weak_mods(MOD_BIT(macro));
    322c:	87 70       	andi	r24, 0x07	; 7
    322e:	fd 2d       	mov	r31, r13
    3230:	01 c0       	rjmp	.+2      	; 0x3234 <action_macro_play+0xb6>
    3232:	ff 0f       	add	r31, r31
    3234:	8a 95       	dec	r24
    3236:	ea f7       	brpl	.-6      	; 0x3232 <action_macro_play+0xb4>
    3238:	8f 2f       	mov	r24, r31
    323a:	0e 94 57 1b 	call	0x36ae	; 0x36ae <del_weak_mods>
                    send_keyboard_report();
    323e:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <send_keyboard_report>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3242:	e8 01       	movw	r28, r16
    3244:	22 c0       	rjmp	.+68     	; 0x328a <action_macro_play+0x10c>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                    send_keyboard_report();
                } else {
                    unregister_code(macro);
    3246:	0e 94 68 11 	call	0x22d0	; 0x22d0 <unregister_code>
    324a:	fb cf       	rjmp	.-10     	; 0x3242 <action_macro_play+0xc4>
                }
                break;
            case WAIT:
                MACRO_READ();
    324c:	cf 01       	movw	r24, r30
    324e:	02 96       	adiw	r24, 0x02	; 2
    3250:	fe 01       	movw	r30, r28
    3252:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    3254:	cc 23       	and	r28, r28
    3256:	61 f0       	breq	.+24     	; 0x3270 <action_macro_play+0xf2>
    3258:	ef e9       	ldi	r30, 0x9F	; 159
    325a:	ff e0       	ldi	r31, 0x0F	; 15
    325c:	31 97       	sbiw	r30, 0x01	; 1
    325e:	f1 f7       	brne	.-4      	; 0x325c <action_macro_play+0xde>
    3260:	00 c0       	rjmp	.+0      	; 0x3262 <action_macro_play+0xe4>
    3262:	00 00       	nop
    3264:	c1 50       	subi	r28, 0x01	; 1
    3266:	f6 cf       	rjmp	.-20     	; 0x3254 <action_macro_play+0xd6>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    3268:	cf 01       	movw	r24, r30
    326a:	02 96       	adiw	r24, 0x02	; 2
    326c:	fe 01       	movw	r30, r28
    326e:	f4 90       	lpm	r15, Z
    3270:	ec 01       	movw	r28, r24
                dprintf("INTERVAL(%u)\n", interval);
                break;
    3272:	0b c0       	rjmp	.+22     	; 0x328a <action_macro_play+0x10c>
            case MOD_STORE:
                mod_storage = get_mods();
    3274:	0e 94 3b 1b 	call	0x3676	; 0x3676 <get_mods>
    3278:	e8 2e       	mov	r14, r24
                break;
    327a:	07 c0       	rjmp	.+14     	; 0x328a <action_macro_play+0x10c>
            case MOD_RESTORE:
                set_mods(mod_storage);
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    327c:	0e 94 4e 1b 	call	0x369c	; 0x369c <clear_mods>
                send_keyboard_report();
    3280:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <send_keyboard_report>
                break;
    3284:	02 c0       	rjmp	.+4      	; 0x328a <action_macro_play+0x10c>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    3286:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    328a:	8f 2d       	mov	r24, r15
    328c:	88 23       	and	r24, r24
    328e:	41 f0       	breq	.+16     	; 0x32a0 <action_macro_play+0x122>
    3290:	ef e9       	ldi	r30, 0x9F	; 159
    3292:	ff e0       	ldi	r31, 0x0F	; 15
    3294:	31 97       	sbiw	r30, 0x01	; 1
    3296:	f1 f7       	brne	.-4      	; 0x3294 <action_macro_play+0x116>
    3298:	00 c0       	rjmp	.+0      	; 0x329a <action_macro_play+0x11c>
    329a:	00 00       	nop
    329c:	81 50       	subi	r24, 0x01	; 1
    329e:	f6 cf       	rjmp	.-20     	; 0x328c <action_macro_play+0x10e>
    32a0:	fe 01       	movw	r30, r28
    32a2:	7c cf       	rjmp	.-264    	; 0x319c <action_macro_play+0x1e>
    }
}
    32a4:	df 91       	pop	r29
    32a6:	cf 91       	pop	r28
    32a8:	1f 91       	pop	r17
    32aa:	0f 91       	pop	r16
    32ac:	ff 90       	pop	r15
    32ae:	ef 90       	pop	r14
    32b0:	df 90       	pop	r13
    32b2:	08 95       	ret

000032b4 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    32b4:	60 93 db 01 	sts	0x01DB, r22	; 0x8001db <layer_state>
    32b8:	70 93 dc 01 	sts	0x01DC, r23	; 0x8001dc <layer_state+0x1>
    32bc:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <layer_state+0x2>
    32c0:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <layer_state+0x3>
    hook_layer_change(layer_state);
    32c4:	0c 94 c6 1b 	jmp	0x378c	; 0x378c <hook_layer_change>

000032c8 <default_layer_debug>:
    32c8:	08 95       	ret

000032ca <default_layer_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    32ca:	60 93 df 01 	sts	0x01DF, r22	; 0x8001df <default_layer_state>
    32ce:	70 93 e0 01 	sts	0x01E0, r23	; 0x8001e0 <default_layer_state+0x1>
    32d2:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <default_layer_state+0x2>
    32d6:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    32da:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <hook_default_layer_change>

000032de <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    32de:	0f 93       	push	r16
    32e0:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    32e2:	00 91 df 01 	lds	r16, 0x01DF	; 0x8001df <default_layer_state>
    32e6:	10 91 e0 01 	lds	r17, 0x01E0	; 0x8001e0 <default_layer_state+0x1>
    32ea:	20 91 e1 01 	lds	r18, 0x01E1	; 0x8001e1 <default_layer_state+0x2>
    32ee:	30 91 e2 01 	lds	r19, 0x01E2	; 0x8001e2 <default_layer_state+0x3>
    32f2:	60 2b       	or	r22, r16
    32f4:	71 2b       	or	r23, r17
    32f6:	82 2b       	or	r24, r18
    32f8:	93 2b       	or	r25, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    32fa:	60 93 df 01 	sts	0x01DF, r22	; 0x8001df <default_layer_state>
    32fe:	70 93 e0 01 	sts	0x01E0, r23	; 0x8001e0 <default_layer_state+0x1>
    3302:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <default_layer_state+0x2>
    3306:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <default_layer_state+0x3>

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
    330a:	1f 91       	pop	r17
    330c:	0f 91       	pop	r16
static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    hook_default_layer_change(default_layer_state);
    330e:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <hook_default_layer_change>

00003312 <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    3312:	0f 93       	push	r16
    3314:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    3316:	00 91 df 01 	lds	r16, 0x01DF	; 0x8001df <default_layer_state>
    331a:	10 91 e0 01 	lds	r17, 0x01E0	; 0x8001e0 <default_layer_state+0x1>
    331e:	20 91 e1 01 	lds	r18, 0x01E1	; 0x8001e1 <default_layer_state+0x2>
    3322:	30 91 e2 01 	lds	r19, 0x01E2	; 0x8001e2 <default_layer_state+0x3>
    3326:	60 23       	and	r22, r16
    3328:	71 23       	and	r23, r17
    332a:	82 23       	and	r24, r18
    332c:	93 23       	and	r25, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    332e:	60 93 df 01 	sts	0x01DF, r22	; 0x8001df <default_layer_state>
    3332:	70 93 e0 01 	sts	0x01E0, r23	; 0x8001e0 <default_layer_state+0x1>
    3336:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <default_layer_state+0x2>
    333a:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <default_layer_state+0x3>
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
    333e:	1f 91       	pop	r17
    3340:	0f 91       	pop	r16
static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    hook_default_layer_change(default_layer_state);
    3342:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <hook_default_layer_change>

00003346 <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    3346:	0f 93       	push	r16
    3348:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    334a:	00 91 df 01 	lds	r16, 0x01DF	; 0x8001df <default_layer_state>
    334e:	10 91 e0 01 	lds	r17, 0x01E0	; 0x8001e0 <default_layer_state+0x1>
    3352:	20 91 e1 01 	lds	r18, 0x01E1	; 0x8001e1 <default_layer_state+0x2>
    3356:	30 91 e2 01 	lds	r19, 0x01E2	; 0x8001e2 <default_layer_state+0x3>
    335a:	60 27       	eor	r22, r16
    335c:	71 27       	eor	r23, r17
    335e:	82 27       	eor	r24, r18
    3360:	93 27       	eor	r25, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3362:	60 93 df 01 	sts	0x01DF, r22	; 0x8001df <default_layer_state>
    3366:	70 93 e0 01 	sts	0x01E0, r23	; 0x8001e0 <default_layer_state+0x1>
    336a:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <default_layer_state+0x2>
    336e:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <default_layer_state+0x3>
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
}
    3372:	1f 91       	pop	r17
    3374:	0f 91       	pop	r16
static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    hook_default_layer_change(default_layer_state);
    3376:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <hook_default_layer_change>

0000337a <layer_clear>:
#endif
}

void layer_clear(void)
{
    layer_state_set(0);
    337a:	60 e0       	ldi	r22, 0x00	; 0
    337c:	70 e0       	ldi	r23, 0x00	; 0
    337e:	cb 01       	movw	r24, r22
    3380:	0c 94 5a 19 	jmp	0x32b4	; 0x32b4 <layer_state_set>

00003384 <layer_move>:
}

void layer_move(uint8_t layer)
{
    3384:	0f 93       	push	r16
    3386:	1f 93       	push	r17
    layer_state_set(1UL<<layer);
    3388:	41 e0       	ldi	r20, 0x01	; 1
    338a:	50 e0       	ldi	r21, 0x00	; 0
    338c:	60 e0       	ldi	r22, 0x00	; 0
    338e:	70 e0       	ldi	r23, 0x00	; 0
    3390:	8a 01       	movw	r16, r20
    3392:	9b 01       	movw	r18, r22
    3394:	04 c0       	rjmp	.+8      	; 0x339e <layer_move+0x1a>
    3396:	00 0f       	add	r16, r16
    3398:	11 1f       	adc	r17, r17
    339a:	22 1f       	adc	r18, r18
    339c:	33 1f       	adc	r19, r19
    339e:	8a 95       	dec	r24
    33a0:	d2 f7       	brpl	.-12     	; 0x3396 <layer_move+0x12>
    33a2:	c9 01       	movw	r24, r18
    33a4:	b8 01       	movw	r22, r16
}
    33a6:	1f 91       	pop	r17
    33a8:	0f 91       	pop	r16
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    33aa:	0c 94 5a 19 	jmp	0x32b4	; 0x32b4 <layer_state_set>

000033ae <layer_on>:
}

void layer_on(uint8_t layer)
{
    33ae:	0f 93       	push	r16
    33b0:	1f 93       	push	r17
    layer_state_set(layer_state | (1UL<<layer));
    33b2:	41 e0       	ldi	r20, 0x01	; 1
    33b4:	50 e0       	ldi	r21, 0x00	; 0
    33b6:	60 e0       	ldi	r22, 0x00	; 0
    33b8:	70 e0       	ldi	r23, 0x00	; 0
    33ba:	04 c0       	rjmp	.+8      	; 0x33c4 <layer_on+0x16>
    33bc:	44 0f       	add	r20, r20
    33be:	55 1f       	adc	r21, r21
    33c0:	66 1f       	adc	r22, r22
    33c2:	77 1f       	adc	r23, r23
    33c4:	8a 95       	dec	r24
    33c6:	d2 f7       	brpl	.-12     	; 0x33bc <layer_on+0xe>
    33c8:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <layer_state>
    33cc:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <layer_state+0x1>
    33d0:	a0 91 dd 01 	lds	r26, 0x01DD	; 0x8001dd <layer_state+0x2>
    33d4:	b0 91 de 01 	lds	r27, 0x01DE	; 0x8001de <layer_state+0x3>
    33d8:	8a 01       	movw	r16, r20
    33da:	9b 01       	movw	r18, r22
    33dc:	08 2b       	or	r16, r24
    33de:	19 2b       	or	r17, r25
    33e0:	2a 2b       	or	r18, r26
    33e2:	3b 2b       	or	r19, r27
    33e4:	c9 01       	movw	r24, r18
    33e6:	b8 01       	movw	r22, r16
}
    33e8:	1f 91       	pop	r17
    33ea:	0f 91       	pop	r16
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    33ec:	0c 94 5a 19 	jmp	0x32b4	; 0x32b4 <layer_state_set>

000033f0 <layer_off>:
}

void layer_off(uint8_t layer)
{
    33f0:	0f 93       	push	r16
    33f2:	1f 93       	push	r17
    layer_state_set(layer_state & ~(1UL<<layer));
    33f4:	41 e0       	ldi	r20, 0x01	; 1
    33f6:	50 e0       	ldi	r21, 0x00	; 0
    33f8:	60 e0       	ldi	r22, 0x00	; 0
    33fa:	70 e0       	ldi	r23, 0x00	; 0
    33fc:	04 c0       	rjmp	.+8      	; 0x3406 <layer_off+0x16>
    33fe:	44 0f       	add	r20, r20
    3400:	55 1f       	adc	r21, r21
    3402:	66 1f       	adc	r22, r22
    3404:	77 1f       	adc	r23, r23
    3406:	8a 95       	dec	r24
    3408:	d2 f7       	brpl	.-12     	; 0x33fe <layer_off+0xe>
    340a:	40 95       	com	r20
    340c:	50 95       	com	r21
    340e:	60 95       	com	r22
    3410:	70 95       	com	r23
    3412:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <layer_state>
    3416:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <layer_state+0x1>
    341a:	a0 91 dd 01 	lds	r26, 0x01DD	; 0x8001dd <layer_state+0x2>
    341e:	b0 91 de 01 	lds	r27, 0x01DE	; 0x8001de <layer_state+0x3>
    3422:	8a 01       	movw	r16, r20
    3424:	9b 01       	movw	r18, r22
    3426:	08 23       	and	r16, r24
    3428:	19 23       	and	r17, r25
    342a:	2a 23       	and	r18, r26
    342c:	3b 23       	and	r19, r27
    342e:	c9 01       	movw	r24, r18
    3430:	b8 01       	movw	r22, r16
}
    3432:	1f 91       	pop	r17
    3434:	0f 91       	pop	r16
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    3436:	0c 94 5a 19 	jmp	0x32b4	; 0x32b4 <layer_state_set>

0000343a <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    343a:	0f 93       	push	r16
    343c:	1f 93       	push	r17
    layer_state_set(layer_state ^ (1UL<<layer));
    343e:	41 e0       	ldi	r20, 0x01	; 1
    3440:	50 e0       	ldi	r21, 0x00	; 0
    3442:	60 e0       	ldi	r22, 0x00	; 0
    3444:	70 e0       	ldi	r23, 0x00	; 0
    3446:	04 c0       	rjmp	.+8      	; 0x3450 <layer_invert+0x16>
    3448:	44 0f       	add	r20, r20
    344a:	55 1f       	adc	r21, r21
    344c:	66 1f       	adc	r22, r22
    344e:	77 1f       	adc	r23, r23
    3450:	8a 95       	dec	r24
    3452:	d2 f7       	brpl	.-12     	; 0x3448 <layer_invert+0xe>
    3454:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <layer_state>
    3458:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <layer_state+0x1>
    345c:	a0 91 dd 01 	lds	r26, 0x01DD	; 0x8001dd <layer_state+0x2>
    3460:	b0 91 de 01 	lds	r27, 0x01DE	; 0x8001de <layer_state+0x3>
    3464:	8a 01       	movw	r16, r20
    3466:	9b 01       	movw	r18, r22
    3468:	08 27       	eor	r16, r24
    346a:	19 27       	eor	r17, r25
    346c:	2a 27       	eor	r18, r26
    346e:	3b 27       	eor	r19, r27
    3470:	c9 01       	movw	r24, r18
    3472:	b8 01       	movw	r22, r16
}
    3474:	1f 91       	pop	r17
    3476:	0f 91       	pop	r16
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    3478:	0c 94 5a 19 	jmp	0x32b4	; 0x32b4 <layer_state_set>

0000347c <layer_or>:
}

void layer_or(uint32_t state)
{
    347c:	0f 93       	push	r16
    347e:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    3480:	00 91 db 01 	lds	r16, 0x01DB	; 0x8001db <layer_state>
    3484:	10 91 dc 01 	lds	r17, 0x01DC	; 0x8001dc <layer_state+0x1>
    3488:	20 91 dd 01 	lds	r18, 0x01DD	; 0x8001dd <layer_state+0x2>
    348c:	30 91 de 01 	lds	r19, 0x01DE	; 0x8001de <layer_state+0x3>
    3490:	60 2b       	or	r22, r16
    3492:	71 2b       	or	r23, r17
    3494:	82 2b       	or	r24, r18
    3496:	93 2b       	or	r25, r19
}
    3498:	1f 91       	pop	r17
    349a:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    349c:	0c 94 5a 19 	jmp	0x32b4	; 0x32b4 <layer_state_set>

000034a0 <layer_and>:
}
void layer_and(uint32_t state)
{
    34a0:	0f 93       	push	r16
    34a2:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    34a4:	00 91 db 01 	lds	r16, 0x01DB	; 0x8001db <layer_state>
    34a8:	10 91 dc 01 	lds	r17, 0x01DC	; 0x8001dc <layer_state+0x1>
    34ac:	20 91 dd 01 	lds	r18, 0x01DD	; 0x8001dd <layer_state+0x2>
    34b0:	30 91 de 01 	lds	r19, 0x01DE	; 0x8001de <layer_state+0x3>
    34b4:	60 23       	and	r22, r16
    34b6:	71 23       	and	r23, r17
    34b8:	82 23       	and	r24, r18
    34ba:	93 23       	and	r25, r19
}
    34bc:	1f 91       	pop	r17
    34be:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    34c0:	0c 94 5a 19 	jmp	0x32b4	; 0x32b4 <layer_state_set>

000034c4 <layer_xor>:
}
void layer_xor(uint32_t state)
{
    34c4:	0f 93       	push	r16
    34c6:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    34c8:	00 91 db 01 	lds	r16, 0x01DB	; 0x8001db <layer_state>
    34cc:	10 91 dc 01 	lds	r17, 0x01DC	; 0x8001dc <layer_state+0x1>
    34d0:	20 91 dd 01 	lds	r18, 0x01DD	; 0x8001dd <layer_state+0x2>
    34d4:	30 91 de 01 	lds	r19, 0x01DE	; 0x8001de <layer_state+0x3>
    34d8:	60 27       	eor	r22, r16
    34da:	71 27       	eor	r23, r17
    34dc:	82 27       	eor	r24, r18
    34de:	93 27       	eor	r25, r19
}
    34e0:	1f 91       	pop	r17
    34e2:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    34e4:	0c 94 5a 19 	jmp	0x32b4	; 0x32b4 <layer_state_set>

000034e8 <layer_debug>:
}

void layer_debug(void)
{
    34e8:	08 95       	ret

000034ea <layer_switch_get_action>:
#ifndef NO_TRACK_KEY_PRESS
/* record layer on where key is pressed */
static uint8_t layer_pressed[MATRIX_ROWS][MATRIX_COLS] = {};
#endif
action_t layer_switch_get_action(keyevent_t event)
{
    34ea:	8f 92       	push	r8
    34ec:	9f 92       	push	r9
    34ee:	af 92       	push	r10
    34f0:	bf 92       	push	r11
    34f2:	df 92       	push	r13
    34f4:	ef 92       	push	r14
    34f6:	ff 92       	push	r15
    34f8:	0f 93       	push	r16
    34fa:	1f 93       	push	r17
    34fc:	cf 93       	push	r28
    34fe:	df 93       	push	r29
    3500:	00 d0       	rcall	.+0      	; 0x3502 <layer_switch_get_action+0x18>
    3502:	00 d0       	rcall	.+0      	; 0x3504 <layer_switch_get_action+0x1a>
    3504:	1f 92       	push	r1
    3506:	cd b7       	in	r28, 0x3d	; 61
    3508:	de b7       	in	r29, 0x3e	; 62
    350a:	6b 83       	std	Y+3, r22	; 0x03
    350c:	7c 83       	std	Y+4, r23	; 0x04
    350e:	8d 83       	std	Y+5, r24	; 0x05
    3510:	8a 01       	movw	r16, r20
    3512:	8c 81       	ldd	r24, Y+4	; 0x04
    3514:	9d 81       	ldd	r25, Y+5	; 0x05
    3516:	89 2b       	or	r24, r25
    3518:	31 f0       	breq	.+12     	; 0x3526 <layer_switch_get_action+0x3c>
    351a:	1f 3f       	cpi	r17, 0xFF	; 255
    351c:	31 f4       	brne	.+12     	; 0x352a <layer_switch_get_action+0x40>
    351e:	81 e0       	ldi	r24, 0x01	; 1
    3520:	4f 3f       	cpi	r20, 0xFF	; 255
    3522:	19 f4       	brne	.+6      	; 0x352a <layer_switch_get_action+0x40>
    3524:	03 c0       	rjmp	.+6      	; 0x352c <layer_switch_get_action+0x42>
    3526:	81 e0       	ldi	r24, 0x01	; 1
    3528:	01 c0       	rjmp	.+2      	; 0x352c <layer_switch_get_action+0x42>
    352a:	80 e0       	ldi	r24, 0x00	; 0
    if (IS_NOEVENT(event)) return (action_t)ACTION_NO;
    352c:	80 ff       	sbrs	r24, 0
    352e:	03 c0       	rjmp	.+6      	; 0x3536 <layer_switch_get_action+0x4c>
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	54 c0       	rjmp	.+168    	; 0x35de <layer_switch_get_action+0xf4>

    uint8_t layer = 0;
#ifndef NO_TRACK_KEY_PRESS
    if (event.pressed) {
    3536:	8b 81       	ldd	r24, Y+3	; 0x03
    3538:	88 23       	and	r24, r24
    353a:	09 f4       	brne	.+2      	; 0x353e <layer_switch_get_action+0x54>
    353c:	3d c0       	rjmp	.+122    	; 0x35b8 <layer_switch_get_action+0xce>
/* return layer effective for key at this time */
static uint8_t current_layer_for_key(keypos_t key)
{
#ifndef NO_ACTION_LAYER
    action_t action = ACTION_TRANSPARENT;
    uint32_t layers = layer_state | default_layer_state;
    353e:	80 90 db 01 	lds	r8, 0x01DB	; 0x8001db <layer_state>
    3542:	90 90 dc 01 	lds	r9, 0x01DC	; 0x8001dc <layer_state+0x1>
    3546:	a0 90 dd 01 	lds	r10, 0x01DD	; 0x8001dd <layer_state+0x2>
    354a:	b0 90 de 01 	lds	r11, 0x01DE	; 0x8001de <layer_state+0x3>
    354e:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <default_layer_state>
    3552:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <default_layer_state+0x1>
    3556:	a0 91 e1 01 	lds	r26, 0x01E1	; 0x8001e1 <default_layer_state+0x2>
    355a:	b0 91 e2 01 	lds	r27, 0x01E2	; 0x8001e2 <default_layer_state+0x3>
    355e:	88 2a       	or	r8, r24
    3560:	99 2a       	or	r9, r25
    3562:	aa 2a       	or	r10, r26
    3564:	bb 2a       	or	r11, r27
    3566:	2f e1       	ldi	r18, 0x1F	; 31
    3568:	e2 2e       	mov	r14, r18
    356a:	f1 2c       	mov	r15, r1
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    356c:	d5 01       	movw	r26, r10
    356e:	c4 01       	movw	r24, r8
    3570:	0e 2c       	mov	r0, r14
    3572:	04 c0       	rjmp	.+8      	; 0x357c <layer_switch_get_action+0x92>
    3574:	b6 95       	lsr	r27
    3576:	a7 95       	ror	r26
    3578:	97 95       	ror	r25
    357a:	87 95       	ror	r24
    357c:	0a 94       	dec	r0
    357e:	d2 f7       	brpl	.-12     	; 0x3574 <layer_switch_get_action+0x8a>
    3580:	80 fd       	sbrc	r24, 0
    3582:	06 c0       	rjmp	.+12     	; 0x3590 <layer_switch_get_action+0xa6>
    3584:	81 e0       	ldi	r24, 0x01	; 1
    3586:	e8 1a       	sub	r14, r24
    3588:	f1 08       	sbc	r15, r1
    358a:	80 f7       	brcc	.-32     	; 0x356c <layer_switch_get_action+0x82>
                return i;
            }
        }
    }
    /* fall back to layer 0 */
    return 0;
    358c:	d1 2c       	mov	r13, r1
    358e:	07 c0       	rjmp	.+14     	; 0x359e <layer_switch_get_action+0xb4>
    action_t action = ACTION_TRANSPARENT;
    uint32_t layers = layer_state | default_layer_state;
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
            action = action_for_key(i, key);
    3590:	de 2c       	mov	r13, r14
    3592:	b8 01       	movw	r22, r16
    3594:	8e 2d       	mov	r24, r14
    3596:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <action_for_key>
            if (action.code != (action_t)ACTION_TRANSPARENT.code) {
    359a:	01 97       	sbiw	r24, 0x01	; 1
    359c:	99 f3       	breq	.-26     	; 0x3584 <layer_switch_get_action+0x9a>

    uint8_t layer = 0;
#ifndef NO_TRACK_KEY_PRESS
    if (event.pressed) {
        layer = current_layer_for_key(event.key);
        layer_pressed[event.key.row][event.key.col] = layer;
    359e:	e1 2f       	mov	r30, r17
    35a0:	f0 e0       	ldi	r31, 0x00	; 0
    35a2:	93 e0       	ldi	r25, 0x03	; 3
    35a4:	ee 0f       	add	r30, r30
    35a6:	ff 1f       	adc	r31, r31
    35a8:	9a 95       	dec	r25
    35aa:	e1 f7       	brne	.-8      	; 0x35a4 <layer_switch_get_action+0xba>
    35ac:	e5 56       	subi	r30, 0x65	; 101
    35ae:	fe 4f       	sbci	r31, 0xFE	; 254
    35b0:	e0 0f       	add	r30, r16
    35b2:	f1 1d       	adc	r31, r1
    35b4:	d0 82       	st	Z, r13
    35b6:	0c c0       	rjmp	.+24     	; 0x35d0 <layer_switch_get_action+0xe6>
    } else {
        layer = layer_pressed[event.key.row][event.key.col];
    35b8:	e1 2f       	mov	r30, r17
    35ba:	f0 e0       	ldi	r31, 0x00	; 0
    35bc:	83 e0       	ldi	r24, 0x03	; 3
    35be:	ee 0f       	add	r30, r30
    35c0:	ff 1f       	adc	r31, r31
    35c2:	8a 95       	dec	r24
    35c4:	e1 f7       	brne	.-8      	; 0x35be <layer_switch_get_action+0xd4>
    35c6:	e5 56       	subi	r30, 0x65	; 101
    35c8:	fe 4f       	sbci	r31, 0xFE	; 254
    35ca:	e0 0f       	add	r30, r16
    35cc:	f1 1d       	adc	r31, r1
    35ce:	d0 80       	ld	r13, Z
    }
#else
    layer = current_layer_for_key(event.key);
#endif
    return action_for_key(layer, event.key);
    35d0:	09 83       	std	Y+1, r16	; 0x01
    35d2:	1a 83       	std	Y+2, r17	; 0x02
    35d4:	69 81       	ldd	r22, Y+1	; 0x01
    35d6:	7a 81       	ldd	r23, Y+2	; 0x02
    35d8:	8d 2d       	mov	r24, r13
    35da:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <action_for_key>
}
    35de:	0f 90       	pop	r0
    35e0:	0f 90       	pop	r0
    35e2:	0f 90       	pop	r0
    35e4:	0f 90       	pop	r0
    35e6:	0f 90       	pop	r0
    35e8:	df 91       	pop	r29
    35ea:	cf 91       	pop	r28
    35ec:	1f 91       	pop	r17
    35ee:	0f 91       	pop	r16
    35f0:	ff 90       	pop	r15
    35f2:	ef 90       	pop	r14
    35f4:	df 90       	pop	r13
    35f6:	bf 90       	pop	r11
    35f8:	af 90       	pop	r10
    35fa:	9f 90       	pop	r9
    35fc:	8f 90       	pop	r8
    35fe:	08 95       	ret

00003600 <add_key>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
    3600:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <keyboard_report>
    3604:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <keyboard_report+0x1>
    3608:	f9 01       	movw	r30, r18
    360a:	32 96       	adiw	r30, 0x02	; 2
    360c:	9f ef       	ldi	r25, 0xFF	; 255
    360e:	40 e0       	ldi	r20, 0x00	; 0
    3610:	51 91       	ld	r21, Z+
    3612:	85 17       	cp	r24, r21
    3614:	89 f0       	breq	.+34     	; 0x3638 <add_key+0x38>
    3616:	9f 3f       	cpi	r25, 0xFF	; 255
    3618:	19 f4       	brne	.+6      	; 0x3620 <add_key+0x20>
    361a:	51 11       	cpse	r21, r1
    361c:	01 c0       	rjmp	.+2      	; 0x3620 <add_key+0x20>
    361e:	94 2f       	mov	r25, r20
    3620:	4f 5f       	subi	r20, 0xFF	; 255
    3622:	46 30       	cpi	r20, 0x06	; 6
    3624:	a9 f7       	brne	.-22     	; 0x3610 <add_key+0x10>
    3626:	9f 3f       	cpi	r25, 0xFF	; 255
    3628:	39 f0       	breq	.+14     	; 0x3638 <add_key+0x38>
    362a:	f9 01       	movw	r30, r18
    362c:	e9 0f       	add	r30, r25
    362e:	f1 1d       	adc	r31, r1
    3630:	97 fd       	sbrc	r25, 7
    3632:	fa 95       	dec	r31
    3634:	82 83       	std	Z+2, r24	; 0x02
    3636:	08 95       	ret
    3638:	08 95       	ret

0000363a <del_key>:
    363a:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <keyboard_report>
    363e:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <keyboard_report+0x1>
    3642:	9f 01       	movw	r18, r30
    3644:	2a 5f       	subi	r18, 0xFA	; 250
    3646:	3f 4f       	sbci	r19, 0xFF	; 255
    3648:	92 81       	ldd	r25, Z+2	; 0x02
    364a:	89 13       	cpse	r24, r25
    364c:	01 c0       	rjmp	.+2      	; 0x3650 <del_key+0x16>
    364e:	12 82       	std	Z+2, r1	; 0x02
    3650:	31 96       	adiw	r30, 0x01	; 1
    3652:	e2 17       	cp	r30, r18
    3654:	f3 07       	cpc	r31, r19
    3656:	c1 f7       	brne	.-16     	; 0x3648 <del_key+0xe>
    3658:	08 95       	ret

0000365a <clear_keys>:
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <keyboard_report>
    3662:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <keyboard_report+0x1>
    3666:	e8 0f       	add	r30, r24
    3668:	f9 1f       	adc	r31, r25
    366a:	10 82       	st	Z, r1
    366c:	01 96       	adiw	r24, 0x01	; 1
    366e:	88 30       	cpi	r24, 0x08	; 8
    3670:	91 05       	cpc	r25, r1
    3672:	a9 f7       	brne	.-22     	; 0x365e <clear_keys+0x4>
    3674:	08 95       	ret

00003676 <get_mods>:
    3676:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <real_mods>
    367a:	08 95       	ret

0000367c <add_mods>:
    367c:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <real_mods>
    3680:	89 2b       	or	r24, r25
    3682:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <real_mods>
    3686:	08 95       	ret

00003688 <del_mods>:
    3688:	80 95       	com	r24
    368a:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <real_mods>
    368e:	89 23       	and	r24, r25
    3690:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <real_mods>
    3694:	08 95       	ret

00003696 <set_mods>:
    3696:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <real_mods>
    369a:	08 95       	ret

0000369c <clear_mods>:
    369c:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <real_mods>
    36a0:	08 95       	ret

000036a2 <add_weak_mods>:
    36a2:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <weak_mods>
    36a6:	89 2b       	or	r24, r25
    36a8:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <weak_mods>
    36ac:	08 95       	ret

000036ae <del_weak_mods>:
    36ae:	80 95       	com	r24
    36b0:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <weak_mods>
    36b4:	89 23       	and	r24, r25
    36b6:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <weak_mods>
    36ba:	08 95       	ret

000036bc <clear_weak_mods>:
void clear_weak_mods(void) { weak_mods = 0; }
    36bc:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <weak_mods>
    36c0:	08 95       	ret

000036c2 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    36c2:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <oneshot_mods>
    36c6:	08 95       	ret

000036c8 <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    36c8:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <oneshot_mods>
    36cc:	08 95       	ret

000036ce <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    36ce:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <keyboard_report>
    36d2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <keyboard_report+0x1>
    36d6:	fc 01       	movw	r30, r24
    36d8:	31 96       	adiw	r30, 0x01	; 1
    36da:	9c 01       	movw	r18, r24
    36dc:	28 5f       	subi	r18, 0xF8	; 248
    36de:	3f 4f       	sbci	r19, 0xFF	; 255
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    36e0:	80 e0       	ldi	r24, 0x00	; 0
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    36e2:	91 91       	ld	r25, Z+
    36e4:	91 11       	cpse	r25, r1
            cnt++;
    36e6:	8f 5f       	subi	r24, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    36e8:	e2 17       	cp	r30, r18
    36ea:	f3 07       	cpc	r31, r19
    36ec:	d1 f7       	brne	.-12     	; 0x36e2 <has_anykey+0x14>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    36ee:	08 95       	ret

000036f0 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    36f0:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <keyboard_report>
    36f4:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <keyboard_report+0x1>
    36f8:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <real_mods>
    36fc:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    36fe:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <keyboard_report>
    3702:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <keyboard_report+0x1>
    3706:	90 81       	ld	r25, Z
    3708:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <weak_mods>
    370c:	89 2b       	or	r24, r25
    370e:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    3710:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <oneshot_mods>
    3714:	88 23       	and	r24, r24
    3716:	61 f0       	breq	.+24     	; 0x3730 <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3718:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <keyboard_report>
    371c:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <keyboard_report+0x1>
    3720:	90 81       	ld	r25, Z
    3722:	89 2b       	or	r24, r25
    3724:	80 83       	st	Z, r24
        if (has_anykey()) {
    3726:	0e 94 67 1b 	call	0x36ce	; 0x36ce <has_anykey>
    372a:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    372c:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <oneshot_mods>
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    3730:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <keyboard_report>
    3734:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <keyboard_report+0x1>
    3738:	0c 94 a1 0e 	jmp	0x1d42	; 0x1d42 <host_keyboard_send>

0000373c <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    373c:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__data_end+0x1>
    3740:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end>
    3744:	08 95       	ret

00003746 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3746:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3748:	98 2f       	mov	r25, r24
    374a:	93 73       	andi	r25, 0x33	; 51
    374c:	29 2f       	mov	r18, r25
    374e:	22 0f       	add	r18, r18
    3750:	22 0f       	add	r18, r18
    3752:	98 2f       	mov	r25, r24
    3754:	9c 7c       	andi	r25, 0xCC	; 204
    3756:	96 95       	lsr	r25
    3758:	96 95       	lsr	r25
    375a:	92 2b       	or	r25, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    375c:	89 2f       	mov	r24, r25
    375e:	85 75       	andi	r24, 0x55	; 85
    3760:	88 0f       	add	r24, r24
    3762:	9a 7a       	andi	r25, 0xAA	; 170
    3764:	96 95       	lsr	r25
    return bits;
}
    3766:	89 2b       	or	r24, r25
    3768:	08 95       	ret

0000376a <hook_keyboard_loop>:
    376a:	08 95       	ret

0000376c <hook_matrix_change>:

__attribute__((weak))
void hook_keyboard_loop(void) {}

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    376c:	cf 93       	push	r28
    376e:	df 93       	push	r29
    3770:	00 d0       	rcall	.+0      	; 0x3772 <hook_matrix_change+0x6>
    3772:	00 d0       	rcall	.+0      	; 0x3774 <hook_matrix_change+0x8>
    3774:	1f 92       	push	r1
    3776:	cd b7       	in	r28, 0x3d	; 61
    3778:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    377a:	0f 90       	pop	r0
    377c:	0f 90       	pop	r0
    377e:	0f 90       	pop	r0
    3780:	0f 90       	pop	r0
    3782:	0f 90       	pop	r0
    3784:	df 91       	pop	r29
    3786:	cf 91       	pop	r28
    3788:	08 95       	ret

0000378a <hook_default_layer_change>:
    378a:	08 95       	ret

0000378c <hook_layer_change>:
void hook_default_layer_change(uint32_t default_layer_state) {
    (void)default_layer_state;
}

__attribute__((weak))
void hook_layer_change(uint32_t layer_state) {
    378c:	08 95       	ret

0000378e <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    378e:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <keyboard_set_leds>

00003792 <hook_bootmagic>:
}

__attribute__((weak))
void hook_bootmagic(void) {}
    3792:	08 95       	ret

00003794 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3794:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USB_DeviceState>
    3798:	84 30       	cpi	r24, 0x04	; 4
    379a:	21 f1       	breq	.+72     	; 0x37e4 <suspend_power_down+0x50>
#endif
    wdt_timeout = wdto;
    379c:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <wdt_timeout>

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    37a0:	20 e4       	ldi	r18, 0x40	; 64
    37a2:	88 e1       	ldi	r24, 0x18	; 24
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	0f b6       	in	r0, 0x3f	; 63
    37a8:	f8 94       	cli
    37aa:	a8 95       	wdr
    37ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    37b0:	0f be       	out	0x3f, r0	; 63
    37b2:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    37b6:	83 b7       	in	r24, 0x33	; 51
    37b8:	81 7f       	andi	r24, 0xF1	; 241
    37ba:	84 60       	ori	r24, 0x04	; 4
    37bc:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    37be:	83 b7       	in	r24, 0x33	; 51
    37c0:	81 60       	ori	r24, 0x01	; 1
    37c2:	83 bf       	out	0x33, r24	; 51
    sei();
    37c4:	78 94       	sei
    sleep_cpu();
    37c6:	88 95       	sleep
    sleep_disable();
    37c8:	83 b7       	in	r24, 0x33	; 51
    37ca:	8e 7f       	andi	r24, 0xFE	; 254
    37cc:	83 bf       	out	0x33, r24	; 51
    37ce:	0f b6       	in	r0, 0x3f	; 63
    37d0:	f8 94       	cli
    37d2:	a8 95       	wdr
    37d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    37d8:	88 61       	ori	r24, 0x18	; 24
    37da:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    37de:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    37e2:	0f be       	out	0x3f, r0	; 63
    37e4:	08 95       	ret

000037e6 <suspend_wakeup_condition>:
    power_down(WDTO_15MS);
#endif
}

bool suspend_wakeup_condition(void)
{
    37e6:	cf 93       	push	r28
    matrix_power_up();
    37e8:	0e 94 32 10 	call	0x2064	; 0x2064 <matrix_power_up>
    matrix_scan();
    37ec:	0e 94 ad 06 	call	0xd5a	; 0xd5a <matrix_scan>
    matrix_power_down();
    37f0:	0e 94 33 10 	call	0x2066	; 0x2066 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    37f4:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    37f6:	8c 2f       	mov	r24, r28
    37f8:	0e 94 3b 07 	call	0xe76	; 0xe76 <matrix_get_row>
    37fc:	81 11       	cpse	r24, r1
    37fe:	04 c0       	rjmp	.+8      	; 0x3808 <suspend_wakeup_condition+0x22>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3800:	cf 5f       	subi	r28, 0xFF	; 255
    3802:	c8 30       	cpi	r28, 0x08	; 8
    3804:	c1 f7       	brne	.-16     	; 0x37f6 <suspend_wakeup_condition+0x10>
    3806:	01 c0       	rjmp	.+2      	; 0x380a <suspend_wakeup_condition+0x24>
        if (matrix_get_row(r)) return true;
    3808:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    380a:	cf 91       	pop	r28
    380c:	08 95       	ret

0000380e <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    matrix_clear();
    380e:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <matrix_clear>
    clear_keyboard();
    3812:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <clear_keyboard>

00003816 <__vector_13>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3816:	1f 92       	push	r1
    3818:	0f 92       	push	r0
    381a:	0f b6       	in	r0, 0x3f	; 63
    381c:	0f 92       	push	r0
    381e:	11 24       	eor	r1, r1
    3820:	8f 93       	push	r24
    3822:	9f 93       	push	r25
    3824:	af 93       	push	r26
    3826:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3828:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <wdt_timeout>
    382c:	81 11       	cpse	r24, r1
    382e:	13 c0       	rjmp	.+38     	; 0x3856 <__vector_13+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3830:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <timer_count>
    3834:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <timer_count+0x1>
    3838:	a0 91 f2 01 	lds	r26, 0x01F2	; 0x8001f2 <timer_count+0x2>
    383c:	b0 91 f3 01 	lds	r27, 0x01F3	; 0x8001f3 <timer_count+0x3>
    3840:	41 96       	adiw	r24, 0x11	; 17
    3842:	a1 1d       	adc	r26, r1
    3844:	b1 1d       	adc	r27, r1
    3846:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <timer_count>
    384a:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <timer_count+0x1>
    384e:	a0 93 f2 01 	sts	0x01F2, r26	; 0x8001f2 <timer_count+0x2>
    3852:	b0 93 f3 01 	sts	0x01F3, r27	; 0x8001f3 <timer_count+0x3>
            break;
        default:
            ;
    }
}
    3856:	bf 91       	pop	r27
    3858:	af 91       	pop	r26
    385a:	9f 91       	pop	r25
    385c:	8f 91       	pop	r24
    385e:	0f 90       	pop	r0
    3860:	0f be       	out	0x3f, r0	; 63
    3862:	0f 90       	pop	r0
    3864:	1f 90       	pop	r1
    3866:	18 95       	reti

00003868 <timer_init>:
    cli();
    t = timer_count;
    SREG = sreg;

    return TIMER_DIFF_32(t, last);
}
    3868:	82 e0       	ldi	r24, 0x02	; 2
    386a:	84 bd       	out	0x24, r24	; 36
    386c:	93 e0       	ldi	r25, 0x03	; 3
    386e:	95 bd       	out	0x25, r25	; 37
    3870:	9a ef       	ldi	r25, 0xFA	; 250
    3872:	97 bd       	out	0x27, r25	; 39
    3874:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
    3878:	08 95       	ret

0000387a <timer_read>:
    387a:	2f b7       	in	r18, 0x3f	; 63
    387c:	f8 94       	cli
    387e:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <timer_count>
    3882:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <timer_count+0x1>
    3886:	a0 91 f2 01 	lds	r26, 0x01F2	; 0x8001f2 <timer_count+0x2>
    388a:	b0 91 f3 01 	lds	r27, 0x01F3	; 0x8001f3 <timer_count+0x3>
    388e:	2f bf       	out	0x3f, r18	; 63
    3890:	08 95       	ret

00003892 <timer_read32>:
    3892:	2f b7       	in	r18, 0x3f	; 63
    3894:	f8 94       	cli
    3896:	60 91 f0 01 	lds	r22, 0x01F0	; 0x8001f0 <timer_count>
    389a:	70 91 f1 01 	lds	r23, 0x01F1	; 0x8001f1 <timer_count+0x1>
    389e:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <timer_count+0x2>
    38a2:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <timer_count+0x3>
    38a6:	2f bf       	out	0x3f, r18	; 63
    38a8:	08 95       	ret

000038aa <timer_elapsed>:
    38aa:	cf 92       	push	r12
    38ac:	df 92       	push	r13
    38ae:	ef 92       	push	r14
    38b0:	ff 92       	push	r15
    38b2:	0f 93       	push	r16
    38b4:	1f 93       	push	r17
    38b6:	2f b7       	in	r18, 0x3f	; 63
    38b8:	f8 94       	cli
    38ba:	40 91 f0 01 	lds	r20, 0x01F0	; 0x8001f0 <timer_count>
    38be:	50 91 f1 01 	lds	r21, 0x01F1	; 0x8001f1 <timer_count+0x1>
    38c2:	60 91 f2 01 	lds	r22, 0x01F2	; 0x8001f2 <timer_count+0x2>
    38c6:	70 91 f3 01 	lds	r23, 0x01F3	; 0x8001f3 <timer_count+0x3>
    38ca:	2f bf       	out	0x3f, r18	; 63
    38cc:	6a 01       	movw	r12, r20
    38ce:	7b 01       	movw	r14, r22
    38d0:	ee 24       	eor	r14, r14
    38d2:	ff 24       	eor	r15, r15
    38d4:	8c 01       	movw	r16, r24
    38d6:	20 e0       	ldi	r18, 0x00	; 0
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	c0 16       	cp	r12, r16
    38dc:	d1 06       	cpc	r13, r17
    38de:	e2 06       	cpc	r14, r18
    38e0:	f3 06       	cpc	r15, r19
    38e2:	10 f4       	brcc	.+4      	; 0x38e8 <timer_elapsed+0x3e>
    38e4:	41 50       	subi	r20, 0x01	; 1
    38e6:	51 09       	sbc	r21, r1
    38e8:	9a 01       	movw	r18, r20
    38ea:	28 1b       	sub	r18, r24
    38ec:	39 0b       	sbc	r19, r25
    38ee:	c9 01       	movw	r24, r18
    38f0:	1f 91       	pop	r17
    38f2:	0f 91       	pop	r16
    38f4:	ff 90       	pop	r15
    38f6:	ef 90       	pop	r14
    38f8:	df 90       	pop	r13
    38fa:	cf 90       	pop	r12
    38fc:	08 95       	ret

000038fe <__vector_19>:

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    38fe:	1f 92       	push	r1
    3900:	0f 92       	push	r0
    3902:	0f b6       	in	r0, 0x3f	; 63
    3904:	0f 92       	push	r0
    3906:	11 24       	eor	r1, r1
    3908:	8f 93       	push	r24
    390a:	9f 93       	push	r25
    390c:	af 93       	push	r26
    390e:	bf 93       	push	r27
    timer_count++;
    3910:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <timer_count>
    3914:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <timer_count+0x1>
    3918:	a0 91 f2 01 	lds	r26, 0x01F2	; 0x8001f2 <timer_count+0x2>
    391c:	b0 91 f3 01 	lds	r27, 0x01F3	; 0x8001f3 <timer_count+0x3>
    3920:	01 96       	adiw	r24, 0x01	; 1
    3922:	a1 1d       	adc	r26, r1
    3924:	b1 1d       	adc	r27, r1
    3926:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <timer_count>
    392a:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <timer_count+0x1>
    392e:	a0 93 f2 01 	sts	0x01F2, r26	; 0x8001f2 <timer_count+0x2>
    3932:	b0 93 f3 01 	sts	0x01F3, r27	; 0x8001f3 <timer_count+0x3>
}
    3936:	bf 91       	pop	r27
    3938:	af 91       	pop	r26
    393a:	9f 91       	pop	r25
    393c:	8f 91       	pop	r24
    393e:	0f 90       	pop	r0
    3940:	0f be       	out	0x3f, r0	; 63
    3942:	0f 90       	pop	r0
    3944:	1f 90       	pop	r1
    3946:	18 95       	reti

00003948 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    3948:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <USB_Disable>
    cli();
    394c:	f8 94       	cli
    394e:	2f ef       	ldi	r18, 0xFF	; 255
    3950:	87 ea       	ldi	r24, 0xA7	; 167
    3952:	91 e6       	ldi	r25, 0x61	; 97
    3954:	21 50       	subi	r18, 0x01	; 1
    3956:	80 40       	sbci	r24, 0x00	; 0
    3958:	90 40       	sbci	r25, 0x00	; 0
    395a:	e1 f7       	brne	.-8      	; 0x3954 <bootloader_jump+0xc>
    395c:	00 c0       	rjmp	.+0      	; 0x395e <bootloader_jump+0x16>
    395e:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    3960:	87 e0       	ldi	r24, 0x07	; 7
    3962:	90 eb       	ldi	r25, 0xB0	; 176
    3964:	dc 01       	movw	r26, r24
    3966:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <__bss_end>
    396a:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <__bss_end+0x1>
    396e:	a0 93 0f 02 	sts	0x020F, r26	; 0x80020f <__bss_end+0x2>
    3972:	b0 93 10 02 	sts	0x0210, r27	; 0x800210 <__bss_end+0x3>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    3976:	9c e0       	ldi	r25, 0x0C	; 12
    3978:	88 e1       	ldi	r24, 0x18	; 24
    397a:	0f b6       	in	r0, 0x3f	; 63
    397c:	f8 94       	cli
    397e:	a8 95       	wdr
    3980:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    3984:	0f be       	out	0x3f, r0	; 63
    3986:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    398a:	ff cf       	rjmp	.-2      	; 0x398a <bootloader_jump+0x42>

0000398c <keycode_to_action>:


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    398c:	8d 3b       	cpi	r24, 0xBD	; 189
    398e:	60 f4       	brcc	.+24     	; 0x39a8 <keycode_to_action+0x1c>
    3990:	88 3a       	cpi	r24, 0xA8	; 168
    3992:	90 f5       	brcc	.+100    	; 0x39f8 <keycode_to_action+0x6c>
    3994:	85 3a       	cpi	r24, 0xA5	; 165
    3996:	28 f5       	brcc	.+74     	; 0x39e2 <keycode_to_action+0x56>
    3998:	84 30       	cpi	r24, 0x04	; 4
    399a:	08 f5       	brcc	.+66     	; 0x39de <keycode_to_action+0x52>
    399c:	81 30       	cpi	r24, 0x01	; 1
    399e:	09 f0       	breq	.+2      	; 0x39a2 <keycode_to_action+0x16>
    39a0:	86 c0       	rjmp	.+268    	; 0x3aae <keycode_to_action+0x122>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            return (action_t)ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            return (action_t)ACTION_TRANSPARENT;
    39a2:	81 e0       	ldi	r24, 0x01	; 1
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	08 95       	ret


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    39a8:	88 3e       	cpi	r24, 0xE8	; 232
    39aa:	98 f4       	brcc	.+38     	; 0x39d2 <keycode_to_action+0x46>
    39ac:	80 3e       	cpi	r24, 0xE0	; 224
    39ae:	b8 f4       	brcc	.+46     	; 0x39de <keycode_to_action+0x52>
    39b0:	8f 3b       	cpi	r24, 0xBF	; 191
    39b2:	09 f0       	breq	.+2      	; 0x39b6 <keycode_to_action+0x2a>
    39b4:	7c c0       	rjmp	.+248    	; 0x3aae <keycode_to_action+0x122>
            break;
        case KC_TRNS:
            return (action_t)ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    39b6:	0e 94 ee 14 	call	0x29dc	; 0x29dc <clear_keyboard>
    39ba:	2f ef       	ldi	r18, 0xFF	; 255
    39bc:	80 e7       	ldi	r24, 0x70	; 112
    39be:	92 e0       	ldi	r25, 0x02	; 2
    39c0:	21 50       	subi	r18, 0x01	; 1
    39c2:	80 40       	sbci	r24, 0x00	; 0
    39c4:	90 40       	sbci	r25, 0x00	; 0
    39c6:	e1 f7       	brne	.-8      	; 0x39c0 <keycode_to_action+0x34>
    39c8:	00 c0       	rjmp	.+0      	; 0x39ca <keycode_to_action+0x3e>
    39ca:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    39cc:	0e 94 a4 1c 	call	0x3948	; 0x3948 <bootloader_jump>
    39d0:	6e c0       	rjmp	.+220    	; 0x3aae <keycode_to_action+0x122>


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    39d2:	80 3f       	cpi	r24, 0xF0	; 240
    39d4:	08 f4       	brcc	.+2      	; 0x39d8 <keycode_to_action+0x4c>
    39d6:	6b c0       	rjmp	.+214    	; 0x3aae <keycode_to_action+0x122>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            return (action_t)ACTION_MOUSEKEY(keycode);
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	90 65       	ori	r25, 0x50	; 80
    39dc:	08 95       	ret
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            return (action_t)ACTION_KEY(keycode);
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	08 95       	ret
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            return (action_t)ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    39e2:	85 3a       	cpi	r24, 0xA5	; 165
    39e4:	21 f0       	breq	.+8      	; 0x39ee <keycode_to_action+0x62>
    39e6:	86 3a       	cpi	r24, 0xA6	; 166
    39e8:	21 f0       	breq	.+8      	; 0x39f2 <keycode_to_action+0x66>
    39ea:	33 e8       	ldi	r19, 0x83	; 131
    39ec:	03 c0       	rjmp	.+6      	; 0x39f4 <keycode_to_action+0x68>
    39ee:	31 e8       	ldi	r19, 0x81	; 129
    39f0:	01 c0       	rjmp	.+2      	; 0x39f4 <keycode_to_action+0x68>
    39f2:	32 e8       	ldi	r19, 0x82	; 130
    39f4:	20 e4       	ldi	r18, 0x40	; 64
    39f6:	58 c0       	rjmp	.+176    	; 0x3aa8 <keycode_to_action+0x11c>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    39f8:	88 3a       	cpi	r24, 0xA8	; 168
    39fa:	51 f1       	breq	.+84     	; 0x3a50 <keycode_to_action+0xc4>
    39fc:	89 3a       	cpi	r24, 0xA9	; 169
    39fe:	59 f1       	breq	.+86     	; 0x3a56 <keycode_to_action+0xca>
    3a00:	8a 3a       	cpi	r24, 0xAA	; 170
    3a02:	59 f1       	breq	.+86     	; 0x3a5a <keycode_to_action+0xce>
    3a04:	8b 3a       	cpi	r24, 0xAB	; 171
    3a06:	59 f1       	breq	.+86     	; 0x3a5e <keycode_to_action+0xd2>
    3a08:	8c 3a       	cpi	r24, 0xAC	; 172
    3a0a:	59 f1       	breq	.+86     	; 0x3a62 <keycode_to_action+0xd6>
    3a0c:	8d 3a       	cpi	r24, 0xAD	; 173
    3a0e:	59 f1       	breq	.+86     	; 0x3a66 <keycode_to_action+0xda>
    3a10:	8e 3a       	cpi	r24, 0xAE	; 174
    3a12:	59 f1       	breq	.+86     	; 0x3a6a <keycode_to_action+0xde>
    3a14:	8f 3a       	cpi	r24, 0xAF	; 175
    3a16:	59 f1       	breq	.+86     	; 0x3a6e <keycode_to_action+0xe2>
    3a18:	81 3b       	cpi	r24, 0xB1	; 177
    3a1a:	59 f1       	breq	.+86     	; 0x3a72 <keycode_to_action+0xe6>
    3a1c:	80 3b       	cpi	r24, 0xB0	; 176
    3a1e:	59 f1       	breq	.+86     	; 0x3a76 <keycode_to_action+0xea>
    3a20:	82 3b       	cpi	r24, 0xB2	; 178
    3a22:	59 f1       	breq	.+86     	; 0x3a7a <keycode_to_action+0xee>
    3a24:	83 3b       	cpi	r24, 0xB3	; 179
    3a26:	59 f1       	breq	.+86     	; 0x3a7e <keycode_to_action+0xf2>
    3a28:	84 3b       	cpi	r24, 0xB4	; 180
    3a2a:	59 f1       	breq	.+86     	; 0x3a82 <keycode_to_action+0xf6>
    3a2c:	85 3b       	cpi	r24, 0xB5	; 181
    3a2e:	59 f1       	breq	.+86     	; 0x3a86 <keycode_to_action+0xfa>
    3a30:	86 3b       	cpi	r24, 0xB6	; 182
    3a32:	61 f1       	breq	.+88     	; 0x3a8c <keycode_to_action+0x100>
    3a34:	87 3b       	cpi	r24, 0xB7	; 183
    3a36:	61 f1       	breq	.+88     	; 0x3a90 <keycode_to_action+0x104>
    3a38:	88 3b       	cpi	r24, 0xB8	; 184
    3a3a:	61 f1       	breq	.+88     	; 0x3a94 <keycode_to_action+0x108>
    3a3c:	89 3b       	cpi	r24, 0xB9	; 185
    3a3e:	61 f1       	breq	.+88     	; 0x3a98 <keycode_to_action+0x10c>
    3a40:	8a 3b       	cpi	r24, 0xBA	; 186
    3a42:	61 f1       	breq	.+88     	; 0x3a9c <keycode_to_action+0x110>
    3a44:	8b 3b       	cpi	r24, 0xBB	; 187
    3a46:	61 f1       	breq	.+88     	; 0x3aa0 <keycode_to_action+0x114>
    3a48:	8c 3b       	cpi	r24, 0xBC	; 188
    3a4a:	61 f1       	breq	.+88     	; 0x3aa4 <keycode_to_action+0x118>
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	01 c0       	rjmp	.+2      	; 0x3a52 <keycode_to_action+0xc6>
    3a50:	32 ee       	ldi	r19, 0xE2	; 226
    3a52:	24 e4       	ldi	r18, 0x44	; 68
    3a54:	29 c0       	rjmp	.+82     	; 0x3aa8 <keycode_to_action+0x11c>
    3a56:	39 ee       	ldi	r19, 0xE9	; 233
    3a58:	fc cf       	rjmp	.-8      	; 0x3a52 <keycode_to_action+0xc6>
    3a5a:	3a ee       	ldi	r19, 0xEA	; 234
    3a5c:	fa cf       	rjmp	.-12     	; 0x3a52 <keycode_to_action+0xc6>
    3a5e:	35 eb       	ldi	r19, 0xB5	; 181
    3a60:	f8 cf       	rjmp	.-16     	; 0x3a52 <keycode_to_action+0xc6>
    3a62:	36 eb       	ldi	r19, 0xB6	; 182
    3a64:	f6 cf       	rjmp	.-20     	; 0x3a52 <keycode_to_action+0xc6>
    3a66:	33 eb       	ldi	r19, 0xB3	; 179
    3a68:	f4 cf       	rjmp	.-24     	; 0x3a52 <keycode_to_action+0xc6>
    3a6a:	34 eb       	ldi	r19, 0xB4	; 180
    3a6c:	f2 cf       	rjmp	.-28     	; 0x3a52 <keycode_to_action+0xc6>
    3a6e:	37 eb       	ldi	r19, 0xB7	; 183
    3a70:	f0 cf       	rjmp	.-32     	; 0x3a52 <keycode_to_action+0xc6>
    3a72:	3c ec       	ldi	r19, 0xCC	; 204
    3a74:	ee cf       	rjmp	.-36     	; 0x3a52 <keycode_to_action+0xc6>
    3a76:	3d ec       	ldi	r19, 0xCD	; 205
    3a78:	ec cf       	rjmp	.-40     	; 0x3a52 <keycode_to_action+0xc6>
    3a7a:	33 e8       	ldi	r19, 0x83	; 131
    3a7c:	05 c0       	rjmp	.+10     	; 0x3a88 <keycode_to_action+0xfc>
    3a7e:	3a e8       	ldi	r19, 0x8A	; 138
    3a80:	03 c0       	rjmp	.+6      	; 0x3a88 <keycode_to_action+0xfc>
    3a82:	32 e9       	ldi	r19, 0x92	; 146
    3a84:	01 c0       	rjmp	.+2      	; 0x3a88 <keycode_to_action+0xfc>
    3a86:	34 e9       	ldi	r19, 0x94	; 148
    3a88:	25 e4       	ldi	r18, 0x45	; 69
    3a8a:	0e c0       	rjmp	.+28     	; 0x3aa8 <keycode_to_action+0x11c>
    3a8c:	31 e2       	ldi	r19, 0x21	; 33
    3a8e:	0b c0       	rjmp	.+22     	; 0x3aa6 <keycode_to_action+0x11a>
    3a90:	33 e2       	ldi	r19, 0x23	; 35
    3a92:	09 c0       	rjmp	.+18     	; 0x3aa6 <keycode_to_action+0x11a>
    3a94:	34 e2       	ldi	r19, 0x24	; 36
    3a96:	07 c0       	rjmp	.+14     	; 0x3aa6 <keycode_to_action+0x11a>
    3a98:	35 e2       	ldi	r19, 0x25	; 37
    3a9a:	05 c0       	rjmp	.+10     	; 0x3aa6 <keycode_to_action+0x11a>
    3a9c:	36 e2       	ldi	r19, 0x26	; 38
    3a9e:	03 c0       	rjmp	.+6      	; 0x3aa6 <keycode_to_action+0x11a>
    3aa0:	37 e2       	ldi	r19, 0x27	; 39
    3aa2:	01 c0       	rjmp	.+2      	; 0x3aa6 <keycode_to_action+0x11a>
    3aa4:	3a e2       	ldi	r19, 0x2A	; 42
    3aa6:	26 e4       	ldi	r18, 0x46	; 70
    3aa8:	83 2f       	mov	r24, r19
    3aaa:	92 2f       	mov	r25, r18
    3aac:	08 95       	ret
            clear_keyboard();
            wait_ms(50);
            bootloader_jump(); // not return
            break;
        default:
            return (action_t)ACTION_NO;
    3aae:	80 e0       	ldi	r24, 0x00	; 0
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
            break;
    }
    return (action_t)ACTION_NO;
}
    3ab2:	08 95       	ret

00003ab4 <action_get_macro>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    3ab4:	80 e0       	ldi	r24, 0x00	; 0
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	08 95       	ret

00003aba <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3aba:	08 95       	ret

00003abc <keymap_key_to_keycode>:

__attribute__ ((weak))
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
#if defined(__AVR__)
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
    3abc:	e8 2f       	mov	r30, r24
    3abe:	f0 e0       	ldi	r31, 0x00	; 0
    3ac0:	83 e0       	ldi	r24, 0x03	; 3
    3ac2:	ee 0f       	add	r30, r30
    3ac4:	ff 1f       	adc	r31, r31
    3ac6:	8a 95       	dec	r24
    3ac8:	e1 f7       	brne	.-8      	; 0x3ac2 <keymap_key_to_keycode+0x6>
    3aca:	e7 0f       	add	r30, r23
    3acc:	f1 1d       	adc	r31, r1
    3ace:	93 e0       	ldi	r25, 0x03	; 3
    3ad0:	ee 0f       	add	r30, r30
    3ad2:	ff 1f       	adc	r31, r31
    3ad4:	9a 95       	dec	r25
    3ad6:	e1 f7       	brne	.-8      	; 0x3ad0 <keymap_key_to_keycode+0x14>
    3ad8:	e6 0f       	add	r30, r22
    3ada:	f1 1d       	adc	r31, r1
    3adc:	e4 54       	subi	r30, 0x44	; 68
    3ade:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae0:	84 91       	lpm	r24, Z
#else
    return keymaps[(layer)][(key.row)][(key.col)];
#endif
}
    3ae2:	08 95       	ret

00003ae4 <keymap_fn_to_action>:

__attribute__ ((weak))
action_t keymap_fn_to_action(uint8_t keycode)
{
#if defined(__AVR__)
    return (action_t)pgm_read_word(&fn_actions[FN_INDEX(keycode)]);
    3ae4:	e8 2f       	mov	r30, r24
    3ae6:	f0 e0       	ldi	r31, 0x00	; 0
    3ae8:	ee 0f       	add	r30, r30
    3aea:	ff 1f       	adc	r31, r31
    3aec:	ea 5c       	subi	r30, 0xCA	; 202
    3aee:	f0 40       	sbci	r31, 0x00	; 0
    3af0:	85 91       	lpm	r24, Z+
    3af2:	94 91       	lpm	r25, Z
#else
    return fn_actions[FN_INDEX(keycode)];
#endif
}
    3af4:	08 95       	ret

00003af6 <action_for_key>:

/* converts key to action */
__attribute__ ((weak))
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3af6:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <keymap_key_to_keycode>
    switch (keycode) {
    3afa:	80 3e       	cpi	r24, 0xE0	; 224
    3afc:	a8 f4       	brcc	.+42     	; 0x3b28 <action_for_key+0x32>
    3afe:	80 3c       	cpi	r24, 0xC0	; 192
    3b00:	00 f5       	brcc	.+64     	; 0x3b42 <action_for_key+0x4c>
    3b02:	81 33       	cpi	r24, 0x31	; 49
    3b04:	09 f4       	brne	.+2      	; 0x3b08 <action_for_key+0x12>
    3b06:	5c c0       	rjmp	.+184    	; 0x3bc0 <action_for_key+0xca>
    3b08:	38 f4       	brcc	.+14     	; 0x3b18 <action_for_key+0x22>
    3b0a:	89 32       	cpi	r24, 0x29	; 41
    3b0c:	09 f4       	brne	.+2      	; 0x3b10 <action_for_key+0x1a>
    3b0e:	52 c0       	rjmp	.+164    	; 0x3bb4 <action_for_key+0xbe>
    3b10:	8a 32       	cpi	r24, 0x2A	; 42
    3b12:	09 f4       	brne	.+2      	; 0x3b16 <action_for_key+0x20>
    3b14:	5b c0       	rjmp	.+182    	; 0x3bcc <action_for_key+0xd6>
    3b16:	5f c0       	rjmp	.+190    	; 0x3bd6 <action_for_key+0xe0>
    3b18:	89 33       	cpi	r24, 0x39	; 57
    3b1a:	b1 f0       	breq	.+44     	; 0x3b48 <action_for_key+0x52>
    3b1c:	82 38       	cpi	r24, 0x82	; 130
    3b1e:	a1 f0       	breq	.+40     	; 0x3b48 <action_for_key+0x52>
    3b20:	85 33       	cpi	r24, 0x35	; 53
    3b22:	09 f4       	brne	.+2      	; 0x3b26 <action_for_key+0x30>
    3b24:	41 c0       	rjmp	.+130    	; 0x3ba8 <action_for_key+0xb2>
    3b26:	57 c0       	rjmp	.+174    	; 0x3bd6 <action_for_key+0xe0>
    3b28:	83 3e       	cpi	r24, 0xE3	; 227
    3b2a:	41 f1       	breq	.+80     	; 0x3b7c <action_for_key+0x86>
    3b2c:	28 f4       	brcc	.+10     	; 0x3b38 <action_for_key+0x42>
    3b2e:	80 3e       	cpi	r24, 0xE0	; 224
    3b30:	99 f0       	breq	.+38     	; 0x3b58 <action_for_key+0x62>
    3b32:	82 3e       	cpi	r24, 0xE2	; 226
    3b34:	b9 f0       	breq	.+46     	; 0x3b64 <action_for_key+0x6e>
    3b36:	4f c0       	rjmp	.+158    	; 0x3bd6 <action_for_key+0xe0>
    3b38:	86 3e       	cpi	r24, 0xE6	; 230
    3b3a:	31 f1       	breq	.+76     	; 0x3b88 <action_for_key+0x92>
    3b3c:	87 3e       	cpi	r24, 0xE7	; 231
    3b3e:	71 f1       	breq	.+92     	; 0x3b9c <action_for_key+0xa6>
    3b40:	4a c0       	rjmp	.+148    	; 0x3bd6 <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3b42:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <keymap_fn_to_action>
    3b46:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3b48:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <keymap_config>
    3b4c:	90 fd       	sbrc	r25, 0
    3b4e:	02 c0       	rjmp	.+4      	; 0x3b54 <action_for_key+0x5e>
    3b50:	91 ff       	sbrs	r25, 1
    3b52:	41 c0       	rjmp	.+130    	; 0x3bd6 <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    3b54:	80 ee       	ldi	r24, 0xE0	; 224
    3b56:	3f c0       	rjmp	.+126    	; 0x3bd6 <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3b58:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <keymap_config>
    3b5c:	80 ff       	sbrs	r24, 0
    3b5e:	fa cf       	rjmp	.-12     	; 0x3b54 <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    3b60:	89 e3       	ldi	r24, 0x39	; 57
    3b62:	39 c0       	rjmp	.+114    	; 0x3bd6 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3b64:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <keymap_config>
    3b68:	82 ff       	sbrs	r24, 2
    3b6a:	0c c0       	rjmp	.+24     	; 0x3b84 <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    3b6c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <keymap_config>
    3b70:	84 ff       	sbrs	r24, 4
    3b72:	02 c0       	rjmp	.+4      	; 0x3b78 <action_for_key+0x82>
                    return keycode_to_action(KC_NO);
    3b74:	80 e0       	ldi	r24, 0x00	; 0
    3b76:	2f c0       	rjmp	.+94     	; 0x3bd6 <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    3b78:	83 ee       	ldi	r24, 0xE3	; 227
    3b7a:	2d c0       	rjmp	.+90     	; 0x3bd6 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3b7c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <keymap_config>
    3b80:	82 ff       	sbrs	r24, 2
    3b82:	f4 cf       	rjmp	.-24     	; 0x3b6c <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(KC_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    3b84:	82 ee       	ldi	r24, 0xE2	; 226
    3b86:	27 c0       	rjmp	.+78     	; 0x3bd6 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(KC_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3b88:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <keymap_config>
    3b8c:	83 ff       	sbrs	r24, 3
    3b8e:	0a c0       	rjmp	.+20     	; 0x3ba4 <action_for_key+0xae>
                if (keymap_config.no_gui) {
    3b90:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <keymap_config>
    3b94:	84 fd       	sbrc	r24, 4
    3b96:	ee cf       	rjmp	.-36     	; 0x3b74 <action_for_key+0x7e>
                    return keycode_to_action(KC_NO);
                }
                return keycode_to_action(KC_RGUI);
    3b98:	87 ee       	ldi	r24, 0xE7	; 231
    3b9a:	1d c0       	rjmp	.+58     	; 0x3bd6 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3b9c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <keymap_config>
    3ba0:	83 ff       	sbrs	r24, 3
    3ba2:	f6 cf       	rjmp	.-20     	; 0x3b90 <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(KC_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    3ba4:	86 ee       	ldi	r24, 0xE6	; 230
    3ba6:	17 c0       	rjmp	.+46     	; 0x3bd6 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(KC_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    3ba8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <keymap_config>
    3bac:	85 ff       	sbrs	r24, 5
    3bae:	06 c0       	rjmp	.+12     	; 0x3bbc <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    3bb0:	89 e2       	ldi	r24, 0x29	; 41
    3bb2:	11 c0       	rjmp	.+34     	; 0x3bd6 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3bb4:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <keymap_config>
    3bb8:	85 ff       	sbrs	r24, 5
    3bba:	fa cf       	rjmp	.-12     	; 0x3bb0 <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    3bbc:	85 e3       	ldi	r24, 0x35	; 53
    3bbe:	0b c0       	rjmp	.+22     	; 0x3bd6 <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3bc0:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <keymap_config>
    3bc4:	86 ff       	sbrs	r24, 6
    3bc6:	06 c0       	rjmp	.+12     	; 0x3bd4 <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    3bc8:	8a e2       	ldi	r24, 0x2A	; 42
    3bca:	05 c0       	rjmp	.+10     	; 0x3bd6 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3bcc:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <keymap_config>
    3bd0:	86 ff       	sbrs	r24, 6
    3bd2:	fa cf       	rjmp	.-12     	; 0x3bc8 <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    3bd4:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    3bd6:	0e 94 c6 1c 	call	0x398c	; 0x398c <keycode_to_action>
    }
}
    3bda:	08 95       	ret

00003bdc <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    3bdc:	cf 92       	push	r12
    3bde:	df 92       	push	r13
    3be0:	ef 92       	push	r14
    3be2:	ff 92       	push	r15
    3be4:	0f 93       	push	r16
    3be6:	1f 93       	push	r17
    3be8:	cf 93       	push	r28
    3bea:	6c 01       	movw	r12, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3bec:	c0 e0       	ldi	r28, 0x00	; 0
        matrix_row_t matrix_row = matrix_get_row(r);
    3bee:	8c 2f       	mov	r24, r28
    3bf0:	0e 94 3b 07 	call	0xe76	; 0xe76 <matrix_get_row>
    3bf4:	00 e0       	ldi	r16, 0x00	; 0
    3bf6:	10 e0       	ldi	r17, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3bf8:	e8 2e       	mov	r14, r24
    3bfa:	f1 2c       	mov	r15, r1
    3bfc:	c7 01       	movw	r24, r14
    3bfe:	00 2e       	mov	r0, r16
    3c00:	02 c0       	rjmp	.+4      	; 0x3c06 <scan_key+0x2a>
    3c02:	95 95       	asr	r25
    3c04:	87 95       	ror	r24
    3c06:	0a 94       	dec	r0
    3c08:	e2 f7       	brpl	.-8      	; 0x3c02 <scan_key+0x26>
    3c0a:	80 ff       	sbrs	r24, 0
    3c0c:	15 c0       	rjmp	.+42     	; 0x3c38 <scan_key+0x5c>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    3c0e:	60 2f       	mov	r22, r16
    3c10:	7c 2f       	mov	r23, r28
    3c12:	80 e0       	ldi	r24, 0x00	; 0
    3c14:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <action_for_key>
                if (action.code == code ||
    3c18:	8c 15       	cp	r24, r12
    3c1a:	9d 05       	cpc	r25, r13
    3c1c:	59 f0       	breq	.+22     	; 0x3c34 <scan_key+0x58>
    3c1e:	29 2f       	mov	r18, r25
    3c20:	20 7e       	andi	r18, 0xE0	; 224
    3c22:	39 2f       	mov	r19, r25
    3c24:	30 7c       	andi	r19, 0xC0	; 192
    3c26:	11 f0       	breq	.+4      	; 0x3c2c <scan_key+0x50>
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
    3c28:	20 3a       	cpi	r18, 0xA0	; 160
    3c2a:	31 f4       	brne	.+12     	; 0x3c38 <scan_key+0x5c>
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	c8 16       	cp	r12, r24
    3c30:	d9 06       	cpc	r13, r25
    3c32:	11 f4       	brne	.+4      	; 0x3c38 <scan_key+0x5c>
                     action.key.code == code)) {
                    return true;
    3c34:	81 e0       	ldi	r24, 0x01	; 1
    3c36:	09 c0       	rjmp	.+18     	; 0x3c4a <scan_key+0x6e>
    3c38:	0f 5f       	subi	r16, 0xFF	; 255
    3c3a:	1f 4f       	sbci	r17, 0xFF	; 255

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    3c3c:	08 30       	cpi	r16, 0x08	; 8
    3c3e:	11 05       	cpc	r17, r1
    3c40:	e9 f6       	brne	.-70     	; 0x3bfc <scan_key+0x20>
    }
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3c42:	cf 5f       	subi	r28, 0xFF	; 255
    3c44:	c8 30       	cpi	r28, 0x08	; 8
    3c46:	99 f6       	brne	.-90     	; 0x3bee <scan_key+0x12>
                    return true;
                }
            }
        }
    }
    return false;
    3c48:	80 e0       	ldi	r24, 0x00	; 0
}
    3c4a:	cf 91       	pop	r28
    3c4c:	1f 91       	pop	r17
    3c4e:	0f 91       	pop	r16
    3c50:	ff 90       	pop	r15
    3c52:	ef 90       	pop	r14
    3c54:	df 90       	pop	r13
    3c56:	cf 90       	pop	r12
    3c58:	08 95       	ret

00003c5a <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    3c5a:	cf 93       	push	r28
    3c5c:	df 93       	push	r29
    3c5e:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    3c60:	8c e2       	ldi	r24, 0x2C	; 44
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <scan_key>
    3c68:	88 23       	and	r24, r24
    3c6a:	29 f0       	breq	.+10     	; 0x3c76 <bootmagic_scan_key+0x1c>

    return scan_key(code);
    3c6c:	ce 01       	movw	r24, r28
}
    3c6e:	df 91       	pop	r29
    3c70:	cf 91       	pop	r28

bool bootmagic_scan_key(uint16_t code)
{
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;

    return scan_key(code);
    3c72:	0c 94 ee 1d 	jmp	0x3bdc	; 0x3bdc <scan_key>
}
    3c76:	80 e0       	ldi	r24, 0x00	; 0
    3c78:	df 91       	pop	r29
    3c7a:	cf 91       	pop	r28
    3c7c:	08 95       	ret

00003c7e <bootmagic>:
#include "hook.h"

keymap_config_t keymap_config;

void bootmagic(void)
{
    3c7e:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    3c80:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <eeconfig_is_enabled>
    3c84:	81 11       	cpse	r24, r1
    3c86:	02 c0       	rjmp	.+4      	; 0x3c8c <bootmagic+0xe>
        eeconfig_init();
    3c88:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("bootmagic scan: ... ");
    3c8c:	85 ea       	ldi	r24, 0xA5	; 165
    3c8e:	93 e0       	ldi	r25, 0x03	; 3
    3c90:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); wait_ms(10); }
    3c94:	c5 e6       	ldi	r28, 0x65	; 101
    3c96:	c1 50       	subi	r28, 0x01	; 1
    3c98:	49 f0       	breq	.+18     	; 0x3cac <bootmagic+0x2e>
    3c9a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <matrix_scan>
    3c9e:	8f e3       	ldi	r24, 0x3F	; 63
    3ca0:	9c e9       	ldi	r25, 0x9C	; 156
    3ca2:	01 97       	sbiw	r24, 0x01	; 1
    3ca4:	f1 f7       	brne	.-4      	; 0x3ca2 <bootmagic+0x24>
    3ca6:	00 c0       	rjmp	.+0      	; 0x3ca8 <bootmagic+0x2a>
    3ca8:	00 00       	nop
    3caa:	f5 cf       	rjmp	.-22     	; 0x3c96 <bootmagic+0x18>
    print("done.\n");
    3cac:	8e e9       	ldi	r24, 0x9E	; 158
    3cae:	93 e0       	ldi	r25, 0x03	; 3
    3cb0:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    3cb4:	89 e2       	ldi	r24, 0x29	; 41
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <bootmagic_scan_key>
    3cbc:	81 11       	cpse	r24, r1
    3cbe:	24 c1       	rjmp	.+584    	; 0x3f08 <bootmagic+0x28a>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    3cc0:	8a e2       	ldi	r24, 0x2A	; 42
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <bootmagic_scan_key>
    3cc8:	81 11       	cpse	r24, r1
        eeconfig_init();
    3cca:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    3cce:	85 e0       	ldi	r24, 0x05	; 5
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <bootmagic_scan_key>
    3cd6:	81 11       	cpse	r24, r1
        bootloader_jump();
    3cd8:	0e 94 a4 1c 	call	0x3948	; 0x3948 <bootloader_jump>
    }

    /* user-defined checks */
    hook_bootmagic();
    3cdc:	0e 94 c9 1b 	call	0x3792	; 0x3792 <hook_bootmagic>

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    3ce0:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <eeconfig_read_debug>
    3ce4:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <debug_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    3ce8:	87 e0       	ldi	r24, 0x07	; 7
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <bootmagic_scan_key>
    3cf0:	88 23       	and	r24, r24
    3cf2:	c1 f1       	breq	.+112    	; 0x3d64 <bootmagic+0xe6>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    3cf4:	8b e1       	ldi	r24, 0x1B	; 27
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <bootmagic_scan_key>
    3cfc:	88 23       	and	r24, r24
    3cfe:	51 f0       	breq	.+20     	; 0x3d14 <bootmagic+0x96>
            debug_config.matrix = !debug_config.matrix;
    3d00:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <debug_config>
    3d04:	81 fb       	bst	r24, 1
    3d06:	22 27       	eor	r18, r18
    3d08:	20 f9       	bld	r18, 0
    3d0a:	91 e0       	ldi	r25, 0x01	; 1
    3d0c:	92 27       	eor	r25, r18
    3d0e:	90 fb       	bst	r25, 0
    3d10:	81 f9       	bld	r24, 1
    3d12:	0f c0       	rjmp	.+30     	; 0x3d32 <bootmagic+0xb4>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    3d14:	8e e0       	ldi	r24, 0x0E	; 14
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <bootmagic_scan_key>
    3d1c:	88 23       	and	r24, r24
    3d1e:	61 f0       	breq	.+24     	; 0x3d38 <bootmagic+0xba>
            debug_config.keyboard = !debug_config.keyboard;
    3d20:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <debug_config>
    3d24:	82 fb       	bst	r24, 2
    3d26:	22 27       	eor	r18, r18
    3d28:	20 f9       	bld	r18, 0
    3d2a:	91 e0       	ldi	r25, 0x01	; 1
    3d2c:	92 27       	eor	r25, r18
    3d2e:	90 fb       	bst	r25, 0
    3d30:	82 f9       	bld	r24, 2
    3d32:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <debug_config>
    3d36:	16 c0       	rjmp	.+44     	; 0x3d64 <bootmagic+0xe6>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    3d38:	80 e1       	ldi	r24, 0x10	; 16
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <bootmagic_scan_key>
    3d40:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <debug_config>
    3d44:	88 23       	and	r24, r24
    3d46:	41 f0       	breq	.+16     	; 0x3d58 <bootmagic+0xda>
            debug_config.mouse = !debug_config.mouse;
    3d48:	93 fb       	bst	r25, 3
    3d4a:	22 27       	eor	r18, r18
    3d4c:	20 f9       	bld	r18, 0
    3d4e:	81 e0       	ldi	r24, 0x01	; 1
    3d50:	82 27       	eor	r24, r18
    3d52:	80 fb       	bst	r24, 0
    3d54:	93 f9       	bld	r25, 3
    3d56:	04 c0       	rjmp	.+8      	; 0x3d60 <bootmagic+0xe2>
        } else {
            debug_config.enable = !debug_config.enable;
    3d58:	89 2f       	mov	r24, r25
    3d5a:	80 95       	com	r24
    3d5c:	80 fb       	bst	r24, 0
    3d5e:	90 f9       	bld	r25, 0
    3d60:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <debug_config>
        }
    }
    eeconfig_write_debug(debug_config.raw);
    3d64:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <debug_config>
    3d68:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    3d6c:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <eeconfig_read_keymap>
    3d70:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    3d74:	80 ee       	ldi	r24, 0xE0	; 224
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <bootmagic_scan_key>
    3d7c:	88 23       	and	r24, r24
    3d7e:	41 f0       	breq	.+16     	; 0x3d90 <bootmagic+0x112>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    3d80:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <keymap_config>
    3d84:	98 2f       	mov	r25, r24
    3d86:	90 95       	com	r25
    3d88:	90 fb       	bst	r25, 0
    3d8a:	80 f9       	bld	r24, 0
    3d8c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    3d90:	89 e3       	ldi	r24, 0x39	; 57
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <bootmagic_scan_key>
    3d98:	88 23       	and	r24, r24
    3d9a:	59 f0       	breq	.+22     	; 0x3db2 <bootmagic+0x134>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    3d9c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <keymap_config>
    3da0:	81 fb       	bst	r24, 1
    3da2:	22 27       	eor	r18, r18
    3da4:	20 f9       	bld	r18, 0
    3da6:	91 e0       	ldi	r25, 0x01	; 1
    3da8:	92 27       	eor	r25, r18
    3daa:	90 fb       	bst	r25, 0
    3dac:	81 f9       	bld	r24, 1
    3dae:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    3db2:	82 ee       	ldi	r24, 0xE2	; 226
    3db4:	90 e0       	ldi	r25, 0x00	; 0
    3db6:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <bootmagic_scan_key>
    3dba:	88 23       	and	r24, r24
    3dbc:	59 f0       	breq	.+22     	; 0x3dd4 <bootmagic+0x156>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    3dbe:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <keymap_config>
    3dc2:	82 fb       	bst	r24, 2
    3dc4:	22 27       	eor	r18, r18
    3dc6:	20 f9       	bld	r18, 0
    3dc8:	91 e0       	ldi	r25, 0x01	; 1
    3dca:	92 27       	eor	r25, r18
    3dcc:	90 fb       	bst	r25, 0
    3dce:	82 f9       	bld	r24, 2
    3dd0:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    3dd4:	86 ee       	ldi	r24, 0xE6	; 230
    3dd6:	90 e0       	ldi	r25, 0x00	; 0
    3dd8:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <bootmagic_scan_key>
    3ddc:	88 23       	and	r24, r24
    3dde:	59 f0       	breq	.+22     	; 0x3df6 <bootmagic+0x178>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    3de0:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <keymap_config>
    3de4:	83 fb       	bst	r24, 3
    3de6:	22 27       	eor	r18, r18
    3de8:	20 f9       	bld	r18, 0
    3dea:	91 e0       	ldi	r25, 0x01	; 1
    3dec:	92 27       	eor	r25, r18
    3dee:	90 fb       	bst	r25, 0
    3df0:	83 f9       	bld	r24, 3
    3df2:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    3df6:	83 ee       	ldi	r24, 0xE3	; 227
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <bootmagic_scan_key>
    3dfe:	88 23       	and	r24, r24
    3e00:	59 f0       	breq	.+22     	; 0x3e18 <bootmagic+0x19a>
        keymap_config.no_gui = !keymap_config.no_gui;
    3e02:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <keymap_config>
    3e06:	84 fb       	bst	r24, 4
    3e08:	22 27       	eor	r18, r18
    3e0a:	20 f9       	bld	r18, 0
    3e0c:	91 e0       	ldi	r25, 0x01	; 1
    3e0e:	92 27       	eor	r25, r18
    3e10:	90 fb       	bst	r25, 0
    3e12:	84 f9       	bld	r24, 4
    3e14:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    3e18:	85 e3       	ldi	r24, 0x35	; 53
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <bootmagic_scan_key>
    3e20:	88 23       	and	r24, r24
    3e22:	59 f0       	breq	.+22     	; 0x3e3a <bootmagic+0x1bc>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    3e24:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <keymap_config>
    3e28:	85 fb       	bst	r24, 5
    3e2a:	22 27       	eor	r18, r18
    3e2c:	20 f9       	bld	r18, 0
    3e2e:	91 e0       	ldi	r25, 0x01	; 1
    3e30:	92 27       	eor	r25, r18
    3e32:	90 fb       	bst	r25, 0
    3e34:	85 f9       	bld	r24, 5
    3e36:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    3e3a:	81 e3       	ldi	r24, 0x31	; 49
    3e3c:	90 e0       	ldi	r25, 0x00	; 0
    3e3e:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <bootmagic_scan_key>
    3e42:	88 23       	and	r24, r24
    3e44:	59 f0       	breq	.+22     	; 0x3e5c <bootmagic+0x1de>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    3e46:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <keymap_config>
    3e4a:	86 fb       	bst	r24, 6
    3e4c:	22 27       	eor	r18, r18
    3e4e:	20 f9       	bld	r18, 0
    3e50:	91 e0       	ldi	r25, 0x01	; 1
    3e52:	92 27       	eor	r25, r18
    3e54:	90 fb       	bst	r25, 0
    3e56:	86 f9       	bld	r24, 6
    3e58:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    3e5c:	81 e1       	ldi	r24, 0x11	; 17
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <bootmagic_scan_key>
    3e64:	88 23       	and	r24, r24
    3e66:	59 f0       	breq	.+22     	; 0x3e7e <bootmagic+0x200>
        keymap_config.nkro = !keymap_config.nkro;
    3e68:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <keymap_config>
    3e6c:	87 fb       	bst	r24, 7
    3e6e:	22 27       	eor	r18, r18
    3e70:	20 f9       	bld	r18, 0
    3e72:	91 e0       	ldi	r25, 0x01	; 1
    3e74:	92 27       	eor	r25, r18
    3e76:	90 fb       	bst	r25, 0
    3e78:	87 f9       	bld	r24, 7
    3e7a:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <keymap_config>
    }
    eeconfig_write_keymap(keymap_config.raw);
    3e7e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <keymap_config>
    3e82:	0e 94 c1 1f 	call	0x3f82	; 0x3f82 <eeconfig_write_keymap>
    keyboard_nkro = keymap_config.nkro;
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    3e86:	87 e2       	ldi	r24, 0x27	; 39
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <bootmagic_scan_key>
    3e8e:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    3e90:	8e e1       	ldi	r24, 0x1E	; 30
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <bootmagic_scan_key>
    3e98:	81 11       	cpse	r24, r1
    3e9a:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    3e9c:	8f e1       	ldi	r24, 0x1F	; 31
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <bootmagic_scan_key>
    3ea4:	81 11       	cpse	r24, r1
    3ea6:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    3ea8:	80 e2       	ldi	r24, 0x20	; 32
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <bootmagic_scan_key>
    3eb0:	81 11       	cpse	r24, r1
    3eb2:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    3eb4:	81 e2       	ldi	r24, 0x21	; 33
    3eb6:	90 e0       	ldi	r25, 0x00	; 0
    3eb8:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <bootmagic_scan_key>
    3ebc:	81 11       	cpse	r24, r1
    3ebe:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    3ec0:	82 e2       	ldi	r24, 0x22	; 34
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <bootmagic_scan_key>
    3ec8:	81 11       	cpse	r24, r1
    3eca:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    3ecc:	83 e2       	ldi	r24, 0x23	; 35
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <bootmagic_scan_key>
    3ed4:	81 11       	cpse	r24, r1
    3ed6:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    3ed8:	84 e2       	ldi	r24, 0x24	; 36
    3eda:	90 e0       	ldi	r25, 0x00	; 0
    3edc:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <bootmagic_scan_key>
    3ee0:	88 23       	and	r24, r24
    3ee2:	11 f0       	breq	.+4      	; 0x3ee8 <bootmagic+0x26a>
    3ee4:	c0 68       	ori	r28, 0x80	; 128
    3ee6:	02 c0       	rjmp	.+4      	; 0x3eec <bootmagic+0x26e>
    if (default_layer) {
    3ee8:	cc 23       	and	r28, r28
    3eea:	29 f0       	breq	.+10     	; 0x3ef6 <bootmagic+0x278>
        eeconfig_write_default_layer(default_layer);
    3eec:	8c 2f       	mov	r24, r28
    3eee:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    3ef2:	6c 2f       	mov	r22, r28
    3ef4:	03 c0       	rjmp	.+6      	; 0x3efc <bootmagic+0x27e>
    } else {
        default_layer = eeconfig_read_default_layer();
    3ef6:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    3efa:	68 2f       	mov	r22, r24
    3efc:	70 e0       	ldi	r23, 0x00	; 0
    3efe:	80 e0       	ldi	r24, 0x00	; 0
    3f00:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    3f02:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    3f04:	0c 94 65 19 	jmp	0x32ca	; 0x32ca <default_layer_set>
    }
}
    3f08:	cf 91       	pop	r28
    3f0a:	08 95       	ret

00003f0c <eeconfig_init>:
    eeprom_write_word(EECONFIG_MAGIC, EECONFIG_MAGIC_NUMBER);
}

void eeconfig_disable(void)
{
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
    3f0c:	6d ee       	ldi	r22, 0xED	; 237
    3f0e:	7e ef       	ldi	r23, 0xFE	; 254
    3f10:	80 e0       	ldi	r24, 0x00	; 0
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	0e 94 1b 29 	call	0x5236	; 0x5236 <eeprom_write_word>
    3f18:	60 e0       	ldi	r22, 0x00	; 0
    3f1a:	82 e0       	ldi	r24, 0x02	; 2
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	0e 94 0d 29 	call	0x521a	; 0x521a <eeprom_write_byte>
    3f22:	60 e0       	ldi	r22, 0x00	; 0
    3f24:	83 e0       	ldi	r24, 0x03	; 3
    3f26:	90 e0       	ldi	r25, 0x00	; 0
    3f28:	0e 94 0d 29 	call	0x521a	; 0x521a <eeprom_write_byte>
    3f2c:	60 e0       	ldi	r22, 0x00	; 0
    3f2e:	84 e0       	ldi	r24, 0x04	; 4
    3f30:	90 e0       	ldi	r25, 0x00	; 0
    3f32:	0e 94 0d 29 	call	0x521a	; 0x521a <eeprom_write_byte>
    3f36:	60 e0       	ldi	r22, 0x00	; 0
    3f38:	85 e0       	ldi	r24, 0x05	; 5
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	0c 94 0d 29 	jmp	0x521a	; 0x521a <eeprom_write_byte>

00003f40 <eeconfig_is_enabled>:
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    3f40:	80 e0       	ldi	r24, 0x00	; 0
    3f42:	90 e0       	ldi	r25, 0x00	; 0
    3f44:	0e 94 07 29 	call	0x520e	; 0x520e <eeprom_read_word>
    3f48:	21 e0       	ldi	r18, 0x01	; 1
    3f4a:	8d 3e       	cpi	r24, 0xED	; 237
    3f4c:	9e 4f       	sbci	r25, 0xFE	; 254
    3f4e:	09 f0       	breq	.+2      	; 0x3f52 <eeconfig_is_enabled+0x12>
    3f50:	20 e0       	ldi	r18, 0x00	; 0
}
    3f52:	82 2f       	mov	r24, r18
    3f54:	08 95       	ret

00003f56 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    3f56:	82 e0       	ldi	r24, 0x02	; 2
    3f58:	90 e0       	ldi	r25, 0x00	; 0
    3f5a:	0c 94 ff 28 	jmp	0x51fe	; 0x51fe <eeprom_read_byte>

00003f5e <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    3f5e:	68 2f       	mov	r22, r24
    3f60:	82 e0       	ldi	r24, 0x02	; 2
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	0c 94 0d 29 	jmp	0x521a	; 0x521a <eeprom_write_byte>

00003f68 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    3f68:	83 e0       	ldi	r24, 0x03	; 3
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	0c 94 ff 28 	jmp	0x51fe	; 0x51fe <eeprom_read_byte>

00003f70 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    3f70:	68 2f       	mov	r22, r24
    3f72:	83 e0       	ldi	r24, 0x03	; 3
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	0c 94 0d 29 	jmp	0x521a	; 0x521a <eeprom_write_byte>

00003f7a <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    3f7a:	84 e0       	ldi	r24, 0x04	; 4
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	0c 94 ff 28 	jmp	0x51fe	; 0x51fe <eeprom_read_byte>

00003f82 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    3f82:	68 2f       	mov	r22, r24
    3f84:	84 e0       	ldi	r24, 0x04	; 4
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	0c 94 0d 29 	jmp	0x521a	; 0x521a <eeprom_write_byte>

00003f8c <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    3f8c:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <mousekey_accel>
    3f90:	80 ff       	sbrs	r24, 0
    3f92:	0c c0       	rjmp	.+24     	; 0x3fac <move_unit+0x20>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    3f94:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_max_speed>
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	65 e0       	ldi	r22, 0x05	; 5
    3f9c:	70 e0       	ldi	r23, 0x00	; 0
    3f9e:	0e 94 b4 28 	call	0x5168	; 0x5168 <__mulhi3>
    3fa2:	95 95       	asr	r25
    3fa4:	87 95       	ror	r24
    3fa6:	95 95       	asr	r25
    3fa8:	87 95       	ror	r24
    3faa:	2e c0       	rjmp	.+92     	; 0x4008 <move_unit+0x7c>
    } else if (mousekey_accel & (1<<1)) {
    3fac:	81 ff       	sbrs	r24, 1
    3fae:	0a c0       	rjmp	.+20     	; 0x3fc4 <move_unit+0x38>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    3fb0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_max_speed>
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	65 e0       	ldi	r22, 0x05	; 5
    3fb8:	70 e0       	ldi	r23, 0x00	; 0
    3fba:	0e 94 b4 28 	call	0x5168	; 0x5168 <__mulhi3>
    3fbe:	95 95       	asr	r25
    3fc0:	87 95       	ror	r24
    3fc2:	22 c0       	rjmp	.+68     	; 0x4008 <move_unit+0x7c>
    } else if (mousekey_accel & (1<<2)) {
    3fc4:	82 ff       	sbrs	r24, 2
    3fc6:	08 c0       	rjmp	.+16     	; 0x3fd8 <move_unit+0x4c>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    3fc8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_max_speed>
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	65 e0       	ldi	r22, 0x05	; 5
    3fd0:	70 e0       	ldi	r23, 0x00	; 0
    3fd2:	0e 94 b4 28 	call	0x5168	; 0x5168 <__mulhi3>
    3fd6:	18 c0       	rjmp	.+48     	; 0x4008 <move_unit+0x7c>
    } else if (mousekey_repeat == 0) {
    3fd8:	20 91 f7 01 	lds	r18, 0x01F7	; 0x8001f7 <mousekey_repeat>
    3fdc:	22 23       	and	r18, r18
    3fde:	d9 f0       	breq	.+54     	; 0x4016 <move_unit+0x8a>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    3fe0:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <mk_time_to_max>
    3fe4:	23 17       	cp	r18, r19
    3fe6:	80 f7       	brcc	.-32     	; 0x3fc8 <move_unit+0x3c>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    3fe8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_max_speed>
    3fec:	90 e0       	ldi	r25, 0x00	; 0
    3fee:	65 e0       	ldi	r22, 0x05	; 5
    3ff0:	70 e0       	ldi	r23, 0x00	; 0
    3ff2:	0e 94 b4 28 	call	0x5168	; 0x5168 <__mulhi3>
    3ff6:	62 2f       	mov	r22, r18
    3ff8:	70 e0       	ldi	r23, 0x00	; 0
    3ffa:	0e 94 b4 28 	call	0x5168	; 0x5168 <__mulhi3>
    3ffe:	63 2f       	mov	r22, r19
    4000:	70 e0       	ldi	r23, 0x00	; 0
    4002:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__divmodhi4>
    4006:	cb 01       	movw	r24, r22
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4008:	80 38       	cpi	r24, 0x80	; 128
    400a:	91 05       	cpc	r25, r1
    400c:	38 f4       	brcc	.+14     	; 0x401c <move_unit+0x90>
    400e:	00 97       	sbiw	r24, 0x00	; 0
    4010:	39 f4       	brne	.+14     	; 0x4020 <move_unit+0x94>
    4012:	81 e0       	ldi	r24, 0x01	; 1
    4014:	05 c0       	rjmp	.+10     	; 0x4020 <move_unit+0x94>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    4016:	85 e0       	ldi	r24, 0x05	; 5
    4018:	90 e0       	ldi	r25, 0x00	; 0
    401a:	08 95       	ret
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    401c:	8f e7       	ldi	r24, 0x7F	; 127
    401e:	08 95       	ret
}
    4020:	08 95       	ret

00004022 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4022:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <mousekey_accel>
    4026:	80 ff       	sbrs	r24, 0
    4028:	08 c0       	rjmp	.+16     	; 0x403a <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    402a:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <mk_wheel_max_speed>
    402e:	70 e0       	ldi	r23, 0x00	; 0
    4030:	75 95       	asr	r23
    4032:	67 95       	ror	r22
    4034:	75 95       	asr	r23
    4036:	67 95       	ror	r22
    4038:	23 c0       	rjmp	.+70     	; 0x4080 <wheel_unit+0x5e>
    } else if (mousekey_accel & (1<<1)) {
    403a:	81 ff       	sbrs	r24, 1
    403c:	06 c0       	rjmp	.+12     	; 0x404a <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    403e:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <mk_wheel_max_speed>
    4042:	70 e0       	ldi	r23, 0x00	; 0
    4044:	75 95       	asr	r23
    4046:	67 95       	ror	r22
    4048:	1b c0       	rjmp	.+54     	; 0x4080 <wheel_unit+0x5e>
    } else if (mousekey_accel & (1<<2)) {
    404a:	82 ff       	sbrs	r24, 2
    404c:	04 c0       	rjmp	.+8      	; 0x4056 <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    404e:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <mk_wheel_max_speed>
    4052:	70 e0       	ldi	r23, 0x00	; 0
    4054:	12 c0       	rjmp	.+36     	; 0x407a <wheel_unit+0x58>
    } else if (mousekey_repeat == 0) {
    4056:	60 91 f7 01 	lds	r22, 0x01F7	; 0x8001f7 <mousekey_repeat>
    405a:	66 23       	and	r22, r22
    405c:	a9 f0       	breq	.+42     	; 0x4088 <wheel_unit+0x66>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    405e:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <mk_wheel_time_to_max>
    4062:	62 17       	cp	r22, r18
    4064:	a0 f7       	brcc	.-24     	; 0x404e <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    4066:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_max_speed>
    406a:	70 e0       	ldi	r23, 0x00	; 0
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	0e 94 b4 28 	call	0x5168	; 0x5168 <__mulhi3>
    4072:	62 2f       	mov	r22, r18
    4074:	70 e0       	ldi	r23, 0x00	; 0
    4076:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    407a:	60 38       	cpi	r22, 0x80	; 128
    407c:	71 05       	cpc	r23, r1
    407e:	40 f4       	brcc	.+16     	; 0x4090 <wheel_unit+0x6e>
    4080:	61 15       	cp	r22, r1
    4082:	71 05       	cpc	r23, r1
    4084:	19 f4       	brne	.+6      	; 0x408c <wheel_unit+0x6a>
    4086:	06 c0       	rjmp	.+12     	; 0x4094 <wheel_unit+0x72>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    4088:	61 e0       	ldi	r22, 0x01	; 1
    408a:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    408c:	86 2f       	mov	r24, r22
    408e:	08 95       	ret
    4090:	8f e7       	ldi	r24, 0x7F	; 127
    4092:	08 95       	ret
    4094:	81 e0       	ldi	r24, 0x01	; 1
}
    4096:	08 95       	ret

00004098 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    4098:	80 3f       	cpi	r24, 0xF0	; 240
    409a:	21 f4       	brne	.+8      	; 0x40a4 <mousekey_on+0xc>
    409c:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <move_unit>
    40a0:	81 95       	neg	r24
    40a2:	04 c0       	rjmp	.+8      	; 0x40ac <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    40a4:	81 3f       	cpi	r24, 0xF1	; 241
    40a6:	29 f4       	brne	.+10     	; 0x40b2 <mousekey_on+0x1a>
    40a8:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <move_unit>
    40ac:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <mouse_report+0x2>
    40b0:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    40b2:	82 3f       	cpi	r24, 0xF2	; 242
    40b4:	21 f4       	brne	.+8      	; 0x40be <mousekey_on+0x26>
    40b6:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <move_unit>
    40ba:	81 95       	neg	r24
    40bc:	04 c0       	rjmp	.+8      	; 0x40c6 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    40be:	83 3f       	cpi	r24, 0xF3	; 243
    40c0:	29 f4       	brne	.+10     	; 0x40cc <mousekey_on+0x34>
    40c2:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <move_unit>
    40c6:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <mouse_report+0x1>
    40ca:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    40cc:	89 3f       	cpi	r24, 0xF9	; 249
    40ce:	19 f4       	brne	.+6      	; 0x40d6 <mousekey_on+0x3e>
    40d0:	0e 94 11 20 	call	0x4022	; 0x4022 <wheel_unit>
    40d4:	05 c0       	rjmp	.+10     	; 0x40e0 <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    40d6:	8a 3f       	cpi	r24, 0xFA	; 250
    40d8:	31 f4       	brne	.+12     	; 0x40e6 <mousekey_on+0x4e>
    40da:	0e 94 11 20 	call	0x4022	; 0x4022 <wheel_unit>
    40de:	81 95       	neg	r24
    40e0:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <mouse_report+0x3>
    40e4:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    40e6:	8b 3f       	cpi	r24, 0xFB	; 251
    40e8:	21 f4       	brne	.+8      	; 0x40f2 <mousekey_on+0x5a>
    40ea:	0e 94 11 20 	call	0x4022	; 0x4022 <wheel_unit>
    40ee:	81 95       	neg	r24
    40f0:	04 c0       	rjmp	.+8      	; 0x40fa <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    40f2:	8c 3f       	cpi	r24, 0xFC	; 252
    40f4:	29 f4       	brne	.+10     	; 0x4100 <mousekey_on+0x68>
    40f6:	0e 94 11 20 	call	0x4022	; 0x4022 <wheel_unit>
    40fa:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <mouse_report+0x4>
    40fe:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    4100:	84 3f       	cpi	r24, 0xF4	; 244
    4102:	21 f4       	brne	.+8      	; 0x410c <mousekey_on+0x74>
    4104:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <mouse_report>
    4108:	81 60       	ori	r24, 0x01	; 1
    410a:	17 c0       	rjmp	.+46     	; 0x413a <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    410c:	85 3f       	cpi	r24, 0xF5	; 245
    410e:	21 f4       	brne	.+8      	; 0x4118 <mousekey_on+0x80>
    4110:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <mouse_report>
    4114:	82 60       	ori	r24, 0x02	; 2
    4116:	11 c0       	rjmp	.+34     	; 0x413a <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    4118:	86 3f       	cpi	r24, 0xF6	; 246
    411a:	21 f4       	brne	.+8      	; 0x4124 <mousekey_on+0x8c>
    411c:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <mouse_report>
    4120:	84 60       	ori	r24, 0x04	; 4
    4122:	0b c0       	rjmp	.+22     	; 0x413a <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    4124:	87 3f       	cpi	r24, 0xF7	; 247
    4126:	21 f4       	brne	.+8      	; 0x4130 <mousekey_on+0x98>
    4128:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <mouse_report>
    412c:	88 60       	ori	r24, 0x08	; 8
    412e:	05 c0       	rjmp	.+10     	; 0x413a <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    4130:	88 3f       	cpi	r24, 0xF8	; 248
    4132:	31 f4       	brne	.+12     	; 0x4140 <mousekey_on+0xa8>
    4134:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <mouse_report>
    4138:	80 61       	ori	r24, 0x10	; 16
    413a:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <mouse_report>
    413e:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    4140:	8d 3f       	cpi	r24, 0xFD	; 253
    4142:	21 f4       	brne	.+8      	; 0x414c <mousekey_on+0xb4>
    4144:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <mousekey_accel>
    4148:	81 60       	ori	r24, 0x01	; 1
    414a:	0b c0       	rjmp	.+22     	; 0x4162 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    414c:	8e 3f       	cpi	r24, 0xFE	; 254
    414e:	21 f4       	brne	.+8      	; 0x4158 <mousekey_on+0xc0>
    4150:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <mousekey_accel>
    4154:	82 60       	ori	r24, 0x02	; 2
    4156:	05 c0       	rjmp	.+10     	; 0x4162 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    4158:	8f 3f       	cpi	r24, 0xFF	; 255
    415a:	29 f4       	brne	.+10     	; 0x4166 <mousekey_on+0xce>
    415c:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <mousekey_accel>
    4160:	84 60       	ori	r24, 0x04	; 4
    4162:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <mousekey_accel>
    4166:	08 95       	ret

00004168 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    4168:	80 3f       	cpi	r24, 0xF0	; 240
    416a:	39 f4       	brne	.+14     	; 0x417a <mousekey_off+0x12>
    416c:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <mouse_report+0x2>
    4170:	87 ff       	sbrs	r24, 7
    4172:	6c c0       	rjmp	.+216    	; 0x424c <mousekey_off+0xe4>
    4174:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <mouse_report+0x2>
    4178:	69 c0       	rjmp	.+210    	; 0x424c <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    417a:	81 3f       	cpi	r24, 0xF1	; 241
    417c:	29 f4       	brne	.+10     	; 0x4188 <mousekey_off+0x20>
    417e:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <mouse_report+0x2>
    4182:	18 16       	cp	r1, r24
    4184:	bc f3       	brlt	.-18     	; 0x4174 <mousekey_off+0xc>
    4186:	62 c0       	rjmp	.+196    	; 0x424c <mousekey_off+0xe4>
    4188:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <mouse_report+0x1>
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    418c:	82 3f       	cpi	r24, 0xF2	; 242
    418e:	29 f4       	brne	.+10     	; 0x419a <mousekey_off+0x32>
    4190:	97 ff       	sbrs	r25, 7
    4192:	5c c0       	rjmp	.+184    	; 0x424c <mousekey_off+0xe4>
    4194:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <mouse_report+0x1>
    4198:	59 c0       	rjmp	.+178    	; 0x424c <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    419a:	83 3f       	cpi	r24, 0xF3	; 243
    419c:	19 f4       	brne	.+6      	; 0x41a4 <mousekey_off+0x3c>
    419e:	19 16       	cp	r1, r25
    41a0:	cc f3       	brlt	.-14     	; 0x4194 <mousekey_off+0x2c>
    41a2:	54 c0       	rjmp	.+168    	; 0x424c <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    41a4:	89 3f       	cpi	r24, 0xF9	; 249
    41a6:	41 f4       	brne	.+16     	; 0x41b8 <mousekey_off+0x50>
    41a8:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <mouse_report+0x3>
    41ac:	18 16       	cp	r1, r24
    41ae:	0c f0       	brlt	.+2      	; 0x41b2 <mousekey_off+0x4a>
    41b0:	4d c0       	rjmp	.+154    	; 0x424c <mousekey_off+0xe4>
    41b2:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <mouse_report+0x3>
    41b6:	4a c0       	rjmp	.+148    	; 0x424c <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    41b8:	8a 3f       	cpi	r24, 0xFA	; 250
    41ba:	29 f4       	brne	.+10     	; 0x41c6 <mousekey_off+0x5e>
    41bc:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <mouse_report+0x3>
    41c0:	87 ff       	sbrs	r24, 7
    41c2:	44 c0       	rjmp	.+136    	; 0x424c <mousekey_off+0xe4>
    41c4:	f6 cf       	rjmp	.-20     	; 0x41b2 <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    41c6:	8b 3f       	cpi	r24, 0xFB	; 251
    41c8:	39 f4       	brne	.+14     	; 0x41d8 <mousekey_off+0x70>
    41ca:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <mouse_report+0x4>
    41ce:	87 ff       	sbrs	r24, 7
    41d0:	3d c0       	rjmp	.+122    	; 0x424c <mousekey_off+0xe4>
    41d2:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <mouse_report+0x4>
    41d6:	3a c0       	rjmp	.+116    	; 0x424c <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    41d8:	8c 3f       	cpi	r24, 0xFC	; 252
    41da:	29 f4       	brne	.+10     	; 0x41e6 <mousekey_off+0x7e>
    41dc:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <mouse_report+0x4>
    41e0:	18 16       	cp	r1, r24
    41e2:	bc f3       	brlt	.-18     	; 0x41d2 <mousekey_off+0x6a>
    41e4:	33 c0       	rjmp	.+102    	; 0x424c <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    41e6:	84 3f       	cpi	r24, 0xF4	; 244
    41e8:	21 f4       	brne	.+8      	; 0x41f2 <mousekey_off+0x8a>
    41ea:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <mouse_report>
    41ee:	8e 7f       	andi	r24, 0xFE	; 254
    41f0:	17 c0       	rjmp	.+46     	; 0x4220 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    41f2:	85 3f       	cpi	r24, 0xF5	; 245
    41f4:	21 f4       	brne	.+8      	; 0x41fe <mousekey_off+0x96>
    41f6:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <mouse_report>
    41fa:	8d 7f       	andi	r24, 0xFD	; 253
    41fc:	11 c0       	rjmp	.+34     	; 0x4220 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    41fe:	86 3f       	cpi	r24, 0xF6	; 246
    4200:	21 f4       	brne	.+8      	; 0x420a <mousekey_off+0xa2>
    4202:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <mouse_report>
    4206:	8b 7f       	andi	r24, 0xFB	; 251
    4208:	0b c0       	rjmp	.+22     	; 0x4220 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    420a:	87 3f       	cpi	r24, 0xF7	; 247
    420c:	21 f4       	brne	.+8      	; 0x4216 <mousekey_off+0xae>
    420e:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <mouse_report>
    4212:	87 7f       	andi	r24, 0xF7	; 247
    4214:	05 c0       	rjmp	.+10     	; 0x4220 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4216:	88 3f       	cpi	r24, 0xF8	; 248
    4218:	31 f4       	brne	.+12     	; 0x4226 <mousekey_off+0xbe>
    421a:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <mouse_report>
    421e:	8f 7e       	andi	r24, 0xEF	; 239
    4220:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <mouse_report>
    4224:	13 c0       	rjmp	.+38     	; 0x424c <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    4226:	8d 3f       	cpi	r24, 0xFD	; 253
    4228:	21 f4       	brne	.+8      	; 0x4232 <mousekey_off+0xca>
    422a:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <mousekey_accel>
    422e:	8e 7f       	andi	r24, 0xFE	; 254
    4230:	0b c0       	rjmp	.+22     	; 0x4248 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4232:	8e 3f       	cpi	r24, 0xFE	; 254
    4234:	21 f4       	brne	.+8      	; 0x423e <mousekey_off+0xd6>
    4236:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <mousekey_accel>
    423a:	8d 7f       	andi	r24, 0xFD	; 253
    423c:	05 c0       	rjmp	.+10     	; 0x4248 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    423e:	8f 3f       	cpi	r24, 0xFF	; 255
    4240:	29 f4       	brne	.+10     	; 0x424c <mousekey_off+0xe4>
    4242:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <mousekey_accel>
    4246:	8b 7f       	andi	r24, 0xFB	; 251
    4248:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <mousekey_accel>

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    424c:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <mouse_report+0x1>
    4250:	81 11       	cpse	r24, r1
    4252:	0e c0       	rjmp	.+28     	; 0x4270 <mousekey_off+0x108>
    4254:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <mouse_report+0x2>
    4258:	81 11       	cpse	r24, r1
    425a:	0a c0       	rjmp	.+20     	; 0x4270 <mousekey_off+0x108>
    425c:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <mouse_report+0x3>
    4260:	81 11       	cpse	r24, r1
    4262:	06 c0       	rjmp	.+12     	; 0x4270 <mousekey_off+0x108>
    4264:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <mouse_report+0x4>
    4268:	81 11       	cpse	r24, r1
    426a:	02 c0       	rjmp	.+4      	; 0x4270 <mousekey_off+0x108>
        mousekey_repeat = 0;
    426c:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <mousekey_repeat>
    4270:	08 95       	ret

00004272 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    4272:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <debug_config>
    4276:	83 ff       	sbrs	r24, 3
    4278:	7e c0       	rjmp	.+252    	; 0x4376 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    427a:	81 ee       	ldi	r24, 0xE1	; 225
    427c:	93 e0       	ldi	r25, 0x03	; 3
    427e:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    phex(mouse_report.buttons); print("|");
    4282:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <mouse_report>
    4286:	1f 92       	push	r1
    4288:	8f 93       	push	r24
    428a:	8c ed       	ldi	r24, 0xDC	; 220
    428c:	93 e0       	ldi	r25, 0x03	; 3
    428e:	9f 93       	push	r25
    4290:	8f 93       	push	r24
    4292:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    4296:	8a ed       	ldi	r24, 0xDA	; 218
    4298:	93 e0       	ldi	r25, 0x03	; 3
    429a:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    print_decs(mouse_report.x); print(" ");
    429e:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <mouse_report+0x1>
    42a2:	28 2f       	mov	r18, r24
    42a4:	08 2e       	mov	r0, r24
    42a6:	00 0c       	add	r0, r0
    42a8:	33 0b       	sbc	r19, r19
    42aa:	3f 93       	push	r19
    42ac:	8f 93       	push	r24
    42ae:	87 ed       	ldi	r24, 0xD7	; 215
    42b0:	93 e0       	ldi	r25, 0x03	; 3
    42b2:	9f 93       	push	r25
    42b4:	8f 93       	push	r24
    42b6:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    42ba:	85 ed       	ldi	r24, 0xD5	; 213
    42bc:	93 e0       	ldi	r25, 0x03	; 3
    42be:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    print_decs(mouse_report.y); print(" ");
    42c2:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <mouse_report+0x2>
    42c6:	28 2f       	mov	r18, r24
    42c8:	08 2e       	mov	r0, r24
    42ca:	00 0c       	add	r0, r0
    42cc:	33 0b       	sbc	r19, r19
    42ce:	3f 93       	push	r19
    42d0:	8f 93       	push	r24
    42d2:	82 ed       	ldi	r24, 0xD2	; 210
    42d4:	93 e0       	ldi	r25, 0x03	; 3
    42d6:	9f 93       	push	r25
    42d8:	8f 93       	push	r24
    42da:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    42de:	80 ed       	ldi	r24, 0xD0	; 208
    42e0:	93 e0       	ldi	r25, 0x03	; 3
    42e2:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    print_decs(mouse_report.v); print(" ");
    42e6:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <mouse_report+0x3>
    42ea:	28 2f       	mov	r18, r24
    42ec:	08 2e       	mov	r0, r24
    42ee:	00 0c       	add	r0, r0
    42f0:	33 0b       	sbc	r19, r19
    42f2:	3f 93       	push	r19
    42f4:	8f 93       	push	r24
    42f6:	8d ec       	ldi	r24, 0xCD	; 205
    42f8:	93 e0       	ldi	r25, 0x03	; 3
    42fa:	9f 93       	push	r25
    42fc:	8f 93       	push	r24
    42fe:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    4302:	8b ec       	ldi	r24, 0xCB	; 203
    4304:	93 e0       	ldi	r25, 0x03	; 3
    4306:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    print_decs(mouse_report.h); print("](");
    430a:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <mouse_report+0x4>
    430e:	28 2f       	mov	r18, r24
    4310:	08 2e       	mov	r0, r24
    4312:	00 0c       	add	r0, r0
    4314:	33 0b       	sbc	r19, r19
    4316:	3f 93       	push	r19
    4318:	8f 93       	push	r24
    431a:	88 ec       	ldi	r24, 0xC8	; 200
    431c:	93 e0       	ldi	r25, 0x03	; 3
    431e:	9f 93       	push	r25
    4320:	8f 93       	push	r24
    4322:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    4326:	85 ec       	ldi	r24, 0xC5	; 197
    4328:	93 e0       	ldi	r25, 0x03	; 3
    432a:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    print_dec(mousekey_repeat); print("/");
    432e:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <mousekey_repeat>
    4332:	1f 92       	push	r1
    4334:	8f 93       	push	r24
    4336:	82 ec       	ldi	r24, 0xC2	; 194
    4338:	93 e0       	ldi	r25, 0x03	; 3
    433a:	9f 93       	push	r25
    433c:	8f 93       	push	r24
    433e:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    4342:	80 ec       	ldi	r24, 0xC0	; 192
    4344:	93 e0       	ldi	r25, 0x03	; 3
    4346:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    print_dec(mousekey_accel); print(")\n");
    434a:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <mousekey_accel>
    434e:	1f 92       	push	r1
    4350:	8f 93       	push	r24
    4352:	8d eb       	ldi	r24, 0xBD	; 189
    4354:	93 e0       	ldi	r25, 0x03	; 3
    4356:	9f 93       	push	r25
    4358:	8f 93       	push	r24
    435a:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    435e:	8a eb       	ldi	r24, 0xBA	; 186
    4360:	93 e0       	ldi	r25, 0x03	; 3
    4362:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    4366:	8d b7       	in	r24, 0x3d	; 61
    4368:	9e b7       	in	r25, 0x3e	; 62
    436a:	4c 96       	adiw	r24, 0x1c	; 28
    436c:	0f b6       	in	r0, 0x3f	; 63
    436e:	f8 94       	cli
    4370:	9e bf       	out	0x3e, r25	; 62
    4372:	0f be       	out	0x3f, r0	; 63
    4374:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    4376:	88 ef       	ldi	r24, 0xF8	; 248
    4378:	91 e0       	ldi	r25, 0x01	; 1
    437a:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <host_mouse_send>
    last_timer = timer_read();
    437e:	0e 94 3d 1c 	call	0x387a	; 0x387a <timer_read>
    4382:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <last_timer+0x1>
    4386:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <last_timer>
    438a:	08 95       	ret

0000438c <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    438c:	1f 93       	push	r17
    438e:	cf 93       	push	r28
    4390:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    4392:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <last_timer>
    4396:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <last_timer+0x1>
    439a:	0e 94 55 1c 	call	0x38aa	; 0x38aa <timer_elapsed>
    439e:	fc 01       	movw	r30, r24
    43a0:	20 91 f7 01 	lds	r18, 0x01F7	; 0x8001f7 <mousekey_repeat>
    43a4:	22 23       	and	r18, r18
    43a6:	21 f0       	breq	.+8      	; 0x43b0 <mousekey_task+0x24>
    43a8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_interval>
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	07 c0       	rjmp	.+14     	; 0x43be <mousekey_task+0x32>
    43b0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_delay>
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	6a e0       	ldi	r22, 0x0A	; 10
    43b8:	70 e0       	ldi	r23, 0x00	; 0
    43ba:	0e 94 b4 28 	call	0x5168	; 0x5168 <__mulhi3>
    43be:	e8 17       	cp	r30, r24
    43c0:	f9 07       	cpc	r31, r25
    43c2:	08 f4       	brcc	.+2      	; 0x43c6 <mousekey_task+0x3a>
    43c4:	85 c0       	rjmp	.+266    	; 0x44d0 <mousekey_task+0x144>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    43c6:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <mouse_report+0x1>
    43ca:	c0 91 fa 01 	lds	r28, 0x01FA	; 0x8001fa <mouse_report+0x2>
    43ce:	d0 91 fb 01 	lds	r29, 0x01FB	; 0x8001fb <mouse_report+0x3>
    43d2:	10 91 fc 01 	lds	r17, 0x01FC	; 0x8001fc <mouse_report+0x4>
    43d6:	81 11       	cpse	r24, r1
    43d8:	07 c0       	rjmp	.+14     	; 0x43e8 <mousekey_task+0x5c>
    43da:	c1 11       	cpse	r28, r1
    43dc:	75 c0       	rjmp	.+234    	; 0x44c8 <mousekey_task+0x13c>
    43de:	d1 11       	cpse	r29, r1
    43e0:	73 c0       	rjmp	.+230    	; 0x44c8 <mousekey_task+0x13c>
    43e2:	11 11       	cpse	r17, r1
    43e4:	71 c0       	rjmp	.+226    	; 0x44c8 <mousekey_task+0x13c>
    43e6:	74 c0       	rjmp	.+232    	; 0x44d0 <mousekey_task+0x144>
        return;

    if (mousekey_repeat != UINT8_MAX)
    43e8:	2f 3f       	cpi	r18, 0xFF	; 255
    43ea:	19 f0       	breq	.+6      	; 0x43f2 <mousekey_task+0x66>
        mousekey_repeat++;
    43ec:	2f 5f       	subi	r18, 0xFF	; 255
    43ee:	20 93 f7 01 	sts	0x01F7, r18	; 0x8001f7 <mousekey_repeat>


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    43f2:	18 16       	cp	r1, r24
    43f4:	24 f4       	brge	.+8      	; 0x43fe <mousekey_task+0x72>
    43f6:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <move_unit>
    43fa:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <mouse_report+0x1>
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    43fe:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <mouse_report+0x1>
    4402:	87 ff       	sbrs	r24, 7
    4404:	05 c0       	rjmp	.+10     	; 0x4410 <mousekey_task+0x84>
    4406:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <move_unit>
    440a:	81 95       	neg	r24
    440c:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <mouse_report+0x1>
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    4410:	1c 16       	cp	r1, r28
    4412:	24 f4       	brge	.+8      	; 0x441c <mousekey_task+0x90>
    4414:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <move_unit>
    4418:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <mouse_report+0x2>
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    441c:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <mouse_report+0x2>
    4420:	87 ff       	sbrs	r24, 7
    4422:	05 c0       	rjmp	.+10     	; 0x442e <mousekey_task+0xa2>
    4424:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <move_unit>
    4428:	81 95       	neg	r24
    442a:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <mouse_report+0x2>

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    442e:	60 91 f9 01 	lds	r22, 0x01F9	; 0x8001f9 <mouse_report+0x1>
    4432:	66 23       	and	r22, r22
    4434:	31 f1       	breq	.+76     	; 0x4482 <mousekey_task+0xf6>
    4436:	c0 91 fa 01 	lds	r28, 0x01FA	; 0x8001fa <mouse_report+0x2>
    443a:	cc 23       	and	r28, r28
    443c:	11 f1       	breq	.+68     	; 0x4482 <mousekey_task+0xf6>
        mouse_report.x *= 0.7;
    443e:	06 2e       	mov	r0, r22
    4440:	00 0c       	add	r0, r0
    4442:	77 0b       	sbc	r23, r23
    4444:	88 0b       	sbc	r24, r24
    4446:	99 0b       	sbc	r25, r25
    4448:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <__floatsisf>
    444c:	23 e3       	ldi	r18, 0x33	; 51
    444e:	33 e3       	ldi	r19, 0x33	; 51
    4450:	43 e3       	ldi	r20, 0x33	; 51
    4452:	5f e3       	ldi	r21, 0x3F	; 63
    4454:	0e 94 17 28 	call	0x502e	; 0x502e <__mulsf3>
    4458:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <__fixsfsi>
    445c:	60 93 f9 01 	sts	0x01F9, r22	; 0x8001f9 <mouse_report+0x1>
        mouse_report.y *= 0.7;
    4460:	6c 2f       	mov	r22, r28
    4462:	cc 0f       	add	r28, r28
    4464:	77 0b       	sbc	r23, r23
    4466:	88 0b       	sbc	r24, r24
    4468:	99 0b       	sbc	r25, r25
    446a:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <__floatsisf>
    446e:	23 e3       	ldi	r18, 0x33	; 51
    4470:	33 e3       	ldi	r19, 0x33	; 51
    4472:	43 e3       	ldi	r20, 0x33	; 51
    4474:	5f e3       	ldi	r21, 0x3F	; 63
    4476:	0e 94 17 28 	call	0x502e	; 0x502e <__mulsf3>
    447a:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <__fixsfsi>
    447e:	60 93 fa 01 	sts	0x01FA, r22	; 0x8001fa <mouse_report+0x2>
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    4482:	1d 16       	cp	r1, r29
    4484:	24 f4       	brge	.+8      	; 0x448e <mousekey_task+0x102>
    4486:	0e 94 11 20 	call	0x4022	; 0x4022 <wheel_unit>
    448a:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <mouse_report+0x3>
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    448e:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <mouse_report+0x3>
    4492:	87 ff       	sbrs	r24, 7
    4494:	05 c0       	rjmp	.+10     	; 0x44a0 <mousekey_task+0x114>
    4496:	0e 94 11 20 	call	0x4022	; 0x4022 <wheel_unit>
    449a:	81 95       	neg	r24
    449c:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <mouse_report+0x3>
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    44a0:	11 16       	cp	r1, r17
    44a2:	24 f4       	brge	.+8      	; 0x44ac <mousekey_task+0x120>
    44a4:	0e 94 11 20 	call	0x4022	; 0x4022 <wheel_unit>
    44a8:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <mouse_report+0x4>
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    44ac:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <mouse_report+0x4>
    44b0:	87 ff       	sbrs	r24, 7
    44b2:	05 c0       	rjmp	.+10     	; 0x44be <mousekey_task+0x132>
    44b4:	0e 94 11 20 	call	0x4022	; 0x4022 <wheel_unit>
    44b8:	81 95       	neg	r24
    44ba:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <mouse_report+0x4>

    mousekey_send();
}
    44be:	df 91       	pop	r29
    44c0:	cf 91       	pop	r28
    44c2:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    44c4:	0c 94 39 21 	jmp	0x4272	; 0x4272 <mousekey_send>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
        return;

    if (mousekey_repeat != UINT8_MAX)
    44c8:	2f 3f       	cpi	r18, 0xFF	; 255
    44ca:	09 f0       	breq	.+2      	; 0x44ce <mousekey_task+0x142>
    44cc:	8f cf       	rjmp	.-226    	; 0x43ec <mousekey_task+0x60>
    44ce:	a0 cf       	rjmp	.-192    	; 0x4410 <mousekey_task+0x84>
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
}
    44d0:	df 91       	pop	r29
    44d2:	cf 91       	pop	r28
    44d4:	1f 91       	pop	r17
    44d6:	08 95       	ret

000044d8 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    44d8:	e8 ef       	ldi	r30, 0xF8	; 248
    44da:	f1 e0       	ldi	r31, 0x01	; 1
    44dc:	85 e0       	ldi	r24, 0x05	; 5
    44de:	df 01       	movw	r26, r30
    44e0:	1d 92       	st	X+, r1
    44e2:	8a 95       	dec	r24
    44e4:	e9 f7       	brne	.-6      	; 0x44e0 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    44e6:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <mousekey_repeat>
    mousekey_accel = 0;
    44ea:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <mousekey_accel>
    44ee:	08 95       	ret

000044f0 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    44f0:	84 e0       	ldi	r24, 0x04	; 4
    44f2:	96 e0       	ldi	r25, 0x06	; 6
    44f4:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    44f8:	1f 92       	push	r1
    44fa:	81 e0       	ldi	r24, 0x01	; 1
    44fc:	8f 93       	push	r24
    44fe:	1f 92       	push	r1
    4500:	85 e0       	ldi	r24, 0x05	; 5
    4502:	8f 93       	push	r24
    4504:	86 eb       	ldi	r24, 0xB6	; 182
    4506:	95 e0       	ldi	r25, 0x05	; 5
    4508:	9f 93       	push	r25
    450a:	8f 93       	push	r24
    450c:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}
    4510:	0f 90       	pop	r0
    4512:	0f 90       	pop	r0
    4514:	0f 90       	pop	r0
    4516:	0f 90       	pop	r0
    4518:	0f 90       	pop	r0
    451a:	0f 90       	pop	r0
    451c:	08 95       	ret

0000451e <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    451e:	83 30       	cpi	r24, 0x03	; 3
    4520:	e9 f1       	breq	.+122    	; 0x459c <mousekey_param_inc+0x7e>
    4522:	28 f4       	brcc	.+10     	; 0x452e <mousekey_param_inc+0x10>
    4524:	81 30       	cpi	r24, 0x01	; 1
    4526:	61 f0       	breq	.+24     	; 0x4540 <mousekey_param_inc+0x22>
    4528:	82 30       	cpi	r24, 0x02	; 2
    452a:	09 f1       	breq	.+66     	; 0x456e <mousekey_param_inc+0x50>
    452c:	08 95       	ret
    452e:	85 30       	cpi	r24, 0x05	; 5
    4530:	09 f4       	brne	.+2      	; 0x4534 <mousekey_param_inc+0x16>
    4532:	62 c0       	rjmp	.+196    	; 0x45f8 <mousekey_param_inc+0xda>
    4534:	08 f4       	brcc	.+2      	; 0x4538 <mousekey_param_inc+0x1a>
    4536:	49 c0       	rjmp	.+146    	; 0x45ca <mousekey_param_inc+0xac>
    4538:	86 30       	cpi	r24, 0x06	; 6
    453a:	09 f4       	brne	.+2      	; 0x453e <mousekey_param_inc+0x20>
    453c:	74 c0       	rjmp	.+232    	; 0x4626 <mousekey_param_inc+0x108>
    453e:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    4540:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_delay>
    4544:	26 2f       	mov	r18, r22
    4546:	30 e0       	ldi	r19, 0x00	; 0
    4548:	28 0f       	add	r18, r24
    454a:	31 1d       	adc	r19, r1
    454c:	2f 3f       	cpi	r18, 0xFF	; 255
    454e:	31 05       	cpc	r19, r1
    4550:	24 f4       	brge	.+8      	; 0x455a <mousekey_param_inc+0x3c>
                mk_delay += inc;
    4552:	68 0f       	add	r22, r24
    4554:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <mk_delay>
    4558:	03 c0       	rjmp	.+6      	; 0x4560 <mousekey_param_inc+0x42>
            else
                mk_delay = UINT8_MAX;
    455a:	8f ef       	ldi	r24, 0xFF	; 255
    455c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_delay>
            PRINT_SET_VAL(mk_delay);
    4560:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_delay>
    4564:	1f 92       	push	r1
    4566:	8f 93       	push	r24
    4568:	8f ee       	ldi	r24, 0xEF	; 239
    456a:	94 e0       	ldi	r25, 0x04	; 4
    456c:	72 c0       	rjmp	.+228    	; 0x4652 <mousekey_param_inc+0x134>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    456e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_interval>
    4572:	26 2f       	mov	r18, r22
    4574:	30 e0       	ldi	r19, 0x00	; 0
    4576:	28 0f       	add	r18, r24
    4578:	31 1d       	adc	r19, r1
    457a:	2f 3f       	cpi	r18, 0xFF	; 255
    457c:	31 05       	cpc	r19, r1
    457e:	24 f4       	brge	.+8      	; 0x4588 <mousekey_param_inc+0x6a>
                mk_interval += inc;
    4580:	68 0f       	add	r22, r24
    4582:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <mk_interval>
    4586:	03 c0       	rjmp	.+6      	; 0x458e <mousekey_param_inc+0x70>
            else
                mk_interval = UINT8_MAX;
    4588:	8f ef       	ldi	r24, 0xFF	; 255
    458a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mk_interval>
            PRINT_SET_VAL(mk_interval);
    458e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_interval>
    4592:	1f 92       	push	r1
    4594:	8f 93       	push	r24
    4596:	8d ed       	ldi	r24, 0xDD	; 221
    4598:	94 e0       	ldi	r25, 0x04	; 4
    459a:	5b c0       	rjmp	.+182    	; 0x4652 <mousekey_param_inc+0x134>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    459c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_max_speed>
    45a0:	26 2f       	mov	r18, r22
    45a2:	30 e0       	ldi	r19, 0x00	; 0
    45a4:	28 0f       	add	r18, r24
    45a6:	31 1d       	adc	r19, r1
    45a8:	2f 3f       	cpi	r18, 0xFF	; 255
    45aa:	31 05       	cpc	r19, r1
    45ac:	24 f4       	brge	.+8      	; 0x45b6 <mousekey_param_inc+0x98>
                mk_max_speed += inc;
    45ae:	68 0f       	add	r22, r24
    45b0:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <mk_max_speed>
    45b4:	03 c0       	rjmp	.+6      	; 0x45bc <mousekey_param_inc+0x9e>
            else
                mk_max_speed = UINT8_MAX;
    45b6:	8f ef       	ldi	r24, 0xFF	; 255
    45b8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    45bc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_max_speed>
    45c0:	1f 92       	push	r1
    45c2:	8f 93       	push	r24
    45c4:	8a ec       	ldi	r24, 0xCA	; 202
    45c6:	94 e0       	ldi	r25, 0x04	; 4
    45c8:	44 c0       	rjmp	.+136    	; 0x4652 <mousekey_param_inc+0x134>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    45ca:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_time_to_max>
    45ce:	26 2f       	mov	r18, r22
    45d0:	30 e0       	ldi	r19, 0x00	; 0
    45d2:	28 0f       	add	r18, r24
    45d4:	31 1d       	adc	r19, r1
    45d6:	2f 3f       	cpi	r18, 0xFF	; 255
    45d8:	31 05       	cpc	r19, r1
    45da:	24 f4       	brge	.+8      	; 0x45e4 <mousekey_param_inc+0xc6>
                mk_time_to_max += inc;
    45dc:	68 0f       	add	r22, r24
    45de:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <mk_time_to_max>
    45e2:	03 c0       	rjmp	.+6      	; 0x45ea <mousekey_param_inc+0xcc>
            else
                mk_time_to_max = UINT8_MAX;
    45e4:	8f ef       	ldi	r24, 0xFF	; 255
    45e6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    45ea:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_time_to_max>
    45ee:	1f 92       	push	r1
    45f0:	8f 93       	push	r24
    45f2:	85 eb       	ldi	r24, 0xB5	; 181
    45f4:	94 e0       	ldi	r25, 0x04	; 4
    45f6:	2d c0       	rjmp	.+90     	; 0x4652 <mousekey_param_inc+0x134>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    45f8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_max_speed>
    45fc:	26 2f       	mov	r18, r22
    45fe:	30 e0       	ldi	r19, 0x00	; 0
    4600:	28 0f       	add	r18, r24
    4602:	31 1d       	adc	r19, r1
    4604:	2f 3f       	cpi	r18, 0xFF	; 255
    4606:	31 05       	cpc	r19, r1
    4608:	24 f4       	brge	.+8      	; 0x4612 <mousekey_param_inc+0xf4>
                mk_wheel_max_speed += inc;
    460a:	68 0f       	add	r22, r24
    460c:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <mk_wheel_max_speed>
    4610:	03 c0       	rjmp	.+6      	; 0x4618 <mousekey_param_inc+0xfa>
            else
                mk_wheel_max_speed = UINT8_MAX;
    4612:	8f ef       	ldi	r24, 0xFF	; 255
    4614:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    4618:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_max_speed>
    461c:	1f 92       	push	r1
    461e:	8f 93       	push	r24
    4620:	8c e9       	ldi	r24, 0x9C	; 156
    4622:	94 e0       	ldi	r25, 0x04	; 4
    4624:	16 c0       	rjmp	.+44     	; 0x4652 <mousekey_param_inc+0x134>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4626:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mk_wheel_time_to_max>
    462a:	26 2f       	mov	r18, r22
    462c:	30 e0       	ldi	r19, 0x00	; 0
    462e:	28 0f       	add	r18, r24
    4630:	31 1d       	adc	r19, r1
    4632:	2f 3f       	cpi	r18, 0xFF	; 255
    4634:	31 05       	cpc	r19, r1
    4636:	24 f4       	brge	.+8      	; 0x4640 <mousekey_param_inc+0x122>
                mk_wheel_time_to_max += inc;
    4638:	68 0f       	add	r22, r24
    463a:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <mk_wheel_time_to_max>
    463e:	03 c0       	rjmp	.+6      	; 0x4646 <mousekey_param_inc+0x128>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    4640:	8f ef       	ldi	r24, 0xFF	; 255
    4642:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4646:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mk_wheel_time_to_max>
    464a:	1f 92       	push	r1
    464c:	8f 93       	push	r24
    464e:	81 e8       	ldi	r24, 0x81	; 129
    4650:	94 e0       	ldi	r25, 0x04	; 4
    4652:	9f 93       	push	r25
    4654:	8f 93       	push	r24
    4656:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
            break;
    465a:	0f 90       	pop	r0
    465c:	0f 90       	pop	r0
    465e:	0f 90       	pop	r0
    4660:	0f 90       	pop	r0
    4662:	08 95       	ret

00004664 <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4664:	83 30       	cpi	r24, 0x03	; 3
    4666:	81 f1       	breq	.+96     	; 0x46c8 <mousekey_param_dec+0x64>
    4668:	28 f4       	brcc	.+10     	; 0x4674 <mousekey_param_dec+0x10>
    466a:	81 30       	cpi	r24, 0x01	; 1
    466c:	59 f0       	breq	.+22     	; 0x4684 <mousekey_param_dec+0x20>
    466e:	82 30       	cpi	r24, 0x02	; 2
    4670:	d1 f0       	breq	.+52     	; 0x46a6 <mousekey_param_dec+0x42>
    4672:	08 95       	ret
    4674:	85 30       	cpi	r24, 0x05	; 5
    4676:	09 f4       	brne	.+2      	; 0x467a <mousekey_param_dec+0x16>
    4678:	49 c0       	rjmp	.+146    	; 0x470c <mousekey_param_dec+0xa8>
    467a:	b8 f1       	brcs	.+110    	; 0x46ea <mousekey_param_dec+0x86>
    467c:	86 30       	cpi	r24, 0x06	; 6
    467e:	09 f4       	brne	.+2      	; 0x4682 <mousekey_param_dec+0x1e>
    4680:	56 c0       	rjmp	.+172    	; 0x472e <mousekey_param_dec+0xca>
    4682:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    4684:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_delay>
    4688:	68 17       	cp	r22, r24
    468a:	20 f4       	brcc	.+8      	; 0x4694 <mousekey_param_dec+0x30>
                mk_delay -= dec;
    468c:	86 1b       	sub	r24, r22
    468e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_delay>
    4692:	02 c0       	rjmp	.+4      	; 0x4698 <mousekey_param_dec+0x34>
            else
                mk_delay = 0;
    4694:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <mk_delay>
            PRINT_SET_VAL(mk_delay);
    4698:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_delay>
    469c:	1f 92       	push	r1
    469e:	8f 93       	push	r24
    46a0:	82 e7       	ldi	r24, 0x72	; 114
    46a2:	94 e0       	ldi	r25, 0x04	; 4
    46a4:	54 c0       	rjmp	.+168    	; 0x474e <mousekey_param_dec+0xea>
            break;
        case 2:
            if (mk_interval > dec)
    46a6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_interval>
    46aa:	68 17       	cp	r22, r24
    46ac:	20 f4       	brcc	.+8      	; 0x46b6 <mousekey_param_dec+0x52>
                mk_interval -= dec;
    46ae:	86 1b       	sub	r24, r22
    46b0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mk_interval>
    46b4:	02 c0       	rjmp	.+4      	; 0x46ba <mousekey_param_dec+0x56>
            else
                mk_interval = 0;
    46b6:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <mk_interval>
            PRINT_SET_VAL(mk_interval);
    46ba:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_interval>
    46be:	1f 92       	push	r1
    46c0:	8f 93       	push	r24
    46c2:	80 e6       	ldi	r24, 0x60	; 96
    46c4:	94 e0       	ldi	r25, 0x04	; 4
    46c6:	43 c0       	rjmp	.+134    	; 0x474e <mousekey_param_dec+0xea>
            break;
        case 3:
            if (mk_max_speed > dec)
    46c8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_max_speed>
    46cc:	68 17       	cp	r22, r24
    46ce:	20 f4       	brcc	.+8      	; 0x46d8 <mousekey_param_dec+0x74>
                mk_max_speed -= dec;
    46d0:	86 1b       	sub	r24, r22
    46d2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mk_max_speed>
    46d6:	02 c0       	rjmp	.+4      	; 0x46dc <mousekey_param_dec+0x78>
            else
                mk_max_speed = 0;
    46d8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    46dc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_max_speed>
    46e0:	1f 92       	push	r1
    46e2:	8f 93       	push	r24
    46e4:	8d e4       	ldi	r24, 0x4D	; 77
    46e6:	94 e0       	ldi	r25, 0x04	; 4
    46e8:	32 c0       	rjmp	.+100    	; 0x474e <mousekey_param_dec+0xea>
            break;
        case 4:
            if (mk_time_to_max > dec)
    46ea:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_time_to_max>
    46ee:	68 17       	cp	r22, r24
    46f0:	20 f4       	brcc	.+8      	; 0x46fa <mousekey_param_dec+0x96>
                mk_time_to_max -= dec;
    46f2:	86 1b       	sub	r24, r22
    46f4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mk_time_to_max>
    46f8:	02 c0       	rjmp	.+4      	; 0x46fe <mousekey_param_dec+0x9a>
            else
                mk_time_to_max = 0;
    46fa:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    46fe:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_time_to_max>
    4702:	1f 92       	push	r1
    4704:	8f 93       	push	r24
    4706:	88 e3       	ldi	r24, 0x38	; 56
    4708:	94 e0       	ldi	r25, 0x04	; 4
    470a:	21 c0       	rjmp	.+66     	; 0x474e <mousekey_param_dec+0xea>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    470c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_max_speed>
    4710:	68 17       	cp	r22, r24
    4712:	20 f4       	brcc	.+8      	; 0x471c <mousekey_param_dec+0xb8>
                mk_wheel_max_speed -= dec;
    4714:	86 1b       	sub	r24, r22
    4716:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <mk_wheel_max_speed>
    471a:	02 c0       	rjmp	.+4      	; 0x4720 <mousekey_param_dec+0xbc>
            else
                mk_wheel_max_speed = 0;
    471c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    4720:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_max_speed>
    4724:	1f 92       	push	r1
    4726:	8f 93       	push	r24
    4728:	8f e1       	ldi	r24, 0x1F	; 31
    472a:	94 e0       	ldi	r25, 0x04	; 4
    472c:	10 c0       	rjmp	.+32     	; 0x474e <mousekey_param_dec+0xea>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    472e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mk_wheel_time_to_max>
    4732:	68 17       	cp	r22, r24
    4734:	20 f4       	brcc	.+8      	; 0x473e <mousekey_param_dec+0xda>
                mk_wheel_time_to_max -= dec;
    4736:	86 1b       	sub	r24, r22
    4738:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <mk_wheel_time_to_max>
    473c:	02 c0       	rjmp	.+4      	; 0x4742 <mousekey_param_dec+0xde>
            else
                mk_wheel_time_to_max = 0;
    473e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4742:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mk_wheel_time_to_max>
    4746:	1f 92       	push	r1
    4748:	8f 93       	push	r24
    474a:	84 e0       	ldi	r24, 0x04	; 4
    474c:	94 e0       	ldi	r25, 0x04	; 4
    474e:	9f 93       	push	r25
    4750:	8f 93       	push	r24
    4752:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
            break;
    4756:	0f 90       	pop	r0
    4758:	0f 90       	pop	r0
    475a:	0f 90       	pop	r0
    475c:	0f 90       	pop	r0
    475e:	08 95       	ret

00004760 <switch_default_layer>:
    return 0;
}
#endif

static void switch_default_layer(uint8_t layer)
{
    4760:	cf 93       	push	r28
    4762:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    4764:	1f 92       	push	r1
    4766:	8f 93       	push	r24
    4768:	89 e0       	ldi	r24, 0x09	; 9
    476a:	97 e0       	ldi	r25, 0x07	; 7
    476c:	9f 93       	push	r25
    476e:	8f 93       	push	r24
    4770:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    default_layer_set(1UL<<layer);
    4774:	81 e0       	ldi	r24, 0x01	; 1
    4776:	90 e0       	ldi	r25, 0x00	; 0
    4778:	a0 e0       	ldi	r26, 0x00	; 0
    477a:	b0 e0       	ldi	r27, 0x00	; 0
    477c:	bc 01       	movw	r22, r24
    477e:	cd 01       	movw	r24, r26
    4780:	04 c0       	rjmp	.+8      	; 0x478a <switch_default_layer+0x2a>
    4782:	66 0f       	add	r22, r22
    4784:	77 1f       	adc	r23, r23
    4786:	88 1f       	adc	r24, r24
    4788:	99 1f       	adc	r25, r25
    478a:	ca 95       	dec	r28
    478c:	d2 f7       	brpl	.-12     	; 0x4782 <switch_default_layer+0x22>
    478e:	0e 94 65 19 	call	0x32ca	; 0x32ca <default_layer_set>
    clear_keyboard();
    4792:	0f 90       	pop	r0
    4794:	0f 90       	pop	r0
    4796:	0f 90       	pop	r0
    4798:	0f 90       	pop	r0
}
    479a:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    479c:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <clear_keyboard>

000047a0 <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    47a0:	cf 93       	push	r28
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    47a2:	87 32       	cpi	r24, 0x27	; 39
    47a4:	b0 f5       	brcc	.+108    	; 0x4812 <command_common+0x72>
    47a6:	8e 31       	cpi	r24, 0x1E	; 30
    47a8:	08 f0       	brcs	.+2      	; 0x47ac <command_common+0xc>
    47aa:	40 c2       	rjmp	.+1152   	; 0x4c2c <command_common+0x48c>
    47ac:	8e 30       	cpi	r24, 0x0E	; 14
    47ae:	09 f4       	brne	.+2      	; 0x47b2 <command_common+0x12>
    47b0:	be c1       	rjmp	.+892    	; 0x4b2e <command_common+0x38e>
    47b2:	00 f5       	brcc	.+64     	; 0x47f4 <command_common+0x54>
    47b4:	87 30       	cpi	r24, 0x07	; 7
    47b6:	09 f4       	brne	.+2      	; 0x47ba <command_common+0x1a>
    47b8:	8d c1       	rjmp	.+794    	; 0x4ad4 <command_common+0x334>
    47ba:	a8 f4       	brcc	.+42     	; 0x47e6 <command_common+0x46>
    47bc:	86 30       	cpi	r24, 0x06	; 6
    47be:	09 f0       	breq	.+2      	; 0x47c2 <command_common+0x22>
    47c0:	39 c2       	rjmp	.+1138   	; 0x4c34 <command_common+0x494>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    47c2:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <debug_config>
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    47c6:	81 7f       	andi	r24, 0xF1	; 241
    47c8:	8e 7f       	andi	r24, 0xFE	; 254
    47ca:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <debug_config>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    47ce:	8e e0       	ldi	r24, 0x0E	; 14
    47d0:	97 e0       	ldi	r25, 0x07	; 7
    47d2:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    47d6:	82 e0       	ldi	r24, 0x02	; 2
    47d8:	9b e0       	ldi	r25, 0x0B	; 11
    47da:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
            command_state = CONSOLE;
    47de:	81 e0       	ldi	r24, 0x01	; 1
    47e0:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <command_state>
    47e4:	75 c1       	rjmp	.+746    	; 0x4ad0 <command_common+0x330>
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    47e6:	88 30       	cpi	r24, 0x08	; 8
    47e8:	09 f4       	brne	.+2      	; 0x47ec <command_common+0x4c>
    47ea:	3f c0       	rjmp	.+126    	; 0x486a <command_common+0xca>
    47ec:	8b 30       	cpi	r24, 0x0B	; 11
    47ee:	09 f4       	brne	.+2      	; 0x47f2 <command_common+0x52>
    47f0:	6b c1       	rjmp	.+726    	; 0x4ac8 <command_common+0x328>
    47f2:	20 c2       	rjmp	.+1088   	; 0x4c34 <command_common+0x494>
    47f4:	86 31       	cpi	r24, 0x16	; 22
    47f6:	09 f4       	brne	.+2      	; 0x47fa <command_common+0x5a>
    47f8:	e0 c1       	rjmp	.+960    	; 0x4bba <command_common+0x41a>
    47fa:	20 f4       	brcc	.+8      	; 0x4804 <command_common+0x64>
    47fc:	80 31       	cpi	r24, 0x10	; 16
    47fe:	09 f4       	brne	.+2      	; 0x4802 <command_common+0x62>
    4800:	aa c1       	rjmp	.+852    	; 0x4b56 <command_common+0x3b6>
    4802:	18 c2       	rjmp	.+1072   	; 0x4c34 <command_common+0x494>
    4804:	89 31       	cpi	r24, 0x19	; 25
    4806:	09 f4       	brne	.+2      	; 0x480a <command_common+0x6a>
    4808:	c1 c1       	rjmp	.+898    	; 0x4b8c <command_common+0x3ec>
    480a:	8b 31       	cpi	r24, 0x1B	; 27
    480c:	09 f4       	brne	.+2      	; 0x4810 <command_common+0x70>
    480e:	7b c1       	rjmp	.+758    	; 0x4b06 <command_common+0x366>
    4810:	11 c2       	rjmp	.+1058   	; 0x4c34 <command_common+0x494>
    4812:	88 33       	cpi	r24, 0x38	; 56
    4814:	09 f4       	brne	.+2      	; 0x4818 <command_common+0x78>
    4816:	58 c1       	rjmp	.+688    	; 0x4ac8 <command_common+0x328>
    4818:	50 f4       	brcc	.+20     	; 0x482e <command_common+0x8e>
    481a:	89 32       	cpi	r24, 0x29	; 41
    481c:	09 f4       	brne	.+2      	; 0x4820 <command_common+0x80>
    481e:	04 c2       	rjmp	.+1032   	; 0x4c28 <command_common+0x488>
    4820:	85 33       	cpi	r24, 0x35	; 53
    4822:	09 f4       	brne	.+2      	; 0x4826 <command_common+0x86>
    4824:	01 c2       	rjmp	.+1026   	; 0x4c28 <command_common+0x488>
    4826:	87 32       	cpi	r24, 0x27	; 39
    4828:	09 f0       	breq	.+2      	; 0x482c <command_common+0x8c>
    482a:	04 c2       	rjmp	.+1032   	; 0x4c34 <command_common+0x494>
    482c:	fd c1       	rjmp	.+1018   	; 0x4c28 <command_common+0x488>
    482e:	83 34       	cpi	r24, 0x43	; 67
    4830:	09 f4       	brne	.+2      	; 0x4834 <command_common+0x94>
    4832:	fa c1       	rjmp	.+1012   	; 0x4c28 <command_common+0x488>
    4834:	28 f4       	brcc	.+10     	; 0x4840 <command_common+0xa0>
    4836:	8a 33       	cpi	r24, 0x3A	; 58
    4838:	08 f4       	brcc	.+2      	; 0x483c <command_common+0x9c>
    483a:	fc c1       	rjmp	.+1016   	; 0x4c34 <command_common+0x494>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    483c:	89 53       	subi	r24, 0x39	; 57
    483e:	f7 c1       	rjmp	.+1006   	; 0x4c2e <command_common+0x48e>
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    4840:	88 34       	cpi	r24, 0x48	; 72
    4842:	09 f0       	breq	.+2      	; 0x4846 <command_common+0xa6>
    4844:	f7 c1       	rjmp	.+1006   	; 0x4c34 <command_common+0x494>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    4846:	0e 94 ee 14 	call	0x29dc	; 0x29dc <clear_keyboard>
            print("\n\nbootloader... ");
    484a:	81 ef       	ldi	r24, 0xF1	; 241
    484c:	9a e0       	ldi	r25, 0x0A	; 10
    484e:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    4852:	9f ef       	ldi	r25, 0xFF	; 255
    4854:	23 ed       	ldi	r18, 0xD3	; 211
    4856:	80 e3       	ldi	r24, 0x30	; 48
    4858:	91 50       	subi	r25, 0x01	; 1
    485a:	20 40       	sbci	r18, 0x00	; 0
    485c:	80 40       	sbci	r24, 0x00	; 0
    485e:	e1 f7       	brne	.-8      	; 0x4858 <command_common+0xb8>
    4860:	00 c0       	rjmp	.+0      	; 0x4862 <command_common+0xc2>
    4862:	00 00       	nop
            wait_ms(1000);
            bootloader_jump(); // not return
    4864:	0e 94 a4 1c 	call	0x3948	; 0x3948 <bootloader_jump>
    4868:	33 c1       	rjmp	.+614    	; 0x4ad0 <command_common+0x330>
            sleep_led_test = !sleep_led_test;
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    486a:	86 e0       	ldi	r24, 0x06	; 6
    486c:	9b e0       	ldi	r25, 0x0B	; 11
    486e:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4872:	85 e0       	ldi	r24, 0x05	; 5
    4874:	99 e0       	ldi	r25, 0x09	; 9
    4876:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    487a:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <eeconfig_read_default_layer>
    487e:	1f 92       	push	r1
    4880:	8f 93       	push	r24
    4882:	82 e0       	ldi	r24, 0x02	; 2
    4884:	99 e0       	ldi	r25, 0x09	; 9
    4886:	9f 93       	push	r25
    4888:	8f 93       	push	r24
    488a:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    488e:	80 e0       	ldi	r24, 0x00	; 0
    4890:	99 e0       	ldi	r25, 0x09	; 9
    4892:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    4896:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <eeconfig_read_debug>
    489a:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    489c:	8d ee       	ldi	r24, 0xED	; 237
    489e:	98 e0       	ldi	r25, 0x08	; 8
    48a0:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    48a4:	1f 92       	push	r1
    48a6:	cf 93       	push	r28
    48a8:	88 ee       	ldi	r24, 0xE8	; 232
    48aa:	98 e0       	ldi	r25, 0x08	; 8
    48ac:	9f 93       	push	r25
    48ae:	8f 93       	push	r24
    48b0:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    48b4:	86 ee       	ldi	r24, 0xE6	; 230
    48b6:	98 e0       	ldi	r25, 0x08	; 8
    48b8:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    48bc:	8c ed       	ldi	r24, 0xDC	; 220
    48be:	98 e0       	ldi	r25, 0x08	; 8
    48c0:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    48c4:	8c 2f       	mov	r24, r28
    48c6:	81 70       	andi	r24, 0x01	; 1
    48c8:	1f 92       	push	r1
    48ca:	8f 93       	push	r24
    48cc:	89 ed       	ldi	r24, 0xD9	; 217
    48ce:	98 e0       	ldi	r25, 0x08	; 8
    48d0:	9f 93       	push	r25
    48d2:	8f 93       	push	r24
    48d4:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    48d8:	87 ed       	ldi	r24, 0xD7	; 215
    48da:	98 e0       	ldi	r25, 0x08	; 8
    48dc:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    48e0:	8d ec       	ldi	r24, 0xCD	; 205
    48e2:	98 e0       	ldi	r25, 0x08	; 8
    48e4:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    48e8:	c1 fb       	bst	r28, 1
    48ea:	88 27       	eor	r24, r24
    48ec:	80 f9       	bld	r24, 0
    48ee:	1f 92       	push	r1
    48f0:	8f 93       	push	r24
    48f2:	8a ec       	ldi	r24, 0xCA	; 202
    48f4:	98 e0       	ldi	r25, 0x08	; 8
    48f6:	9f 93       	push	r25
    48f8:	8f 93       	push	r24
    48fa:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    48fe:	88 ec       	ldi	r24, 0xC8	; 200
    4900:	98 e0       	ldi	r25, 0x08	; 8
    4902:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4906:	8c eb       	ldi	r24, 0xBC	; 188
    4908:	98 e0       	ldi	r25, 0x08	; 8
    490a:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    490e:	c2 fb       	bst	r28, 2
    4910:	88 27       	eor	r24, r24
    4912:	80 f9       	bld	r24, 0
    4914:	1f 92       	push	r1
    4916:	8f 93       	push	r24
    4918:	89 eb       	ldi	r24, 0xB9	; 185
    491a:	98 e0       	ldi	r25, 0x08	; 8
    491c:	9f 93       	push	r25
    491e:	8f 93       	push	r24
    4920:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    4924:	87 eb       	ldi	r24, 0xB7	; 183
    4926:	98 e0       	ldi	r25, 0x08	; 8
    4928:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    492c:	8e ea       	ldi	r24, 0xAE	; 174
    492e:	98 e0       	ldi	r25, 0x08	; 8
    4930:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    4934:	c3 fb       	bst	r28, 3
    4936:	cc 27       	eor	r28, r28
    4938:	c0 f9       	bld	r28, 0
    493a:	1f 92       	push	r1
    493c:	cf 93       	push	r28
    493e:	8b ea       	ldi	r24, 0xAB	; 171
    4940:	98 e0       	ldi	r25, 0x08	; 8
    4942:	9f 93       	push	r25
    4944:	8f 93       	push	r24
    4946:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    494a:	89 ea       	ldi	r24, 0xA9	; 169
    494c:	98 e0       	ldi	r25, 0x08	; 8
    494e:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    4952:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <eeconfig_read_keymap>
    4956:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4958:	85 e9       	ldi	r24, 0x95	; 149
    495a:	98 e0       	ldi	r25, 0x08	; 8
    495c:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    4960:	1f 92       	push	r1
    4962:	cf 93       	push	r28
    4964:	80 e9       	ldi	r24, 0x90	; 144
    4966:	98 e0       	ldi	r25, 0x08	; 8
    4968:	9f 93       	push	r25
    496a:	8f 93       	push	r24
    496c:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    4970:	8e e8       	ldi	r24, 0x8E	; 142
    4972:	98 e0       	ldi	r25, 0x08	; 8
    4974:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4978:	85 e7       	ldi	r24, 0x75	; 117
    497a:	98 e0       	ldi	r25, 0x08	; 8
    497c:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    4980:	8c 2f       	mov	r24, r28
    4982:	81 70       	andi	r24, 0x01	; 1
    4984:	1f 92       	push	r1
    4986:	8f 93       	push	r24
    4988:	82 e7       	ldi	r24, 0x72	; 114
    498a:	98 e0       	ldi	r25, 0x08	; 8
    498c:	9f 93       	push	r25
    498e:	8f 93       	push	r24
    4990:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    4994:	8d b7       	in	r24, 0x3d	; 61
    4996:	9e b7       	in	r25, 0x3e	; 62
    4998:	80 96       	adiw	r24, 0x20	; 32
    499a:	0f b6       	in	r0, 0x3f	; 63
    499c:	f8 94       	cli
    499e:	9e bf       	out	0x3e, r25	; 62
    49a0:	0f be       	out	0x3f, r0	; 63
    49a2:	8d bf       	out	0x3d, r24	; 61
    49a4:	80 e7       	ldi	r24, 0x70	; 112
    49a6:	98 e0       	ldi	r25, 0x08	; 8
    49a8:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    49ac:	89 e5       	ldi	r24, 0x59	; 89
    49ae:	98 e0       	ldi	r25, 0x08	; 8
    49b0:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    49b4:	c1 fb       	bst	r28, 1
    49b6:	88 27       	eor	r24, r24
    49b8:	80 f9       	bld	r24, 0
    49ba:	1f 92       	push	r1
    49bc:	8f 93       	push	r24
    49be:	86 e5       	ldi	r24, 0x56	; 86
    49c0:	98 e0       	ldi	r25, 0x08	; 8
    49c2:	9f 93       	push	r25
    49c4:	8f 93       	push	r24
    49c6:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    49ca:	84 e5       	ldi	r24, 0x54	; 84
    49cc:	98 e0       	ldi	r25, 0x08	; 8
    49ce:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    49d2:	82 e4       	ldi	r24, 0x42	; 66
    49d4:	98 e0       	ldi	r25, 0x08	; 8
    49d6:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    49da:	c2 fb       	bst	r28, 2
    49dc:	88 27       	eor	r24, r24
    49de:	80 f9       	bld	r24, 0
    49e0:	1f 92       	push	r1
    49e2:	8f 93       	push	r24
    49e4:	8f e3       	ldi	r24, 0x3F	; 63
    49e6:	98 e0       	ldi	r25, 0x08	; 8
    49e8:	9f 93       	push	r25
    49ea:	8f 93       	push	r24
    49ec:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    49f0:	8d e3       	ldi	r24, 0x3D	; 61
    49f2:	98 e0       	ldi	r25, 0x08	; 8
    49f4:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    49f8:	8b e2       	ldi	r24, 0x2B	; 43
    49fa:	98 e0       	ldi	r25, 0x08	; 8
    49fc:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    4a00:	c3 fb       	bst	r28, 3
    4a02:	88 27       	eor	r24, r24
    4a04:	80 f9       	bld	r24, 0
    4a06:	1f 92       	push	r1
    4a08:	8f 93       	push	r24
    4a0a:	88 e2       	ldi	r24, 0x28	; 40
    4a0c:	98 e0       	ldi	r25, 0x08	; 8
    4a0e:	9f 93       	push	r25
    4a10:	8f 93       	push	r24
    4a12:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    4a16:	86 e2       	ldi	r24, 0x26	; 38
    4a18:	98 e0       	ldi	r25, 0x08	; 8
    4a1a:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4a1e:	8c e1       	ldi	r24, 0x1C	; 28
    4a20:	98 e0       	ldi	r25, 0x08	; 8
    4a22:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    4a26:	c4 fb       	bst	r28, 4
    4a28:	88 27       	eor	r24, r24
    4a2a:	80 f9       	bld	r24, 0
    4a2c:	1f 92       	push	r1
    4a2e:	8f 93       	push	r24
    4a30:	89 e1       	ldi	r24, 0x19	; 25
    4a32:	98 e0       	ldi	r25, 0x08	; 8
    4a34:	9f 93       	push	r25
    4a36:	8f 93       	push	r24
    4a38:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    4a3c:	87 e1       	ldi	r24, 0x17	; 23
    4a3e:	98 e0       	ldi	r25, 0x08	; 8
    4a40:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    4a44:	85 e0       	ldi	r24, 0x05	; 5
    4a46:	98 e0       	ldi	r25, 0x08	; 8
    4a48:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    4a4c:	c5 fb       	bst	r28, 5
    4a4e:	88 27       	eor	r24, r24
    4a50:	80 f9       	bld	r24, 0
    4a52:	1f 92       	push	r1
    4a54:	8f 93       	push	r24
    4a56:	82 e0       	ldi	r24, 0x02	; 2
    4a58:	98 e0       	ldi	r25, 0x08	; 8
    4a5a:	9f 93       	push	r25
    4a5c:	8f 93       	push	r24
    4a5e:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    4a62:	80 e0       	ldi	r24, 0x00	; 0
    4a64:	98 e0       	ldi	r25, 0x08	; 8
    4a66:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    4a6a:	84 ee       	ldi	r24, 0xE4	; 228
    4a6c:	97 e0       	ldi	r25, 0x07	; 7
    4a6e:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    4a72:	c6 fb       	bst	r28, 6
    4a74:	88 27       	eor	r24, r24
    4a76:	80 f9       	bld	r24, 0
    4a78:	1f 92       	push	r1
    4a7a:	8f 93       	push	r24
    4a7c:	81 ee       	ldi	r24, 0xE1	; 225
    4a7e:	97 e0       	ldi	r25, 0x07	; 7
    4a80:	9f 93       	push	r25
    4a82:	8f 93       	push	r24
    4a84:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    4a88:	8f ed       	ldi	r24, 0xDF	; 223
    4a8a:	97 e0       	ldi	r25, 0x07	; 7
    4a8c:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    4a90:	87 ed       	ldi	r24, 0xD7	; 215
    4a92:	97 e0       	ldi	r25, 0x07	; 7
    4a94:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    4a98:	c7 fb       	bst	r28, 7
    4a9a:	cc 27       	eor	r28, r28
    4a9c:	c0 f9       	bld	r28, 0
    4a9e:	1f 92       	push	r1
    4aa0:	cf 93       	push	r28
    4aa2:	84 ed       	ldi	r24, 0xD4	; 212
    4aa4:	97 e0       	ldi	r25, 0x07	; 7
    4aa6:	9f 93       	push	r25
    4aa8:	8f 93       	push	r24
    4aaa:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    4aae:	82 ed       	ldi	r24, 0xD2	; 210
    4ab0:	97 e0       	ldi	r25, 0x07	; 7
    4ab2:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    4ab6:	8d b7       	in	r24, 0x3d	; 61
    4ab8:	9e b7       	in	r25, 0x3e	; 62
    4aba:	4c 96       	adiw	r24, 0x1c	; 28
    4abc:	0f b6       	in	r0, 0x3f	; 63
    4abe:	f8 94       	cli
    4ac0:	9e bf       	out	0x3e, r25	; 62
    4ac2:	0f be       	out	0x3f, r0	; 63
    4ac4:	8d bf       	out	0x3d, r24	; 61
    4ac6:	04 c0       	rjmp	.+8      	; 0x4ad0 <command_common+0x330>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    4ac8:	85 e3       	ldi	r24, 0x35	; 53
    4aca:	97 e0       	ldi	r25, 0x07	; 7
    4acc:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    4ad0:	c1 e0       	ldi	r28, 0x01	; 1
    4ad2:	b5 c0       	rjmp	.+362    	; 0x4c3e <command_common+0x49e>
            print("\n\nbootloader... ");
            wait_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    4ad4:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <debug_config>
    4ad8:	c8 2f       	mov	r28, r24
    4ada:	c1 70       	andi	r28, 0x01	; 1
    4adc:	80 ff       	sbrs	r24, 0
    4ade:	09 c0       	rjmp	.+18     	; 0x4af2 <command_common+0x352>
                print("\ndebug: off\n");
    4ae0:	84 ee       	ldi	r24, 0xE4	; 228
    4ae2:	9a e0       	ldi	r25, 0x0A	; 10
    4ae4:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
                debug_matrix   = false;
    4ae8:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <debug_config>
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    4aec:	81 7f       	andi	r24, 0xF1	; 241
    4aee:	8e 7f       	andi	r24, 0xFE	; 254
    4af0:	47 c0       	rjmp	.+142    	; 0x4b80 <command_common+0x3e0>
            } else {
                print("\ndebug: on\n");
    4af2:	88 ed       	ldi	r24, 0xD8	; 216
    4af4:	9a e0       	ldi	r25, 0x0A	; 10
    4af6:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
                debug_enable   = true;
    4afa:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <debug_config>
    4afe:	81 60       	ori	r24, 0x01	; 1
    4b00:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <debug_config>
    4b04:	e5 cf       	rjmp	.-54     	; 0x4ad0 <command_common+0x330>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    4b06:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <debug_config>
    4b0a:	91 fb       	bst	r25, 1
    4b0c:	cc 27       	eor	r28, r28
    4b0e:	c0 f9       	bld	r28, 0
    4b10:	81 e0       	ldi	r24, 0x01	; 1
    4b12:	c8 27       	eor	r28, r24
    4b14:	89 2f       	mov	r24, r25
    4b16:	c0 fb       	bst	r28, 0
    4b18:	81 f9       	bld	r24, 1
    4b1a:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <debug_config>
            if (debug_matrix) {
    4b1e:	cc 23       	and	r28, r28
    4b20:	19 f0       	breq	.+6      	; 0x4b28 <command_common+0x388>
                print("\nmatrix: on\n");
    4b22:	8b ec       	ldi	r24, 0xCB	; 203
    4b24:	9a e0       	ldi	r25, 0x0A	; 10
    4b26:	27 c0       	rjmp	.+78     	; 0x4b76 <command_common+0x3d6>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    4b28:	8d eb       	ldi	r24, 0xBD	; 189
    4b2a:	9a e0       	ldi	r25, 0x0A	; 10
    4b2c:	cf cf       	rjmp	.-98     	; 0x4acc <command_common+0x32c>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    4b2e:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <debug_config>
    4b32:	92 fb       	bst	r25, 2
    4b34:	cc 27       	eor	r28, r28
    4b36:	c0 f9       	bld	r28, 0
    4b38:	81 e0       	ldi	r24, 0x01	; 1
    4b3a:	c8 27       	eor	r28, r24
    4b3c:	89 2f       	mov	r24, r25
    4b3e:	c0 fb       	bst	r28, 0
    4b40:	82 f9       	bld	r24, 2
    4b42:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <debug_config>
            if (debug_keyboard) {
    4b46:	cc 23       	and	r28, r28
    4b48:	19 f0       	breq	.+6      	; 0x4b50 <command_common+0x3b0>
                print("\nkeyboard: on\n");
    4b4a:	8e ea       	ldi	r24, 0xAE	; 174
    4b4c:	9a e0       	ldi	r25, 0x0A	; 10
    4b4e:	13 c0       	rjmp	.+38     	; 0x4b76 <command_common+0x3d6>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    4b50:	8e e9       	ldi	r24, 0x9E	; 158
    4b52:	9a e0       	ldi	r25, 0x0A	; 10
    4b54:	bb cf       	rjmp	.-138    	; 0x4acc <command_common+0x32c>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    4b56:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <debug_config>
    4b5a:	93 fb       	bst	r25, 3
    4b5c:	cc 27       	eor	r28, r28
    4b5e:	c0 f9       	bld	r28, 0
    4b60:	81 e0       	ldi	r24, 0x01	; 1
    4b62:	c8 27       	eor	r28, r24
    4b64:	89 2f       	mov	r24, r25
    4b66:	c0 fb       	bst	r28, 0
    4b68:	83 f9       	bld	r24, 3
    4b6a:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <debug_config>
            if (debug_mouse) {
    4b6e:	cc 23       	and	r28, r28
    4b70:	51 f0       	breq	.+20     	; 0x4b86 <command_common+0x3e6>
                print("\nmouse: on\n");
    4b72:	82 e9       	ldi	r24, 0x92	; 146
    4b74:	9a e0       	ldi	r25, 0x0A	; 10
    4b76:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
                debug_enable = true;
    4b7a:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <debug_config>
    4b7e:	81 60       	ori	r24, 0x01	; 1
    4b80:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <debug_config>
    4b84:	5c c0       	rjmp	.+184    	; 0x4c3e <command_common+0x49e>
            } else {
                print("\nmouse: off\n");
    4b86:	85 e8       	ldi	r24, 0x85	; 133
    4b88:	9a e0       	ldi	r25, 0x0A	; 10
    4b8a:	a0 cf       	rjmp	.-192    	; 0x4acc <command_common+0x32c>
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    4b8c:	86 e7       	ldi	r24, 0x76	; 118
    4b8e:	9a e0       	ldi	r25, 0x0A	; 10
    4b90:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    4b94:	8e e4       	ldi	r24, 0x4E	; 78
    4b96:	9a e0       	ldi	r25, 0x0A	; 10
    4b98:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    4b9c:	89 e1       	ldi	r24, 0x19	; 25
    4b9e:	9a e0       	ldi	r25, 0x0A	; 10
    4ba0:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4ba4:	8c ee       	ldi	r24, 0xEC	; 236
    4ba6:	99 e0       	ldi	r25, 0x09	; 9
    4ba8:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
            /* build options */
            print("OPTIONS:"
    4bac:	8c ea       	ldi	r24, 0xAC	; 172
    4bae:	99 e0       	ldi	r25, 0x09	; 9
    4bb0:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4bb4:	80 e8       	ldi	r24, 0x80	; 128
    4bb6:	99 e0       	ldi	r25, 0x09	; 9
    4bb8:	89 cf       	rjmp	.-238    	; 0x4acc <command_common+0x32c>
            // TODO
            );
#endif
            break;
        case KC_S:
            print("\n\t- Status -\n");
    4bba:	82 e7       	ldi	r24, 0x72	; 114
    4bbc:	99 e0       	ldi	r25, 0x09	; 9
    4bbe:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
            print_val_hex8(host_keyboard_leds());
    4bc2:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <host_keyboard_leds>
    4bc6:	1f 92       	push	r1
    4bc8:	8f 93       	push	r24
    4bca:	88 e5       	ldi	r24, 0x58	; 88
    4bcc:	99 e0       	ldi	r25, 0x09	; 9
    4bce:	9f 93       	push	r25
    4bd0:	8f 93       	push	r24
    4bd2:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
            print_val_hex8(keyboard_protocol);
    4bd6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <keyboard_protocol>
    4bda:	1f 92       	push	r1
    4bdc:	8f 93       	push	r24
    4bde:	81 e4       	ldi	r24, 0x41	; 65
    4be0:	99 e0       	ldi	r25, 0x09	; 9
    4be2:	9f 93       	push	r25
    4be4:	8f 93       	push	r24
    4be6:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
            print_val_hex8(keyboard_idle);
    4bea:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <keyboard_idle>
    4bee:	1f 92       	push	r1
    4bf0:	8f 93       	push	r24
    4bf2:	8e e2       	ldi	r24, 0x2E	; 46
    4bf4:	99 e0       	ldi	r25, 0x09	; 9
    4bf6:	9f 93       	push	r25
    4bf8:	8f 93       	push	r24
    4bfa:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
#endif
            print_val_hex32(timer_read32());
    4bfe:	0e 94 49 1c 	call	0x3892	; 0x3892 <timer_read32>
    4c02:	9f 93       	push	r25
    4c04:	8f 93       	push	r24
    4c06:	7f 93       	push	r23
    4c08:	6f 93       	push	r22
    4c0a:	87 e1       	ldi	r24, 0x17	; 23
    4c0c:	99 e0       	ldi	r25, 0x09	; 9
    4c0e:	9f 93       	push	r25
    4c10:	8f 93       	push	r24
    4c12:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    4c16:	8d b7       	in	r24, 0x3d	; 61
    4c18:	9e b7       	in	r25, 0x3e	; 62
    4c1a:	42 96       	adiw	r24, 0x12	; 18
    4c1c:	0f b6       	in	r0, 0x3f	; 63
    4c1e:	f8 94       	cli
    4c20:	9e bf       	out	0x3e, r25	; 62
    4c22:	0f be       	out	0x3f, r0	; 63
    4c24:	8d bf       	out	0x3d, r24	; 61
    4c26:	54 cf       	rjmp	.-344    	; 0x4ad0 <command_common+0x330>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    4c28:	80 e0       	ldi	r24, 0x00	; 0
    4c2a:	01 c0       	rjmp	.+2      	; 0x4c2e <command_common+0x48e>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    4c2c:	8d 51       	subi	r24, 0x1D	; 29
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    4c2e:	0e 94 b0 23 	call	0x4760	; 0x4760 <switch_default_layer>
    4c32:	4e cf       	rjmp	.-356    	; 0x4ad0 <command_common+0x330>
            break;
        default:
            print("?");
    4c34:	85 e1       	ldi	r24, 0x15	; 21
    4c36:	99 e0       	ldi	r25, 0x09	; 9
    4c38:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
            return false;
    4c3c:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    4c3e:	8c 2f       	mov	r24, r28
    4c40:	cf 91       	pop	r28
    4c42:	08 95       	ret

00004c44 <command_console_extra>:
bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4c44:	80 e0       	ldi	r24, 0x00	; 0
    4c46:	08 95       	ret

00004c48 <command_extra>:
    4c48:	0c 94 22 26 	jmp	0x4c44	; 0x4c44 <command_console_extra>

00004c4c <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    4c4c:	cf 93       	push	r28
    4c4e:	c8 2f       	mov	r28, r24
    switch (command_state) {
    4c50:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <command_state>
    4c54:	81 30       	cpi	r24, 0x01	; 1
    4c56:	71 f0       	breq	.+28     	; 0x4c74 <command_proc+0x28>
    4c58:	20 f0       	brcs	.+8      	; 0x4c62 <command_proc+0x16>
    4c5a:	82 30       	cpi	r24, 0x02	; 2
    4c5c:	09 f4       	brne	.+2      	; 0x4c60 <command_proc+0x14>
    4c5e:	4b c0       	rjmp	.+150    	; 0x4cf6 <command_proc+0xaa>
    4c60:	42 c1       	rjmp	.+644    	; 0x4ee6 <command_proc+0x29a>
        case ONESHOT:
            if (!IS_COMMAND())
    4c62:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <keyboard_report>
    4c66:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <keyboard_report+0x1>
    4c6a:	80 81       	ld	r24, Z
    4c6c:	82 32       	cpi	r24, 0x22	; 34
    4c6e:	09 f0       	breq	.+2      	; 0x4c72 <command_proc+0x26>
    4c70:	3c c1       	rjmp	.+632    	; 0x4eea <command_proc+0x29e>
    4c72:	07 c0       	rjmp	.+14     	; 0x4c82 <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    4c74:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <keyboard_report>
    4c78:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <keyboard_report+0x1>
    4c7c:	80 81       	ld	r24, Z
    4c7e:	82 32       	cpi	r24, 0x22	; 34
    4c80:	61 f4       	brne	.+24     	; 0x4c9a <command_proc+0x4e>
                return (command_extra(code) || command_common(code));
    4c82:	8c 2f       	mov	r24, r28
    4c84:	0e 94 24 26 	call	0x4c48	; 0x4c48 <command_extra>
    4c88:	81 11       	cpse	r24, r1
    4c8a:	04 c0       	rjmp	.+8      	; 0x4c94 <command_proc+0x48>
    4c8c:	8c 2f       	mov	r24, r28
    4c8e:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <command_common>
    4c92:	2f c0       	rjmp	.+94     	; 0x4cf2 <command_proc+0xa6>
    4c94:	81 e0       	ldi	r24, 0x01	; 1
    4c96:	90 e0       	ldi	r25, 0x00	; 0
    4c98:	2c c0       	rjmp	.+88     	; 0x4cf2 <command_proc+0xa6>
            else
                return (command_console_extra(code) || command_console(code));
    4c9a:	8c 2f       	mov	r24, r28
    4c9c:	0e 94 22 26 	call	0x4c44	; 0x4c44 <command_console_extra>
    4ca0:	81 11       	cpse	r24, r1
    4ca2:	26 c0       	rjmp	.+76     	; 0x4cf0 <command_proc+0xa4>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4ca4:	c4 31       	cpi	r28, 0x14	; 20
    4ca6:	e1 f0       	breq	.+56     	; 0x4ce0 <command_proc+0x94>
    4ca8:	70 f4       	brcc	.+28     	; 0x4cc6 <command_proc+0x7a>
    4caa:	cb 30       	cpi	r28, 0x0B	; 11
    4cac:	81 f0       	breq	.+32     	; 0x4cce <command_proc+0x82>
    4cae:	c0 31       	cpi	r28, 0x10	; 16
    4cb0:	d1 f4       	brne	.+52     	; 0x4ce6 <command_proc+0x9a>
        case KC_ESC:
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    4cb2:	0e 94 78 22 	call	0x44f0	; 0x44f0 <mousekey_console_help>
            print("M> ");
    4cb6:	81 e0       	ldi	r24, 0x01	; 1
    4cb8:	97 e0       	ldi	r25, 0x07	; 7
    4cba:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
            command_state = MOUSEKEY;
    4cbe:	82 e0       	ldi	r24, 0x02	; 2
    4cc0:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <command_state>
    4cc4:	15 c0       	rjmp	.+42     	; 0x4cf0 <command_proc+0xa4>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4cc6:	c9 32       	cpi	r28, 0x29	; 41
    4cc8:	59 f0       	breq	.+22     	; 0x4ce0 <command_proc+0x94>
    4cca:	c8 33       	cpi	r28, 0x38	; 56
    4ccc:	61 f4       	brne	.+24     	; 0x4ce6 <command_proc+0x9a>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4cce:	8e e0       	ldi	r24, 0x0E	; 14
    4cd0:	97 e0       	ldi	r25, 0x07	; 7
    4cd2:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    4cd6:	85 e0       	ldi	r24, 0x05	; 5
    4cd8:	97 e0       	ldi	r25, 0x07	; 7
    4cda:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    4cde:	08 c0       	rjmp	.+16     	; 0x4cf0 <command_proc+0xa4>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    4ce0:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <command_state>
    4ce4:	04 c1       	rjmp	.+520    	; 0x4eee <command_proc+0x2a2>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    4ce6:	8f ef       	ldi	r24, 0xFF	; 255
    4ce8:	96 e0       	ldi	r25, 0x06	; 6
    4cea:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    4cee:	ff c0       	rjmp	.+510    	; 0x4eee <command_proc+0x2a2>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    4cf0:	81 e0       	ldi	r24, 0x01	; 1
    4cf2:	81 70       	andi	r24, 0x01	; 1
    4cf4:	fe c0       	rjmp	.+508    	; 0x4ef2 <command_proc+0x2a6>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    4cf6:	c4 32       	cpi	r28, 0x24	; 36
    4cf8:	28 f5       	brcc	.+74     	; 0x4d44 <command_proc+0xf8>
    4cfa:	ce 31       	cpi	r28, 0x1E	; 30
    4cfc:	08 f0       	brcs	.+2      	; 0x4d00 <command_proc+0xb4>
    4cfe:	c1 c0       	rjmp	.+386    	; 0x4e82 <command_proc+0x236>
    4d00:	cb 30       	cpi	r28, 0x0B	; 11
    4d02:	a1 f1       	breq	.+104    	; 0x4d6c <command_proc+0x120>
    4d04:	d0 f4       	brcc	.+52     	; 0x4d3a <command_proc+0xee>
    4d06:	c7 30       	cpi	r28, 0x07	; 7
    4d08:	09 f0       	breq	.+2      	; 0x4d0c <command_proc+0xc0>
    4d0a:	d3 c0       	rjmp	.+422    	; 0x4eb2 <command_proc+0x266>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    4d0c:	8e e1       	ldi	r24, 0x1E	; 30
    4d0e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_delay>
            mk_interval = MOUSEKEY_INTERVAL;
    4d12:	82 e3       	ldi	r24, 0x32	; 50
    4d14:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mk_interval>
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    4d18:	8a e0       	ldi	r24, 0x0A	; 10
    4d1a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mk_max_speed>
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    4d1e:	84 e1       	ldi	r24, 0x14	; 20
    4d20:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mk_time_to_max>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    4d24:	88 e0       	ldi	r24, 0x08	; 8
    4d26:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <mk_wheel_max_speed>
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    4d2a:	88 e2       	ldi	r24, 0x28	; 40
    4d2c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <mk_wheel_time_to_max>
            print("set default\n");
    4d30:	85 ea       	ldi	r24, 0xA5	; 165
    4d32:	95 e0       	ldi	r25, 0x05	; 5
    4d34:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    4d38:	bf c0       	rjmp	.+382    	; 0x4eb8 <command_proc+0x26c>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    4d3a:	c3 31       	cpi	r28, 0x13	; 19
    4d3c:	49 f1       	breq	.+82     	; 0x4d90 <command_proc+0x144>
    4d3e:	c4 31       	cpi	r28, 0x14	; 20
    4d40:	c1 f0       	breq	.+48     	; 0x4d72 <command_proc+0x126>
    4d42:	b7 c0       	rjmp	.+366    	; 0x4eb2 <command_proc+0x266>
    4d44:	cb 34       	cpi	r28, 0x4B	; 75
    4d46:	09 f4       	brne	.+2      	; 0x4d4a <command_proc+0xfe>
    4d48:	a9 c0       	rjmp	.+338    	; 0x4e9c <command_proc+0x250>
    4d4a:	28 f4       	brcc	.+10     	; 0x4d56 <command_proc+0x10a>
    4d4c:	c9 32       	cpi	r28, 0x29	; 41
    4d4e:	89 f0       	breq	.+34     	; 0x4d72 <command_proc+0x126>
    4d50:	c8 33       	cpi	r28, 0x38	; 56
    4d52:	61 f0       	breq	.+24     	; 0x4d6c <command_proc+0x120>
    4d54:	ae c0       	rjmp	.+348    	; 0x4eb2 <command_proc+0x266>
    4d56:	c1 35       	cpi	r28, 0x51	; 81
    4d58:	09 f4       	brne	.+2      	; 0x4d5c <command_proc+0x110>
    4d5a:	9e c0       	rjmp	.+316    	; 0x4e98 <command_proc+0x24c>
    4d5c:	c2 35       	cpi	r28, 0x52	; 82
    4d5e:	09 f4       	brne	.+2      	; 0x4d62 <command_proc+0x116>
    4d60:	99 c0       	rjmp	.+306    	; 0x4e94 <command_proc+0x248>
    4d62:	ce 34       	cpi	r28, 0x4E	; 78
    4d64:	09 f0       	breq	.+2      	; 0x4d68 <command_proc+0x11c>
    4d66:	a5 c0       	rjmp	.+330    	; 0x4eb2 <command_proc+0x266>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    4d68:	6a e0       	ldi	r22, 0x0A	; 10
    4d6a:	9e c0       	rjmp	.+316    	; 0x4ea8 <command_proc+0x25c>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    4d6c:	0e 94 78 22 	call	0x44f0	; 0x44f0 <mousekey_console_help>
    4d70:	a3 c0       	rjmp	.+326    	; 0x4eb8 <command_proc+0x26c>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    4d72:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <mousekey_param>
    4d76:	88 23       	and	r24, r24
    4d78:	19 f0       	breq	.+6      	; 0x4d80 <command_proc+0x134>
                mousekey_param = 0;
    4d7a:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <mousekey_param>
    4d7e:	9c c0       	rjmp	.+312    	; 0x4eb8 <command_proc+0x26c>
            } else {
                print("C> ");
    4d80:	82 eb       	ldi	r24, 0xB2	; 178
    4d82:	95 e0       	ldi	r25, 0x05	; 5
    4d84:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
                command_state = CONSOLE;
    4d88:	81 e0       	ldi	r24, 0x01	; 1
    4d8a:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <command_state>
    4d8e:	b1 c0       	rjmp	.+354    	; 0x4ef2 <command_proc+0x2a6>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    4d90:	8c e8       	ldi	r24, 0x8C	; 140
    4d92:	95 e0       	ldi	r25, 0x05	; 5
    4d94:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    4d98:	8a e7       	ldi	r24, 0x7A	; 122
    4d9a:	95 e0       	ldi	r25, 0x05	; 5
    4d9c:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    4da0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_delay>
    4da4:	1f 92       	push	r1
    4da6:	8f 93       	push	r24
    4da8:	87 e7       	ldi	r24, 0x77	; 119
    4daa:	95 e0       	ldi	r25, 0x05	; 5
    4dac:	9f 93       	push	r25
    4dae:	8f 93       	push	r24
    4db0:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    4db4:	85 e7       	ldi	r24, 0x75	; 117
    4db6:	95 e0       	ldi	r25, 0x05	; 5
    4db8:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    4dbc:	83 e6       	ldi	r24, 0x63	; 99
    4dbe:	95 e0       	ldi	r25, 0x05	; 5
    4dc0:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    4dc4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_interval>
    4dc8:	1f 92       	push	r1
    4dca:	8f 93       	push	r24
    4dcc:	80 e6       	ldi	r24, 0x60	; 96
    4dce:	95 e0       	ldi	r25, 0x05	; 5
    4dd0:	9f 93       	push	r25
    4dd2:	8f 93       	push	r24
    4dd4:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    4dd8:	8e e5       	ldi	r24, 0x5E	; 94
    4dda:	95 e0       	ldi	r25, 0x05	; 5
    4ddc:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    4de0:	8f e4       	ldi	r24, 0x4F	; 79
    4de2:	95 e0       	ldi	r25, 0x05	; 5
    4de4:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    4de8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_max_speed>
    4dec:	1f 92       	push	r1
    4dee:	8f 93       	push	r24
    4df0:	8c e4       	ldi	r24, 0x4C	; 76
    4df2:	95 e0       	ldi	r25, 0x05	; 5
    4df4:	9f 93       	push	r25
    4df6:	8f 93       	push	r24
    4df8:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    4dfc:	8a e4       	ldi	r24, 0x4A	; 74
    4dfe:	95 e0       	ldi	r25, 0x05	; 5
    4e00:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    4e04:	89 e3       	ldi	r24, 0x39	; 57
    4e06:	95 e0       	ldi	r25, 0x05	; 5
    4e08:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    4e0c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_time_to_max>
    4e10:	1f 92       	push	r1
    4e12:	8f 93       	push	r24
    4e14:	86 e3       	ldi	r24, 0x36	; 54
    4e16:	95 e0       	ldi	r25, 0x05	; 5
    4e18:	9f 93       	push	r25
    4e1a:	8f 93       	push	r24
    4e1c:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    4e20:	84 e3       	ldi	r24, 0x34	; 52
    4e22:	95 e0       	ldi	r25, 0x05	; 5
    4e24:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    4e28:	8f e1       	ldi	r24, 0x1F	; 31
    4e2a:	95 e0       	ldi	r25, 0x05	; 5
    4e2c:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    4e30:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_max_speed>
    4e34:	1f 92       	push	r1
    4e36:	8f 93       	push	r24
    4e38:	8c e1       	ldi	r24, 0x1C	; 28
    4e3a:	95 e0       	ldi	r25, 0x05	; 5
    4e3c:	9f 93       	push	r25
    4e3e:	8f 93       	push	r24
    4e40:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    4e44:	8a e1       	ldi	r24, 0x1A	; 26
    4e46:	95 e0       	ldi	r25, 0x05	; 5
    4e48:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    4e4c:	83 e0       	ldi	r24, 0x03	; 3
    4e4e:	95 e0       	ldi	r25, 0x05	; 5
    4e50:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    4e54:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mk_wheel_time_to_max>
    4e58:	1f 92       	push	r1
    4e5a:	8f 93       	push	r24
    4e5c:	80 e0       	ldi	r24, 0x00	; 0
    4e5e:	95 e0       	ldi	r25, 0x05	; 5
    4e60:	9f 93       	push	r25
    4e62:	8f 93       	push	r24
    4e64:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    4e68:	8e ef       	ldi	r24, 0xFE	; 254
    4e6a:	94 e0       	ldi	r25, 0x04	; 4
    4e6c:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
    4e70:	8d b7       	in	r24, 0x3d	; 61
    4e72:	9e b7       	in	r25, 0x3e	; 62
    4e74:	48 96       	adiw	r24, 0x18	; 24
    4e76:	0f b6       	in	r0, 0x3f	; 63
    4e78:	f8 94       	cli
    4e7a:	9e bf       	out	0x3e, r25	; 62
    4e7c:	0f be       	out	0x3f, r0	; 63
    4e7e:	8d bf       	out	0x3d, r24	; 61
    4e80:	1b c0       	rjmp	.+54     	; 0x4eb8 <command_proc+0x26c>
    4e82:	ce 51       	subi	r28, 0x1E	; 30
    4e84:	ec 2f       	mov	r30, r28
    4e86:	f0 e0       	ldi	r31, 0x00	; 0
    4e88:	e7 5d       	subi	r30, 0xD7	; 215
    4e8a:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    4e8c:	80 81       	ld	r24, Z
    4e8e:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <mousekey_param>
    4e92:	12 c0       	rjmp	.+36     	; 0x4eb8 <command_proc+0x26c>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    4e94:	61 e0       	ldi	r22, 0x01	; 1
    4e96:	03 c0       	rjmp	.+6      	; 0x4e9e <command_proc+0x252>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    4e98:	61 e0       	ldi	r22, 0x01	; 1
    4e9a:	06 c0       	rjmp	.+12     	; 0x4ea8 <command_proc+0x25c>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    4e9c:	6a e0       	ldi	r22, 0x0A	; 10
    4e9e:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <mousekey_param>
    4ea2:	0e 94 8f 22 	call	0x451e	; 0x451e <mousekey_param_inc>
    4ea6:	08 c0       	rjmp	.+16     	; 0x4eb8 <command_proc+0x26c>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    4ea8:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <mousekey_param>
    4eac:	0e 94 32 23 	call	0x4664	; 0x4664 <mousekey_param_dec>
    4eb0:	03 c0       	rjmp	.+6      	; 0x4eb8 <command_proc+0x26c>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default\n");
            break;
        default:
            print("?");
    4eb2:	83 ea       	ldi	r24, 0xA3	; 163
    4eb4:	95 e0       	ldi	r25, 0x05	; 5
    4eb6:	13 c0       	rjmp	.+38     	; 0x4ede <command_proc+0x292>
            return false;
    }
    if (mousekey_param) {
    4eb8:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <mousekey_param>
    4ebc:	88 23       	and	r24, r24
    4ebe:	69 f0       	breq	.+26     	; 0x4eda <command_proc+0x28e>
        xprintf("M%d> ", mousekey_param);
    4ec0:	1f 92       	push	r1
    4ec2:	8f 93       	push	r24
    4ec4:	8d e9       	ldi	r24, 0x9D	; 157
    4ec6:	95 e0       	ldi	r25, 0x05	; 5
    4ec8:	9f 93       	push	r25
    4eca:	8f 93       	push	r24
    4ecc:	0e 94 77 06 	call	0xcee	; 0xcee <__xprintf>
    4ed0:	0f 90       	pop	r0
    4ed2:	0f 90       	pop	r0
    4ed4:	0f 90       	pop	r0
    4ed6:	0f 90       	pop	r0
    4ed8:	04 c0       	rjmp	.+8      	; 0x4ee2 <command_proc+0x296>
    } else {
        print("M>" );
    4eda:	8a e9       	ldi	r24, 0x9A	; 154
    4edc:	95 e0       	ldi	r25, 0x05	; 5
    4ede:	0e 94 de 05 	call	0xbbc	; 0xbbc <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    4ee2:	81 e0       	ldi	r24, 0x01	; 1
    4ee4:	06 c0       	rjmp	.+12     	; 0x4ef2 <command_proc+0x2a6>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    4ee6:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <command_state>
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    4eea:	80 e0       	ldi	r24, 0x00	; 0
    4eec:	02 c0       	rjmp	.+4      	; 0x4ef2 <command_proc+0x2a6>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    4eee:	80 e0       	ldi	r24, 0x00	; 0
    4ef0:	00 cf       	rjmp	.-512    	; 0x4cf2 <command_proc+0xa6>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    4ef2:	cf 91       	pop	r28
    4ef4:	08 95       	ret

00004ef6 <__fixsfsi>:
    4ef6:	0e 94 82 27 	call	0x4f04	; 0x4f04 <__fixunssfsi>
    4efa:	68 94       	set
    4efc:	b1 11       	cpse	r27, r1
    4efe:	0c 94 11 28 	jmp	0x5022	; 0x5022 <__fp_szero>
    4f02:	08 95       	ret

00004f04 <__fixunssfsi>:
    4f04:	0e 94 f6 27 	call	0x4fec	; 0x4fec <__fp_splitA>
    4f08:	88 f0       	brcs	.+34     	; 0x4f2c <__fixunssfsi+0x28>
    4f0a:	9f 57       	subi	r25, 0x7F	; 127
    4f0c:	98 f0       	brcs	.+38     	; 0x4f34 <__fixunssfsi+0x30>
    4f0e:	b9 2f       	mov	r27, r25
    4f10:	99 27       	eor	r25, r25
    4f12:	b7 51       	subi	r27, 0x17	; 23
    4f14:	b0 f0       	brcs	.+44     	; 0x4f42 <__fixunssfsi+0x3e>
    4f16:	e1 f0       	breq	.+56     	; 0x4f50 <__fixunssfsi+0x4c>
    4f18:	66 0f       	add	r22, r22
    4f1a:	77 1f       	adc	r23, r23
    4f1c:	88 1f       	adc	r24, r24
    4f1e:	99 1f       	adc	r25, r25
    4f20:	1a f0       	brmi	.+6      	; 0x4f28 <__fixunssfsi+0x24>
    4f22:	ba 95       	dec	r27
    4f24:	c9 f7       	brne	.-14     	; 0x4f18 <__fixunssfsi+0x14>
    4f26:	14 c0       	rjmp	.+40     	; 0x4f50 <__fixunssfsi+0x4c>
    4f28:	b1 30       	cpi	r27, 0x01	; 1
    4f2a:	91 f0       	breq	.+36     	; 0x4f50 <__fixunssfsi+0x4c>
    4f2c:	0e 94 10 28 	call	0x5020	; 0x5020 <__fp_zero>
    4f30:	b1 e0       	ldi	r27, 0x01	; 1
    4f32:	08 95       	ret
    4f34:	0c 94 10 28 	jmp	0x5020	; 0x5020 <__fp_zero>
    4f38:	67 2f       	mov	r22, r23
    4f3a:	78 2f       	mov	r23, r24
    4f3c:	88 27       	eor	r24, r24
    4f3e:	b8 5f       	subi	r27, 0xF8	; 248
    4f40:	39 f0       	breq	.+14     	; 0x4f50 <__fixunssfsi+0x4c>
    4f42:	b9 3f       	cpi	r27, 0xF9	; 249
    4f44:	cc f3       	brlt	.-14     	; 0x4f38 <__fixunssfsi+0x34>
    4f46:	86 95       	lsr	r24
    4f48:	77 95       	ror	r23
    4f4a:	67 95       	ror	r22
    4f4c:	b3 95       	inc	r27
    4f4e:	d9 f7       	brne	.-10     	; 0x4f46 <__fixunssfsi+0x42>
    4f50:	3e f4       	brtc	.+14     	; 0x4f60 <__fixunssfsi+0x5c>
    4f52:	90 95       	com	r25
    4f54:	80 95       	com	r24
    4f56:	70 95       	com	r23
    4f58:	61 95       	neg	r22
    4f5a:	7f 4f       	sbci	r23, 0xFF	; 255
    4f5c:	8f 4f       	sbci	r24, 0xFF	; 255
    4f5e:	9f 4f       	sbci	r25, 0xFF	; 255
    4f60:	08 95       	ret

00004f62 <__floatunsisf>:
    4f62:	e8 94       	clt
    4f64:	09 c0       	rjmp	.+18     	; 0x4f78 <__floatsisf+0x12>

00004f66 <__floatsisf>:
    4f66:	97 fb       	bst	r25, 7
    4f68:	3e f4       	brtc	.+14     	; 0x4f78 <__floatsisf+0x12>
    4f6a:	90 95       	com	r25
    4f6c:	80 95       	com	r24
    4f6e:	70 95       	com	r23
    4f70:	61 95       	neg	r22
    4f72:	7f 4f       	sbci	r23, 0xFF	; 255
    4f74:	8f 4f       	sbci	r24, 0xFF	; 255
    4f76:	9f 4f       	sbci	r25, 0xFF	; 255
    4f78:	99 23       	and	r25, r25
    4f7a:	a9 f0       	breq	.+42     	; 0x4fa6 <__floatsisf+0x40>
    4f7c:	f9 2f       	mov	r31, r25
    4f7e:	96 e9       	ldi	r25, 0x96	; 150
    4f80:	bb 27       	eor	r27, r27
    4f82:	93 95       	inc	r25
    4f84:	f6 95       	lsr	r31
    4f86:	87 95       	ror	r24
    4f88:	77 95       	ror	r23
    4f8a:	67 95       	ror	r22
    4f8c:	b7 95       	ror	r27
    4f8e:	f1 11       	cpse	r31, r1
    4f90:	f8 cf       	rjmp	.-16     	; 0x4f82 <__floatsisf+0x1c>
    4f92:	fa f4       	brpl	.+62     	; 0x4fd2 <__floatsisf+0x6c>
    4f94:	bb 0f       	add	r27, r27
    4f96:	11 f4       	brne	.+4      	; 0x4f9c <__floatsisf+0x36>
    4f98:	60 ff       	sbrs	r22, 0
    4f9a:	1b c0       	rjmp	.+54     	; 0x4fd2 <__floatsisf+0x6c>
    4f9c:	6f 5f       	subi	r22, 0xFF	; 255
    4f9e:	7f 4f       	sbci	r23, 0xFF	; 255
    4fa0:	8f 4f       	sbci	r24, 0xFF	; 255
    4fa2:	9f 4f       	sbci	r25, 0xFF	; 255
    4fa4:	16 c0       	rjmp	.+44     	; 0x4fd2 <__floatsisf+0x6c>
    4fa6:	88 23       	and	r24, r24
    4fa8:	11 f0       	breq	.+4      	; 0x4fae <__floatsisf+0x48>
    4faa:	96 e9       	ldi	r25, 0x96	; 150
    4fac:	11 c0       	rjmp	.+34     	; 0x4fd0 <__floatsisf+0x6a>
    4fae:	77 23       	and	r23, r23
    4fb0:	21 f0       	breq	.+8      	; 0x4fba <__floatsisf+0x54>
    4fb2:	9e e8       	ldi	r25, 0x8E	; 142
    4fb4:	87 2f       	mov	r24, r23
    4fb6:	76 2f       	mov	r23, r22
    4fb8:	05 c0       	rjmp	.+10     	; 0x4fc4 <__floatsisf+0x5e>
    4fba:	66 23       	and	r22, r22
    4fbc:	71 f0       	breq	.+28     	; 0x4fda <__floatsisf+0x74>
    4fbe:	96 e8       	ldi	r25, 0x86	; 134
    4fc0:	86 2f       	mov	r24, r22
    4fc2:	70 e0       	ldi	r23, 0x00	; 0
    4fc4:	60 e0       	ldi	r22, 0x00	; 0
    4fc6:	2a f0       	brmi	.+10     	; 0x4fd2 <__floatsisf+0x6c>
    4fc8:	9a 95       	dec	r25
    4fca:	66 0f       	add	r22, r22
    4fcc:	77 1f       	adc	r23, r23
    4fce:	88 1f       	adc	r24, r24
    4fd0:	da f7       	brpl	.-10     	; 0x4fc8 <__floatsisf+0x62>
    4fd2:	88 0f       	add	r24, r24
    4fd4:	96 95       	lsr	r25
    4fd6:	87 95       	ror	r24
    4fd8:	97 f9       	bld	r25, 7
    4fda:	08 95       	ret

00004fdc <__fp_split3>:
    4fdc:	57 fd       	sbrc	r21, 7
    4fde:	90 58       	subi	r25, 0x80	; 128
    4fe0:	44 0f       	add	r20, r20
    4fe2:	55 1f       	adc	r21, r21
    4fe4:	59 f0       	breq	.+22     	; 0x4ffc <__fp_splitA+0x10>
    4fe6:	5f 3f       	cpi	r21, 0xFF	; 255
    4fe8:	71 f0       	breq	.+28     	; 0x5006 <__fp_splitA+0x1a>
    4fea:	47 95       	ror	r20

00004fec <__fp_splitA>:
    4fec:	88 0f       	add	r24, r24
    4fee:	97 fb       	bst	r25, 7
    4ff0:	99 1f       	adc	r25, r25
    4ff2:	61 f0       	breq	.+24     	; 0x500c <__fp_splitA+0x20>
    4ff4:	9f 3f       	cpi	r25, 0xFF	; 255
    4ff6:	79 f0       	breq	.+30     	; 0x5016 <__fp_splitA+0x2a>
    4ff8:	87 95       	ror	r24
    4ffa:	08 95       	ret
    4ffc:	12 16       	cp	r1, r18
    4ffe:	13 06       	cpc	r1, r19
    5000:	14 06       	cpc	r1, r20
    5002:	55 1f       	adc	r21, r21
    5004:	f2 cf       	rjmp	.-28     	; 0x4fea <__fp_split3+0xe>
    5006:	46 95       	lsr	r20
    5008:	f1 df       	rcall	.-30     	; 0x4fec <__fp_splitA>
    500a:	08 c0       	rjmp	.+16     	; 0x501c <__fp_splitA+0x30>
    500c:	16 16       	cp	r1, r22
    500e:	17 06       	cpc	r1, r23
    5010:	18 06       	cpc	r1, r24
    5012:	99 1f       	adc	r25, r25
    5014:	f1 cf       	rjmp	.-30     	; 0x4ff8 <__fp_splitA+0xc>
    5016:	86 95       	lsr	r24
    5018:	71 05       	cpc	r23, r1
    501a:	61 05       	cpc	r22, r1
    501c:	08 94       	sec
    501e:	08 95       	ret

00005020 <__fp_zero>:
    5020:	e8 94       	clt

00005022 <__fp_szero>:
    5022:	bb 27       	eor	r27, r27
    5024:	66 27       	eor	r22, r22
    5026:	77 27       	eor	r23, r23
    5028:	cb 01       	movw	r24, r22
    502a:	97 f9       	bld	r25, 7
    502c:	08 95       	ret

0000502e <__mulsf3>:
    502e:	0e 94 29 28 	call	0x5052	; 0x5052 <__mulsf3x>
    5032:	0c 94 a3 28 	jmp	0x5146	; 0x5146 <__fp_round>
    5036:	0e 94 95 28 	call	0x512a	; 0x512a <__fp_pscA>
    503a:	38 f0       	brcs	.+14     	; 0x504a <__mulsf3+0x1c>
    503c:	0e 94 9c 28 	call	0x5138	; 0x5138 <__fp_pscB>
    5040:	20 f0       	brcs	.+8      	; 0x504a <__mulsf3+0x1c>
    5042:	95 23       	and	r25, r21
    5044:	11 f0       	breq	.+4      	; 0x504a <__mulsf3+0x1c>
    5046:	0c 94 8c 28 	jmp	0x5118	; 0x5118 <__fp_inf>
    504a:	0c 94 92 28 	jmp	0x5124	; 0x5124 <__fp_nan>
    504e:	0c 94 11 28 	jmp	0x5022	; 0x5022 <__fp_szero>

00005052 <__mulsf3x>:
    5052:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <__fp_split3>
    5056:	78 f3       	brcs	.-34     	; 0x5036 <__mulsf3+0x8>

00005058 <__mulsf3_pse>:
    5058:	99 23       	and	r25, r25
    505a:	c9 f3       	breq	.-14     	; 0x504e <__mulsf3+0x20>
    505c:	55 23       	and	r21, r21
    505e:	b9 f3       	breq	.-18     	; 0x504e <__mulsf3+0x20>
    5060:	95 0f       	add	r25, r21
    5062:	50 e0       	ldi	r21, 0x00	; 0
    5064:	55 1f       	adc	r21, r21
    5066:	aa 27       	eor	r26, r26
    5068:	ee 27       	eor	r30, r30
    506a:	ff 27       	eor	r31, r31
    506c:	bb 27       	eor	r27, r27
    506e:	00 24       	eor	r0, r0
    5070:	08 94       	sec
    5072:	67 95       	ror	r22
    5074:	20 f4       	brcc	.+8      	; 0x507e <__mulsf3_pse+0x26>
    5076:	e2 0f       	add	r30, r18
    5078:	f3 1f       	adc	r31, r19
    507a:	b4 1f       	adc	r27, r20
    507c:	0a 1e       	adc	r0, r26
    507e:	22 0f       	add	r18, r18
    5080:	33 1f       	adc	r19, r19
    5082:	44 1f       	adc	r20, r20
    5084:	aa 1f       	adc	r26, r26
    5086:	66 95       	lsr	r22
    5088:	a9 f7       	brne	.-22     	; 0x5074 <__mulsf3_pse+0x1c>
    508a:	77 95       	ror	r23
    508c:	30 f4       	brcc	.+12     	; 0x509a <__mulsf3_pse+0x42>
    508e:	f3 0f       	add	r31, r19
    5090:	b4 1f       	adc	r27, r20
    5092:	0a 1e       	adc	r0, r26
    5094:	12 1e       	adc	r1, r18
    5096:	08 f4       	brcc	.+2      	; 0x509a <__mulsf3_pse+0x42>
    5098:	63 95       	inc	r22
    509a:	33 0f       	add	r19, r19
    509c:	44 1f       	adc	r20, r20
    509e:	aa 1f       	adc	r26, r26
    50a0:	22 1f       	adc	r18, r18
    50a2:	76 95       	lsr	r23
    50a4:	99 f7       	brne	.-26     	; 0x508c <__mulsf3_pse+0x34>
    50a6:	87 95       	ror	r24
    50a8:	20 f4       	brcc	.+8      	; 0x50b2 <__mulsf3_pse+0x5a>
    50aa:	b4 0f       	add	r27, r20
    50ac:	0a 1e       	adc	r0, r26
    50ae:	12 1e       	adc	r1, r18
    50b0:	63 1f       	adc	r22, r19
    50b2:	44 0f       	add	r20, r20
    50b4:	aa 1f       	adc	r26, r26
    50b6:	22 1f       	adc	r18, r18
    50b8:	33 1f       	adc	r19, r19
    50ba:	86 95       	lsr	r24
    50bc:	a9 f7       	brne	.-22     	; 0x50a8 <__mulsf3_pse+0x50>
    50be:	86 2f       	mov	r24, r22
    50c0:	71 2d       	mov	r23, r1
    50c2:	60 2d       	mov	r22, r0
    50c4:	11 24       	eor	r1, r1
    50c6:	9f 57       	subi	r25, 0x7F	; 127
    50c8:	50 40       	sbci	r21, 0x00	; 0
    50ca:	9a f0       	brmi	.+38     	; 0x50f2 <__mulsf3_pse+0x9a>
    50cc:	f1 f0       	breq	.+60     	; 0x510a <__mulsf3_pse+0xb2>
    50ce:	88 23       	and	r24, r24
    50d0:	4a f0       	brmi	.+18     	; 0x50e4 <__mulsf3_pse+0x8c>
    50d2:	ee 0f       	add	r30, r30
    50d4:	ff 1f       	adc	r31, r31
    50d6:	bb 1f       	adc	r27, r27
    50d8:	66 1f       	adc	r22, r22
    50da:	77 1f       	adc	r23, r23
    50dc:	88 1f       	adc	r24, r24
    50de:	91 50       	subi	r25, 0x01	; 1
    50e0:	50 40       	sbci	r21, 0x00	; 0
    50e2:	a9 f7       	brne	.-22     	; 0x50ce <__mulsf3_pse+0x76>
    50e4:	9e 3f       	cpi	r25, 0xFE	; 254
    50e6:	51 05       	cpc	r21, r1
    50e8:	80 f0       	brcs	.+32     	; 0x510a <__mulsf3_pse+0xb2>
    50ea:	0c 94 8c 28 	jmp	0x5118	; 0x5118 <__fp_inf>
    50ee:	0c 94 11 28 	jmp	0x5022	; 0x5022 <__fp_szero>
    50f2:	5f 3f       	cpi	r21, 0xFF	; 255
    50f4:	e4 f3       	brlt	.-8      	; 0x50ee <__mulsf3_pse+0x96>
    50f6:	98 3e       	cpi	r25, 0xE8	; 232
    50f8:	d4 f3       	brlt	.-12     	; 0x50ee <__mulsf3_pse+0x96>
    50fa:	86 95       	lsr	r24
    50fc:	77 95       	ror	r23
    50fe:	67 95       	ror	r22
    5100:	b7 95       	ror	r27
    5102:	f7 95       	ror	r31
    5104:	e7 95       	ror	r30
    5106:	9f 5f       	subi	r25, 0xFF	; 255
    5108:	c1 f7       	brne	.-16     	; 0x50fa <__mulsf3_pse+0xa2>
    510a:	fe 2b       	or	r31, r30
    510c:	88 0f       	add	r24, r24
    510e:	91 1d       	adc	r25, r1
    5110:	96 95       	lsr	r25
    5112:	87 95       	ror	r24
    5114:	97 f9       	bld	r25, 7
    5116:	08 95       	ret

00005118 <__fp_inf>:
    5118:	97 f9       	bld	r25, 7
    511a:	9f 67       	ori	r25, 0x7F	; 127
    511c:	80 e8       	ldi	r24, 0x80	; 128
    511e:	70 e0       	ldi	r23, 0x00	; 0
    5120:	60 e0       	ldi	r22, 0x00	; 0
    5122:	08 95       	ret

00005124 <__fp_nan>:
    5124:	9f ef       	ldi	r25, 0xFF	; 255
    5126:	80 ec       	ldi	r24, 0xC0	; 192
    5128:	08 95       	ret

0000512a <__fp_pscA>:
    512a:	00 24       	eor	r0, r0
    512c:	0a 94       	dec	r0
    512e:	16 16       	cp	r1, r22
    5130:	17 06       	cpc	r1, r23
    5132:	18 06       	cpc	r1, r24
    5134:	09 06       	cpc	r0, r25
    5136:	08 95       	ret

00005138 <__fp_pscB>:
    5138:	00 24       	eor	r0, r0
    513a:	0a 94       	dec	r0
    513c:	12 16       	cp	r1, r18
    513e:	13 06       	cpc	r1, r19
    5140:	14 06       	cpc	r1, r20
    5142:	05 06       	cpc	r0, r21
    5144:	08 95       	ret

00005146 <__fp_round>:
    5146:	09 2e       	mov	r0, r25
    5148:	03 94       	inc	r0
    514a:	00 0c       	add	r0, r0
    514c:	11 f4       	brne	.+4      	; 0x5152 <__fp_round+0xc>
    514e:	88 23       	and	r24, r24
    5150:	52 f0       	brmi	.+20     	; 0x5166 <__fp_round+0x20>
    5152:	bb 0f       	add	r27, r27
    5154:	40 f4       	brcc	.+16     	; 0x5166 <__fp_round+0x20>
    5156:	bf 2b       	or	r27, r31
    5158:	11 f4       	brne	.+4      	; 0x515e <__fp_round+0x18>
    515a:	60 ff       	sbrs	r22, 0
    515c:	04 c0       	rjmp	.+8      	; 0x5166 <__fp_round+0x20>
    515e:	6f 5f       	subi	r22, 0xFF	; 255
    5160:	7f 4f       	sbci	r23, 0xFF	; 255
    5162:	8f 4f       	sbci	r24, 0xFF	; 255
    5164:	9f 4f       	sbci	r25, 0xFF	; 255
    5166:	08 95       	ret

00005168 <__mulhi3>:
    5168:	00 24       	eor	r0, r0
    516a:	55 27       	eor	r21, r21
    516c:	04 c0       	rjmp	.+8      	; 0x5176 <__mulhi3+0xe>
    516e:	08 0e       	add	r0, r24
    5170:	59 1f       	adc	r21, r25
    5172:	88 0f       	add	r24, r24
    5174:	99 1f       	adc	r25, r25
    5176:	00 97       	sbiw	r24, 0x00	; 0
    5178:	29 f0       	breq	.+10     	; 0x5184 <__mulhi3+0x1c>
    517a:	76 95       	lsr	r23
    517c:	67 95       	ror	r22
    517e:	b8 f3       	brcs	.-18     	; 0x516e <__mulhi3+0x6>
    5180:	71 05       	cpc	r23, r1
    5182:	b9 f7       	brne	.-18     	; 0x5172 <__mulhi3+0xa>
    5184:	80 2d       	mov	r24, r0
    5186:	95 2f       	mov	r25, r21
    5188:	08 95       	ret

0000518a <__udivmodqi4>:
    518a:	99 1b       	sub	r25, r25
    518c:	79 e0       	ldi	r23, 0x09	; 9
    518e:	04 c0       	rjmp	.+8      	; 0x5198 <__udivmodqi4_ep>

00005190 <__udivmodqi4_loop>:
    5190:	99 1f       	adc	r25, r25
    5192:	96 17       	cp	r25, r22
    5194:	08 f0       	brcs	.+2      	; 0x5198 <__udivmodqi4_ep>
    5196:	96 1b       	sub	r25, r22

00005198 <__udivmodqi4_ep>:
    5198:	88 1f       	adc	r24, r24
    519a:	7a 95       	dec	r23
    519c:	c9 f7       	brne	.-14     	; 0x5190 <__udivmodqi4_loop>
    519e:	80 95       	com	r24
    51a0:	08 95       	ret

000051a2 <__divmodhi4>:
    51a2:	97 fb       	bst	r25, 7
    51a4:	07 2e       	mov	r0, r23
    51a6:	16 f4       	brtc	.+4      	; 0x51ac <__divmodhi4+0xa>
    51a8:	00 94       	com	r0
    51aa:	07 d0       	rcall	.+14     	; 0x51ba <__divmodhi4_neg1>
    51ac:	77 fd       	sbrc	r23, 7
    51ae:	09 d0       	rcall	.+18     	; 0x51c2 <__divmodhi4_neg2>
    51b0:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <__udivmodhi4>
    51b4:	07 fc       	sbrc	r0, 7
    51b6:	05 d0       	rcall	.+10     	; 0x51c2 <__divmodhi4_neg2>
    51b8:	3e f4       	brtc	.+14     	; 0x51c8 <__divmodhi4_exit>

000051ba <__divmodhi4_neg1>:
    51ba:	90 95       	com	r25
    51bc:	81 95       	neg	r24
    51be:	9f 4f       	sbci	r25, 0xFF	; 255
    51c0:	08 95       	ret

000051c2 <__divmodhi4_neg2>:
    51c2:	70 95       	com	r23
    51c4:	61 95       	neg	r22
    51c6:	7f 4f       	sbci	r23, 0xFF	; 255

000051c8 <__divmodhi4_exit>:
    51c8:	08 95       	ret

000051ca <__tablejump2__>:
    51ca:	ee 0f       	add	r30, r30
    51cc:	ff 1f       	adc	r31, r31
    51ce:	05 90       	lpm	r0, Z+
    51d0:	f4 91       	lpm	r31, Z
    51d2:	e0 2d       	mov	r30, r0
    51d4:	09 94       	ijmp

000051d6 <__udivmodhi4>:
    51d6:	aa 1b       	sub	r26, r26
    51d8:	bb 1b       	sub	r27, r27
    51da:	51 e1       	ldi	r21, 0x11	; 17
    51dc:	07 c0       	rjmp	.+14     	; 0x51ec <__udivmodhi4_ep>

000051de <__udivmodhi4_loop>:
    51de:	aa 1f       	adc	r26, r26
    51e0:	bb 1f       	adc	r27, r27
    51e2:	a6 17       	cp	r26, r22
    51e4:	b7 07       	cpc	r27, r23
    51e6:	10 f0       	brcs	.+4      	; 0x51ec <__udivmodhi4_ep>
    51e8:	a6 1b       	sub	r26, r22
    51ea:	b7 0b       	sbc	r27, r23

000051ec <__udivmodhi4_ep>:
    51ec:	88 1f       	adc	r24, r24
    51ee:	99 1f       	adc	r25, r25
    51f0:	5a 95       	dec	r21
    51f2:	a9 f7       	brne	.-22     	; 0x51de <__udivmodhi4_loop>
    51f4:	80 95       	com	r24
    51f6:	90 95       	com	r25
    51f8:	bc 01       	movw	r22, r24
    51fa:	cd 01       	movw	r24, r26
    51fc:	08 95       	ret

000051fe <eeprom_read_byte>:
    51fe:	f9 99       	sbic	0x1f, 1	; 31
    5200:	fe cf       	rjmp	.-4      	; 0x51fe <eeprom_read_byte>
    5202:	92 bd       	out	0x22, r25	; 34
    5204:	81 bd       	out	0x21, r24	; 33
    5206:	f8 9a       	sbi	0x1f, 0	; 31
    5208:	99 27       	eor	r25, r25
    520a:	80 b5       	in	r24, 0x20	; 32
    520c:	08 95       	ret

0000520e <eeprom_read_word>:
    520e:	a8 e1       	ldi	r26, 0x18	; 24
    5210:	b0 e0       	ldi	r27, 0x00	; 0
    5212:	42 e0       	ldi	r20, 0x02	; 2
    5214:	50 e0       	ldi	r21, 0x00	; 0
    5216:	0c 94 22 29 	jmp	0x5244	; 0x5244 <eeprom_read_blraw>

0000521a <eeprom_write_byte>:
    521a:	26 2f       	mov	r18, r22

0000521c <eeprom_write_r18>:
    521c:	f9 99       	sbic	0x1f, 1	; 31
    521e:	fe cf       	rjmp	.-4      	; 0x521c <eeprom_write_r18>
    5220:	1f ba       	out	0x1f, r1	; 31
    5222:	92 bd       	out	0x22, r25	; 34
    5224:	81 bd       	out	0x21, r24	; 33
    5226:	20 bd       	out	0x20, r18	; 32
    5228:	0f b6       	in	r0, 0x3f	; 63
    522a:	f8 94       	cli
    522c:	fa 9a       	sbi	0x1f, 2	; 31
    522e:	f9 9a       	sbi	0x1f, 1	; 31
    5230:	0f be       	out	0x3f, r0	; 63
    5232:	01 96       	adiw	r24, 0x01	; 1
    5234:	08 95       	ret

00005236 <eeprom_write_word>:
    5236:	0e 94 0d 29 	call	0x521a	; 0x521a <eeprom_write_byte>
    523a:	27 2f       	mov	r18, r23
    523c:	0c 94 0e 29 	jmp	0x521c	; 0x521c <eeprom_write_r18>

00005240 <eeprom_read_block>:
    5240:	dc 01       	movw	r26, r24
    5242:	cb 01       	movw	r24, r22

00005244 <eeprom_read_blraw>:
    5244:	fc 01       	movw	r30, r24
    5246:	f9 99       	sbic	0x1f, 1	; 31
    5248:	fe cf       	rjmp	.-4      	; 0x5246 <eeprom_read_blraw+0x2>
    524a:	06 c0       	rjmp	.+12     	; 0x5258 <eeprom_read_blraw+0x14>
    524c:	f2 bd       	out	0x22, r31	; 34
    524e:	e1 bd       	out	0x21, r30	; 33
    5250:	f8 9a       	sbi	0x1f, 0	; 31
    5252:	31 96       	adiw	r30, 0x01	; 1
    5254:	00 b4       	in	r0, 0x20	; 32
    5256:	0d 92       	st	X+, r0
    5258:	41 50       	subi	r20, 0x01	; 1
    525a:	50 40       	sbci	r21, 0x00	; 0
    525c:	b8 f7       	brcc	.-18     	; 0x524c <eeprom_read_blraw+0x8>
    525e:	08 95       	ret

00005260 <_exit>:
    5260:	f8 94       	cli

00005262 <__stop_program>:
    5262:	ff cf       	rjmp	.-2      	; 0x5262 <__stop_program>
