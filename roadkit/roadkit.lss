
roadkit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00005874  00005908  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005874  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ce  00800138  00800138  00005940  2**0
                  ALLOC
  3 .noinit       00000004  00800206  00800206  00005940  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  00005940  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000073  00000000  00000000  000061f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000626b  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000627c  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 000009a8  00000000  00000000  000062bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00010e11  00000000  00000000  00006c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000044f7  00000000  00000000  00017a75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007cfa  00000000  00000000  0001bf6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001c08  00000000  00000000  00023c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000045c8  00000000  00000000  00025870  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000090c3  00000000  00000000  00029e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000aa8  00000000  00000000  00032efb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__ctors_end>
       4:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
       8:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
       c:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      10:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      14:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      18:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      1c:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      20:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      24:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      28:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <__vector_10>
      2c:	0c 94 47 0e 	jmp	0x1c8e	; 0x1c8e <__vector_11>
      30:	0c 94 e3 1d 	jmp	0x3bc6	; 0x3bc6 <__vector_12>
      34:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      38:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      3c:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      40:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      44:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      48:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      4c:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      50:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      54:	0c 94 57 1e 	jmp	0x3cae	; 0x3cae <__vector_21>
      58:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      5c:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      60:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      64:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      68:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      6c:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      70:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      74:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      78:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      7c:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      80:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      84:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      88:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      8c:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      90:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      94:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      98:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      9c:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      a0:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      a4:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      a8:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__bad_interrupt>
      ac:	b4 0e       	add	r11, r20
      ae:	d6 0e       	add	r13, r22
      b0:	c9 0f       	add	r28, r25
      b2:	d6 0e       	add	r13, r22
      b4:	c9 0f       	add	r28, r25
      b6:	1b 0f       	add	r17, r27
      b8:	3e 0f       	add	r19, r30
      ba:	c9 0f       	add	r28, r25
      bc:	93 0f       	add	r25, r19
      be:	a6 0f       	add	r26, r22
      c0:	44 13       	cpse	r20, r20
      c2:	44 13       	cpse	r20, r20
      c4:	6e 13       	cpse	r22, r30
      c6:	6e 13       	cpse	r22, r30
      c8:	c9 13       	cpse	r28, r25
      ca:	fd 13       	cpse	r31, r29
      cc:	49 16       	cp	r4, r25
      ce:	49 16       	cp	r4, r25
      d0:	14 14       	cp	r1, r4
      d2:	49 16       	cp	r4, r25
      d4:	ff 14       	cp	r15, r15
      d6:	ff 14       	cp	r15, r15
      d8:	c5 15       	cp	r28, r5
      da:	da 15       	cp	r29, r10
      dc:	49 16       	cp	r4, r25
      de:	36 16       	cp	r3, r22

000000e0 <__trampolines_end>:
      e0:	00 00       	nop
      e2:	02 8a       	std	Z+18, r0	; 0x12
      e4:	00 d2       	rcall	.+1024   	; 0x4e6 <__c.5313+0x2>
      e6:	00 d1       	rcall	.+512    	; 0x2e8 <MouseReport+0x20>
      e8:	00 d0       	rcall	.+0      	; 0xea <__trampolines_end+0xa>
      ea:	00 d0       	rcall	.+0      	; 0xec <keymaps>

000000ec <keymaps>:
      ec:	5f 60 61 57 5c 5d 5e 56 59 5a 5b 58 62 63 c1 2a     _`aW\]^VYZ[Xbc.*
      fc:	53 c2 c3 a9 c4 52 c5 aa 50 51 4f 01 01 01 01 01     S....R..PQO.....

0000010c <__c.2032>:
     10c:	0a 00                                               ..

0000010e <__c.2030>:
     10e:	25 30 31 36 62 00                                   %016b.

00000114 <__c.2028>:
     114:	3a 20 00                                            : .

00000117 <__c.2026>:
     117:	25 30 32 58 00                                      %02X.

0000011c <__c.2023>:
     11c:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
     12c:	42 43 44 45 46 0a 00                                BCDEF..

00000133 <__c.2001>:
     133:	0a 00                                               ..

00000135 <__c.1999>:
     135:	25 30 32 58 00                                      %02X.

0000013a <__c.1997>:
     13a:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

00000144 <__c.5050>:
     144:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     154:	00                                                  .

00000155 <__c.5048>:
     155:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     165:	00                                                  .

00000166 <__c.5039>:
     166:	0d 0a 69 6e 69 74 0a 00                             ..init..

0000016e <__c.4933>:
     16e:	5b 44 5d 00                                         [D].

00000172 <__c.4928>:
     172:	5b 43 5d 00                                         [C].

00000176 <ProductString>:
     176:	10 03 52 00 6f 00 61 00 64 00 6b 00 69 00 74 00     ..R.o.a.d.k.i.t.
     186:	00 00                                               ..

00000188 <ManufacturerString>:
     188:	0a 03 61 00 69 00 30 00 33 00 00 00                 ..a.i.0.3...

00000194 <LanguageString>:
     194:	04 03 09 04                                         ....

00000198 <ConfigurationDescriptor>:
     198:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
     1a8:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
     1b8:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     1c8:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     1d8:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     1e8:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     1f8:	01 00 01 22 22 00 07 05 84 03 20 00 01 07 05 04     ...""..... .....
     208:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
     218:	01 00 01 22 39 00 07 05 85 03 20 00 01              ..."9..... ..

00000225 <DeviceDescriptor>:
     225:	12 01 10 01 00 00 00 08 ae fe 46 88 01 00 01 02     ..........F.....
     235:	00 01                                               ..

00000237 <NKROReport>:
     237:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     247:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     257:	91 02 95 01 75 03 91 01 05 07 19 00 29 f7 15 00     ....u.......)...
     267:	25 01 95 f8 75 01 81 02 c0                          %...u....

00000270 <ConsoleReport>:
     270:	06 31 ff 09 74 a1 01 09 75 15 00 26 ff 00 95 20     .1..t...u..&... 
     280:	75 08 81 02 09 76 15 00 26 ff 00 95 20 75 08 91     u....v..&... u..
     290:	02 c0                                               ..

00000292 <ExtrakeyReport>:
     292:	05 01 09 80 a1 01 85 02 16 81 00 26 b7 00 1a 81     ...........&....
     2a2:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     2b2:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     2c2:	10 95 01 81 00 c0                                   ......

000002c8 <MouseReport>:
     2c8:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     2d8:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     2e8:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     2f8:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     308:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

00000315 <KeyboardReport>:
     315:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     325:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     335:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     345:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

00000355 <__c.4650>:
     355:	63 6f 6e 73 75 6d 65 72 3a 20 25 30 34 58 0a 00     consumer: %04X..

00000365 <__c.4645>:
     365:	73 79 73 74 65 6d 3a 20 25 30 34 58 0a 00           system: %04X..

00000373 <__c.4637>:
     373:	0a 00                                               ..

00000375 <__c.4632>:
     375:	25 30 32 58 20 00                                   %02X .

0000037b <__c.4629>:
     37b:	6b 65 79 62 6f 61 72 64 3a 20 00                    keyboard: .

00000386 <__c.4998>:
     386:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

00000391 <__c.4777>:
     391:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
     3a1:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

000003af <__c.4772>:
     3af:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
     3bf:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

000003cd <__c.4950>:
     3cd:	64 6f 6e 65 2e 0a 00                                done...

000003d4 <__c.4944>:
     3d4:	62 6f 6f 74 6d 61 67 69 63 20 73 63 61 6e 3a 20     bootmagic scan: 
     3e4:	2e 2e 2e 20 00                                      ... .

000003e9 <__c.4709>:
     3e9:	29 0a 00                                            )..

000003ec <__c.4707>:
     3ec:	25 75 00                                            %u.

000003ef <__c.4705>:
     3ef:	2f 00                                               /.

000003f1 <__c.4703>:
     3f1:	25 75 00                                            %u.

000003f4 <__c.4701>:
     3f4:	5d 28 00                                            ](.

000003f7 <__c.4699>:
     3f7:	25 64 00                                            %d.

000003fa <__c.4697>:
     3fa:	20 00                                                .

000003fc <__c.4695>:
     3fc:	25 64 00                                            %d.

000003ff <__c.4693>:
     3ff:	20 00                                                .

00000401 <__c.4691>:
     401:	25 64 00                                            %d.

00000404 <__c.4689>:
     404:	20 00                                                .

00000406 <__c.4687>:
     406:	25 64 00                                            %d.

00000409 <__c.4685>:
     409:	7c 00                                               |.

0000040b <__c.4683>:
     40b:	25 30 32 58 00                                      %02X.

00000410 <__c.4681>:
     410:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     420:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     430:	20 5b 00                                             [.

00000433 <__c.5342>:
     433:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     443:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

0000044e <__c.5339>:
     44e:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     45e:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000467 <__c.5336>:
     467:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     477:	20 25 64 0a 00                                       %d..

0000047c <__c.5333>:
     47c:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     48c:	64 0a 00                                            d..

0000048f <__c.5330>:
     48f:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     49f:	0a 00                                               ..

000004a1 <__c.5326>:
     4a1:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

000004b0 <__c.5319>:
     4b0:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     4c0:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

000004cb <__c.5316>:
     4cb:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     4db:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000004e4 <__c.5313>:
     4e4:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     4f4:	20 25 64 0a 00                                       %d..

000004f9 <__c.5310>:
     4f9:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     509:	64 0a 00                                            d..

0000050c <__c.5307>:
     50c:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     51c:	0a 00                                               ..

0000051e <__c.5303>:
     51e:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

0000052d <__c.5296>:
     52d:	0a 00                                               ..

0000052f <__c.5294>:
     52f:	25 75 00                                            %u.

00000532 <__c.5292>:
     532:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     542:	5f 6d 61 78 3a 20 00                                _max: .

00000549 <__c.5290>:
     549:	0a 00                                               ..

0000054b <__c.5288>:
     54b:	25 75 00                                            %u.

0000054e <__c.5286>:
     54e:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     55e:	65 64 3a 20 00                                      ed: .

00000563 <__c.5284>:
     563:	0a 00                                               ..

00000565 <__c.5282>:
     565:	25 75 00                                            %u.

00000568 <__c.5280>:
     568:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     578:	00                                                  .

00000579 <__c.5278>:
     579:	0a 00                                               ..

0000057b <__c.5276>:
     57b:	25 75 00                                            %u.

0000057e <__c.5274>:
     57e:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

0000058d <__c.5272>:
     58d:	0a 00                                               ..

0000058f <__c.5270>:
     58f:	25 75 00                                            %u.

00000592 <__c.5268>:
     592:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     5a2:	20 00                                                .

000005a4 <__c.5266>:
     5a4:	0a 00                                               ..

000005a6 <__c.5264>:
     5a6:	25 75 00                                            %u.

000005a9 <__c.5262>:
     5a9:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     5b9:	20 00                                                .

000005bb <__c.5260>:
     5bb:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

000005c9 <__c.5380>:
     5c9:	4d 3e 00                                            M>.

000005cc <__c.5378>:
     5cc:	4d 25 64 3e 20 00                                   M%d> .

000005d2 <__c.5376>:
     5d2:	3f 00                                               ?.

000005d4 <__c.5373>:
     5d4:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

000005e1 <__c.5359>:
     5e1:	43 3e 20 00                                         C> .

000005e5 <__c.5349>:
     5e5:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     5f5:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     605:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     615:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     625:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

00000633 <__c.5347>:
     633:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     643:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     653:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     663:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     673:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     683:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     693:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     6a3:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     6b3:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     6c3:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     6d3:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     6e3:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     6f3:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     703:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     713:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     723:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

0000072e <__c.5252>:
     72e:	3f 00                                               ?.

00000730 <__c.5249>:
     730:	4d 3e 20 00                                         M> .

00000734 <__c.5254>:
     734:	43 3e 20 00                                         C> .

00000738 <__c.5398>:
     738:	4c 25 64 0a 00                                      L%d..

0000073d <__c.5238>:
     73d:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     74d:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     75d:	73 65 6b 65 79 0a 00                                sekey..

00000764 <__c.5044>:
     764:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     774:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     784:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     794:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     7a4:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     7b4:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     7c4:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     7d4:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     7e4:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     7f4:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 6e 3a 09 4e     r.e:.eeprom.n:.N
     804:	4b 52 4f 0a 00                                      KRO..

00000809 <__c.5158>:
     809:	0a 00                                               ..

0000080b <__c.5156>:
     80b:	25 75 00                                            %u.

0000080e <__c.5154>:
     80e:	2e 6c 65 76 65 6c 3a 20 00                          .level: .

00000817 <__c.5152>:
     817:	0a 00                                               ..

00000819 <__c.5150>:
     819:	25 75 00                                            %u.

0000081c <__c.5148>:
     81c:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000826 <__c.5146>:
     826:	0a 00                                               ..

00000828 <__c.5144>:
     828:	25 30 32 58 00                                      %02X.

0000082d <__c.5142>:
     82d:	62 61 63 6b 6c 69 67 68 74 5f 63 6f 6e 66 69 67     backlight_config
     83d:	2e 72 61 77 3a 20 00                                .raw: .

00000844 <__c.5139>:
     844:	0a 00                                               ..

00000846 <__c.5137>:
     846:	25 75 00                                            %u.

00000849 <__c.5135>:
     849:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

00000851 <__c.5133>:
     851:	0a 00                                               ..

00000853 <__c.5131>:
     853:	25 75 00                                            %u.

00000856 <__c.5129>:
     856:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     866:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000872 <__c.5127>:
     872:	0a 00                                               ..

00000874 <__c.5125>:
     874:	25 75 00                                            %u.

00000877 <__c.5123>:
     877:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     887:	20 00                                                .

00000889 <__c.5121>:
     889:	0a 00                                               ..

0000088b <__c.5119>:
     88b:	25 75 00                                            %u.

0000088e <__c.5117>:
     88e:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

00000898 <__c.5115>:
     898:	0a 00                                               ..

0000089a <__c.5113>:
     89a:	25 75 00                                            %u.

0000089d <__c.5111>:
     89d:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     8ad:	20 00                                                .

000008af <__c.5109>:
     8af:	0a 00                                               ..

000008b1 <__c.5107>:
     8b1:	25 75 00                                            %u.

000008b4 <__c.5105>:
     8b4:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     8c4:	20 00                                                .

000008c6 <__c.5103>:
     8c6:	0a 00                                               ..

000008c8 <__c.5101>:
     8c8:	25 75 00                                            %u.

000008cb <__c.5099>:
     8cb:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     8db:	74 72 6f 6c 3a 20 00                                trol: .

000008e2 <__c.5097>:
     8e2:	0a 00                                               ..

000008e4 <__c.5095>:
     8e4:	25 75 00                                            %u.

000008e7 <__c.5093>:
     8e7:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     8f7:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000900 <__c.5091>:
     900:	0a 00                                               ..

00000902 <__c.5089>:
     902:	25 30 32 58 00                                      %02X.

00000907 <__c.5087>:
     907:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     917:	77 3a 20 00                                         w: .

0000091b <__c.5084>:
     91b:	0a 00                                               ..

0000091d <__c.5082>:
     91d:	25 75 00                                            %u.

00000920 <__c.5080>:
     920:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

00000929 <__c.5078>:
     929:	0a 00                                               ..

0000092b <__c.5076>:
     92b:	25 75 00                                            %u.

0000092e <__c.5074>:
     92e:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

0000093a <__c.5072>:
     93a:	0a 00                                               ..

0000093c <__c.5070>:
     93c:	25 75 00                                            %u.

0000093f <__c.5068>:
     93f:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000949 <__c.5066>:
     949:	0a 00                                               ..

0000094b <__c.5064>:
     94b:	25 75 00                                            %u.

0000094e <__c.5062>:
     94e:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000958 <__c.5060>:
     958:	0a 00                                               ..

0000095a <__c.5058>:
     95a:	25 30 32 58 00                                      %02X.

0000095f <__c.5056>:
     95f:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     96f:	3a 20 00                                            : .

00000972 <__c.5053>:
     972:	0a 00                                               ..

00000974 <__c.5051>:
     974:	25 75 00                                            %u.

00000977 <__c.5049>:
     977:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000987 <__c.5233>:
     987:	3f 00                                               ?.

00000989 <__c.5224>:
     989:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

00000994 <__c.5222>:
     994:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

0000099e <__c.5219>:
     99e:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     9ae:	25 30 34 6c 58 0a 00                                %04lX..

000009b5 <__c.5217>:
     9b5:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     9c5:	58 0a 00                                            X..

000009c8 <__c.5215>:
     9c8:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     9d8:	58 0a 00                                            X..

000009db <__c.5213>:
     9db:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     9eb:	6c 3a 20 25 58 0a 00                                l: %X..

000009f2 <__c.5211>:
     9f2:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     a02:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000a0c <__c.5209>:
     a0c:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000a1a <__c.5206>:
     a1a:	47 43 43 3a 20 35 2e 34 2e 30 20 41 56 52 2d 4c     GCC: 5.4.0 AVR-L
     a2a:	49 42 43 3a 20 32 2e 30 2e 30 20 41 56 52 5f 41     IBC: 2.0.0 AVR_A
     a3a:	52 43 48 3a 20 61 76 72 35 0a 00                    RCH: avr5..

00000a45 <__c.5204>:
     a45:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     a55:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     a65:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     a75:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 34     E COMMAND NKRO 4
     a85:	30 39 36 0a 00                                      096..

00000a8a <__c.5202>:
     a8a:	42 55 49 4c 44 3a 20 32 35 65 38 64 37 32 2d 64     BUILD: 25e8d72-d
     a9a:	69 72 74 79 20 28 31 32 3a 34 39 3a 32 31 20 4d     irty (12:49:21 M
     aaa:	61 72 20 20 38 20 32 30 32 32 29 0a 00              ar  8 2022)..

00000ab7 <__c.5200>:
     ab7:	56 49 44 3a 20 30 78 46 45 41 45 28 61 69 30 33     VID: 0xFEAE(ai03
     ac7:	29 20 50 49 44 3a 20 30 78 38 38 34 36 28 52 6f     ) PID: 0x8846(Ro
     ad7:	61 64 6b 69 74 29 20 56 45 52 3a 20 30 78 30 30     adkit) VER: 0x00
     ae7:	30 31 0a 00                                         01..

00000aeb <__c.5198>:
     aeb:	44 45 53 43 3a 20 6b 65 79 62 6f 61 72 64 20 66     DESC: keyboard f
     afb:	69 72 6d 77 61 72 65 20 66 6f 72 20 52 6f 61 64     irmware for Road
     b0b:	6b 69 74 0a 00                                      kit..

00000b10 <__c.5196>:
     b10:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000b1f <__c.5193>:
     b1f:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000b2c <__c.5191>:
     b2c:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000b38 <__c.5188>:
     b38:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000b48 <__c.5186>:
     b48:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000b57 <__c.5183>:
     b57:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000b65 <__c.5181>:
     b65:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000b72 <__c.5178>:
     b72:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000b7e <__c.5176>:
     b7e:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000b8b <__c.5173>:
     b8b:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     b9b:	00                                                  .

00000b9c <__c.5170>:
     b9c:	43 3e 20 00                                         C> .

00000ba0 <__c.5164>:
     ba0:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

00000bab <__c.1883>:
     bab:	62 61 63 6b 6c 69 67 68 74 20 73 74 65 70 3a 20     backlight step: 
     bbb:	25 75 0a 00                                         %u..

00000bbf <__c.1878>:
     bbf:	62 61 63 6b 6c 69 67 68 74 20 74 6f 67 67 6c 65     backlight toggle
     bcf:	3a 20 25 75 0a 00                                   : %u..

00000bd5 <__c.1873>:
     bd5:	62 61 63 6b 6c 69 67 68 74 20 64 65 63 72 65 61     backlight decrea
     be5:	73 65 3a 20 25 75 0a 00                             se: %u..

00000bed <__c.1868>:
     bed:	62 61 63 6b 6c 69 67 68 74 20 69 6e 63 72 65 61     backlight increa
     bfd:	73 65 3a 20 25 75 0a 00 00                          se: %u...

00000c06 <__ctors_end>:
     c06:	11 24       	eor	r1, r1
     c08:	1f be       	out	0x3f, r1	; 63
     c0a:	cf ef       	ldi	r28, 0xFF	; 255
     c0c:	da e0       	ldi	r29, 0x0A	; 10
     c0e:	de bf       	out	0x3e, r29	; 62
     c10:	cd bf       	out	0x3d, r28	; 61

00000c12 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     c12:	04 b6       	in	r0, 0x34	; 52
     c14:	03 fe       	sbrs	r0, 3
     c16:	27 c0       	rjmp	.+78     	; 0xc66 <__do_copy_data>
     c18:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__bss_end>
     c1c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__bss_end+0x1>
     c20:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <__bss_end+0x2>
     c24:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <__bss_end+0x3>
     c28:	87 30       	cpi	r24, 0x07	; 7
     c2a:	90 4b       	sbci	r25, 0xB0	; 176
     c2c:	a7 40       	sbci	r26, 0x07	; 7
     c2e:	b0 4b       	sbci	r27, 0xB0	; 176
     c30:	d1 f4       	brne	.+52     	; 0xc66 <__do_copy_data>
        reset_key = 0;
     c32:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__bss_end>
     c36:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <__bss_end+0x1>
     c3a:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <__bss_end+0x2>
     c3e:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <__bss_end+0x3>

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     c42:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     c44:	84 b7       	in	r24, 0x34	; 52
     c46:	87 7f       	andi	r24, 0xF7	; 247
     c48:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	a8 95       	wdr
     c50:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     c54:	88 61       	ori	r24, 0x18	; 24
     c56:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     c5a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     c5e:	0f be       	out	0x3f, r0	; 63
        wdt_disable();

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     c60:	e0 e0       	ldi	r30, 0x00	; 0
     c62:	f8 e3       	ldi	r31, 0x38	; 56
     c64:	09 95       	icall

00000c66 <__do_copy_data>:
     c66:	11 e0       	ldi	r17, 0x01	; 1
     c68:	a0 e0       	ldi	r26, 0x00	; 0
     c6a:	b1 e0       	ldi	r27, 0x01	; 1
     c6c:	e4 e7       	ldi	r30, 0x74	; 116
     c6e:	f8 e5       	ldi	r31, 0x58	; 88
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <__do_copy_data+0x10>
     c72:	05 90       	lpm	r0, Z+
     c74:	0d 92       	st	X+, r0
     c76:	a8 33       	cpi	r26, 0x38	; 56
     c78:	b1 07       	cpc	r27, r17
     c7a:	d9 f7       	brne	.-10     	; 0xc72 <__do_copy_data+0xc>

00000c7c <__do_clear_bss>:
     c7c:	22 e0       	ldi	r18, 0x02	; 2
     c7e:	a8 e3       	ldi	r26, 0x38	; 56
     c80:	b1 e0       	ldi	r27, 0x01	; 1
     c82:	01 c0       	rjmp	.+2      	; 0xc86 <.do_clear_bss_start>

00000c84 <.do_clear_bss_loop>:
     c84:	1d 92       	st	X+, r1

00000c86 <.do_clear_bss_start>:
     c86:	a6 30       	cpi	r26, 0x06	; 6
     c88:	b2 07       	cpc	r27, r18
     c8a:	e1 f7       	brne	.-8      	; 0xc84 <.do_clear_bss_loop>
     c8c:	0e 94 9e 0a 	call	0x153c	; 0x153c <main>
     c90:	0c 94 38 2c 	jmp	0x5870	; 0x5870 <_exit>

00000c94 <__bad_interrupt>:
     c94:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000c98 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     c98:	ff 93       	push	r31
	push	ZL
     c9a:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     c9c:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <__data_end>
	lds	ZH, xfunc_out+1	;/
     ca0:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <__data_end+0x1>
	sbiw	ZL, 0		;Skip if null
     ca4:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     ca6:	09 f0       	breq	.+2      	; 0xcaa <xputc+0x12>
	icall
     ca8:	09 95       	icall
2:	pop	ZL
     caa:	ef 91       	pop	r30
	pop	ZH
     cac:	ff 91       	pop	r31
	ret
     cae:	08 95       	ret

00000cb0 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     cb0:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     cb2:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     cb4:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     cb6:	11 f0       	breq	.+4      	; 0xcbc <xputs+0xc>
	rcall	xputc
     cb8:	ef df       	rcall	.-34     	; 0xc98 <xputc>
	rjmp	1b
     cba:	fb cf       	rjmp	.-10     	; 0xcb2 <xputs+0x2>
2:	ret
     cbc:	08 95       	ret

00000cbe <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     cbe:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     cc0:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     cc2:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     cc4:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     cc6:	0c c0       	rjmp	.+24     	; 0xce0 <xitoa+0x22>
	neg	r20		;
     cc8:	41 95       	neg	r20
	sbrs	r25, 7		;
     cca:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     ccc:	09 c0       	rjmp	.+18     	; 0xce0 <xitoa+0x22>
	ldi	r30, '-'	;
     cce:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     cd0:	60 95       	com	r22
	com	r23		;
     cd2:	70 95       	com	r23
	com	r24		;
     cd4:	80 95       	com	r24
	com	r25		;
     cd6:	90 95       	com	r25
	adc	r22, r1		;
     cd8:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     cda:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     cdc:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     cde:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     ce0:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <xitoa+0x2a>
	neg	r18		;
     ce4:	21 95       	neg	r18
	ldi	r19, '0'	;/
     ce6:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     ce8:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     cea:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     cec:	66 0f       	add	r22, r22
	rol	r23		;
     cee:	77 1f       	adc	r23, r23
	rol	r24		;
     cf0:	88 1f       	adc	r24, r24
	rol	r25		;
     cf2:	99 1f       	adc	r25, r25
	rol	r26		;
     cf4:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     cf6:	a4 17       	cp	r26, r20
	brcs	3f		;
     cf8:	10 f0       	brcs	.+4      	; 0xcfe <xitoa+0x40>
	sub	r26, r20	;
     cfa:	a4 1b       	sub	r26, r20
	inc	r22		;
     cfc:	63 95       	inc	r22
3:	dec	r21		;
     cfe:	5a 95       	dec	r21
	brne	2b		;/
     d00:	a9 f7       	brne	.-22     	; 0xcec <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     d02:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     d04:	08 f0       	brcs	.+2      	; 0xd08 <xitoa+0x4a>
	subi	r26, -7		;
     d06:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     d08:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     d0a:	af 93       	push	r26
	inc	r31		;/
     d0c:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     d0e:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     d10:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     d12:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     d14:	91 05       	cpc	r25, r1
	brne	1b		;/
     d16:	41 f7       	brne	.-48     	; 0xce8 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     d18:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     d1a:	11 f4       	brne	.+4      	; 0xd20 <xitoa+0x62>
	push	r30		;
     d1c:	ef 93       	push	r30
	inc	r31		;/
     d1e:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     d20:	f2 17       	cp	r31, r18
	brcc	6f		;
     d22:	18 f4       	brcc	.+6      	; 0xd2a <xitoa+0x6c>
	push	r19		;
     d24:	3f 93       	push	r19
	inc	r31		;
     d26:	f3 95       	inc	r31
	rjmp	5b		;/
     d28:	fb cf       	rjmp	.-10     	; 0xd20 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     d2a:	8f 91       	pop	r24
	rcall	xputc		;
     d2c:	b5 df       	rcall	.-150    	; 0xc98 <xputc>
	dec	r31		;
     d2e:	fa 95       	dec	r31
	brne	6b		;/
     d30:	e1 f7       	brne	.-8      	; 0xd2a <xitoa+0x6c>

	ret
     d32:	08 95       	ret

00000d34 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     d34:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     d36:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     d38:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     d3a:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     d3c:	21 f0       	breq	.+8      	; 0xd46 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     d3e:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     d40:	19 f0       	breq	.+6      	; 0xd48 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     d42:	aa df       	rcall	.-172    	; 0xc98 <xputc>
	rjmp	0b		;/
     d44:	f9 cf       	rjmp	.-14     	; 0xd38 <xvprintf+0x4>
90:	ret
     d46:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     d48:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     d4a:	e8 94       	clt
	_LPMI	r21		;Get flags
     d4c:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     d4e:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     d50:	c1 f3       	breq	.-16     	; 0xd42 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     d52:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     d54:	11 f4       	brne	.+4      	; 0xd5a <xvprintf+0x26>
	set			;/
     d56:	68 94       	set
22:	_LPMI	r21		;Get width
     d58:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     d5a:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     d5c:	48 f4       	brcc	.+18     	; 0xd70 <xvprintf+0x3c>
	subi	r21, '0'	;
     d5e:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     d60:	90 f3       	brcs	.-28     	; 0xd46 <xvprintf+0x12>
	lsl	r18		;
     d62:	22 0f       	add	r18, r18
	mov	r0, r18		;
     d64:	02 2e       	mov	r0, r18
	lsl	r18		;
     d66:	22 0f       	add	r18, r18
	lsl	r18		;
     d68:	22 0f       	add	r18, r18
	add	r18, r0		;
     d6a:	20 0d       	add	r18, r0
	add	r18, r21	;
     d6c:	25 0f       	add	r18, r21
	rjmp	22b		;/
     d6e:	f4 cf       	rjmp	.-24     	; 0xd58 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     d70:	0e f4       	brtc	.+2      	; 0xd74 <xvprintf+0x40>
	neg	r18		;
     d72:	21 95       	neg	r18
25:	ld	r24, Y+		;
     d74:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     d76:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     d78:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     d7a:	19 f3       	breq	.-58     	; 0xd42 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     d7c:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     d7e:	29 f1       	breq	.+74     	; 0xdca <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     d80:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     d82:	59 f1       	breq	.+86     	; 0xdda <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     d84:	bc 01       	movw	r22, r24
	clr	r24		;
     d86:	88 27       	eor	r24, r24
	clr	r25		;
     d88:	99 27       	eor	r25, r25
	clt			;/
     d8a:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     d8c:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     d8e:	21 f4       	brne	.+8      	; 0xd98 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     d90:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     d92:	99 91       	ld	r25, Y+
	set			;
     d94:	68 94       	set
	_LPMI	r21		;/
     d96:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     d98:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     d9a:	39 f4       	brne	.+14     	; 0xdaa <xvprintf+0x76>
	ldi	r20, -10	;
     d9c:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     d9e:	7e f0       	brts	.+30     	; 0xdbe <xvprintf+0x8a>
	sbrs	r23, 7		;
     da0:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     da2:	0d c0       	rjmp	.+26     	; 0xdbe <xvprintf+0x8a>
	ldi	r24, -1		;
     da4:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     da6:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     da8:	0a c0       	rjmp	.+20     	; 0xdbe <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     daa:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     dac:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     dae:	39 f0       	breq	.+14     	; 0xdbe <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     db0:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     db2:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     db4:	21 f0       	breq	.+8      	; 0xdbe <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     db6:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     db8:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     dba:	09 f0       	breq	.+2      	; 0xdbe <xvprintf+0x8a>
	ret			;abort
     dbc:	08 95       	ret
40:	push	ZH		;Output the value
     dbe:	ff 93       	push	r31
	push	ZL		;
     dc0:	ef 93       	push	r30
	rcall	xitoa		;
     dc2:	7d df       	rcall	.-262    	; 0xcbe <xitoa>
42:	pop	ZL		;
     dc4:	ef 91       	pop	r30
	pop	ZH		;
     dc6:	ff 91       	pop	r31
	rjmp	0b		;/
     dc8:	b7 cf       	rjmp	.-146    	; 0xd38 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     dca:	ff 93       	push	r31
	push	ZL
     dcc:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     dce:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     dd0:	81 91       	ld	r24, Z+
	cpi	r24, 0
     dd2:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     dd4:	b9 f3       	breq	.-18     	; 0xdc4 <xvprintf+0x90>
	rcall	xputc
     dd6:	60 df       	rcall	.-320    	; 0xc98 <xputc>
	rjmp	51b
     dd8:	fb cf       	rjmp	.-10     	; 0xdd0 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     dda:	ff 93       	push	r31
	push	ZL
     ddc:	ef 93       	push	r30
	rcall	xputs
     dde:	68 df       	rcall	.-304    	; 0xcb0 <xputs>
	rjmp	42b
     de0:	f1 cf       	rjmp	.-30     	; 0xdc4 <xvprintf+0x90>

00000de2 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     de2:	df 93       	push	r29
	push	YL
     de4:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     de6:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     de8:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     dea:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     dec:	a3 df       	rcall	.-186    	; 0xd34 <xvprintf>
	pop	YL
     dee:	cf 91       	pop	r28
	pop	YH
     df0:	df 91       	pop	r29
	ret
     df2:	08 95       	ret

00000df4 <unselect_rows>:

inline
bool matrix_is_on(uint8_t row, uint8_t col)
{
    return (matrix[row] & ((matrix_row_t)1<<col));
}
     df4:	80 b3       	in	r24, 0x10	; 16
     df6:	8e 7d       	andi	r24, 0xDE	; 222
     df8:	80 bb       	out	0x10, r24	; 16
     dfa:	81 b3       	in	r24, 0x11	; 17
     dfc:	8e 7d       	andi	r24, 0xDE	; 222
     dfe:	81 bb       	out	0x11, r24	; 17
     e00:	57 98       	cbi	0x0a, 7	; 10
     e02:	5f 98       	cbi	0x0b, 7	; 11
     e04:	24 98       	cbi	0x04, 4	; 4
     e06:	2c 98       	cbi	0x05, 4	; 5
     e08:	08 95       	ret

00000e0a <matrix_init>:
     e0a:	85 b7       	in	r24, 0x35	; 53
     e0c:	80 68       	ori	r24, 0x80	; 128
     e0e:	85 bf       	out	0x35, r24	; 53
     e10:	85 b7       	in	r24, 0x35	; 53
     e12:	80 68       	ori	r24, 0x80	; 128
     e14:	85 bf       	out	0x35, r24	; 53
     e16:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <unselect_rows>
     e1a:	80 b3       	in	r24, 0x10	; 16
     e1c:	8d 7e       	andi	r24, 0xED	; 237
     e1e:	80 bb       	out	0x10, r24	; 16
     e20:	81 b3       	in	r24, 0x11	; 17
     e22:	82 61       	ori	r24, 0x12	; 18
     e24:	81 bb       	out	0x11, r24	; 17
     e26:	8a b1       	in	r24, 0x0a	; 10
     e28:	8f 7a       	andi	r24, 0xAF	; 175
     e2a:	8a b9       	out	0x0a, r24	; 10
     e2c:	8b b1       	in	r24, 0x0b	; 11
     e2e:	80 65       	ori	r24, 0x50	; 80
     e30:	8b b9       	out	0x0b, r24	; 11
     e32:	ae e3       	ldi	r26, 0x3E	; 62
     e34:	b1 e0       	ldi	r27, 0x01	; 1
     e36:	1c 92       	st	X, r1
     e38:	ea e3       	ldi	r30, 0x3A	; 58
     e3a:	f1 e0       	ldi	r31, 0x01	; 1
     e3c:	10 82       	st	Z, r1
     e3e:	11 96       	adiw	r26, 0x01	; 1
     e40:	1c 92       	st	X, r1
     e42:	11 97       	sbiw	r26, 0x01	; 1
     e44:	11 82       	std	Z+1, r1	; 0x01
     e46:	12 96       	adiw	r26, 0x02	; 2
     e48:	1c 92       	st	X, r1
     e4a:	12 97       	sbiw	r26, 0x02	; 2
     e4c:	12 82       	std	Z+2, r1	; 0x02
     e4e:	13 96       	adiw	r26, 0x03	; 3
     e50:	1c 92       	st	X, r1
     e52:	13 82       	std	Z+3, r1	; 0x03
     e54:	08 95       	ret

00000e56 <matrix_scan>:
     e56:	df 92       	push	r13
     e58:	ef 92       	push	r14
     e5a:	ff 92       	push	r15
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
     e64:	0a e3       	ldi	r16, 0x3A	; 58
     e66:	11 e0       	ldi	r17, 0x01	; 1
     e68:	c0 e0       	ldi	r28, 0x00	; 0
     e6a:	d1 e0       	ldi	r29, 0x01	; 1
     e6c:	85 e0       	ldi	r24, 0x05	; 5
     e6e:	d8 2e       	mov	r13, r24
     e70:	95 e3       	ldi	r25, 0x35	; 53
     e72:	e9 2e       	mov	r14, r25
     e74:	91 e0       	ldi	r25, 0x01	; 1
     e76:	f9 2e       	mov	r15, r25
     e78:	c2 30       	cpi	r28, 0x02	; 2
     e7a:	51 f0       	breq	.+20     	; 0xe90 <matrix_scan+0x3a>
     e7c:	c3 30       	cpi	r28, 0x03	; 3
     e7e:	59 f0       	breq	.+22     	; 0xe96 <matrix_scan+0x40>
     e80:	c1 30       	cpi	r28, 0x01	; 1
     e82:	19 f0       	breq	.+6      	; 0xe8a <matrix_scan+0x34>
     e84:	80 9a       	sbi	0x10, 0	; 16
     e86:	88 98       	cbi	0x11, 0	; 17
     e88:	08 c0       	rjmp	.+16     	; 0xe9a <matrix_scan+0x44>
     e8a:	85 9a       	sbi	0x10, 5	; 16
     e8c:	8d 98       	cbi	0x11, 5	; 17
     e8e:	05 c0       	rjmp	.+10     	; 0xe9a <matrix_scan+0x44>
     e90:	50 9a       	sbi	0x0a, 0	; 10
     e92:	5f 98       	cbi	0x0b, 7	; 11
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <matrix_scan+0x44>
     e96:	24 9a       	sbi	0x04, 4	; 4
     e98:	2c 98       	cbi	0x05, 4	; 5
     e9a:	80 ea       	ldi	r24, 0xA0	; 160
     e9c:	8a 95       	dec	r24
     e9e:	f1 f7       	brne	.-4      	; 0xe9c <matrix_scan+0x46>
     ea0:	8f b1       	in	r24, 0x0f	; 15
     ea2:	86 95       	lsr	r24
     ea4:	81 70       	andi	r24, 0x01	; 1
     ea6:	8d 27       	eor	r24, r29
     ea8:	7c 99       	sbic	0x0f, 4	; 15
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <matrix_scan+0x5a>
     eac:	92 e0       	ldi	r25, 0x02	; 2
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <matrix_scan+0x5c>
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	89 2b       	or	r24, r25
     eb4:	4e 99       	sbic	0x09, 6	; 9
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <matrix_scan+0x66>
     eb8:	94 e0       	ldi	r25, 0x04	; 4
     eba:	01 c0       	rjmp	.+2      	; 0xebe <matrix_scan+0x68>
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	89 2b       	or	r24, r25
     ec0:	4c 99       	sbic	0x09, 4	; 9
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <matrix_scan+0x72>
     ec4:	98 e0       	ldi	r25, 0x08	; 8
     ec6:	01 c0       	rjmp	.+2      	; 0xeca <matrix_scan+0x74>
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	89 2b       	or	r24, r25
     ecc:	f8 01       	movw	r30, r16
     ece:	90 81       	ld	r25, Z
     ed0:	98 17       	cp	r25, r24
     ed2:	39 f1       	breq	.+78     	; 0xf22 <matrix_scan+0xcc>
     ed4:	80 83       	st	Z, r24
     ed6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     eda:	88 23       	and	r24, r24
     edc:	01 f1       	breq	.+64     	; 0xf1e <matrix_scan+0xc8>
     ede:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <debug_config>
     ee2:	80 ff       	sbrs	r24, 0
     ee4:	04 c0       	rjmp	.+8      	; 0xeee <matrix_scan+0x98>
     ee6:	8a e3       	ldi	r24, 0x3A	; 58
     ee8:	91 e0       	ldi	r25, 0x01	; 1
     eea:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
     eee:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <debug_config>
     ef2:	80 ff       	sbrs	r24, 0
     ef4:	0c c0       	rjmp	.+24     	; 0xf0e <matrix_scan+0xb8>
     ef6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     efa:	1f 92       	push	r1
     efc:	8f 93       	push	r24
     efe:	ff 92       	push	r15
     f00:	ef 92       	push	r14
     f02:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <debug_config>
     f12:	80 ff       	sbrs	r24, 0
     f14:	04 c0       	rjmp	.+8      	; 0xf1e <matrix_scan+0xc8>
     f16:	83 e3       	ldi	r24, 0x33	; 51
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
     f1e:	d0 92 00 01 	sts	0x0100, r13	; 0x800100 <__data_start>
     f22:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <unselect_rows>
     f26:	cf 5f       	subi	r28, 0xFF	; 255
     f28:	0f 5f       	subi	r16, 0xFF	; 255
     f2a:	1f 4f       	sbci	r17, 0xFF	; 255
     f2c:	c4 30       	cpi	r28, 0x04	; 4
     f2e:	09 f0       	breq	.+2      	; 0xf32 <matrix_scan+0xdc>
     f30:	a3 cf       	rjmp	.-186    	; 0xe78 <matrix_scan+0x22>
     f32:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f36:	88 23       	and	r24, r24
     f38:	e1 f0       	breq	.+56     	; 0xf72 <matrix_scan+0x11c>
     f3a:	81 50       	subi	r24, 0x01	; 1
     f3c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     f40:	88 23       	and	r24, r24
     f42:	39 f0       	breq	.+14     	; 0xf52 <matrix_scan+0xfc>
     f44:	8f e9       	ldi	r24, 0x9F	; 159
     f46:	9f e0       	ldi	r25, 0x0F	; 15
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	f1 f7       	brne	.-4      	; 0xf48 <matrix_scan+0xf2>
     f4c:	00 c0       	rjmp	.+0      	; 0xf4e <matrix_scan+0xf8>
     f4e:	00 00       	nop
     f50:	10 c0       	rjmp	.+32     	; 0xf72 <matrix_scan+0x11c>
     f52:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <matrix_debouncing>
     f56:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <matrix>
     f5a:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <matrix_debouncing+0x1>
     f5e:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <matrix+0x1>
     f62:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <matrix_debouncing+0x2>
     f66:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <matrix+0x2>
     f6a:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <matrix_debouncing+0x3>
     f6e:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <matrix+0x3>
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	1f 91       	pop	r17
     f7a:	0f 91       	pop	r16
     f7c:	ff 90       	pop	r15
     f7e:	ef 90       	pop	r14
     f80:	df 90       	pop	r13
     f82:	08 95       	ret

00000f84 <matrix_get_row>:

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
     f84:	e8 2f       	mov	r30, r24
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	e2 5c       	subi	r30, 0xC2	; 194
     f8a:	fe 4f       	sbci	r31, 0xFE	; 254
}
     f8c:	80 81       	ld	r24, Z
     f8e:	08 95       	ret

00000f90 <matrix_print>:

void matrix_print(void)
{
     f90:	cf 92       	push	r12
     f92:	df 92       	push	r13
     f94:	ef 92       	push	r14
     f96:	ff 92       	push	r15
     f98:	0f 93       	push	r16
     f9a:	1f 93       	push	r17
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
     fa0:	8c e1       	ldi	r24, 0x1C	; 28
     fa2:	91 e0       	ldi	r25, 0x01	; 1
     fa4:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
     fa8:	8e e3       	ldi	r24, 0x3E	; 62
     faa:	e8 2e       	mov	r14, r24
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	f8 2e       	mov	r15, r24
     fb0:	c0 e0       	ldi	r28, 0x00	; 0
     fb2:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
     fb4:	97 e1       	ldi	r25, 0x17	; 23
     fb6:	c9 2e       	mov	r12, r25
     fb8:	91 e0       	ldi	r25, 0x01	; 1
     fba:	d9 2e       	mov	r13, r25
        pbin_reverse16(matrix_get_row(row));
     fbc:	0e e0       	ldi	r16, 0x0E	; 14
     fbe:	11 e0       	ldi	r17, 0x01	; 1

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	df 92       	push	r13
     fc6:	cf 92       	push	r12
     fc8:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
     fcc:	84 e1       	ldi	r24, 0x14	; 20
     fce:	91 e0       	ldi	r25, 0x01	; 1
     fd0:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
     fd4:	f7 01       	movw	r30, r14
     fd6:	81 91       	ld	r24, Z+
     fd8:	7f 01       	movw	r14, r30
void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <bitrev16>
     fe0:	9f 93       	push	r25
     fe2:	8f 93       	push	r24
     fe4:	1f 93       	push	r17
     fe6:	0f 93       	push	r16
     fe8:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
        print("\n");
     fec:	8c e0       	ldi	r24, 0x0C	; 12
     fee:	91 e0       	ldi	r25, 0x01	; 1
     ff0:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
     ff4:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
     ff6:	8d b7       	in	r24, 0x3d	; 61
     ff8:	9e b7       	in	r25, 0x3e	; 62
     ffa:	08 96       	adiw	r24, 0x08	; 8
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	f8 94       	cli
    1000:	9e bf       	out	0x3e, r25	; 62
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	8d bf       	out	0x3d, r24	; 61
    1006:	c4 30       	cpi	r28, 0x04	; 4
    1008:	d1 05       	cpc	r29, r1
    100a:	d1 f6       	brne	.-76     	; 0xfc0 <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	0f 91       	pop	r16
    1014:	ff 90       	pop	r15
    1016:	ef 90       	pop	r14
    1018:	df 90       	pop	r13
    101a:	cf 90       	pop	r12
    101c:	08 95       	ret

0000101e <backlight_set>:
#include <avr/io.h>
#include "backlight.h"


void backlight_set(uint8_t level) {
    DDRB |= (1<<5);
    101e:	25 9a       	sbi	0x04, 5	; 4

    if (level) { // Backlight on
    1020:	88 23       	and	r24, r24
    1022:	11 f0       	breq	.+4      	; 0x1028 <backlight_set+0xa>
        PORTB |= (1<<5);
    1024:	2d 9a       	sbi	0x05, 5	; 5
    1026:	08 95       	ret
    } else { // Backlight off
        PORTB &= ~(1<<5);
    1028:	2d 98       	cbi	0x05, 5	; 5
    102a:	08 95       	ret

0000102c <led_set>:
#include <avr/io.h>
#include "stdint.h"
#include "led.h"

void led_set(uint8_t usb_led)
{
    102c:	08 95       	ret

0000102e <keyboard_leds>:
 * Host driver
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    102e:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <keyboard_led_stats>
    1032:	08 95       	ret

00001034 <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    1034:	9f b7       	in	r25, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <console_flush>
    103c:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    103e:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <USB_DeviceState>
    1042:	94 30       	cpi	r25, 0x04	; 4
    1044:	09 f0       	breq	.+2      	; 0x1048 <sendchar+0x14>
    1046:	57 c0       	rjmp	.+174    	; 0x10f6 <sendchar+0xc2>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1048:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    104c:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    104e:	30 91 ec 00 	lds	r19, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1052:	23 2f       	mov	r18, r19
    1054:	21 70       	andi	r18, 0x01	; 1
    1056:	30 fd       	sbrc	r19, 0
    1058:	20 e8       	ldi	r18, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    105a:	92 2b       	or	r25, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    105c:	24 e0       	ldi	r18, 0x04	; 4
    105e:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1062:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1066:	20 ff       	sbrs	r18, 0
    1068:	43 c0       	rjmp	.+134    	; 0x10f0 <sendchar+0xbc>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    106a:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    106e:	27 ff       	sbrs	r18, 7
    1070:	3f c0       	rjmp	.+126    	; 0x10f0 <sendchar+0xbc>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    1072:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <timeouted.5016>
    1076:	22 23       	and	r18, r18
    1078:	21 f0       	breq	.+8      	; 0x1082 <sendchar+0x4e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    107a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    107e:	25 ff       	sbrs	r18, 5
    1080:	37 c0       	rjmp	.+110    	; 0x10f0 <sendchar+0xbc>
        goto ERROR_EXIT;
    }

    timeouted = false;
    1082:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <timeouted.5016>

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    1086:	26 e0       	ldi	r18, 0x06	; 6
    1088:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    108c:	35 fd       	sbrc	r19, 5
    108e:	15 c0       	rjmp	.+42     	; 0x10ba <sendchar+0x86>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    1090:	30 91 fb 01 	lds	r19, 0x01FB	; 0x8001fb <USB_DeviceState>
    1094:	34 30       	cpi	r19, 0x04	; 4
    1096:	61 f5       	brne	.+88     	; 0x10f0 <sendchar+0xbc>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1098:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    109c:	35 fd       	sbrc	r19, 5
    109e:	28 c0       	rjmp	.+80     	; 0x10f0 <sendchar+0xbc>
    10a0:	21 50       	subi	r18, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    10a2:	21 f4       	brne	.+8      	; 0x10ac <sendchar+0x78>
            timeouted = true;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timeouted.5016>
            goto ERROR_EXIT;
    10aa:	22 c0       	rjmp	.+68     	; 0x10f0 <sendchar+0xbc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10ac:	ef e9       	ldi	r30, 0x9F	; 159
    10ae:	ff e0       	ldi	r31, 0x0F	; 15
    10b0:	31 97       	sbiw	r30, 0x01	; 1
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <sendchar+0x7c>
    10b4:	00 c0       	rjmp	.+0      	; 0x10b6 <sendchar+0x82>
    10b6:	00 00       	nop
    10b8:	e7 cf       	rjmp	.-50     	; 0x1088 <sendchar+0x54>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10ba:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    10be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    10c2:	85 fd       	sbrc	r24, 5
    10c4:	0a c0       	rjmp	.+20     	; 0x10da <sendchar+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    10c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        while (!(Endpoint_IsINReady()));
    10ca:	80 ff       	sbrs	r24, 0
    10cc:	fc cf       	rjmp	.-8      	; 0x10c6 <sendchar+0x92>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10d2:	8e 77       	andi	r24, 0x7E	; 126
    10d4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10d8:	06 c0       	rjmp	.+12     	; 0x10e6 <sendchar+0xb2>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    10da:	8f b7       	in	r24, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	21 e0       	ldi	r18, 0x01	; 1
    10e0:	20 93 45 01 	sts	0x0145, r18	; 0x800145 <console_flush>
    10e4:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10e6:	9f 70       	andi	r25, 0x0F	; 15
    10e8:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	08 95       	ret
    10f0:	9f 70       	andi	r25, 0x0F	; 15
    10f2:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    10f6:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    10f8:	08 95       	ret

000010fa <send_consumer>:
    Endpoint_ClearIN();
#endif
}

static void send_consumer(uint16_t data)
{
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	00 d0       	rcall	.+0      	; 0x1100 <send_consumer+0x6>
    1100:	1f 92       	push	r1
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	9c 01       	movw	r18, r24
#ifdef EXTRAKEY_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1108:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <USB_DeviceState>
    110c:	84 30       	cpi	r24, 0x04	; 4
    110e:	19 f5       	brne	.+70     	; 0x1156 <send_consumer+0x5c>
        return;

    report_extra_t r = {
    1110:	93 e0       	ldi	r25, 0x03	; 3
    1112:	99 83       	std	Y+1, r25	; 0x01
    1114:	3b 83       	std	Y+3, r19	; 0x03
    1116:	2a 83       	std	Y+2, r18	; 0x02
    1118:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    111c:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    111e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1122:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1124:	95 fd       	sbrc	r25, 5
    1126:	06 c0       	rjmp	.+12     	; 0x1134 <send_consumer+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1128:	95 ed       	ldi	r25, 0xD5	; 213
    112a:	9a 95       	dec	r25
    112c:	f1 f7       	brne	.-4      	; 0x112a <send_consumer+0x30>
    112e:	00 00       	nop
    1130:	81 11       	cpse	r24, r1
    1132:	f5 cf       	rjmp	.-22     	; 0x111e <send_consumer+0x24>
    1134:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    1138:	85 ff       	sbrs	r24, 5
    113a:	0d c0       	rjmp	.+26     	; 0x1156 <send_consumer+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	63 e0       	ldi	r22, 0x03	; 3
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	ce 01       	movw	r24, r28
    1146:	01 96       	adiw	r24, 0x01	; 1
    1148:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    114c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1150:	8e 77       	andi	r24, 0x7E	; 126
    1152:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    Endpoint_ClearIN();
#endif
}
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	08 95       	ret

00001162 <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	00 d0       	rcall	.+0      	; 0x1168 <send_system+0x6>
    1168:	1f 92       	push	r1
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
#ifdef EXTRAKEY_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    116e:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <USB_DeviceState>
    1172:	24 30       	cpi	r18, 0x04	; 4
    1174:	21 f5       	brne	.+72     	; 0x11be <send_system+0x5c>
        return;

    report_extra_t r = {
    1176:	22 e0       	ldi	r18, 0x02	; 2
    1178:	29 83       	std	Y+1, r18	; 0x01
    117a:	9b 83       	std	Y+3, r25	; 0x03
    117c:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    117e:	83 e0       	ldi	r24, 0x03	; 3
    1180:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1184:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1186:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    118a:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    118c:	95 fd       	sbrc	r25, 5
    118e:	06 c0       	rjmp	.+12     	; 0x119c <send_system+0x3a>
    1190:	95 ed       	ldi	r25, 0xD5	; 213
    1192:	9a 95       	dec	r25
    1194:	f1 f7       	brne	.-4      	; 0x1192 <send_system+0x30>
    1196:	00 00       	nop
    1198:	81 11       	cpse	r24, r1
    119a:	f5 cf       	rjmp	.-22     	; 0x1186 <send_system+0x24>
    119c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    11a0:	85 ff       	sbrs	r24, 5
    11a2:	0d c0       	rjmp	.+26     	; 0x11be <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    11a4:	40 e0       	ldi	r20, 0x00	; 0
    11a6:	50 e0       	ldi	r21, 0x00	; 0
    11a8:	63 e0       	ldi	r22, 0x03	; 3
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	ce 01       	movw	r24, r28
    11ae:	01 96       	adiw	r24, 0x01	; 1
    11b0:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11b8:	8e 77       	andi	r24, 0x7E	; 126
    11ba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    Endpoint_ClearIN();
#endif
}
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	08 95       	ret

000011ca <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    11ca:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <USB_DeviceState>
    11ce:	24 30       	cpi	r18, 0x04	; 4
    11d0:	f1 f4       	brne	.+60     	; 0x120e <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11d2:	22 e0       	ldi	r18, 0x02	; 2
    11d4:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    11d8:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    11da:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11de:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    11e0:	35 fd       	sbrc	r19, 5
    11e2:	06 c0       	rjmp	.+12     	; 0x11f0 <send_mouse+0x26>
    11e4:	35 ed       	ldi	r19, 0xD5	; 213
    11e6:	3a 95       	dec	r19
    11e8:	f1 f7       	brne	.-4      	; 0x11e6 <send_mouse+0x1c>
    11ea:	00 00       	nop
    11ec:	21 11       	cpse	r18, r1
    11ee:	f5 cf       	rjmp	.-22     	; 0x11da <send_mouse+0x10>
    11f0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    11f4:	25 ff       	sbrs	r18, 5
    11f6:	0b c0       	rjmp	.+22     	; 0x120e <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    11f8:	40 e0       	ldi	r20, 0x00	; 0
    11fa:	50 e0       	ldi	r21, 0x00	; 0
    11fc:	65 e0       	ldi	r22, 0x05	; 5
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1204:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1208:	8e 77       	andi	r24, 0x7E	; 126
    120a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    120e:	08 95       	ret

00001210 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1214:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <USB_DeviceState>
    1218:	24 30       	cpi	r18, 0x04	; 4
    121a:	09 f0       	breq	.+2      	; 0x121e <send_keyboard+0xe>
    121c:	48 c0       	rjmp	.+144    	; 0x12ae <send_keyboard+0x9e>
    121e:	ec 01       	movw	r28, r24
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    1220:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <keyboard_protocol>
    1224:	88 23       	and	r24, r24
    1226:	e1 f0       	breq	.+56     	; 0x1260 <send_keyboard+0x50>
    1228:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <keyboard_nkro>
    122c:	88 23       	and	r24, r24
    122e:	c1 f0       	breq	.+48     	; 0x1260 <send_keyboard+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1230:	85 e0       	ldi	r24, 0x05	; 5
    1232:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1236:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1238:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    123c:	81 50       	subi	r24, 0x01	; 1
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(8);
    123e:	95 fd       	sbrc	r25, 5
    1240:	06 c0       	rjmp	.+12     	; 0x124e <send_keyboard+0x3e>
    1242:	9a e2       	ldi	r25, 0x2A	; 42
    1244:	9a 95       	dec	r25
    1246:	f1 f7       	brne	.-4      	; 0x1244 <send_keyboard+0x34>
    1248:	00 c0       	rjmp	.+0      	; 0x124a <send_keyboard+0x3a>
    124a:	81 11       	cpse	r24, r1
    124c:	f5 cf       	rjmp	.-22     	; 0x1238 <send_keyboard+0x28>
    124e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (!Endpoint_IsReadWriteAllowed()) return;
    1252:	85 ff       	sbrs	r24, 5
    1254:	2c c0       	rjmp	.+88     	; 0x12ae <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    1256:	40 e0       	ldi	r20, 0x00	; 0
    1258:	50 e0       	ldi	r21, 0x00	; 0
    125a:	60 e2       	ldi	r22, 0x20	; 32
    125c:	70 e0       	ldi	r23, 0x00	; 0
    125e:	17 c0       	rjmp	.+46     	; 0x128e <send_keyboard+0x7e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1266:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1268:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    126c:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    126e:	95 fd       	sbrc	r25, 5
    1270:	06 c0       	rjmp	.+12     	; 0x127e <send_keyboard+0x6e>
    1272:	95 ed       	ldi	r25, 0xD5	; 213
    1274:	9a 95       	dec	r25
    1276:	f1 f7       	brne	.-4      	; 0x1274 <send_keyboard+0x64>
    1278:	00 00       	nop
    127a:	81 11       	cpse	r24, r1
    127c:	f5 cf       	rjmp	.-22     	; 0x1268 <send_keyboard+0x58>
    127e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (!Endpoint_IsReadWriteAllowed()) return;
    1282:	85 ff       	sbrs	r24, 5
    1284:	14 c0       	rjmp	.+40     	; 0x12ae <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    1286:	40 e0       	ldi	r20, 0x00	; 0
    1288:	50 e0       	ldi	r21, 0x00	; 0
    128a:	68 e0       	ldi	r22, 0x08	; 8
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	ce 01       	movw	r24, r28
    1290:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1294:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1298:	8e 77       	andi	r24, 0x7E	; 126
    129a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    129e:	80 e2       	ldi	r24, 0x20	; 32
    12a0:	fe 01       	movw	r30, r28
    12a2:	a6 e4       	ldi	r26, 0x46	; 70
    12a4:	b1 e0       	ldi	r27, 0x01	; 1
    12a6:	01 90       	ld	r0, Z+
    12a8:	0d 92       	st	X+, r0
    12aa:	8a 95       	dec	r24
    12ac:	e1 f7       	brne	.-8      	; 0x12a6 <send_keyboard+0x96>
}
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	08 95       	ret

000012b4 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    12b4:	82 e7       	ldi	r24, 0x72	; 114
    12b6:	91 e0       	ldi	r25, 0x01	; 1
    12b8:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    12bc:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <USB_IsInitialized>
    12c0:	81 11       	cpse	r24, r1
    12c2:	09 c0       	rjmp	.+18     	; 0x12d6 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    12c4:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <USB_Disable>
        USB_Init();
    12c8:	0e 94 57 0d 	call	0x1aae	; 0x1aae <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    12cc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    12d0:	84 60       	ori	r24, 0x04	; 4
    12d2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    12d6:	08 95       	ret

000012d8 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    12d8:	8e e6       	ldi	r24, 0x6E	; 110
    12da:	91 e0       	ldi	r25, 0x01	; 1
    12dc:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    12e0:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <USB_IsInitialized>
    12e4:	08 95       	ret

000012e6 <EVENT_USB_Device_Reset>:
    }
*/
}

void EVENT_USB_Device_Reset(void)
{
    12e6:	08 95       	ret

000012e8 <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    12e8:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <count.4946>
    12ec:	2f 5f       	subi	r18, 0xFF	; 255
    12ee:	82 2f       	mov	r24, r18
    12f0:	62 e3       	ldi	r22, 0x32	; 50
    12f2:	0e 94 cd 2b 	call	0x579a	; 0x579a <__udivmodqi4>
    12f6:	99 23       	and	r25, r25
    12f8:	19 f0       	breq	.+6      	; 0x1300 <EVENT_USB_Device_StartOfFrame+0x18>
    12fa:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <count.4946>
    12fe:	08 95       	ret
    count = 0;
    1300:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <count.4946>

    if (!console_flush) return;
    1304:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <console_flush>
    1308:	88 23       	and	r24, r24
    130a:	71 f1       	breq	.+92     	; 0x1368 <EVENT_USB_Device_StartOfFrame+0x80>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    130c:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <USB_DeviceState>
    1310:	84 30       	cpi	r24, 0x04	; 4
    1312:	41 f5       	brne	.+80     	; 0x1364 <EVENT_USB_Device_StartOfFrame+0x7c>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1314:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1318:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    131a:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    131e:	92 2f       	mov	r25, r18
    1320:	91 70       	andi	r25, 0x01	; 1
    1322:	20 fd       	sbrc	r18, 0
    1324:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1326:	89 2b       	or	r24, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1328:	94 e0       	ldi	r25, 0x04	; 4
    132a:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    132e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1332:	90 ff       	sbrs	r25, 0
    1334:	14 c0       	rjmp	.+40     	; 0x135e <EVENT_USB_Device_StartOfFrame+0x76>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1336:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    133a:	97 ff       	sbrs	r25, 7
    133c:	10 c0       	rjmp	.+32     	; 0x135e <EVENT_USB_Device_StartOfFrame+0x76>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    133e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    1342:	95 ff       	sbrs	r25, 5
    1344:	03 c0       	rjmp	.+6      	; 0x134c <EVENT_USB_Device_StartOfFrame+0x64>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1346:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    134a:	f9 cf       	rjmp	.-14     	; 0x133e <EVENT_USB_Device_StartOfFrame+0x56>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    134c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    1350:	90 ff       	sbrs	r25, 0
    1352:	05 c0       	rjmp	.+10     	; 0x135e <EVENT_USB_Device_StartOfFrame+0x76>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1354:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1358:	9e 77       	andi	r25, 0x7E	; 126
    135a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    135e:	8f 70       	andi	r24, 0x0F	; 15
    1360:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    1364:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <console_flush>
    1368:	08 95       	ret

0000136a <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    136a:	42 e0       	ldi	r20, 0x02	; 2
    136c:	61 ec       	ldi	r22, 0xC1	; 193
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <Endpoint_ConfigureEndpoint_Prv>
    1374:	42 e0       	ldi	r20, 0x02	; 2
    1376:	61 ec       	ldi	r22, 0xC1	; 193
    1378:	82 e0       	ldi	r24, 0x02	; 2
    137a:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <Endpoint_ConfigureEndpoint_Prv>
    137e:	42 e0       	ldi	r20, 0x02	; 2
    1380:	61 ec       	ldi	r22, 0xC1	; 193
    1382:	83 e0       	ldi	r24, 0x03	; 3
    1384:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <Endpoint_ConfigureEndpoint_Prv>
    1388:	42 e2       	ldi	r20, 0x22	; 34
    138a:	61 ec       	ldi	r22, 0xC1	; 193
    138c:	84 e0       	ldi	r24, 0x04	; 4
    138e:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <Endpoint_ConfigureEndpoint_Prv>
    1392:	42 e2       	ldi	r20, 0x22	; 34
    1394:	61 ec       	ldi	r22, 0xC1	; 193
    1396:	85 e0       	ldi	r24, 0x05	; 5
    1398:	0c 94 73 0c 	jmp	0x18e6	; 0x18e6 <Endpoint_ConfigureEndpoint_Prv>

0000139c <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    139c:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <USB_ControlRequest+0x1>
    13a0:	83 30       	cpi	r24, 0x03	; 3
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <EVENT_USB_Device_ControlRequest+0xa>
    13a4:	55 c0       	rjmp	.+170    	; 0x1450 <EVENT_USB_Device_ControlRequest+0xb4>
    13a6:	30 f4       	brcc	.+12     	; 0x13b4 <EVENT_USB_Device_ControlRequest+0x18>
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	71 f0       	breq	.+28     	; 0x13c8 <EVENT_USB_Device_ControlRequest+0x2c>
    13ac:	82 30       	cpi	r24, 0x02	; 2
    13ae:	09 f4       	brne	.+2      	; 0x13b2 <EVENT_USB_Device_ControlRequest+0x16>
    13b0:	8e c0       	rjmp	.+284    	; 0x14ce <EVENT_USB_Device_ControlRequest+0x132>
    13b2:	08 95       	ret
    13b4:	8a 30       	cpi	r24, 0x0A	; 10
    13b6:	09 f4       	brne	.+2      	; 0x13ba <EVENT_USB_Device_ControlRequest+0x1e>
    13b8:	7a c0       	rjmp	.+244    	; 0x14ae <EVENT_USB_Device_ControlRequest+0x112>
    13ba:	8b 30       	cpi	r24, 0x0B	; 11
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <EVENT_USB_Device_ControlRequest+0x24>
    13be:	60 c0       	rjmp	.+192    	; 0x1480 <EVENT_USB_Device_ControlRequest+0xe4>
    13c0:	89 30       	cpi	r24, 0x09	; 9
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <EVENT_USB_Device_ControlRequest+0x2a>
    13c4:	9c c0       	rjmp	.+312    	; 0x14fe <EVENT_USB_Device_ControlRequest+0x162>
    13c6:	20 c0       	rjmp	.+64     	; 0x1408 <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    13c8:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <USB_ControlRequest>
    13cc:	81 3a       	cpi	r24, 0xA1	; 161
    13ce:	09 f0       	breq	.+2      	; 0x13d2 <EVENT_USB_Device_ControlRequest+0x36>
    13d0:	96 c0       	rjmp	.+300    	; 0x14fe <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    13d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13d6:	87 7f       	andi	r24, 0xF7	; 247
    13d8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    13dc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <USB_ControlRequest+0x4>
    13e0:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <USB_ControlRequest+0x5>
    13e4:	89 2b       	or	r24, r25
    13e6:	21 f4       	brne	.+8      	; 0x13f0 <EVENT_USB_Device_ControlRequest+0x54>
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    13e8:	60 e2       	ldi	r22, 0x20	; 32

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    13ea:	86 e4       	ldi	r24, 0x46	; 70
    13ec:	91 e0       	ldi	r25, 0x01	; 1
    13ee:	03 c0       	rjmp	.+6      	; 0x13f6 <EVENT_USB_Device_ControlRequest+0x5a>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    13f0:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	90 e0       	ldi	r25, 0x00	; 0
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	0e 94 b4 0b 	call	0x1768	; 0x1768 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    13fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1400:	8b 77       	andi	r24, 0x7B	; 123
    1402:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1406:	08 95       	ret
#endif
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1408:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <USB_ControlRequest>
    140c:	81 32       	cpi	r24, 0x21	; 33
    140e:	09 f0       	breq	.+2      	; 0x1412 <EVENT_USB_Device_ControlRequest+0x76>
    1410:	76 c0       	rjmp	.+236    	; 0x14fe <EVENT_USB_Device_ControlRequest+0x162>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1412:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <USB_ControlRequest+0x4>
    1416:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <USB_ControlRequest+0x5>
    141a:	00 97       	sbiw	r24, 0x00	; 0
    141c:	19 f0       	breq	.+6      	; 0x1424 <EVENT_USB_Device_ControlRequest+0x88>
    141e:	04 97       	sbiw	r24, 0x04	; 4
    1420:	09 f0       	breq	.+2      	; 0x1424 <EVENT_USB_Device_ControlRequest+0x88>
    1422:	6d c0       	rjmp	.+218    	; 0x14fe <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1424:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1428:	87 7f       	andi	r24, 0xF7	; 247
    142a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    142e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    1432:	82 fd       	sbrc	r24, 2
    1434:	05 c0       	rjmp	.+10     	; 0x1440 <EVENT_USB_Device_ControlRequest+0xa4>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1436:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <USB_DeviceState>
    143a:	81 11       	cpse	r24, r1
    143c:	f8 cf       	rjmp	.-16     	; 0x142e <EVENT_USB_Device_ControlRequest+0x92>
    143e:	5f c0       	rjmp	.+190    	; 0x14fe <EVENT_USB_Device_ControlRequest+0x162>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1440:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    1444:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <keyboard_led_stats>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1448:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    144c:	8b 77       	andi	r24, 0x7B	; 123
    144e:	53 c0       	rjmp	.+166    	; 0x14f6 <EVENT_USB_Device_ControlRequest+0x15a>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1450:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <USB_ControlRequest>
    1454:	81 3a       	cpi	r24, 0xA1	; 161
    1456:	09 f0       	breq	.+2      	; 0x145a <EVENT_USB_Device_ControlRequest+0xbe>
    1458:	52 c0       	rjmp	.+164    	; 0x14fe <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    145a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <USB_ControlRequest+0x4>
    145e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <USB_ControlRequest+0x5>
    1462:	89 2b       	or	r24, r25
    1464:	09 f0       	breq	.+2      	; 0x1468 <EVENT_USB_Device_ControlRequest+0xcc>
    1466:	4b c0       	rjmp	.+150    	; 0x14fe <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1468:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    146c:	87 7f       	andi	r24, 0xF7	; 247
    146e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1472:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    1476:	80 ff       	sbrs	r24, 0
    1478:	fc cf       	rjmp	.-8      	; 0x1472 <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    147a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <keyboard_protocol>
    147e:	36 c0       	rjmp	.+108    	; 0x14ec <EVENT_USB_Device_ControlRequest+0x150>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1480:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <USB_ControlRequest>
    1484:	81 32       	cpi	r24, 0x21	; 33
    1486:	d9 f5       	brne	.+118    	; 0x14fe <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1488:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <USB_ControlRequest+0x4>
    148c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <USB_ControlRequest+0x5>
    1490:	89 2b       	or	r24, r25
    1492:	a9 f5       	brne	.+106    	; 0x14fe <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1494:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1498:	87 7f       	andi	r24, 0xF7	; 247
    149a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    149e:	0e 94 a8 0c 	call	0x1950	; 0x1950 <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    14a2:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <USB_ControlRequest+0x2>
    14a6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <keyboard_protocol>
                    clear_keyboard();
    14aa:	0c 94 69 16 	jmp	0x2cd2	; 0x2cd2 <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    14ae:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <USB_ControlRequest>
    14b2:	81 32       	cpi	r24, 0x21	; 33
    14b4:	21 f5       	brne	.+72     	; 0x14fe <EVENT_USB_Device_ControlRequest+0x162>
    14b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14ba:	87 7f       	andi	r24, 0xF7	; 247
    14bc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    14c0:	0e 94 a8 0c 	call	0x1950	; 0x1950 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    14c4:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <USB_ControlRequest+0x3>
    14c8:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <keyboard_idle>
    14cc:	08 95       	ret
#endif
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    14ce:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <USB_ControlRequest>
    14d2:	81 3a       	cpi	r24, 0xA1	; 161
    14d4:	a1 f4       	brne	.+40     	; 0x14fe <EVENT_USB_Device_ControlRequest+0x162>
    14d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14da:	87 7f       	andi	r24, 0xF7	; 247
    14dc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    14e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    14e4:	80 ff       	sbrs	r24, 0
    14e6:	fc cf       	rjmp	.-8      	; 0x14e0 <EVENT_USB_Device_ControlRequest+0x144>
                Endpoint_Write_8(keyboard_idle);
    14e8:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <keyboard_idle>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    14ec:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14f4:	8e 77       	andi	r24, 0x7E	; 126
    14f6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    14fa:	0c 94 a8 0c 	jmp	0x1950	; 0x1950 <Endpoint_ClearStatusStage>
    14fe:	08 95       	ret

00001500 <hook_late_init>:
/* hooks */
__attribute__((weak))
void hook_early_init(void) {}

__attribute__((weak))
void hook_late_init(void) {}
    1500:	08 95       	ret

00001502 <hook_early_init>:
    1502:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <hook_late_init>

00001506 <hook_usb_suspend_entry>:
void hook_usb_suspend_entry(void)
{
    // Turn LED off to save power
    // Set 0 with putting aside status before suspend and restore
    // it after wakeup, then LED is updated at keyboard_task() in main loop
    _led_stats = keyboard_led_stats;
    1506:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <keyboard_led_stats>
    150a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <_led_stats>
    keyboard_led_stats = 0;
    150e:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <keyboard_led_stats>
    led_set(keyboard_led_stats);
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	0e 94 16 08 	call	0x102c	; 0x102c <led_set>

    matrix_clear();
    1518:	0e 94 4f 11 	call	0x229e	; 0x229e <matrix_clear>
    clear_keyboard();
    151c:	0c 94 69 16 	jmp	0x2cd2	; 0x2cd2 <clear_keyboard>

00001520 <EVENT_USB_Device_Suspend>:
void EVENT_USB_Device_Suspend()
{
#ifdef LUFA_DEBUG
    print("[S]");
#endif
    hook_usb_suspend_entry();
    1520:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <hook_usb_suspend_entry>

00001524 <hook_usb_suspend_loop>:
}

__attribute__((weak))
void hook_usb_suspend_loop(void)
{
    suspend_power_down();
    1524:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <suspend_power_down>
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1528:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <USB_Device_RemoteWakeupEnabled>
    152c:	88 23       	and	r24, r24
    152e:	29 f0       	breq	.+10     	; 0x153a <hook_usb_suspend_loop+0x16>
    1530:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <suspend_wakeup_condition>
    1534:	81 11       	cpse	r24, r1
        USB_Device_SendRemoteWakeup();
    1536:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <USB_Device_SendRemoteWakeup>
    153a:	08 95       	ret

0000153c <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    153c:	84 b7       	in	r24, 0x34	; 52
    153e:	87 7f       	andi	r24, 0xF7	; 247
    1540:	84 bf       	out	0x34, r24	; 52
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	a8 95       	wdr
    1548:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    154c:	88 61       	ori	r24, 0x18	; 24
    154e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1552:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1556:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	80 e8       	ldi	r24, 0x80	; 128
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    1564:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    1568:	0f be       	out	0x3f, r0	; 63

#ifdef LUFA_DEBUG_SUART
    SUART_OUT_DDR |= (1<<SUART_OUT_BIT);
    SUART_OUT_PORT |= (1<<SUART_OUT_BIT);
#endif
    print_set_sendchar(sendchar);
    156a:	8a e1       	ldi	r24, 0x1A	; 26
    156c:	98 e0       	ldi	r25, 0x08	; 8
    156e:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <print_set_sendchar>
    print("\r\ninit\n");
    1572:	86 e6       	ldi	r24, 0x66	; 102
    1574:	91 e0       	ldi	r25, 0x01	; 1
    1576:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>

    hook_early_init();
    157a:	0e 94 81 0a 	call	0x1502	; 0x1502 <hook_early_init>
    keyboard_setup();
    157e:	0e 94 a0 10 	call	0x2140	; 0x2140 <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    1582:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <USB_Disable>

    USB_Init();
    1586:	0e 94 57 0d 	call	0x1aae	; 0x1aae <USB_Init>
    158a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    158e:	84 60       	ori	r24, 0x04	; 4
    1590:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    print("\r\ninit\n");

    hook_early_init();
    keyboard_setup();
    setup_usb();
    sei();
    1594:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1596:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <USB_DeviceState>
    159a:	84 30       	cpi	r24, 0x04	; 4
    159c:	e1 f7       	brne	.-8      	; 0x1596 <main+0x5a>
    159e:	81 ed       	ldi	r24, 0xD1	; 209
    15a0:	97 e0       	ldi	r25, 0x07	; 7
    15a2:	01 97       	sbiw	r24, 0x01	; 1
    }

    /* wait for Console startup */
    // TODO: long delay often works anyhoo but proper startup would be better
    uint16_t delay = 2000;
    while (delay--) {
    15a4:	39 f0       	breq	.+14     	; 0x15b4 <main+0x78>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15a6:	ef e9       	ldi	r30, 0x9F	; 159
    15a8:	ff e0       	ldi	r31, 0x0F	; 15
    15aa:	31 97       	sbiw	r30, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <main+0x6e>
    15ae:	00 c0       	rjmp	.+0      	; 0x15b0 <main+0x74>
    15b0:	00 00       	nop
    15b2:	f7 cf       	rjmp	.-18     	; 0x15a2 <main+0x66>
        USB_USBTask();
#endif
        _delay_ms(1);
    }

    print("USB configured.\n");
    15b4:	85 e5       	ldi	r24, 0x55	; 85
    15b6:	91 e0       	ldi	r25, 0x01	; 1
    15b8:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>

    /* init modules */
    keyboard_init();
    15bc:	0e 94 a2 10 	call	0x2144	; 0x2144 <keyboard_init>
    host_set_driver(&lufa_driver);
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	91 e0       	ldi	r25, 0x01	; 1
    15c4:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    15c8:	84 e4       	ldi	r24, 0x44	; 68
    15ca:	91 e0       	ldi	r25, 0x01	; 1
    15cc:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    hook_late_init();
    15d0:	0e 94 80 0a 	call	0x1500	; 0x1500 <hook_late_init>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    15d4:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <USB_DeviceState>
    15d8:	85 30       	cpi	r24, 0x05	; 5
    15da:	19 f4       	brne	.+6      	; 0x15e2 <main+0xa6>
#ifdef LUFA_DEBUG
            print("[s]");
#endif
            hook_usb_suspend_loop();
    15dc:	0e 94 92 0a 	call	0x1524	; 0x1524 <hook_usb_suspend_loop>
    15e0:	f9 cf       	rjmp	.-14     	; 0x15d4 <main+0x98>
        }

        keyboard_task();
    15e2:	0e 94 aa 10 	call	0x2154	; 0x2154 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    15e6:	f6 cf       	rjmp	.-20     	; 0x15d4 <main+0x98>

000015e8 <hook_usb_wakeup>:
}

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    15e8:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <suspend_wakeup_init>
    // Restore LED status
    // BIOS/grub won't recognize/enumerate if led_set() takes long(around 40ms?)
    // Converters fall into the case and miss wakeup event(timeout to reply?) in the end.
    //led_set(host_keyboard_leds());
    // Instead, restore stats and update at keyboard_task() in main loop
    keyboard_led_stats = _led_stats;
    15ec:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_led_stats>
    15f0:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <keyboard_led_stats>
    15f4:	08 95       	ret

000015f6 <EVENT_USB_Device_WakeUp>:
void EVENT_USB_Device_WakeUp()
{
#ifdef LUFA_DEBUG
    print("[W]");
#endif
    hook_usb_wakeup();
    15f6:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <hook_usb_wakeup>

000015fa <CALLBACK_USB_GetDescriptor>:
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    15fa:	29 2f       	mov	r18, r25
    15fc:	33 27       	eor	r19, r19
    15fe:	23 30       	cpi	r18, 0x03	; 3
    1600:	31 05       	cpc	r19, r1
    1602:	c9 f0       	breq	.+50     	; 0x1636 <CALLBACK_USB_GetDescriptor+0x3c>
    1604:	60 f4       	brcc	.+24     	; 0x161e <CALLBACK_USB_GetDescriptor+0x24>
    1606:	21 30       	cpi	r18, 0x01	; 1
    1608:	31 05       	cpc	r19, r1
    160a:	81 f0       	breq	.+32     	; 0x162c <CALLBACK_USB_GetDescriptor+0x32>
    160c:	22 30       	cpi	r18, 0x02	; 2
    160e:	31 05       	cpc	r19, r1
    1610:	09 f0       	breq	.+2      	; 0x1614 <CALLBACK_USB_GetDescriptor+0x1a>
    1612:	41 c0       	rjmp	.+130    	; 0x1696 <CALLBACK_USB_GetDescriptor+0x9c>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    1614:	8d e8       	ldi	r24, 0x8D	; 141
    1616:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    1618:	28 e9       	ldi	r18, 0x98	; 152
    161a:	31 e0       	ldi	r19, 0x01	; 1
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    161c:	40 c0       	rjmp	.+128    	; 0x169e <CALLBACK_USB_GetDescriptor+0xa4>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    161e:	21 32       	cpi	r18, 0x21	; 33
    1620:	31 05       	cpc	r19, r1
    1622:	e1 f0       	breq	.+56     	; 0x165c <CALLBACK_USB_GetDescriptor+0x62>
    1624:	22 32       	cpi	r18, 0x22	; 34
    1626:	31 05       	cpc	r19, r1
    1628:	31 f1       	breq	.+76     	; 0x1676 <CALLBACK_USB_GetDescriptor+0x7c>
    162a:	35 c0       	rjmp	.+106    	; 0x1696 <CALLBACK_USB_GetDescriptor+0x9c>
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    162c:	82 e1       	ldi	r24, 0x12	; 18
    162e:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    1630:	25 e2       	ldi	r18, 0x25	; 37
    1632:	32 e0       	ldi	r19, 0x02	; 2
    1634:	34 c0       	rjmp	.+104    	; 0x169e <CALLBACK_USB_GetDescriptor+0xa4>
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    1636:	99 27       	eor	r25, r25
    1638:	81 30       	cpi	r24, 0x01	; 1
    163a:	91 05       	cpc	r25, r1
    163c:	49 f0       	breq	.+18     	; 0x1650 <CALLBACK_USB_GetDescriptor+0x56>
    163e:	28 f0       	brcs	.+10     	; 0x164a <CALLBACK_USB_GetDescriptor+0x50>
    1640:	02 97       	sbiw	r24, 0x02	; 2
    1642:	49 f5       	brne	.+82     	; 0x1696 <CALLBACK_USB_GetDescriptor+0x9c>
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1644:	e6 e7       	ldi	r30, 0x76	; 118
    1646:	f1 e0       	ldi	r31, 0x01	; 1
    1648:	05 c0       	rjmp	.+10     	; 0x1654 <CALLBACK_USB_GetDescriptor+0x5a>
        case DTYPE_String:
            switch (DescriptorIndex )
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    164a:	e4 e9       	ldi	r30, 0x94	; 148
    164c:	f1 e0       	ldi	r31, 0x01	; 1
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <CALLBACK_USB_GetDescriptor+0x5a>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1650:	e8 e8       	ldi	r30, 0x88	; 136
    1652:	f1 e0       	ldi	r31, 0x01	; 1
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1654:	84 91       	lpm	r24, Z
    1656:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    1658:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    165a:	21 c0       	rjmp	.+66     	; 0x169e <CALLBACK_USB_GetDescriptor+0xa4>
    165c:	65 30       	cpi	r22, 0x05	; 5
    165e:	d8 f4       	brcc	.+54     	; 0x1696 <CALLBACK_USB_GetDescriptor+0x9c>
    1660:	e6 2f       	mov	r30, r22
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	ee 0f       	add	r30, r30
    1666:	ff 1f       	adc	r31, r31
    1668:	ec 5d       	subi	r30, 0xDC	; 220
    166a:	fe 4f       	sbci	r31, 0xFE	; 254
    166c:	20 81       	ld	r18, Z
    166e:	31 81       	ldd	r19, Z+1	; 0x01
    1670:	89 e0       	ldi	r24, 0x09	; 9
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	14 c0       	rjmp	.+40     	; 0x169e <CALLBACK_USB_GetDescriptor+0xa4>
    1676:	65 30       	cpi	r22, 0x05	; 5
    1678:	70 f4       	brcc	.+28     	; 0x1696 <CALLBACK_USB_GetDescriptor+0x9c>
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	fb 01       	movw	r30, r22
    167e:	ee 0f       	add	r30, r30
    1680:	ff 1f       	adc	r31, r31
    1682:	e6 5e       	subi	r30, 0xE6	; 230
    1684:	fe 4f       	sbci	r31, 0xFE	; 254
    1686:	20 81       	ld	r18, Z
    1688:	31 81       	ldd	r19, Z+1	; 0x01
    168a:	fb 01       	movw	r30, r22
    168c:	eb 5e       	subi	r30, 0xEB	; 235
    168e:	fe 4f       	sbci	r31, 0xFE	; 254
    1690:	80 81       	ld	r24, Z
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	04 c0       	rjmp	.+8      	; 0x169e <CALLBACK_USB_GetDescriptor+0xa4>
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    169e:	fa 01       	movw	r30, r20
    16a0:	31 83       	std	Z+1, r19	; 0x01
    16a2:	20 83       	st	Z, r18
    return Size;
}
    16a4:	08 95       	ret

000016a6 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    16a6:	80 e1       	ldi	r24, 0x10	; 16
    16a8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    16aa:	82 e1       	ldi	r24, 0x12	; 18
    16ac:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    16ae:	09 b4       	in	r0, 0x29	; 41
    16b0:	00 fe       	sbrs	r0, 0
    16b2:	fd cf       	rjmp	.-6      	; 0x16ae <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    16b4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    16b8:	8f 7d       	andi	r24, 0xDF	; 223
    16ba:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    16be:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    16c2:	82 60       	ori	r24, 0x02	; 2
    16c4:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	while (UDCON & (1 << RMWKUP));
    16c8:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    16cc:	81 fd       	sbrc	r24, 1
    16ce:	fc cf       	rjmp	.-8      	; 0x16c8 <USB_Device_SendRemoteWakeup+0x22>
}
    16d0:	08 95       	ret

000016d2 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    16d2:	cf 92       	push	r12
    16d4:	df 92       	push	r13
    16d6:	ef 92       	push	r14
    16d8:	ff 92       	push	r15
    16da:	0f 93       	push	r16
    16dc:	1f 93       	push	r17
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	ec 01       	movw	r28, r24
    16e4:	8b 01       	movw	r16, r22
    16e6:	7a 01       	movw	r14, r20
    16e8:	0e 94 c7 0c 	call	0x198e	; 0x198e <Endpoint_WaitUntilReady>
    16ec:	81 11       	cpse	r24, r1
    16ee:	33 c0       	rjmp	.+102    	; 0x1756 <Endpoint_Write_Stream_LE+0x84>
    16f0:	e1 14       	cp	r14, r1
    16f2:	f1 04       	cpc	r15, r1
    16f4:	39 f0       	breq	.+14     	; 0x1704 <Endpoint_Write_Stream_LE+0x32>
    16f6:	f7 01       	movw	r30, r14
    16f8:	80 81       	ld	r24, Z
    16fa:	91 81       	ldd	r25, Z+1	; 0x01
    16fc:	08 1b       	sub	r16, r24
    16fe:	19 0b       	sbc	r17, r25
    1700:	c8 0f       	add	r28, r24
    1702:	d9 1f       	adc	r29, r25
    1704:	c1 2c       	mov	r12, r1
    1706:	d1 2c       	mov	r13, r1
    1708:	01 15       	cp	r16, r1
    170a:	11 05       	cpc	r17, r1
    170c:	19 f1       	breq	.+70     	; 0x1754 <Endpoint_Write_Stream_LE+0x82>
    170e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1712:	85 fd       	sbrc	r24, 5
    1714:	16 c0       	rjmp	.+44     	; 0x1742 <Endpoint_Write_Stream_LE+0x70>
    1716:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    171a:	8e 77       	andi	r24, 0x7E	; 126
    171c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1720:	e1 14       	cp	r14, r1
    1722:	f1 04       	cpc	r15, r1
    1724:	49 f0       	breq	.+18     	; 0x1738 <Endpoint_Write_Stream_LE+0x66>
    1726:	f7 01       	movw	r30, r14
    1728:	80 81       	ld	r24, Z
    172a:	91 81       	ldd	r25, Z+1	; 0x01
    172c:	c8 0e       	add	r12, r24
    172e:	d9 1e       	adc	r13, r25
    1730:	d1 82       	std	Z+1, r13	; 0x01
    1732:	c0 82       	st	Z, r12
    1734:	85 e0       	ldi	r24, 0x05	; 5
    1736:	0f c0       	rjmp	.+30     	; 0x1756 <Endpoint_Write_Stream_LE+0x84>
    1738:	0e 94 c7 0c 	call	0x198e	; 0x198e <Endpoint_WaitUntilReady>
    173c:	88 23       	and	r24, r24
    173e:	21 f3       	breq	.-56     	; 0x1708 <Endpoint_Write_Stream_LE+0x36>
    1740:	0a c0       	rjmp	.+20     	; 0x1756 <Endpoint_Write_Stream_LE+0x84>
    1742:	89 91       	ld	r24, Y+
    1744:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1748:	01 50       	subi	r16, 0x01	; 1
    174a:	11 09       	sbc	r17, r1
    174c:	ff ef       	ldi	r31, 0xFF	; 255
    174e:	cf 1a       	sub	r12, r31
    1750:	df 0a       	sbc	r13, r31
    1752:	da cf       	rjmp	.-76     	; 0x1708 <Endpoint_Write_Stream_LE+0x36>
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	1f 91       	pop	r17
    175c:	0f 91       	pop	r16
    175e:	ff 90       	pop	r15
    1760:	ef 90       	pop	r14
    1762:	df 90       	pop	r13
    1764:	cf 90       	pop	r12
    1766:	08 95       	ret

00001768 <Endpoint_Write_Control_Stream_LE>:
    1768:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <USB_ControlRequest+0x6>
    176c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <USB_ControlRequest+0x7>
    1770:	26 17       	cp	r18, r22
    1772:	37 07       	cpc	r19, r23
    1774:	48 f0       	brcs	.+18     	; 0x1788 <Endpoint_Write_Control_Stream_LE+0x20>
    1776:	61 15       	cp	r22, r1
    1778:	71 05       	cpc	r23, r1
    177a:	39 f4       	brne	.+14     	; 0x178a <Endpoint_Write_Control_Stream_LE+0x22>
    177c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1780:	2e 77       	andi	r18, 0x7E	; 126
    1782:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1786:	01 c0       	rjmp	.+2      	; 0x178a <Endpoint_Write_Control_Stream_LE+0x22>
    1788:	b9 01       	movw	r22, r18
    178a:	fc 01       	movw	r30, r24
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	61 15       	cp	r22, r1
    1790:	71 05       	cpc	r23, r1
    1792:	79 f1       	breq	.+94     	; 0x17f2 <Endpoint_Write_Control_Stream_LE+0x8a>
    1794:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <USB_DeviceState>
    1798:	88 23       	and	r24, r24
    179a:	f1 f1       	breq	.+124    	; 0x1818 <Endpoint_Write_Control_Stream_LE+0xb0>
    179c:	85 30       	cpi	r24, 0x05	; 5
    179e:	f1 f1       	breq	.+124    	; 0x181c <Endpoint_Write_Control_Stream_LE+0xb4>
    17a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17a4:	83 fd       	sbrc	r24, 3
    17a6:	3c c0       	rjmp	.+120    	; 0x1820 <Endpoint_Write_Control_Stream_LE+0xb8>
    17a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17ac:	82 fd       	sbrc	r24, 2
    17ae:	2e c0       	rjmp	.+92     	; 0x180c <Endpoint_Write_Control_Stream_LE+0xa4>
    17b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17b4:	80 ff       	sbrs	r24, 0
    17b6:	eb cf       	rjmp	.-42     	; 0x178e <Endpoint_Write_Control_Stream_LE+0x26>
    17b8:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    17bc:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	92 2b       	or	r25, r18
    17c4:	61 15       	cp	r22, r1
    17c6:	71 05       	cpc	r23, r1
    17c8:	51 f0       	breq	.+20     	; 0x17de <Endpoint_Write_Control_Stream_LE+0x76>
    17ca:	88 30       	cpi	r24, 0x08	; 8
    17cc:	91 05       	cpc	r25, r1
    17ce:	38 f4       	brcc	.+14     	; 0x17de <Endpoint_Write_Control_Stream_LE+0x76>
    17d0:	21 91       	ld	r18, Z+
    17d2:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    17d6:	61 50       	subi	r22, 0x01	; 1
    17d8:	71 09       	sbc	r23, r1
    17da:	01 96       	adiw	r24, 0x01	; 1
    17dc:	f3 cf       	rjmp	.-26     	; 0x17c4 <Endpoint_Write_Control_Stream_LE+0x5c>
    17de:	21 e0       	ldi	r18, 0x01	; 1
    17e0:	08 97       	sbiw	r24, 0x08	; 8
    17e2:	09 f0       	breq	.+2      	; 0x17e6 <Endpoint_Write_Control_Stream_LE+0x7e>
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17ea:	8e 77       	andi	r24, 0x7E	; 126
    17ec:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17f0:	ce cf       	rjmp	.-100    	; 0x178e <Endpoint_Write_Control_Stream_LE+0x26>
    17f2:	21 11       	cpse	r18, r1
    17f4:	cf cf       	rjmp	.-98     	; 0x1794 <Endpoint_Write_Control_Stream_LE+0x2c>
    17f6:	0a c0       	rjmp	.+20     	; 0x180c <Endpoint_Write_Control_Stream_LE+0xa4>
    17f8:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <USB_DeviceState>
    17fc:	88 23       	and	r24, r24
    17fe:	61 f0       	breq	.+24     	; 0x1818 <Endpoint_Write_Control_Stream_LE+0xb0>
    1800:	85 30       	cpi	r24, 0x05	; 5
    1802:	61 f0       	breq	.+24     	; 0x181c <Endpoint_Write_Control_Stream_LE+0xb4>
    1804:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1808:	83 fd       	sbrc	r24, 3
    180a:	0a c0       	rjmp	.+20     	; 0x1820 <Endpoint_Write_Control_Stream_LE+0xb8>
    180c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1810:	82 ff       	sbrs	r24, 2
    1812:	f2 cf       	rjmp	.-28     	; 0x17f8 <Endpoint_Write_Control_Stream_LE+0x90>
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	08 95       	ret
    1818:	82 e0       	ldi	r24, 0x02	; 2
    181a:	08 95       	ret
    181c:	83 e0       	ldi	r24, 0x03	; 3
    181e:	08 95       	ret
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	08 95       	ret

00001824 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1824:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <USB_ControlRequest+0x6>
    1828:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <USB_ControlRequest+0x7>
    182c:	26 17       	cp	r18, r22
    182e:	37 07       	cpc	r19, r23
    1830:	48 f0       	brcs	.+18     	; 0x1844 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1832:	61 15       	cp	r22, r1
    1834:	71 05       	cpc	r23, r1
    1836:	39 f4       	brne	.+14     	; 0x1846 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1838:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    183c:	2e 77       	andi	r18, 0x7E	; 126
    183e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1842:	01 c0       	rjmp	.+2      	; 0x1846 <Endpoint_Write_Control_PStream_LE+0x22>
    1844:	b9 01       	movw	r22, r18
    1846:	fc 01       	movw	r30, r24
    1848:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    184a:	61 15       	cp	r22, r1
    184c:	71 05       	cpc	r23, r1
    184e:	91 f1       	breq	.+100    	; 0x18b4 <Endpoint_Write_Control_PStream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1850:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1854:	88 23       	and	r24, r24
    1856:	09 f4       	brne	.+2      	; 0x185a <Endpoint_Write_Control_PStream_LE+0x36>
    1858:	40 c0       	rjmp	.+128    	; 0x18da <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    185a:	85 30       	cpi	r24, 0x05	; 5
    185c:	09 f4       	brne	.+2      	; 0x1860 <Endpoint_Write_Control_PStream_LE+0x3c>
    185e:	3f c0       	rjmp	.+126    	; 0x18de <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1860:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1864:	83 fd       	sbrc	r24, 3
    1866:	3d c0       	rjmp	.+122    	; 0x18e2 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1868:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    186c:	82 fd       	sbrc	r24, 2
    186e:	2f c0       	rjmp	.+94     	; 0x18ce <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1870:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
    1874:	80 ff       	sbrs	r24, 0
    1876:	e9 cf       	rjmp	.-46     	; 0x184a <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1878:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    187c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1884:	61 15       	cp	r22, r1
    1886:	71 05       	cpc	r23, r1
    1888:	59 f0       	breq	.+22     	; 0x18a0 <Endpoint_Write_Control_PStream_LE+0x7c>
    188a:	88 30       	cpi	r24, 0x08	; 8
    188c:	91 05       	cpc	r25, r1
    188e:	40 f4       	brcc	.+16     	; 0x18a0 <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1890:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1892:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1896:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1898:	61 50       	subi	r22, 0x01	; 1
    189a:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    189c:	01 96       	adiw	r24, 0x01	; 1
    189e:	f2 cf       	rjmp	.-28     	; 0x1884 <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    18a0:	21 e0       	ldi	r18, 0x01	; 1
    18a2:	08 97       	sbiw	r24, 0x08	; 8
    18a4:	09 f0       	breq	.+2      	; 0x18a8 <Endpoint_Write_Control_PStream_LE+0x84>
    18a6:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18ac:	8e 77       	andi	r24, 0x7E	; 126
    18ae:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18b2:	cb cf       	rjmp	.-106    	; 0x184a <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    18b4:	21 11       	cpse	r18, r1
    18b6:	cc cf       	rjmp	.-104    	; 0x1850 <Endpoint_Write_Control_PStream_LE+0x2c>
    18b8:	0a c0       	rjmp	.+20     	; 0x18ce <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18ba:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18be:	88 23       	and	r24, r24
    18c0:	61 f0       	breq	.+24     	; 0x18da <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18c2:	85 30       	cpi	r24, 0x05	; 5
    18c4:	61 f0       	breq	.+24     	; 0x18de <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    18ca:	83 fd       	sbrc	r24, 3
    18cc:	0a c0       	rjmp	.+20     	; 0x18e2 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    18d2:	82 ff       	sbrs	r24, 2
    18d4:	f2 cf       	rjmp	.-28     	; 0x18ba <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    18da:	82 e0       	ldi	r24, 0x02	; 2
    18dc:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    18de:	83 e0       	ldi	r24, 0x03	; 3
    18e0:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    18e4:	08 95       	ret

000018e6 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    18e6:	98 2f       	mov	r25, r24
    18e8:	97 30       	cpi	r25, 0x07	; 7
    18ea:	68 f5       	brcc	.+90     	; 0x1946 <Endpoint_ConfigureEndpoint_Prv+0x60>
    18ec:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    18f0:	98 17       	cp	r25, r24
    18f2:	39 f0       	breq	.+14     	; 0x1902 <Endpoint_ConfigureEndpoint_Prv+0x1c>
    18f4:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    18f8:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    18fc:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1900:	03 c0       	rjmp	.+6      	; 0x1908 <Endpoint_ConfigureEndpoint_Prv+0x22>
    1902:	24 2f       	mov	r18, r20
    1904:	76 2f       	mov	r23, r22
    1906:	50 e0       	ldi	r21, 0x00	; 0
    1908:	21 fd       	sbrc	r18, 1
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <Endpoint_ConfigureEndpoint_Prv+0x2a>
    190c:	9f 5f       	subi	r25, 0xFF	; 255
    190e:	ec cf       	rjmp	.-40     	; 0x18e8 <Endpoint_ConfigureEndpoint_Prv+0x2>
    1910:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1914:	3e 7f       	andi	r19, 0xFE	; 254
    1916:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    191a:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    191e:	3d 7f       	andi	r19, 0xFD	; 253
    1920:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1924:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1928:	31 60       	ori	r19, 0x01	; 1
    192a:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    192e:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1932:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1936:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    193a:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    193e:	27 fd       	sbrc	r18, 7
    1940:	e5 cf       	rjmp	.-54     	; 0x190c <Endpoint_ConfigureEndpoint_Prv+0x26>
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	08 95       	ret
    1946:	8f 70       	andi	r24, 0x0F	; 15
    1948:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	08 95       	ret

00001950 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1950:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <USB_ControlRequest>
    1954:	87 ff       	sbrs	r24, 7
    1956:	11 c0       	rjmp	.+34     	; 0x197a <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1958:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    195c:	82 fd       	sbrc	r24, 2
    195e:	05 c0       	rjmp	.+10     	; 0x196a <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1960:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <USB_DeviceState>
    1964:	81 11       	cpse	r24, r1
    1966:	f8 cf       	rjmp	.-16     	; 0x1958 <Endpoint_ClearStatusStage+0x8>
    1968:	11 c0       	rjmp	.+34     	; 0x198c <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    196a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    196e:	8b 77       	andi	r24, 0x7B	; 123
    1970:	0b c0       	rjmp	.+22     	; 0x1988 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1972:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <USB_DeviceState>
    1976:	88 23       	and	r24, r24
    1978:	49 f0       	breq	.+18     	; 0x198c <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    197a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    197e:	80 ff       	sbrs	r24, 0
    1980:	f8 cf       	rjmp	.-16     	; 0x1972 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1982:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1986:	8e 77       	andi	r24, 0x7E	; 126
    1988:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    198c:	08 95       	ret

0000198e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    198e:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1992:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    1996:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1998:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    199c:	84 2f       	mov	r24, r20
    199e:	81 70       	andi	r24, 0x01	; 1
    19a0:	40 ff       	sbrs	r20, 0
    19a2:	23 c0       	rjmp	.+70     	; 0x19ea <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    19a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    19a8:	80 fd       	sbrc	r24, 0
    19aa:	1d c0       	rjmp	.+58     	; 0x19e6 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19ac:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19b0:	88 23       	and	r24, r24
    19b2:	99 f0       	breq	.+38     	; 0x19da <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19b4:	85 30       	cpi	r24, 0x05	; 5
    19b6:	99 f0       	breq	.+38     	; 0x19de <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    19b8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    19bc:	85 fd       	sbrc	r24, 5
    19be:	11 c0       	rjmp	.+34     	; 0x19e2 <Endpoint_WaitUntilReady+0x54>
    19c0:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    19c4:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    19c8:	24 17       	cp	r18, r20
    19ca:	35 07       	cpc	r19, r21
    19cc:	29 f3       	breq	.-54     	; 0x1998 <Endpoint_WaitUntilReady+0xa>
    19ce:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    19d0:	11 f0       	breq	.+4      	; 0x19d6 <Endpoint_WaitUntilReady+0x48>
    19d2:	9a 01       	movw	r18, r20
    19d4:	e1 cf       	rjmp	.-62     	; 0x1998 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    19d6:	84 e0       	ldi	r24, 0x04	; 4
    19d8:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    19da:	82 e0       	ldi	r24, 0x02	; 2
    19dc:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    19de:	83 e0       	ldi	r24, 0x03	; 3
    19e0:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19ea:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    19ee:	42 ff       	sbrs	r20, 2
    19f0:	dd cf       	rjmp	.-70     	; 0x19ac <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    19f2:	08 95       	ret

000019f4 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    19f4:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    19f8:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    19fc:	e0 ee       	ldi	r30, 0xE0	; 224
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	81 60       	ori	r24, 0x01	; 1
    1a04:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1a06:	e8 ed       	ldi	r30, 0xD8	; 216
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	8f 77       	andi	r24, 0x7F	; 127
    1a0e:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1a10:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1a12:	a7 ed       	ldi	r26, 0xD7	; 215
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	8c 91       	ld	r24, X
    1a18:	8e 7f       	andi	r24, 0xFE	; 254
    1a1a:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1a1c:	80 81       	ld	r24, Z
    1a1e:	8f 7e       	andi	r24, 0xEF	; 239
    1a20:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1a22:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <USB_IsInitialized>
    1a26:	08 95       	ret

00001a28 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    1a28:	0f 93       	push	r16
    1a2a:	1f 93       	push	r17
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1a30:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1a34:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1a38:	c8 ed       	ldi	r28, 0xD8	; 216
    1a3a:	d0 e0       	ldi	r29, 0x00	; 0
    1a3c:	88 81       	ld	r24, Y
    1a3e:	8f 77       	andi	r24, 0x7F	; 127
    1a40:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1a42:	88 81       	ld	r24, Y
    1a44:	80 68       	ori	r24, 0x80	; 128
    1a46:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1a48:	88 81       	ld	r24, Y
    1a4a:	8f 7d       	andi	r24, 0xDF	; 223
    1a4c:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1a4e:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1a50:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    1a54:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1a58:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1a5c:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1a60:	00 ee       	ldi	r16, 0xE0	; 224
    1a62:	10 e0       	ldi	r17, 0x00	; 0
    1a64:	f8 01       	movw	r30, r16
    1a66:	80 81       	ld	r24, Z
    1a68:	8b 7f       	andi	r24, 0xFB	; 251
    1a6a:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1a6c:	88 81       	ld	r24, Y
    1a6e:	81 60       	ori	r24, 0x01	; 1
    1a70:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1a72:	42 e0       	ldi	r20, 0x02	; 2
    1a74:	60 e0       	ldi	r22, 0x00	; 0
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1a7c:	e1 ee       	ldi	r30, 0xE1	; 225
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	8e 7f       	andi	r24, 0xFE	; 254
    1a84:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1a86:	e2 ee       	ldi	r30, 0xE2	; 226
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	81 60       	ori	r24, 0x01	; 1
    1a8e:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1a90:	80 81       	ld	r24, Z
    1a92:	88 60       	ori	r24, 0x08	; 8
    1a94:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1a96:	f8 01       	movw	r30, r16
    1a98:	80 81       	ld	r24, Z
    1a9a:	8e 7f       	andi	r24, 0xFE	; 254
    1a9c:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1a9e:	88 81       	ld	r24, Y
    1aa0:	80 61       	ori	r24, 0x10	; 16
    1aa2:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	1f 91       	pop	r17
    1aaa:	0f 91       	pop	r16
    1aac:	08 95       	ret

00001aae <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1aae:	e8 ed       	ldi	r30, 0xD8	; 216
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	8f 7e       	andi	r24, 0xEF	; 239
    1ab6:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1ab8:	e7 ed       	ldi	r30, 0xD7	; 215
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	81 60       	ori	r24, 0x01	; 1
    1ac0:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1ac2:	84 e0       	ldi	r24, 0x04	; 4
    1ac4:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <USB_IsInitialized>

	USB_ResetInterface();
    1acc:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <USB_ResetInterface>

00001ad0 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1ad0:	e8 ed       	ldi	r30, 0xD8	; 216
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	8e 7f       	andi	r24, 0xFE	; 254
    1ad8:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1ada:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1ade:	08 95       	ret

00001ae0 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1ae0:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1ae4:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1ae8:	08 95       	ret

00001aea <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1aea:	1f 92       	push	r1
    1aec:	0f 92       	push	r0
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	0f 92       	push	r0
    1af2:	11 24       	eor	r1, r1
    1af4:	2f 93       	push	r18
    1af6:	3f 93       	push	r19
    1af8:	4f 93       	push	r20
    1afa:	5f 93       	push	r21
    1afc:	6f 93       	push	r22
    1afe:	7f 93       	push	r23
    1b00:	8f 93       	push	r24
    1b02:	9f 93       	push	r25
    1b04:	af 93       	push	r26
    1b06:	bf 93       	push	r27
    1b08:	ef 93       	push	r30
    1b0a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1b0c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1b10:	82 ff       	sbrs	r24, 2
    1b12:	0b c0       	rjmp	.+22     	; 0x1b2a <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1b14:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1b18:	82 ff       	sbrs	r24, 2
    1b1a:	07 c0       	rjmp	.+14     	; 0x1b2a <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1b1c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1b20:	8b 7f       	andi	r24, 0xFB	; 251
    1b22:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1b26:	0e 94 74 09 	call	0x12e8	; 0x12e8 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1b2a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1b2e:	80 ff       	sbrs	r24, 0
    1b30:	1f c0       	rjmp	.+62     	; 0x1b70 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1b32:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1b36:	80 ff       	sbrs	r24, 0
    1b38:	1b c0       	rjmp	.+54     	; 0x1b70 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1b3a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    1b3e:	8e 7f       	andi	r24, 0xFE	; 254
    1b40:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1b44:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1b48:	80 ff       	sbrs	r24, 0
    1b4a:	0d c0       	rjmp	.+26     	; 0x1b66 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1b4c:	80 e1       	ldi	r24, 0x10	; 16
    1b4e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1b50:	82 e1       	ldi	r24, 0x12	; 18
    1b52:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1b54:	09 b4       	in	r0, 0x29	; 41
    1b56:	00 fe       	sbrs	r0, 0
    1b58:	fd cf       	rjmp	.-6      	; 0x1b54 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <USB_DeviceState>
			EVENT_USB_Device_Connect();
    1b60:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <EVENT_USB_Device_Connect>
    1b64:	05 c0       	rjmp	.+10     	; 0x1b70 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1b66:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1b68:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    1b6c:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1b70:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1b74:	80 ff       	sbrs	r24, 0
    1b76:	19 c0       	rjmp	.+50     	; 0x1baa <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1b78:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1b7c:	80 ff       	sbrs	r24, 0
    1b7e:	15 c0       	rjmp	.+42     	; 0x1baa <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1b80:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1b84:	8e 7f       	andi	r24, 0xFE	; 254
    1b86:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1b8a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1b8e:	80 61       	ori	r24, 0x10	; 16
    1b90:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1b94:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1b98:	80 62       	ori	r24, 0x20	; 32
    1b9a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1b9e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1ba0:	85 e0       	ldi	r24, 0x05	; 5
    1ba2:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    1ba6:	0e 94 90 0a 	call	0x1520	; 0x1520 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1baa:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1bae:	84 ff       	sbrs	r24, 4
    1bb0:	30 c0       	rjmp	.+96     	; 0x1c12 <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1bb2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1bb6:	84 ff       	sbrs	r24, 4
    1bb8:	2c c0       	rjmp	.+88     	; 0x1c12 <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1bba:	80 e1       	ldi	r24, 0x10	; 16
    1bbc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1bbe:	82 e1       	ldi	r24, 0x12	; 18
    1bc0:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1bc2:	09 b4       	in	r0, 0x29	; 41
    1bc4:	00 fe       	sbrs	r0, 0
    1bc6:	fd cf       	rjmp	.-6      	; 0x1bc2 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1bc8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1bcc:	8f 7d       	andi	r24, 0xDF	; 223
    1bce:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1bd2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1bd6:	8f 7e       	andi	r24, 0xEF	; 239
    1bd8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1bdc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1be0:	8f 7e       	andi	r24, 0xEF	; 239
    1be2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1be6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1bea:	81 60       	ori	r24, 0x01	; 1
    1bec:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1bf0:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <USB_Device_ConfigurationNumber>
    1bf4:	88 23       	and	r24, r24
    1bf6:	11 f0       	breq	.+4      	; 0x1bfc <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1bf8:	84 e0       	ldi	r24, 0x04	; 4
    1bfa:	07 c0       	rjmp	.+14     	; 0x1c0a <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1bfc:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1c00:	87 fd       	sbrc	r24, 7
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <__vector_10+0x11e>
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	01 c0       	rjmp	.+2      	; 0x1c0a <__vector_10+0x120>
    1c08:	83 e0       	ldi	r24, 0x03	; 3
    1c0a:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1c0e:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1c12:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1c16:	83 ff       	sbrs	r24, 3
    1c18:	29 c0       	rjmp	.+82     	; 0x1c6c <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1c1a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1c1e:	83 ff       	sbrs	r24, 3
    1c20:	25 c0       	rjmp	.+74     	; 0x1c6c <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1c22:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1c26:	87 7f       	andi	r24, 0xF7	; 247
    1c28:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
    1c2e:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1c32:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1c36:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1c3a:	8e 7f       	andi	r24, 0xFE	; 254
    1c3c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1c40:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1c44:	8e 7f       	andi	r24, 0xFE	; 254
    1c46:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1c4a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1c4e:	80 61       	ori	r24, 0x10	; 16
    1c50:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1c54:	42 e0       	ldi	r20, 0x02	; 2
    1c56:	60 e0       	ldi	r22, 0x00	; 0
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1c5e:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1c62:	88 60       	ori	r24, 0x08	; 8
    1c64:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1c68:	0e 94 73 09 	call	0x12e6	; 0x12e6 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1c6c:	ff 91       	pop	r31
    1c6e:	ef 91       	pop	r30
    1c70:	bf 91       	pop	r27
    1c72:	af 91       	pop	r26
    1c74:	9f 91       	pop	r25
    1c76:	8f 91       	pop	r24
    1c78:	7f 91       	pop	r23
    1c7a:	6f 91       	pop	r22
    1c7c:	5f 91       	pop	r21
    1c7e:	4f 91       	pop	r20
    1c80:	3f 91       	pop	r19
    1c82:	2f 91       	pop	r18
    1c84:	0f 90       	pop	r0
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	0f 90       	pop	r0
    1c8a:	1f 90       	pop	r1
    1c8c:	18 95       	reti

00001c8e <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1c8e:	1f 92       	push	r1
    1c90:	0f 92       	push	r0
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	0f 92       	push	r0
    1c96:	11 24       	eor	r1, r1
    1c98:	2f 93       	push	r18
    1c9a:	3f 93       	push	r19
    1c9c:	4f 93       	push	r20
    1c9e:	5f 93       	push	r21
    1ca0:	6f 93       	push	r22
    1ca2:	7f 93       	push	r23
    1ca4:	8f 93       	push	r24
    1ca6:	9f 93       	push	r25
    1ca8:	af 93       	push	r26
    1caa:	bf 93       	push	r27
    1cac:	cf 93       	push	r28
    1cae:	df 93       	push	r29
    1cb0:	ef 93       	push	r30
    1cb2:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1cb4:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1cb8:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1cba:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1cbe:	d8 2f       	mov	r29, r24
    1cc0:	d1 70       	andi	r29, 0x01	; 1
    1cc2:	80 fd       	sbrc	r24, 0
    1cc4:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1cc6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1cca:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1cce:	87 7f       	andi	r24, 0xF7	; 247
    1cd0:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1cd4:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1cd6:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <USB_Device_ProcessControlRequest>
    1cda:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1cde:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1ce2:	88 60       	ori	r24, 0x08	; 8
    1ce4:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1ce8:	cd 2b       	or	r28, r29
    1cea:	cf 70       	andi	r28, 0x0F	; 15
    1cec:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1cf0:	ff 91       	pop	r31
    1cf2:	ef 91       	pop	r30
    1cf4:	df 91       	pop	r29
    1cf6:	cf 91       	pop	r28
    1cf8:	bf 91       	pop	r27
    1cfa:	af 91       	pop	r26
    1cfc:	9f 91       	pop	r25
    1cfe:	8f 91       	pop	r24
    1d00:	7f 91       	pop	r23
    1d02:	6f 91       	pop	r22
    1d04:	5f 91       	pop	r21
    1d06:	4f 91       	pop	r20
    1d08:	3f 91       	pop	r19
    1d0a:	2f 91       	pop	r18
    1d0c:	0f 90       	pop	r0
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	0f 90       	pop	r0
    1d12:	1f 90       	pop	r1
    1d14:	18 95       	reti

00001d16 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1d16:	1f 93       	push	r17
    1d18:	cf 93       	push	r28
    1d1a:	df 93       	push	r29
    1d1c:	cd b7       	in	r28, 0x3d	; 61
    1d1e:	de b7       	in	r29, 0x3e	; 62
    1d20:	aa 97       	sbiw	r28, 0x2a	; 42
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	f8 94       	cli
    1d26:	de bf       	out	0x3e, r29	; 62
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	cd bf       	out	0x3d, r28	; 61
    1d2c:	ec ef       	ldi	r30, 0xFC	; 252
    1d2e:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1d30:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1d34:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1d36:	22 e0       	ldi	r18, 0x02	; 2
    1d38:	e4 30       	cpi	r30, 0x04	; 4
    1d3a:	f2 07       	cpc	r31, r18
    1d3c:	c9 f7       	brne	.-14     	; 0x1d30 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1d3e:	0e 94 ce 09 	call	0x139c	; 0x139c <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d42:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    1d46:	83 ff       	sbrs	r24, 3
    1d48:	24 c1       	rjmp	.+584    	; 0x1f92 <USB_Device_ProcessControlRequest+0x27c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1d4a:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    1d4e:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <USB_ControlRequest+0x1>
    1d52:	49 2f       	mov	r20, r25
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	4a 30       	cpi	r20, 0x0A	; 10
    1d58:	51 05       	cpc	r21, r1
    1d5a:	08 f0       	brcs	.+2      	; 0x1d5e <USB_Device_ProcessControlRequest+0x48>
    1d5c:	1a c1       	rjmp	.+564    	; 0x1f92 <USB_Device_ProcessControlRequest+0x27c>
    1d5e:	fa 01       	movw	r30, r20
    1d60:	ea 5a       	subi	r30, 0xAA	; 170
    1d62:	ff 4f       	sbci	r31, 0xFF	; 255
    1d64:	0c 94 ed 2b 	jmp	0x57da	; 0x57da <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1d68:	80 38       	cpi	r24, 0x80	; 128
    1d6a:	81 f0       	breq	.+32     	; 0x1d8c <USB_Device_ProcessControlRequest+0x76>
    1d6c:	82 38       	cpi	r24, 0x82	; 130
    1d6e:	09 f0       	breq	.+2      	; 0x1d72 <USB_Device_ProcessControlRequest+0x5c>
    1d70:	10 c1       	rjmp	.+544    	; 0x1f92 <USB_Device_ProcessControlRequest+0x27c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d72:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <USB_ControlRequest+0x4>
    1d76:	8f 70       	andi	r24, 0x0F	; 15
    1d78:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1d7c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    1d80:	85 fb       	bst	r24, 5
    1d82:	88 27       	eor	r24, r24
    1d84:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d86:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1d8a:	06 c0       	rjmp	.+12     	; 0x1d98 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1d8c:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1d90:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <USB_Device_RemoteWakeupEnabled>
    1d94:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1d96:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d98:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d9c:	97 7f       	andi	r25, 0xF7	; 247
    1d9e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1da2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    1da6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1daa:	c8 c0       	rjmp	.+400    	; 0x1f3c <USB_Device_ProcessControlRequest+0x226>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1dac:	28 2f       	mov	r18, r24
    1dae:	2d 7f       	andi	r18, 0xFD	; 253
    1db0:	09 f0       	breq	.+2      	; 0x1db4 <USB_Device_ProcessControlRequest+0x9e>
    1db2:	ef c0       	rjmp	.+478    	; 0x1f92 <USB_Device_ProcessControlRequest+0x27c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1db4:	88 23       	and	r24, r24
    1db6:	19 f0       	breq	.+6      	; 0x1dbe <USB_Device_ProcessControlRequest+0xa8>
    1db8:	82 30       	cpi	r24, 0x02	; 2
    1dba:	61 f0       	breq	.+24     	; 0x1dd4 <USB_Device_ProcessControlRequest+0xbe>
    1dbc:	ea c0       	rjmp	.+468    	; 0x1f92 <USB_Device_ProcessControlRequest+0x27c>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1dbe:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <USB_ControlRequest+0x2>
    1dc2:	81 30       	cpi	r24, 0x01	; 1
    1dc4:	09 f0       	breq	.+2      	; 0x1dc8 <USB_Device_ProcessControlRequest+0xb2>
    1dc6:	e5 c0       	rjmp	.+458    	; 0x1f92 <USB_Device_ProcessControlRequest+0x27c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1dc8:	93 30       	cpi	r25, 0x03	; 3
    1dca:	09 f0       	breq	.+2      	; 0x1dce <USB_Device_ProcessControlRequest+0xb8>
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <USB_Device_RemoteWakeupEnabled>
    1dd2:	2b c0       	rjmp	.+86     	; 0x1e2a <USB_Device_ProcessControlRequest+0x114>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1dd4:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <USB_ControlRequest+0x2>
    1dd8:	81 11       	cpse	r24, r1
    1dda:	27 c0       	rjmp	.+78     	; 0x1e2a <USB_Device_ProcessControlRequest+0x114>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1ddc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <USB_ControlRequest+0x4>
    1de0:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1de2:	09 f4       	brne	.+2      	; 0x1de6 <USB_Device_ProcessControlRequest+0xd0>
    1de4:	d6 c0       	rjmp	.+428    	; 0x1f92 <USB_Device_ProcessControlRequest+0x27c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1de6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1dea:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1dee:	20 ff       	sbrs	r18, 0
    1df0:	1c c0       	rjmp	.+56     	; 0x1e2a <USB_Device_ProcessControlRequest+0x114>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1df2:	93 30       	cpi	r25, 0x03	; 3
    1df4:	21 f4       	brne	.+8      	; 0x1dfe <USB_Device_ProcessControlRequest+0xe8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1df6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1dfa:	80 62       	ori	r24, 0x20	; 32
    1dfc:	14 c0       	rjmp	.+40     	; 0x1e26 <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1dfe:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1e02:	90 61       	ori	r25, 0x10	; 16
    1e04:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1e08:	21 e0       	ldi	r18, 0x01	; 1
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	a9 01       	movw	r20, r18
    1e0e:	02 c0       	rjmp	.+4      	; 0x1e14 <USB_Device_ProcessControlRequest+0xfe>
    1e10:	44 0f       	add	r20, r20
    1e12:	55 1f       	adc	r21, r21
    1e14:	8a 95       	dec	r24
    1e16:	e2 f7       	brpl	.-8      	; 0x1e10 <USB_Device_ProcessControlRequest+0xfa>
    1e18:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    1e1c:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1e20:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1e24:	88 60       	ori	r24, 0x08	; 8
    1e26:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e2a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1e32:	87 7f       	andi	r24, 0xF7	; 247
    1e34:	86 c0       	rjmp	.+268    	; 0x1f42 <USB_Device_ProcessControlRequest+0x22c>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1e36:	81 11       	cpse	r24, r1
    1e38:	ac c0       	rjmp	.+344    	; 0x1f92 <USB_Device_ProcessControlRequest+0x27c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1e3a:	10 91 fe 01 	lds	r17, 0x01FE	; 0x8001fe <USB_ControlRequest+0x2>
    1e3e:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1e40:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1e44:	80 78       	andi	r24, 0x80	; 128
    1e46:	81 2b       	or	r24, r17
    1e48:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1e4c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1e50:	87 7f       	andi	r24, 0xF7	; 247
    1e52:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1e56:	0e 94 a8 0c 	call	0x1950	; 0x1950 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1e5a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
    1e5e:	80 ff       	sbrs	r24, 0
    1e60:	fc cf       	rjmp	.-8      	; 0x1e5a <USB_Device_ProcessControlRequest+0x144>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1e62:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1e66:	80 68       	ori	r24, 0x80	; 128
    1e68:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1e6c:	11 11       	cpse	r17, r1
    1e6e:	02 c0       	rjmp	.+4      	; 0x1e74 <USB_Device_ProcessControlRequest+0x15e>
    1e70:	82 e0       	ldi	r24, 0x02	; 2
    1e72:	01 c0       	rjmp	.+2      	; 0x1e76 <USB_Device_ProcessControlRequest+0x160>
    1e74:	83 e0       	ldi	r24, 0x03	; 3
    1e76:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <USB_DeviceState>
    1e7a:	8b c0       	rjmp	.+278    	; 0x1f92 <USB_Device_ProcessControlRequest+0x27c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e7c:	80 58       	subi	r24, 0x80	; 128
    1e7e:	82 30       	cpi	r24, 0x02	; 2
    1e80:	08 f0       	brcs	.+2      	; 0x1e84 <USB_Device_ProcessControlRequest+0x16e>
    1e82:	87 c0       	rjmp	.+270    	; 0x1f92 <USB_Device_ProcessControlRequest+0x27c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1e84:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <USB_ControlRequest+0x2>
    1e88:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <USB_ControlRequest+0x3>
    1e8c:	8c 3d       	cpi	r24, 0xDC	; 220
    1e8e:	53 e0       	ldi	r21, 0x03	; 3
    1e90:	95 07       	cpc	r25, r21
    1e92:	79 f5       	brne	.+94     	; 0x1ef2 <USB_Device_ProcessControlRequest+0x1dc>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1e94:	83 e0       	ldi	r24, 0x03	; 3
    1e96:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1e98:	8a e2       	ldi	r24, 0x2A	; 42
    1e9a:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1e9c:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1e9e:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1ea0:	de 01       	movw	r26, r28
    1ea2:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1ea6:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1ea8:	51 e2       	ldi	r21, 0x21	; 33
    1eaa:	e3 2f       	mov	r30, r19
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    1eb2:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1eb4:	20 ff       	sbrs	r18, 0
    1eb6:	03 c0       	rjmp	.+6      	; 0x1ebe <USB_Device_ProcessControlRequest+0x1a8>
					{
						SerialByte >>= 4;
    1eb8:	e2 95       	swap	r30
    1eba:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1ebc:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1ebe:	ef 70       	andi	r30, 0x0F	; 15
    1ec0:	8e 2f       	mov	r24, r30
    1ec2:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1ec4:	ea 30       	cpi	r30, 0x0A	; 10
    1ec6:	10 f0       	brcs	.+4      	; 0x1ecc <USB_Device_ProcessControlRequest+0x1b6>
    1ec8:	c7 96       	adiw	r24, 0x37	; 55
    1eca:	01 c0       	rjmp	.+2      	; 0x1ece <USB_Device_ProcessControlRequest+0x1b8>
    1ecc:	c0 96       	adiw	r24, 0x30	; 48
    1ece:	8d 93       	st	X+, r24
    1ed0:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1ed2:	2f 5f       	subi	r18, 0xFF	; 255
    1ed4:	24 31       	cpi	r18, 0x14	; 20
    1ed6:	49 f7       	brne	.-46     	; 0x1eaa <USB_Device_ProcessControlRequest+0x194>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1ed8:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1eda:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ede:	87 7f       	andi	r24, 0xF7	; 247
    1ee0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1ee4:	6a e2       	ldi	r22, 0x2A	; 42
    1ee6:	70 e0       	ldi	r23, 0x00	; 0
    1ee8:	ce 01       	movw	r24, r28
    1eea:	01 96       	adiw	r24, 0x01	; 1
    1eec:	0e 94 b4 0b 	call	0x1768	; 0x1768 <Endpoint_Write_Control_Stream_LE>
    1ef0:	14 c0       	rjmp	.+40     	; 0x1f1a <USB_Device_ProcessControlRequest+0x204>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1ef2:	ae 01       	movw	r20, r28
    1ef4:	4f 5f       	subi	r20, 0xFF	; 255
    1ef6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef8:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <USB_ControlRequest+0x4>
    1efc:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <CALLBACK_USB_GetDescriptor>
    1f00:	bc 01       	movw	r22, r24
    1f02:	89 2b       	or	r24, r25
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <USB_Device_ProcessControlRequest+0x1f2>
    1f06:	45 c0       	rjmp	.+138    	; 0x1f92 <USB_Device_ProcessControlRequest+0x27c>
    1f08:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f0c:	97 7f       	andi	r25, 0xF7	; 247
    1f0e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	9a 81       	ldd	r25, Y+2	; 0x02
    1f16:	0e 94 12 0c 	call	0x1824	; 0x1824 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1f1a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f1e:	8b 77       	andi	r24, 0x7B	; 123
    1f20:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f24:	36 c0       	rjmp	.+108    	; 0x1f92 <USB_Device_ProcessControlRequest+0x27c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1f26:	80 38       	cpi	r24, 0x80	; 128
    1f28:	a1 f5       	brne	.+104    	; 0x1f92 <USB_Device_ProcessControlRequest+0x27c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f2a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f2e:	87 7f       	andi	r24, 0xF7	; 247
    1f30:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1f34:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1f38:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f3c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f40:	8e 77       	andi	r24, 0x7E	; 126
    1f42:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1f46:	0e 94 a8 0c 	call	0x1950	; 0x1950 <Endpoint_ClearStatusStage>
    1f4a:	23 c0       	rjmp	.+70     	; 0x1f92 <USB_Device_ProcessControlRequest+0x27c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1f4c:	81 11       	cpse	r24, r1
    1f4e:	21 c0       	rjmp	.+66     	; 0x1f92 <USB_Device_ProcessControlRequest+0x27c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1f50:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <USB_ControlRequest+0x2>
    1f54:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <USB_ControlRequest+0x3>
    1f58:	99 27       	eor	r25, r25
    1f5a:	02 97       	sbiw	r24, 0x02	; 2
    1f5c:	d4 f4       	brge	.+52     	; 0x1f92 <USB_Device_ProcessControlRequest+0x27c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f5e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f62:	87 7f       	andi	r24, 0xF7	; 247
    1f64:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1f68:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <USB_ControlRequest+0x2>
    1f6c:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    1f70:	0e 94 a8 0c 	call	0x1950	; 0x1950 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1f74:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <USB_Device_ConfigurationNumber>
    1f78:	81 11       	cpse	r24, r1
    1f7a:	06 c0       	rjmp	.+12     	; 0x1f88 <USB_Device_ProcessControlRequest+0x272>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1f7c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1f80:	87 fd       	sbrc	r24, 7
    1f82:	02 c0       	rjmp	.+4      	; 0x1f88 <USB_Device_ProcessControlRequest+0x272>
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	01 c0       	rjmp	.+2      	; 0x1f8a <USB_Device_ProcessControlRequest+0x274>
    1f88:	84 e0       	ldi	r24, 0x04	; 4
    1f8a:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    1f8e:	0e 94 b5 09 	call	0x136a	; 0x136a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1f92:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1f96:	83 ff       	sbrs	r24, 3
    1f98:	0a c0       	rjmp	.+20     	; 0x1fae <USB_Device_ProcessControlRequest+0x298>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f9e:	87 7f       	andi	r24, 0xF7	; 247
    1fa0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1fa4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1fa8:	80 62       	ori	r24, 0x20	; 32
    1faa:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1fae:	aa 96       	adiw	r28, 0x2a	; 42
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	f8 94       	cli
    1fb4:	de bf       	out	0x3e, r29	; 62
    1fb6:	0f be       	out	0x3f, r0	; 63
    1fb8:	cd bf       	out	0x3d, r28	; 61
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	1f 91       	pop	r17
    1fc0:	08 95       	ret

00001fc2 <host_set_driver>:
}

host_driver_t *host_get_driver(void)
{
    return driver;
}
    1fc2:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <driver+0x1>
    1fc6:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <driver>
    1fca:	08 95       	ret

00001fcc <host_keyboard_leds>:

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    1fcc:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <driver>
    1fd0:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <driver+0x1>
    1fd4:	30 97       	sbiw	r30, 0x00	; 0
    1fd6:	21 f0       	breq	.+8      	; 0x1fe0 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    1fd8:	01 90       	ld	r0, Z+
    1fda:	f0 81       	ld	r31, Z
    1fdc:	e0 2d       	mov	r30, r0
    1fde:	09 94       	ijmp
}
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	08 95       	ret

00001fe4 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    1fe4:	ef 92       	push	r14
    1fe6:	ff 92       	push	r15
    1fe8:	0f 93       	push	r16
    1fea:	1f 93       	push	r17
    1fec:	cf 93       	push	r28
    1fee:	df 93       	push	r29
    if (!driver) return;
    1ff0:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <driver>
    1ff4:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <driver+0x1>
    1ff8:	30 97       	sbiw	r30, 0x00	; 0
    1ffa:	b1 f1       	breq	.+108    	; 0x2068 <host_keyboard_send+0x84>
    1ffc:	8c 01       	movw	r16, r24
    (*driver->send_keyboard)(report);
    1ffe:	02 80       	ldd	r0, Z+2	; 0x02
    2000:	f3 81       	ldd	r31, Z+3	; 0x03
    2002:	e0 2d       	mov	r30, r0
    2004:	09 95       	icall

    if (debug_keyboard) {
    2006:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <debug_config>
    200a:	82 ff       	sbrs	r24, 2
    200c:	2d c0       	rjmp	.+90     	; 0x2068 <host_keyboard_send+0x84>
        dprint("keyboard: ");
    200e:	80 ff       	sbrs	r24, 0
    2010:	04 c0       	rjmp	.+8      	; 0x201a <host_keyboard_send+0x36>
    2012:	8b e7       	ldi	r24, 0x7B	; 123
    2014:	93 e0       	ldi	r25, 0x03	; 3
    2016:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    201a:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    201c:	10 e2       	ldi	r17, 0x20	; 32
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    201e:	85 e7       	ldi	r24, 0x75	; 117
    2020:	e8 2e       	mov	r14, r24
    2022:	83 e0       	ldi	r24, 0x03	; 3
    2024:	f8 2e       	mov	r15, r24
    2026:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <debug_config>
    202a:	80 ff       	sbrs	r24, 0
    202c:	0b c0       	rjmp	.+22     	; 0x2044 <host_keyboard_send+0x60>
    202e:	88 81       	ld	r24, Y
    2030:	1f 92       	push	r1
    2032:	8f 93       	push	r24
    2034:	ff 92       	push	r15
    2036:	ef 92       	push	r14
    2038:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	11 50       	subi	r17, 0x01	; 1
    2046:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    2048:	11 11       	cpse	r17, r1
    204a:	ed cf       	rjmp	.-38     	; 0x2026 <host_keyboard_send+0x42>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    204c:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <debug_config>
    2050:	80 ff       	sbrs	r24, 0
    2052:	0a c0       	rjmp	.+20     	; 0x2068 <host_keyboard_send+0x84>
    2054:	83 e7       	ldi	r24, 0x73	; 115
    2056:	93 e0       	ldi	r25, 0x03	; 3
    }
}
    2058:	df 91       	pop	r29
    205a:	cf 91       	pop	r28
    205c:	1f 91       	pop	r17
    205e:	0f 91       	pop	r16
    2060:	ff 90       	pop	r15
    2062:	ef 90       	pop	r14
    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    2064:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <xputs>
    }
}
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	1f 91       	pop	r17
    206e:	0f 91       	pop	r16
    2070:	ff 90       	pop	r15
    2072:	ef 90       	pop	r14
    2074:	08 95       	ret

00002076 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    2076:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <driver>
    207a:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <driver+0x1>
    207e:	30 97       	sbiw	r30, 0x00	; 0
    2080:	21 f0       	breq	.+8      	; 0x208a <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    2082:	04 80       	ldd	r0, Z+4	; 0x04
    2084:	f5 81       	ldd	r31, Z+5	; 0x05
    2086:	e0 2d       	mov	r30, r0
    2088:	09 94       	ijmp
    208a:	08 95       	ret

0000208c <host_system_send>:
}

void host_system_send(uint16_t report)
{
    208c:	cf 93       	push	r28
    208e:	df 93       	push	r29
    if (report == last_system_report) return;
    2090:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <last_system_report>
    2094:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <last_system_report+0x1>
    2098:	28 17       	cp	r18, r24
    209a:	39 07       	cpc	r19, r25
    209c:	09 f1       	breq	.+66     	; 0x20e0 <host_system_send+0x54>
    last_system_report = report;
    209e:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <last_system_report+0x1>
    20a2:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <last_system_report>

    if (!driver) return;
    20a6:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <driver>
    20aa:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <driver+0x1>
    20ae:	30 97       	sbiw	r30, 0x00	; 0
    20b0:	b9 f0       	breq	.+46     	; 0x20e0 <host_system_send+0x54>
    20b2:	ec 01       	movw	r28, r24
    (*driver->send_system)(report);
    20b4:	06 80       	ldd	r0, Z+6	; 0x06
    20b6:	f7 81       	ldd	r31, Z+7	; 0x07
    20b8:	e0 2d       	mov	r30, r0
    20ba:	09 95       	icall

    if (debug_keyboard) {
    20bc:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <debug_config>
    20c0:	82 ff       	sbrs	r24, 2
    20c2:	0e c0       	rjmp	.+28     	; 0x20e0 <host_system_send+0x54>
        dprintf("system: %04X\n", report);
    20c4:	80 ff       	sbrs	r24, 0
    20c6:	0c c0       	rjmp	.+24     	; 0x20e0 <host_system_send+0x54>
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	85 e6       	ldi	r24, 0x65	; 101
    20ce:	93 e0       	ldi	r25, 0x03	; 3
    20d0:	9f 93       	push	r25
    20d2:	8f 93       	push	r24
    20d4:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    }
}
    20e0:	df 91       	pop	r29
    20e2:	cf 91       	pop	r28
    20e4:	08 95       	ret

000020e6 <host_consumer_send>:

void host_consumer_send(uint16_t report)
{
    20e6:	cf 93       	push	r28
    20e8:	df 93       	push	r29
    if (report == last_consumer_report) return;
    20ea:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <last_consumer_report>
    20ee:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <last_consumer_report+0x1>
    20f2:	28 17       	cp	r18, r24
    20f4:	39 07       	cpc	r19, r25
    20f6:	09 f1       	breq	.+66     	; 0x213a <host_consumer_send+0x54>
    last_consumer_report = report;
    20f8:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <last_consumer_report+0x1>
    20fc:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <last_consumer_report>

    if (!driver) return;
    2100:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <driver>
    2104:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <driver+0x1>
    2108:	30 97       	sbiw	r30, 0x00	; 0
    210a:	b9 f0       	breq	.+46     	; 0x213a <host_consumer_send+0x54>
    210c:	ec 01       	movw	r28, r24
    (*driver->send_consumer)(report);
    210e:	00 84       	ldd	r0, Z+8	; 0x08
    2110:	f1 85       	ldd	r31, Z+9	; 0x09
    2112:	e0 2d       	mov	r30, r0
    2114:	09 95       	icall

    if (debug_keyboard) {
    2116:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <debug_config>
    211a:	82 ff       	sbrs	r24, 2
    211c:	0e c0       	rjmp	.+28     	; 0x213a <host_consumer_send+0x54>
        dprintf("consumer: %04X\n", report);
    211e:	80 ff       	sbrs	r24, 0
    2120:	0c c0       	rjmp	.+24     	; 0x213a <host_consumer_send+0x54>
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	85 e5       	ldi	r24, 0x55	; 85
    2128:	93 e0       	ldi	r25, 0x03	; 3
    212a:	9f 93       	push	r25
    212c:	8f 93       	push	r24
    212e:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    }
}
    213a:	df 91       	pop	r29
    213c:	cf 91       	pop	r28
    213e:	08 95       	ret

00002140 <keyboard_setup>:
#endif


void keyboard_setup(void)
{
    matrix_setup();
    2140:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <matrix_setup>

00002144 <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    2144:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <timer_init>
    matrix_init();
    2148:	0e 94 05 07 	call	0xe0a	; 0xe0a <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    214c:	0e 94 14 20 	call	0x4028	; 0x4028 <bootmagic>
#endif

#ifdef BACKLIGHT_ENABLE
    backlight_init();
    2150:	0c 94 bf 29 	jmp	0x537e	; 0x537e <backlight_init>

00002154 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan matrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    2154:	bf 92       	push	r11
    2156:	cf 92       	push	r12
    2158:	df 92       	push	r13
    215a:	ef 92       	push	r14
    215c:	ff 92       	push	r15
    215e:	0f 93       	push	r16
    2160:	1f 93       	push	r17
    2162:	cf 93       	push	r28
    2164:	df 93       	push	r29
    2166:	00 d0       	rcall	.+0      	; 0x2168 <keyboard_task+0x14>
    2168:	00 d0       	rcall	.+0      	; 0x216a <keyboard_task+0x16>
    216a:	1f 92       	push	r1
    216c:	cd b7       	in	r28, 0x3d	; 61
    216e:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2170:	0e 94 2b 07 	call	0xe56	; 0xe56 <matrix_scan>
    2174:	0f e6       	ldi	r16, 0x6F	; 111
    2176:	11 e0       	ldi	r17, 0x01	; 1
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2178:	f1 2c       	mov	r15, r1
        matrix_row = matrix_get_row(r);
    217a:	8f 2d       	mov	r24, r15
    217c:	0e 94 c2 07 	call	0xf84	; 0xf84 <matrix_get_row>
    2180:	b8 2e       	mov	r11, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    2182:	f8 01       	movw	r30, r16
    2184:	c0 80       	ld	r12, Z
    2186:	c8 26       	eor	r12, r24
        if (matrix_change) {
    2188:	39 f4       	brne	.+14     	; 0x2198 <keyboard_task+0x44>
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    218a:	f3 94       	inc	r15
    218c:	0f 5f       	subi	r16, 0xFF	; 255
    218e:	1f 4f       	sbci	r17, 0xFF	; 255
    2190:	f4 e0       	ldi	r31, 0x04	; 4
    2192:	ff 12       	cpse	r15, r31
    2194:	f2 cf       	rjmp	.-28     	; 0x217a <keyboard_task+0x26>
    2196:	30 c0       	rjmp	.+96     	; 0x21f8 <keyboard_task+0xa4>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    2198:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <debug_config>
    219c:	81 fd       	sbrc	r24, 1
    219e:	0e 94 c8 07 	call	0xf90	; 0xf90 <matrix_print>
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    21a2:	d1 2c       	mov	r13, r1
    21a4:	ee 24       	eor	r14, r14
    21a6:	e3 94       	inc	r14
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            matrix_row_t col_mask = 1;
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
                if (matrix_change & col_mask) {
    21a8:	8c 2d       	mov	r24, r12
    21aa:	8e 21       	and	r24, r14
    21ac:	f9 f0       	breq	.+62     	; 0x21ec <keyboard_task+0x98>
                    keyevent_t e = (keyevent_t){
    21ae:	d9 82       	std	Y+1, r13	; 0x01
    21b0:	fa 82       	std	Y+2, r15	; 0x02
    21b2:	91 e0       	ldi	r25, 0x01	; 1
    21b4:	8b 2d       	mov	r24, r11
    21b6:	8e 21       	and	r24, r14
    21b8:	09 f4       	brne	.+2      	; 0x21bc <keyboard_task+0x68>
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	9b 83       	std	Y+3, r25	; 0x03
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & col_mask),
                        .time = (timer_read() | 1) /* time should not be 0 */
    21be:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <timer_read>
#endif
            if (debug_matrix) matrix_print();
            matrix_row_t col_mask = 1;
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
                if (matrix_change & col_mask) {
                    keyevent_t e = (keyevent_t){
    21c2:	81 60       	ori	r24, 0x01	; 1
    21c4:	78 2f       	mov	r23, r24
    21c6:	9d 83       	std	Y+5, r25	; 0x05
    21c8:	8c 83       	std	Y+4, r24	; 0x04
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & col_mask),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    };
                    action_exec(e);
    21ca:	49 81       	ldd	r20, Y+1	; 0x01
    21cc:	5a 81       	ldd	r21, Y+2	; 0x02
    21ce:	6b 81       	ldd	r22, Y+3	; 0x03
    21d0:	8d 81       	ldd	r24, Y+5	; 0x05
    21d2:	0e 94 53 11 	call	0x22a6	; 0x22a6 <action_exec>
                    hook_matrix_change(e);
    21d6:	49 81       	ldd	r20, Y+1	; 0x01
    21d8:	5a 81       	ldd	r21, Y+2	; 0x02
    21da:	6b 81       	ldd	r22, Y+3	; 0x03
    21dc:	7c 81       	ldd	r23, Y+4	; 0x04
    21de:	8d 81       	ldd	r24, Y+5	; 0x05
    21e0:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= col_mask;
    21e4:	f8 01       	movw	r30, r16
    21e6:	80 81       	ld	r24, Z
    21e8:	8e 25       	eor	r24, r14
    21ea:	80 83       	st	Z, r24
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            matrix_row_t col_mask = 1;
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
    21ec:	d3 94       	inc	r13
    21ee:	ee 0c       	add	r14, r14
    21f0:	f4 e0       	ldi	r31, 0x04	; 4
    21f2:	df 12       	cpse	r13, r31
    21f4:	d9 cf       	rjmp	.-78     	; 0x21a8 <keyboard_task+0x54>
    21f6:	c9 cf       	rjmp	.-110    	; 0x218a <keyboard_task+0x36>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    21f8:	8f ef       	ldi	r24, 0xFF	; 255
    21fa:	89 83       	std	Y+1, r24	; 0x01
    21fc:	8a 83       	std	Y+2, r24	; 0x02
    21fe:	1b 82       	std	Y+3, r1	; 0x03
    2200:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <timer_read>
    2204:	81 60       	ori	r24, 0x01	; 1
    2206:	78 2f       	mov	r23, r24
    2208:	9d 83       	std	Y+5, r25	; 0x05
    220a:	8c 83       	std	Y+4, r24	; 0x04
    220c:	49 81       	ldd	r20, Y+1	; 0x01
    220e:	5a 81       	ldd	r21, Y+2	; 0x02
    2210:	6b 81       	ldd	r22, Y+3	; 0x03
    2212:	8d 81       	ldd	r24, Y+5	; 0x05
    2214:	0e 94 53 11 	call	0x22a6	; 0x22a6 <action_exec>

//MATRIX_LOOP_END:

    hook_keyboard_loop();
    2218:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    221c:	0e 94 ac 23 	call	0x4758	; 0x4758 <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    2220:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <host_keyboard_leds>
    2224:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <led_status.4981>
    2228:	89 17       	cp	r24, r25
    222a:	41 f1       	breq	.+80     	; 0x227c <keyboard_task+0x128>
        led_status = host_keyboard_leds();
    222c:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <host_keyboard_leds>
    2230:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <led_status.4981>
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    2234:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <debug_config>
    2238:	92 ff       	sbrs	r25, 2
    223a:	0e c0       	rjmp	.+28     	; 0x2258 <keyboard_task+0x104>
    223c:	90 ff       	sbrs	r25, 0
    223e:	0c c0       	rjmp	.+24     	; 0x2258 <keyboard_task+0x104>
    2240:	1f 92       	push	r1
    2242:	8f 93       	push	r24
    2244:	86 e8       	ldi	r24, 0x86	; 134
    2246:	93 e0       	ldi	r25, 0x03	; 3
    2248:	9f 93       	push	r25
    224a:	8f 93       	push	r24
    224c:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    2258:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <led_status.4981>
    }
}
    225c:	0f 90       	pop	r0
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	0f 90       	pop	r0
    2266:	df 91       	pop	r29
    2268:	cf 91       	pop	r28
    226a:	1f 91       	pop	r17
    226c:	0f 91       	pop	r16
    226e:	ff 90       	pop	r15
    2270:	ef 90       	pop	r14
    2272:	df 90       	pop	r13
    2274:	cf 90       	pop	r12
    2276:	bf 90       	pop	r11

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    2278:	0c 94 9d 1d 	jmp	0x3b3a	; 0x3b3a <hook_keyboard_leds_change>
    }
}
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	1f 91       	pop	r17
    228c:	0f 91       	pop	r16
    228e:	ff 90       	pop	r15
    2290:	ef 90       	pop	r14
    2292:	df 90       	pop	r13
    2294:	cf 90       	pop	r12
    2296:	bf 90       	pop	r11
    2298:	08 95       	ret

0000229a <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    229a:	0c 94 16 08 	jmp	0x102c	; 0x102c <led_set>

0000229e <matrix_clear>:
    229e:	08 95       	ret

000022a0 <matrix_setup>:
    22a0:	08 95       	ret

000022a2 <matrix_power_up>:
    22a2:	08 95       	ret

000022a4 <matrix_power_down>:
    return false;
}
#endif

__attribute__ ((weak)) void matrix_power_up(void) {}
__attribute__ ((weak)) void matrix_power_down(void) {}
    22a4:	08 95       	ret

000022a6 <action_exec>:
}

void type_code(uint8_t code)
{
    register_code(code);
    unregister_code(code);
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
    22ae:	2b 97       	sbiw	r28, 0x0b	; 11
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	f8 94       	cli
    22b4:	de bf       	out	0x3e, r29	; 62
    22b6:	0f be       	out	0x3f, r0	; 63
    22b8:	cd bf       	out	0x3d, r28	; 61
    22ba:	94 2f       	mov	r25, r20
    22bc:	4f 83       	std	Y+7, r20	; 0x07
    22be:	25 2f       	mov	r18, r21
    22c0:	58 87       	std	Y+8, r21	; 0x08
    22c2:	69 87       	std	Y+9, r22	; 0x09
    22c4:	7a 87       	std	Y+10, r23	; 0x0a
    22c6:	8b 87       	std	Y+11, r24	; 0x0b
    22c8:	4a 85       	ldd	r20, Y+10	; 0x0a
    22ca:	5b 85       	ldd	r21, Y+11	; 0x0b
    22cc:	45 2b       	or	r20, r21
    22ce:	31 f0       	breq	.+12     	; 0x22dc <action_exec+0x36>
    22d0:	2f 3f       	cpi	r18, 0xFF	; 255
    22d2:	31 f4       	brne	.+12     	; 0x22e0 <action_exec+0x3a>
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	9f 3f       	cpi	r25, 0xFF	; 255
    22d8:	19 f4       	brne	.+6      	; 0x22e0 <action_exec+0x3a>
    22da:	03 c0       	rjmp	.+6      	; 0x22e2 <action_exec+0x3c>
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	01 c0       	rjmp	.+2      	; 0x22e2 <action_exec+0x3c>
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	80 fd       	sbrc	r24, 0
    22e4:	07 c0       	rjmp	.+14     	; 0x22f4 <action_exec+0x4e>
    22e6:	4f 81       	ldd	r20, Y+7	; 0x07
    22e8:	58 85       	ldd	r21, Y+8	; 0x08
    22ea:	69 85       	ldd	r22, Y+9	; 0x09
    22ec:	7a 85       	ldd	r23, Y+10	; 0x0a
    22ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    22f0:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <hook_matrix_change>
    22f4:	de 01       	movw	r26, r28
    22f6:	11 96       	adiw	r26, 0x01	; 1
    22f8:	86 e0       	ldi	r24, 0x06	; 6
    22fa:	fd 01       	movw	r30, r26
    22fc:	11 92       	st	Z+, r1
    22fe:	8a 95       	dec	r24
    2300:	e9 f7       	brne	.-6      	; 0x22fc <action_exec+0x56>
    2302:	85 e0       	ldi	r24, 0x05	; 5
    2304:	fe 01       	movw	r30, r28
    2306:	37 96       	adiw	r30, 0x07	; 7
    2308:	01 90       	ld	r0, Z+
    230a:	0d 92       	st	X+, r0
    230c:	8a 95       	dec	r24
    230e:	e1 f7       	brne	.-8      	; 0x2308 <action_exec+0x62>
    2310:	49 81       	ldd	r20, Y+1	; 0x01
    2312:	5a 81       	ldd	r21, Y+2	; 0x02
    2314:	6b 81       	ldd	r22, Y+3	; 0x03
    2316:	7c 81       	ldd	r23, Y+4	; 0x04
    2318:	8d 81       	ldd	r24, Y+5	; 0x05
    231a:	9e 81       	ldd	r25, Y+6	; 0x06
    231c:	0e 94 74 19 	call	0x32e8	; 0x32e8 <action_tapping_process>
    2320:	2b 96       	adiw	r28, 0x0b	; 11
    2322:	0f b6       	in	r0, 0x3f	; 63
    2324:	f8 94       	cli
    2326:	de bf       	out	0x3e, r29	; 62
    2328:	0f be       	out	0x3f, r0	; 63
    232a:	cd bf       	out	0x3d, r28	; 61
    232c:	df 91       	pop	r29
    232e:	cf 91       	pop	r28
    2330:	08 95       	ret

00002332 <register_code>:
    2332:	cf 93       	push	r28
    2334:	88 23       	and	r24, r24
    2336:	09 f4       	brne	.+2      	; 0x233a <register_code+0x8>
    2338:	e8 c0       	rjmp	.+464    	; 0x250a <register_code+0x1d8>
    233a:	c8 2f       	mov	r28, r24
    233c:	82 38       	cpi	r24, 0x82	; 130
    233e:	a1 f4       	brne	.+40     	; 0x2368 <register_code+0x36>
    2340:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <host_keyboard_leds>
    2344:	81 fd       	sbrc	r24, 1
    2346:	e1 c0       	rjmp	.+450    	; 0x250a <register_code+0x1d8>
    2348:	89 e3       	ldi	r24, 0x39	; 57
    234a:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <add_key>
    234e:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <send_keyboard_report>
    2352:	2f ef       	ldi	r18, 0xFF	; 255
    2354:	81 ee       	ldi	r24, 0xE1	; 225
    2356:	94 e0       	ldi	r25, 0x04	; 4
    2358:	21 50       	subi	r18, 0x01	; 1
    235a:	80 40       	sbci	r24, 0x00	; 0
    235c:	90 40       	sbci	r25, 0x00	; 0
    235e:	e1 f7       	brne	.-8      	; 0x2358 <register_code+0x26>
    2360:	00 c0       	rjmp	.+0      	; 0x2362 <register_code+0x30>
    2362:	00 00       	nop
    2364:	89 e3       	ldi	r24, 0x39	; 57
    2366:	15 c0       	rjmp	.+42     	; 0x2392 <register_code+0x60>
    2368:	83 38       	cpi	r24, 0x83	; 131
    236a:	c1 f4       	brne	.+48     	; 0x239c <register_code+0x6a>
    236c:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <host_keyboard_leds>
    2370:	80 fd       	sbrc	r24, 0
    2372:	cb c0       	rjmp	.+406    	; 0x250a <register_code+0x1d8>
    2374:	83 e5       	ldi	r24, 0x53	; 83
    2376:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <add_key>
    237a:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <send_keyboard_report>
    237e:	2f ef       	ldi	r18, 0xFF	; 255
    2380:	81 ee       	ldi	r24, 0xE1	; 225
    2382:	94 e0       	ldi	r25, 0x04	; 4
    2384:	21 50       	subi	r18, 0x01	; 1
    2386:	80 40       	sbci	r24, 0x00	; 0
    2388:	90 40       	sbci	r25, 0x00	; 0
    238a:	e1 f7       	brne	.-8      	; 0x2384 <register_code+0x52>
    238c:	00 c0       	rjmp	.+0      	; 0x238e <register_code+0x5c>
    238e:	00 00       	nop
    2390:	83 e5       	ldi	r24, 0x53	; 83
    2392:	0e 94 ac 1c 	call	0x3958	; 0x3958 <del_key>
    2396:	cf 91       	pop	r28
    2398:	0c 94 3b 1d 	jmp	0x3a76	; 0x3a76 <send_keyboard_report>
    239c:	84 38       	cpi	r24, 0x84	; 132
    239e:	a1 f4       	brne	.+40     	; 0x23c8 <register_code+0x96>
    23a0:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <host_keyboard_leds>
    23a4:	82 fd       	sbrc	r24, 2
    23a6:	b1 c0       	rjmp	.+354    	; 0x250a <register_code+0x1d8>
    23a8:	87 e4       	ldi	r24, 0x47	; 71
    23aa:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <add_key>
    23ae:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <send_keyboard_report>
    23b2:	2f ef       	ldi	r18, 0xFF	; 255
    23b4:	81 ee       	ldi	r24, 0xE1	; 225
    23b6:	94 e0       	ldi	r25, 0x04	; 4
    23b8:	21 50       	subi	r18, 0x01	; 1
    23ba:	80 40       	sbci	r24, 0x00	; 0
    23bc:	90 40       	sbci	r25, 0x00	; 0
    23be:	e1 f7       	brne	.-8      	; 0x23b8 <register_code+0x86>
    23c0:	00 c0       	rjmp	.+0      	; 0x23c2 <register_code+0x90>
    23c2:	00 00       	nop
    23c4:	87 e4       	ldi	r24, 0x47	; 71
    23c6:	e5 cf       	rjmp	.-54     	; 0x2392 <register_code+0x60>
    23c8:	8c ef       	ldi	r24, 0xFC	; 252
    23ca:	8c 0f       	add	r24, r28
    23cc:	81 3a       	cpi	r24, 0xA1	; 161
    23ce:	48 f4       	brcc	.+18     	; 0x23e2 <register_code+0xb0>
    23d0:	8c 2f       	mov	r24, r28
    23d2:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <command_proc>
    23d6:	81 11       	cpse	r24, r1
    23d8:	98 c0       	rjmp	.+304    	; 0x250a <register_code+0x1d8>
    23da:	8c 2f       	mov	r24, r28
    23dc:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <add_key>
    23e0:	da cf       	rjmp	.-76     	; 0x2396 <register_code+0x64>
    23e2:	80 e2       	ldi	r24, 0x20	; 32
    23e4:	8c 0f       	add	r24, r28
    23e6:	88 30       	cpi	r24, 0x08	; 8
    23e8:	48 f4       	brcc	.+18     	; 0x23fc <register_code+0xca>
    23ea:	c7 70       	andi	r28, 0x07	; 7
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	01 c0       	rjmp	.+2      	; 0x23f2 <register_code+0xc0>
    23f0:	88 0f       	add	r24, r24
    23f2:	ca 95       	dec	r28
    23f4:	ea f7       	brpl	.-6      	; 0x23f0 <register_code+0xbe>
    23f6:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <add_mods>
    23fa:	cd cf       	rjmp	.-102    	; 0x2396 <register_code+0x64>
    23fc:	8b e5       	ldi	r24, 0x5B	; 91
    23fe:	8c 0f       	add	r24, r28
    2400:	83 30       	cpi	r24, 0x03	; 3
    2402:	78 f4       	brcc	.+30     	; 0x2422 <register_code+0xf0>
    2404:	c5 3a       	cpi	r28, 0xA5	; 165
    2406:	29 f0       	breq	.+10     	; 0x2412 <register_code+0xe0>
    2408:	c6 3a       	cpi	r28, 0xA6	; 166
    240a:	31 f0       	breq	.+12     	; 0x2418 <register_code+0xe6>
    240c:	83 e8       	ldi	r24, 0x83	; 131
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	05 c0       	rjmp	.+10     	; 0x241c <register_code+0xea>
    2412:	81 e8       	ldi	r24, 0x81	; 129
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	02 c0       	rjmp	.+4      	; 0x241c <register_code+0xea>
    2418:	82 e8       	ldi	r24, 0x82	; 130
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	cf 91       	pop	r28
    241e:	0c 94 46 10 	jmp	0x208c	; 0x208c <host_system_send>
    2422:	88 e5       	ldi	r24, 0x58	; 88
    2424:	8c 0f       	add	r24, r28
    2426:	85 31       	cpi	r24, 0x15	; 21
    2428:	08 f0       	brcs	.+2      	; 0x242c <register_code+0xfa>
    242a:	6f c0       	rjmp	.+222    	; 0x250a <register_code+0x1d8>
    242c:	c8 3a       	cpi	r28, 0xA8	; 168
    242e:	61 f1       	breq	.+88     	; 0x2488 <register_code+0x156>
    2430:	c9 3a       	cpi	r28, 0xA9	; 169
    2432:	69 f1       	breq	.+90     	; 0x248e <register_code+0x15c>
    2434:	ca 3a       	cpi	r28, 0xAA	; 170
    2436:	71 f1       	breq	.+92     	; 0x2494 <register_code+0x162>
    2438:	cb 3a       	cpi	r28, 0xAB	; 171
    243a:	79 f1       	breq	.+94     	; 0x249a <register_code+0x168>
    243c:	cc 3a       	cpi	r28, 0xAC	; 172
    243e:	81 f1       	breq	.+96     	; 0x24a0 <register_code+0x16e>
    2440:	cd 3a       	cpi	r28, 0xAD	; 173
    2442:	89 f1       	breq	.+98     	; 0x24a6 <register_code+0x174>
    2444:	ce 3a       	cpi	r28, 0xAE	; 174
    2446:	91 f1       	breq	.+100    	; 0x24ac <register_code+0x17a>
    2448:	cf 3a       	cpi	r28, 0xAF	; 175
    244a:	99 f1       	breq	.+102    	; 0x24b2 <register_code+0x180>
    244c:	c1 3b       	cpi	r28, 0xB1	; 177
    244e:	a1 f1       	breq	.+104    	; 0x24b8 <register_code+0x186>
    2450:	c0 3b       	cpi	r28, 0xB0	; 176
    2452:	a9 f1       	breq	.+106    	; 0x24be <register_code+0x18c>
    2454:	c2 3b       	cpi	r28, 0xB2	; 178
    2456:	b1 f1       	breq	.+108    	; 0x24c4 <register_code+0x192>
    2458:	c3 3b       	cpi	r28, 0xB3	; 179
    245a:	b9 f1       	breq	.+110    	; 0x24ca <register_code+0x198>
    245c:	c4 3b       	cpi	r28, 0xB4	; 180
    245e:	c1 f1       	breq	.+112    	; 0x24d0 <register_code+0x19e>
    2460:	c5 3b       	cpi	r28, 0xB5	; 181
    2462:	c9 f1       	breq	.+114    	; 0x24d6 <register_code+0x1a4>
    2464:	c6 3b       	cpi	r28, 0xB6	; 182
    2466:	d1 f1       	breq	.+116    	; 0x24dc <register_code+0x1aa>
    2468:	c7 3b       	cpi	r28, 0xB7	; 183
    246a:	d9 f1       	breq	.+118    	; 0x24e2 <register_code+0x1b0>
    246c:	c8 3b       	cpi	r28, 0xB8	; 184
    246e:	e1 f1       	breq	.+120    	; 0x24e8 <register_code+0x1b6>
    2470:	c9 3b       	cpi	r28, 0xB9	; 185
    2472:	e9 f1       	breq	.+122    	; 0x24ee <register_code+0x1bc>
    2474:	ca 3b       	cpi	r28, 0xBA	; 186
    2476:	f1 f1       	breq	.+124    	; 0x24f4 <register_code+0x1c2>
    2478:	cb 3b       	cpi	r28, 0xBB	; 187
    247a:	f9 f1       	breq	.+126    	; 0x24fa <register_code+0x1c8>
    247c:	cc 3b       	cpi	r28, 0xBC	; 188
    247e:	09 f4       	brne	.+2      	; 0x2482 <register_code+0x150>
    2480:	3f c0       	rjmp	.+126    	; 0x2500 <register_code+0x1ce>
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	3e c0       	rjmp	.+124    	; 0x2504 <register_code+0x1d2>
    2488:	82 ee       	ldi	r24, 0xE2	; 226
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	3b c0       	rjmp	.+118    	; 0x2504 <register_code+0x1d2>
    248e:	89 ee       	ldi	r24, 0xE9	; 233
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	38 c0       	rjmp	.+112    	; 0x2504 <register_code+0x1d2>
    2494:	8a ee       	ldi	r24, 0xEA	; 234
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	35 c0       	rjmp	.+106    	; 0x2504 <register_code+0x1d2>
    249a:	85 eb       	ldi	r24, 0xB5	; 181
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	32 c0       	rjmp	.+100    	; 0x2504 <register_code+0x1d2>
    24a0:	86 eb       	ldi	r24, 0xB6	; 182
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	2f c0       	rjmp	.+94     	; 0x2504 <register_code+0x1d2>
    24a6:	83 eb       	ldi	r24, 0xB3	; 179
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	2c c0       	rjmp	.+88     	; 0x2504 <register_code+0x1d2>
    24ac:	84 eb       	ldi	r24, 0xB4	; 180
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	29 c0       	rjmp	.+82     	; 0x2504 <register_code+0x1d2>
    24b2:	87 eb       	ldi	r24, 0xB7	; 183
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	26 c0       	rjmp	.+76     	; 0x2504 <register_code+0x1d2>
    24b8:	8c ec       	ldi	r24, 0xCC	; 204
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	23 c0       	rjmp	.+70     	; 0x2504 <register_code+0x1d2>
    24be:	8d ec       	ldi	r24, 0xCD	; 205
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	20 c0       	rjmp	.+64     	; 0x2504 <register_code+0x1d2>
    24c4:	83 e8       	ldi	r24, 0x83	; 131
    24c6:	91 e0       	ldi	r25, 0x01	; 1
    24c8:	1d c0       	rjmp	.+58     	; 0x2504 <register_code+0x1d2>
    24ca:	8a e8       	ldi	r24, 0x8A	; 138
    24cc:	91 e0       	ldi	r25, 0x01	; 1
    24ce:	1a c0       	rjmp	.+52     	; 0x2504 <register_code+0x1d2>
    24d0:	82 e9       	ldi	r24, 0x92	; 146
    24d2:	91 e0       	ldi	r25, 0x01	; 1
    24d4:	17 c0       	rjmp	.+46     	; 0x2504 <register_code+0x1d2>
    24d6:	84 e9       	ldi	r24, 0x94	; 148
    24d8:	91 e0       	ldi	r25, 0x01	; 1
    24da:	14 c0       	rjmp	.+40     	; 0x2504 <register_code+0x1d2>
    24dc:	81 e2       	ldi	r24, 0x21	; 33
    24de:	92 e0       	ldi	r25, 0x02	; 2
    24e0:	11 c0       	rjmp	.+34     	; 0x2504 <register_code+0x1d2>
    24e2:	83 e2       	ldi	r24, 0x23	; 35
    24e4:	92 e0       	ldi	r25, 0x02	; 2
    24e6:	0e c0       	rjmp	.+28     	; 0x2504 <register_code+0x1d2>
    24e8:	84 e2       	ldi	r24, 0x24	; 36
    24ea:	92 e0       	ldi	r25, 0x02	; 2
    24ec:	0b c0       	rjmp	.+22     	; 0x2504 <register_code+0x1d2>
    24ee:	85 e2       	ldi	r24, 0x25	; 37
    24f0:	92 e0       	ldi	r25, 0x02	; 2
    24f2:	08 c0       	rjmp	.+16     	; 0x2504 <register_code+0x1d2>
    24f4:	86 e2       	ldi	r24, 0x26	; 38
    24f6:	92 e0       	ldi	r25, 0x02	; 2
    24f8:	05 c0       	rjmp	.+10     	; 0x2504 <register_code+0x1d2>
    24fa:	87 e2       	ldi	r24, 0x27	; 39
    24fc:	92 e0       	ldi	r25, 0x02	; 2
    24fe:	02 c0       	rjmp	.+4      	; 0x2504 <register_code+0x1d2>
    2500:	8a e2       	ldi	r24, 0x2A	; 42
    2502:	92 e0       	ldi	r25, 0x02	; 2
    2504:	cf 91       	pop	r28
    2506:	0c 94 73 10 	jmp	0x20e6	; 0x20e6 <host_consumer_send>
    250a:	cf 91       	pop	r28
    250c:	08 95       	ret

0000250e <unregister_code>:
    250e:	88 23       	and	r24, r24
    2510:	09 f4       	brne	.+2      	; 0x2514 <unregister_code+0x6>
    2512:	66 c0       	rjmp	.+204    	; 0x25e0 <unregister_code+0xd2>
    2514:	82 38       	cpi	r24, 0x82	; 130
    2516:	a1 f4       	brne	.+40     	; 0x2540 <unregister_code+0x32>
    2518:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <host_keyboard_leds>
    251c:	81 ff       	sbrs	r24, 1
    251e:	60 c0       	rjmp	.+192    	; 0x25e0 <unregister_code+0xd2>
    2520:	89 e3       	ldi	r24, 0x39	; 57
    2522:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <add_key>
    2526:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <send_keyboard_report>
    252a:	2f ef       	ldi	r18, 0xFF	; 255
    252c:	81 ee       	ldi	r24, 0xE1	; 225
    252e:	94 e0       	ldi	r25, 0x04	; 4
    2530:	21 50       	subi	r18, 0x01	; 1
    2532:	80 40       	sbci	r24, 0x00	; 0
    2534:	90 40       	sbci	r25, 0x00	; 0
    2536:	e1 f7       	brne	.-8      	; 0x2530 <unregister_code+0x22>
    2538:	00 c0       	rjmp	.+0      	; 0x253a <unregister_code+0x2c>
    253a:	00 00       	nop
    253c:	89 e3       	ldi	r24, 0x39	; 57
    253e:	15 c0       	rjmp	.+42     	; 0x256a <unregister_code+0x5c>
    2540:	83 38       	cpi	r24, 0x83	; 131
    2542:	b9 f4       	brne	.+46     	; 0x2572 <unregister_code+0x64>
    2544:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <host_keyboard_leds>
    2548:	80 ff       	sbrs	r24, 0
    254a:	4a c0       	rjmp	.+148    	; 0x25e0 <unregister_code+0xd2>
    254c:	83 e5       	ldi	r24, 0x53	; 83
    254e:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <add_key>
    2552:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <send_keyboard_report>
    2556:	2f ef       	ldi	r18, 0xFF	; 255
    2558:	81 ee       	ldi	r24, 0xE1	; 225
    255a:	94 e0       	ldi	r25, 0x04	; 4
    255c:	21 50       	subi	r18, 0x01	; 1
    255e:	80 40       	sbci	r24, 0x00	; 0
    2560:	90 40       	sbci	r25, 0x00	; 0
    2562:	e1 f7       	brne	.-8      	; 0x255c <unregister_code+0x4e>
    2564:	00 c0       	rjmp	.+0      	; 0x2566 <unregister_code+0x58>
    2566:	00 00       	nop
    2568:	83 e5       	ldi	r24, 0x53	; 83
    256a:	0e 94 ac 1c 	call	0x3958	; 0x3958 <del_key>
    256e:	0c 94 3b 1d 	jmp	0x3a76	; 0x3a76 <send_keyboard_report>
    2572:	84 38       	cpi	r24, 0x84	; 132
    2574:	a1 f4       	brne	.+40     	; 0x259e <unregister_code+0x90>
    2576:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <host_keyboard_leds>
    257a:	82 ff       	sbrs	r24, 2
    257c:	31 c0       	rjmp	.+98     	; 0x25e0 <unregister_code+0xd2>
    257e:	87 e4       	ldi	r24, 0x47	; 71
    2580:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <add_key>
    2584:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <send_keyboard_report>
    2588:	2f ef       	ldi	r18, 0xFF	; 255
    258a:	81 ee       	ldi	r24, 0xE1	; 225
    258c:	94 e0       	ldi	r25, 0x04	; 4
    258e:	21 50       	subi	r18, 0x01	; 1
    2590:	80 40       	sbci	r24, 0x00	; 0
    2592:	90 40       	sbci	r25, 0x00	; 0
    2594:	e1 f7       	brne	.-8      	; 0x258e <unregister_code+0x80>
    2596:	00 c0       	rjmp	.+0      	; 0x2598 <unregister_code+0x8a>
    2598:	00 00       	nop
    259a:	87 e4       	ldi	r24, 0x47	; 71
    259c:	e6 cf       	rjmp	.-52     	; 0x256a <unregister_code+0x5c>
    259e:	9c ef       	ldi	r25, 0xFC	; 252
    25a0:	98 0f       	add	r25, r24
    25a2:	91 3a       	cpi	r25, 0xA1	; 161
    25a4:	10 f3       	brcs	.-60     	; 0x256a <unregister_code+0x5c>
    25a6:	90 e2       	ldi	r25, 0x20	; 32
    25a8:	98 0f       	add	r25, r24
    25aa:	98 30       	cpi	r25, 0x08	; 8
    25ac:	50 f4       	brcc	.+20     	; 0x25c2 <unregister_code+0xb4>
    25ae:	87 70       	andi	r24, 0x07	; 7
    25b0:	91 e0       	ldi	r25, 0x01	; 1
    25b2:	01 c0       	rjmp	.+2      	; 0x25b6 <unregister_code+0xa8>
    25b4:	99 0f       	add	r25, r25
    25b6:	8a 95       	dec	r24
    25b8:	ea f7       	brpl	.-6      	; 0x25b4 <unregister_code+0xa6>
    25ba:	89 2f       	mov	r24, r25
    25bc:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <del_mods>
    25c0:	d6 cf       	rjmp	.-84     	; 0x256e <unregister_code+0x60>
    25c2:	9b e5       	ldi	r25, 0x5B	; 91
    25c4:	98 0f       	add	r25, r24
    25c6:	93 30       	cpi	r25, 0x03	; 3
    25c8:	20 f4       	brcc	.+8      	; 0x25d2 <unregister_code+0xc4>
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	0c 94 46 10 	jmp	0x208c	; 0x208c <host_system_send>
    25d2:	88 5a       	subi	r24, 0xA8	; 168
    25d4:	85 31       	cpi	r24, 0x15	; 21
    25d6:	20 f4       	brcc	.+8      	; 0x25e0 <unregister_code+0xd2>
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	0c 94 73 10 	jmp	0x20e6	; 0x20e6 <host_consumer_send>
    25e0:	08 95       	ret

000025e2 <register_mods>:
}

void register_mods(uint8_t mods)
{
    if (mods) {
    25e2:	88 23       	and	r24, r24
    25e4:	21 f0       	breq	.+8      	; 0x25ee <register_mods+0xc>
        add_mods(mods);
    25e6:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <add_mods>
        send_keyboard_report();
    25ea:	0c 94 3b 1d 	jmp	0x3a76	; 0x3a76 <send_keyboard_report>
    25ee:	08 95       	ret

000025f0 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    25f0:	88 23       	and	r24, r24
    25f2:	21 f0       	breq	.+8      	; 0x25fc <unregister_mods+0xc>
        del_mods(mods);
    25f4:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <del_mods>
        send_keyboard_report();
    25f8:	0c 94 3b 1d 	jmp	0x3a76	; 0x3a76 <send_keyboard_report>
    25fc:	08 95       	ret

000025fe <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    25fe:	cf 92       	push	r12
    2600:	df 92       	push	r13
    2602:	ef 92       	push	r14
    2604:	ff 92       	push	r15
    2606:	0f 93       	push	r16
    2608:	1f 93       	push	r17
    260a:	cf 93       	push	r28
    260c:	df 93       	push	r29
    260e:	00 d0       	rcall	.+0      	; 0x2610 <process_action+0x12>
    2610:	00 d0       	rcall	.+0      	; 0x2612 <process_action+0x14>
    2612:	1f 92       	push	r1
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	6c 01       	movw	r12, r24
    keyevent_t event = record->event;
    261a:	85 e0       	ldi	r24, 0x05	; 5
    261c:	f6 01       	movw	r30, r12
    261e:	de 01       	movw	r26, r28
    2620:	11 96       	adiw	r26, 0x01	; 1
    2622:	01 90       	ld	r0, Z+
    2624:	0d 92       	st	X+, r0
    2626:	8a 95       	dec	r24
    2628:	e1 f7       	brne	.-8      	; 0x2622 <process_action+0x24>
    262a:	f6 01       	movw	r30, r12
    262c:	40 81       	ld	r20, Z
    262e:	51 81       	ldd	r21, Z+1	; 0x01
    2630:	23 81       	ldd	r18, Z+3	; 0x03
    2632:	34 81       	ldd	r19, Z+4	; 0x04

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2634:	21 15       	cp	r18, r1
    2636:	31 05       	cpc	r19, r1
    2638:	31 f0       	breq	.+12     	; 0x2646 <process_action+0x48>
    263a:	5f 3f       	cpi	r21, 0xFF	; 255
    263c:	31 f4       	brne	.+12     	; 0x264a <process_action+0x4c>
    263e:	91 e0       	ldi	r25, 0x01	; 1
    2640:	4f 3f       	cpi	r20, 0xFF	; 255
    2642:	19 f4       	brne	.+6      	; 0x264a <process_action+0x4c>
    2644:	03 c0       	rjmp	.+6      	; 0x264c <process_action+0x4e>
    2646:	91 e0       	ldi	r25, 0x01	; 1
    2648:	01 c0       	rjmp	.+2      	; 0x264c <process_action+0x4e>
    264a:	90 e0       	ldi	r25, 0x00	; 0
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
#endif

    if (IS_NOEVENT(event)) { return; }
    264c:	90 fd       	sbrc	r25, 0
    264e:	21 c3       	rjmp	.+1602   	; 0x2c92 <process_action+0x694>
#endif
}

void process_action(keyrecord_t *record)
{
    keyevent_t event = record->event;
    2650:	f6 01       	movw	r30, r12
    2652:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    2654:	e5 80       	ldd	r14, Z+5	; 0x05
    2656:	e2 94       	swap	r14
    2658:	8f e0       	ldi	r24, 0x0F	; 15
    265a:	e8 22       	and	r14, r24
#endif

    if (IS_NOEVENT(event)) { return; }

    action_t action = layer_switch_get_action(event);
    265c:	72 2f       	mov	r23, r18
    265e:	3d 83       	std	Y+5, r19	; 0x05
    2660:	2c 83       	std	Y+4, r18	; 0x04
    2662:	6f 2d       	mov	r22, r15
    2664:	8d 81       	ldd	r24, Y+5	; 0x05
    2666:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <layer_switch_get_action>
    266a:	8c 01       	movw	r16, r24
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    266c:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2670:	0e 94 c7 1a 	call	0x358e	; 0x358e <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    2674:	e1 2f       	mov	r30, r17
    2676:	e2 95       	swap	r30
    2678:	ef 70       	andi	r30, 0x0F	; 15
    267a:	8e 2f       	mov	r24, r30
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	fc 01       	movw	r30, r24
    2680:	e0 5a       	subi	r30, 0xA0	; 160
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	0c 94 ed 2b 	jmp	0x57da	; 0x57da <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    2688:	81 2f       	mov	r24, r17
    268a:	80 7f       	andi	r24, 0xF0	; 240
    268c:	1f 70       	andi	r17, 0x0F	; 15
    268e:	88 23       	and	r24, r24
    2690:	11 f0       	breq	.+4      	; 0x2696 <process_action+0x98>
    2692:	12 95       	swap	r17
    2694:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    2696:	ff 20       	and	r15, r15
    2698:	49 f0       	breq	.+18     	; 0x26ac <process_action+0xae>
                    if (mods) {
    269a:	11 23       	and	r17, r17
    269c:	09 f4       	brne	.+2      	; 0x26a0 <process_action+0xa2>
    269e:	52 c2       	rjmp	.+1188   	; 0x2b44 <process_action+0x546>
                        add_weak_mods(mods);
    26a0:	81 2f       	mov	r24, r17
    26a2:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <add_weak_mods>
                        send_keyboard_report();
    26a6:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <send_keyboard_report>
    26aa:	4c c2       	rjmp	.+1176   	; 0x2b44 <process_action+0x546>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    26ac:	80 2f       	mov	r24, r16
    26ae:	0e 94 87 12 	call	0x250e	; 0x250e <unregister_code>
                    if (mods) {
    26b2:	11 23       	and	r17, r17
    26b4:	09 f4       	brne	.+2      	; 0x26b8 <process_action+0xba>
    26b6:	ed c2       	rjmp	.+1498   	; 0x2c92 <process_action+0x694>
                        del_weak_mods(mods);
    26b8:	81 2f       	mov	r24, r17
    26ba:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    26be:	0f 90       	pop	r0
    26c0:	0f 90       	pop	r0
    26c2:	0f 90       	pop	r0
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	df 91       	pop	r29
    26ca:	cf 91       	pop	r28
    26cc:	1f 91       	pop	r17
    26ce:	0f 91       	pop	r16
    26d0:	ff 90       	pop	r15
    26d2:	ef 90       	pop	r14
    26d4:	df 90       	pop	r13
    26d6:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    26d8:	0c 94 3b 1d 	jmp	0x3a76	; 0x3a76 <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    26dc:	81 2f       	mov	r24, r17
    26de:	80 7f       	andi	r24, 0xF0	; 240
    26e0:	1f 70       	andi	r17, 0x0F	; 15
    26e2:	80 32       	cpi	r24, 0x20	; 32
    26e4:	11 f0       	breq	.+4      	; 0x26ea <process_action+0xec>
    26e6:	12 95       	swap	r17
    26e8:	10 7f       	andi	r17, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.key.code) {
    26ea:	00 23       	and	r16, r16
    26ec:	19 f0       	breq	.+6      	; 0x26f4 <process_action+0xf6>
    26ee:	01 30       	cpi	r16, 0x01	; 1
    26f0:	09 f1       	breq	.+66     	; 0x2734 <process_action+0x136>
    26f2:	2b c0       	rjmp	.+86     	; 0x274a <process_action+0x14c>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    26f4:	ff 20       	and	r15, r15
    26f6:	a9 f0       	breq	.+42     	; 0x2722 <process_action+0x124>
                            if (tap_count == 0) {
    26f8:	ee 20       	and	r14, r14
    26fa:	59 f1       	breq	.+86     	; 0x2752 <process_action+0x154>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    26fc:	f1 e0       	ldi	r31, 0x01	; 1
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    26fe:	81 2f       	mov	r24, r17
                        // Oneshot modifier
                        if (event.pressed) {
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    2700:	ef 12       	cpse	r14, r31
    2702:	28 c0       	rjmp	.+80     	; 0x2754 <process_action+0x156>
            break;
#endif
        default:
            break;
    }
}
    2704:	0f 90       	pop	r0
    2706:	0f 90       	pop	r0
    2708:	0f 90       	pop	r0
    270a:	0f 90       	pop	r0
    270c:	0f 90       	pop	r0
    270e:	df 91       	pop	r29
    2710:	cf 91       	pop	r28
    2712:	1f 91       	pop	r17
    2714:	0f 91       	pop	r16
    2716:	ff 90       	pop	r15
    2718:	ef 90       	pop	r14
    271a:	df 90       	pop	r13
    271c:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    271e:	0c 94 24 1d 	jmp	0x3a48	; 0x3a48 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    2722:	ee 20       	and	r14, r14
    2724:	21 f0       	breq	.+8      	; 0x272e <process_action+0x130>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	e8 16       	cp	r14, r24
    272a:	09 f4       	brne	.+2      	; 0x272e <process_action+0x130>
    272c:	b2 c2       	rjmp	.+1380   	; 0x2c92 <process_action+0x694>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    272e:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <clear_oneshot_mods>
    2732:	2d c0       	rjmp	.+90     	; 0x278e <process_action+0x190>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    2734:	ff 20       	and	r15, r15
    2736:	e9 f0       	breq	.+58     	; 0x2772 <process_action+0x174>
                            if (tap_count <= TAPPING_TOGGLE) {
    2738:	e5 e0       	ldi	r30, 0x05	; 5
    273a:	ee 15       	cp	r30, r14
    273c:	08 f4       	brcc	.+2      	; 0x2740 <process_action+0x142>
    273e:	a9 c2       	rjmp	.+1362   	; 0x2c92 <process_action+0x694>
                                if (mods & get_mods()) {
    2740:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <get_mods>
    2744:	81 23       	and	r24, r17
    2746:	29 f0       	breq	.+10     	; 0x2752 <process_action+0x154>
    2748:	22 c0       	rjmp	.+68     	; 0x278e <process_action+0x190>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    274a:	ff 20       	and	r15, r15
    274c:	f1 f0       	breq	.+60     	; 0x278a <process_action+0x18c>
                            if (tap_count > 0) {
    274e:	e1 10       	cpse	r14, r1
    2750:	15 c0       	rjmp	.+42     	; 0x277c <process_action+0x17e>
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    2752:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2754:	0f 90       	pop	r0
    2756:	0f 90       	pop	r0
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
    275c:	0f 90       	pop	r0
    275e:	df 91       	pop	r29
    2760:	cf 91       	pop	r28
    2762:	1f 91       	pop	r17
    2764:	0f 91       	pop	r16
    2766:	ff 90       	pop	r15
    2768:	ef 90       	pop	r14
    276a:	df 90       	pop	r13
    276c:	cf 90       	pop	r12
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    276e:	0c 94 f1 12 	jmp	0x25e2	; 0x25e2 <register_mods>
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    2772:	f4 e0       	ldi	r31, 0x04	; 4
    2774:	fe 15       	cp	r31, r14
    2776:	08 f4       	brcc	.+2      	; 0x277a <process_action+0x17c>
    2778:	8c c2       	rjmp	.+1304   	; 0x2c92 <process_action+0x694>
    277a:	09 c0       	rjmp	.+18     	; 0x278e <process_action+0x190>
                        }
                        break;
                    default:
                        if (event.pressed) {
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
    277c:	f6 01       	movw	r30, r12
    277e:	85 81       	ldd	r24, Z+5	; 0x05
    2780:	80 ff       	sbrs	r24, 0
    2782:	e0 c1       	rjmp	.+960    	; 0x2b44 <process_action+0x546>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2784:	8f 70       	andi	r24, 0x0F	; 15
    2786:	85 83       	std	Z+5, r24	; 0x05
    2788:	e4 cf       	rjmp	.-56     	; 0x2752 <process_action+0x154>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    278a:	e1 10       	cpse	r14, r1
    278c:	ee c1       	rjmp	.+988    	; 0x2b6a <process_action+0x56c>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    278e:	81 2f       	mov	r24, r17
    2790:	61 c1       	rjmp	.+706    	; 0x2a54 <process_action+0x456>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    2792:	81 2f       	mov	r24, r17
    2794:	86 95       	lsr	r24
    2796:	86 95       	lsr	r24
    2798:	83 70       	andi	r24, 0x03	; 3
    279a:	19 f0       	breq	.+6      	; 0x27a2 <process_action+0x1a4>
    279c:	81 30       	cpi	r24, 0x01	; 1
    279e:	b9 f0       	breq	.+46     	; 0x27ce <process_action+0x1d0>
    27a0:	78 c2       	rjmp	.+1264   	; 0x2c92 <process_action+0x694>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    27a2:	ff 20       	and	r15, r15
    27a4:	19 f0       	breq	.+6      	; 0x27ac <process_action+0x1ae>
                        host_system_send(action.usage.code);
    27a6:	c8 01       	movw	r24, r16
    27a8:	93 70       	andi	r25, 0x03	; 3
    27aa:	02 c0       	rjmp	.+4      	; 0x27b0 <process_action+0x1b2>
                    } else {
                        host_system_send(0);
    27ac:	80 e0       	ldi	r24, 0x00	; 0
    27ae:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    27b0:	0f 90       	pop	r0
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	df 91       	pop	r29
    27bc:	cf 91       	pop	r28
    27be:	1f 91       	pop	r17
    27c0:	0f 91       	pop	r16
    27c2:	ff 90       	pop	r15
    27c4:	ef 90       	pop	r14
    27c6:	df 90       	pop	r13
    27c8:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    27ca:	0c 94 46 10 	jmp	0x208c	; 0x208c <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    27ce:	ff 20       	and	r15, r15
    27d0:	19 f0       	breq	.+6      	; 0x27d8 <process_action+0x1da>
                        host_consumer_send(action.usage.code);
    27d2:	c8 01       	movw	r24, r16
    27d4:	93 70       	andi	r25, 0x03	; 3
    27d6:	02 c0       	rjmp	.+4      	; 0x27dc <process_action+0x1de>
                    } else {
                        host_consumer_send(0);
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    27dc:	0f 90       	pop	r0
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
    27e6:	df 91       	pop	r29
    27e8:	cf 91       	pop	r28
    27ea:	1f 91       	pop	r17
    27ec:	0f 91       	pop	r16
    27ee:	ff 90       	pop	r15
    27f0:	ef 90       	pop	r14
    27f2:	df 90       	pop	r13
    27f4:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    27f6:	0c 94 73 10 	jmp	0x20e6	; 0x20e6 <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    27fa:	80 2f       	mov	r24, r16
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    27fc:	ff 20       	and	r15, r15
    27fe:	19 f0       	breq	.+6      	; 0x2806 <process_action+0x208>
                mousekey_on(action.key.code);
    2800:	0e 94 32 22 	call	0x4464	; 0x4464 <mousekey_on>
    2804:	02 c0       	rjmp	.+4      	; 0x280a <process_action+0x20c>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    2806:	0e 94 9a 22 	call	0x4534	; 0x4534 <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    280a:	0f 90       	pop	r0
    280c:	0f 90       	pop	r0
    280e:	0f 90       	pop	r0
    2810:	0f 90       	pop	r0
    2812:	0f 90       	pop	r0
    2814:	df 91       	pop	r29
    2816:	cf 91       	pop	r28
    2818:	1f 91       	pop	r17
    281a:	0f 91       	pop	r16
    281c:	ff 90       	pop	r15
    281e:	ef 90       	pop	r14
    2820:	df 90       	pop	r13
    2822:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    2824:	0c 94 1f 23 	jmp	0x463e	; 0x463e <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    2828:	81 2f       	mov	r24, r17
    282a:	83 70       	andi	r24, 0x03	; 3
    282c:	09 f0       	breq	.+2      	; 0x2830 <process_action+0x232>
    282e:	70 c0       	rjmp	.+224    	; 0x2910 <process_action+0x312>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    2830:	f1 10       	cpse	r15, r1
    2832:	2f c2       	rjmp	.+1118   	; 0x2c92 <process_action+0x694>
                    uint8_t shift = action.layer_bitop.part*4;
    2834:	20 2f       	mov	r18, r16
    2836:	22 95       	swap	r18
    2838:	26 95       	lsr	r18
    283a:	27 70       	andi	r18, 0x07	; 7
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    283c:	22 0f       	add	r18, r18
    283e:	22 0f       	add	r18, r18
    2840:	60 2f       	mov	r22, r16
    2842:	6f 70       	andi	r22, 0x0F	; 15
    2844:	86 2f       	mov	r24, r22
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	a0 e0       	ldi	r26, 0x00	; 0
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	6c 01       	movw	r12, r24
    284e:	7d 01       	movw	r14, r26
    2850:	02 2e       	mov	r0, r18
    2852:	04 c0       	rjmp	.+8      	; 0x285c <process_action+0x25e>
    2854:	cc 0c       	add	r12, r12
    2856:	dd 1c       	adc	r13, r13
    2858:	ee 1c       	adc	r14, r14
    285a:	ff 1c       	adc	r15, r15
    285c:	0a 94       	dec	r0
    285e:	d2 f7       	brpl	.-12     	; 0x2854 <process_action+0x256>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2860:	04 ff       	sbrs	r16, 4
    2862:	12 c0       	rjmp	.+36     	; 0x2888 <process_action+0x28a>
    2864:	8f e0       	ldi	r24, 0x0F	; 15
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	a0 e0       	ldi	r26, 0x00	; 0
    286a:	b0 e0       	ldi	r27, 0x00	; 0
    286c:	04 c0       	rjmp	.+8      	; 0x2876 <process_action+0x278>
    286e:	88 0f       	add	r24, r24
    2870:	99 1f       	adc	r25, r25
    2872:	aa 1f       	adc	r26, r26
    2874:	bb 1f       	adc	r27, r27
    2876:	2a 95       	dec	r18
    2878:	d2 f7       	brpl	.-12     	; 0x286e <process_action+0x270>
    287a:	bc 01       	movw	r22, r24
    287c:	cd 01       	movw	r24, r26
    287e:	60 95       	com	r22
    2880:	70 95       	com	r23
    2882:	80 95       	com	r24
    2884:	90 95       	com	r25
    2886:	03 c0       	rjmp	.+6      	; 0x288e <process_action+0x290>
    2888:	60 e0       	ldi	r22, 0x00	; 0
    288a:	70 e0       	ldi	r23, 0x00	; 0
    288c:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    288e:	16 95       	lsr	r17
    2890:	16 95       	lsr	r17
    2892:	13 70       	andi	r17, 0x03	; 3
    2894:	12 30       	cpi	r17, 0x02	; 2
    2896:	b1 f0       	breq	.+44     	; 0x28c4 <process_action+0x2c6>
    2898:	40 f5       	brcc	.+80     	; 0x28ea <process_action+0x2ec>
    289a:	6c 29       	or	r22, r12
    289c:	7d 29       	or	r23, r13
    289e:	8e 29       	or	r24, r14
    28a0:	9f 29       	or	r25, r15
    28a2:	11 30       	cpi	r17, 0x01	; 1
    28a4:	31 f1       	breq	.+76     	; 0x28f2 <process_action+0x2f4>
            break;
#endif
        default:
            break;
    }
}
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	0f 90       	pop	r0
    28b0:	df 91       	pop	r29
    28b2:	cf 91       	pop	r28
    28b4:	1f 91       	pop	r17
    28b6:	0f 91       	pop	r16
    28b8:	ff 90       	pop	r15
    28ba:	ef 90       	pop	r14
    28bc:	df 90       	pop	r13
    28be:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    28c0:	0c 94 ec 1a 	jmp	0x35d8	; 0x35d8 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    28c4:	6c 29       	or	r22, r12
    28c6:	7d 29       	or	r23, r13
    28c8:	8e 29       	or	r24, r14
    28ca:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	0f 90       	pop	r0
    28d2:	0f 90       	pop	r0
    28d4:	0f 90       	pop	r0
    28d6:	df 91       	pop	r29
    28d8:	cf 91       	pop	r28
    28da:	1f 91       	pop	r17
    28dc:	0f 91       	pop	r16
    28de:	ff 90       	pop	r15
    28e0:	ef 90       	pop	r14
    28e2:	df 90       	pop	r13
    28e4:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    28e6:	0c 94 06 1b 	jmp	0x360c	; 0x360c <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    28ea:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <default_layer_and>
    28ee:	c7 01       	movw	r24, r14
    28f0:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    28f2:	0f 90       	pop	r0
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
    28f8:	0f 90       	pop	r0
    28fa:	0f 90       	pop	r0
    28fc:	df 91       	pop	r29
    28fe:	cf 91       	pop	r28
    2900:	1f 91       	pop	r17
    2902:	0f 91       	pop	r16
    2904:	ff 90       	pop	r15
    2906:	ef 90       	pop	r14
    2908:	df 90       	pop	r13
    290a:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    290c:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2910:	ff 20       	and	r15, r15
    2912:	19 f0       	breq	.+6      	; 0x291a <process_action+0x31c>
    2914:	81 2f       	mov	r24, r17
    2916:	81 70       	andi	r24, 0x01	; 1
    2918:	01 c0       	rjmp	.+2      	; 0x291c <process_action+0x31e>
    291a:	86 95       	lsr	r24
    291c:	88 23       	and	r24, r24
    291e:	09 f4       	brne	.+2      	; 0x2922 <process_action+0x324>
    2920:	b8 c1       	rjmp	.+880    	; 0x2c92 <process_action+0x694>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    2922:	20 2f       	mov	r18, r16
    2924:	22 95       	swap	r18
    2926:	26 95       	lsr	r18
    2928:	27 70       	andi	r18, 0x07	; 7
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    292a:	22 0f       	add	r18, r18
    292c:	22 0f       	add	r18, r18
    292e:	60 2f       	mov	r22, r16
    2930:	6f 70       	andi	r22, 0x0F	; 15
    2932:	86 2f       	mov	r24, r22
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	a0 e0       	ldi	r26, 0x00	; 0
    2938:	b0 e0       	ldi	r27, 0x00	; 0
    293a:	6c 01       	movw	r12, r24
    293c:	7d 01       	movw	r14, r26
    293e:	02 2e       	mov	r0, r18
    2940:	04 c0       	rjmp	.+8      	; 0x294a <process_action+0x34c>
    2942:	cc 0c       	add	r12, r12
    2944:	dd 1c       	adc	r13, r13
    2946:	ee 1c       	adc	r14, r14
    2948:	ff 1c       	adc	r15, r15
    294a:	0a 94       	dec	r0
    294c:	d2 f7       	brpl	.-12     	; 0x2942 <process_action+0x344>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    294e:	04 ff       	sbrs	r16, 4
    2950:	12 c0       	rjmp	.+36     	; 0x2976 <process_action+0x378>
    2952:	8f e0       	ldi	r24, 0x0F	; 15
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	a0 e0       	ldi	r26, 0x00	; 0
    2958:	b0 e0       	ldi	r27, 0x00	; 0
    295a:	04 c0       	rjmp	.+8      	; 0x2964 <process_action+0x366>
    295c:	88 0f       	add	r24, r24
    295e:	99 1f       	adc	r25, r25
    2960:	aa 1f       	adc	r26, r26
    2962:	bb 1f       	adc	r27, r27
    2964:	2a 95       	dec	r18
    2966:	d2 f7       	brpl	.-12     	; 0x295c <process_action+0x35e>
    2968:	bc 01       	movw	r22, r24
    296a:	cd 01       	movw	r24, r26
    296c:	60 95       	com	r22
    296e:	70 95       	com	r23
    2970:	80 95       	com	r24
    2972:	90 95       	com	r25
    2974:	03 c0       	rjmp	.+6      	; 0x297c <process_action+0x37e>
    2976:	60 e0       	ldi	r22, 0x00	; 0
    2978:	70 e0       	ldi	r23, 0x00	; 0
    297a:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    297c:	16 95       	lsr	r17
    297e:	16 95       	lsr	r17
    2980:	13 70       	andi	r17, 0x03	; 3
    2982:	12 30       	cpi	r17, 0x02	; 2
    2984:	b1 f0       	breq	.+44     	; 0x29b2 <process_action+0x3b4>
    2986:	40 f5       	brcc	.+80     	; 0x29d8 <process_action+0x3da>
    2988:	6c 29       	or	r22, r12
    298a:	7d 29       	or	r23, r13
    298c:	8e 29       	or	r24, r14
    298e:	9f 29       	or	r25, r15
    2990:	11 30       	cpi	r17, 0x01	; 1
    2992:	31 f1       	breq	.+76     	; 0x29e0 <process_action+0x3e2>
            break;
#endif
        default:
            break;
    }
}
    2994:	0f 90       	pop	r0
    2996:	0f 90       	pop	r0
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	df 91       	pop	r29
    29a0:	cf 91       	pop	r28
    29a2:	1f 91       	pop	r17
    29a4:	0f 91       	pop	r16
    29a6:	ff 90       	pop	r15
    29a8:	ef 90       	pop	r14
    29aa:	df 90       	pop	r13
    29ac:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    29ae:	0c 94 b3 1b 	jmp	0x3766	; 0x3766 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    29b2:	6c 29       	or	r22, r12
    29b4:	7d 29       	or	r23, r13
    29b6:	8e 29       	or	r24, r14
    29b8:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    29ba:	0f 90       	pop	r0
    29bc:	0f 90       	pop	r0
    29be:	0f 90       	pop	r0
    29c0:	0f 90       	pop	r0
    29c2:	0f 90       	pop	r0
    29c4:	df 91       	pop	r29
    29c6:	cf 91       	pop	r28
    29c8:	1f 91       	pop	r17
    29ca:	0f 91       	pop	r16
    29cc:	ff 90       	pop	r15
    29ce:	ef 90       	pop	r14
    29d0:	df 90       	pop	r13
    29d2:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    29d4:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    29d8:	0e 94 b3 1b 	call	0x3766	; 0x3766 <layer_and>
    29dc:	c7 01       	movw	r24, r14
    29de:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	0f 90       	pop	r0
    29ea:	df 91       	pop	r29
    29ec:	cf 91       	pop	r28
    29ee:	1f 91       	pop	r17
    29f0:	0f 91       	pop	r16
    29f2:	ff 90       	pop	r15
    29f4:	ef 90       	pop	r14
    29f6:	df 90       	pop	r13
    29f8:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    29fa:	0c 94 a1 1b 	jmp	0x3742	; 0x3742 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    29fe:	00 3f       	cpi	r16, 0xF0	; 240
    2a00:	c1 f1       	breq	.+112    	; 0x2a72 <process_action+0x474>
    2a02:	28 f4       	brcc	.+10     	; 0x2a0e <process_action+0x410>
    2a04:	80 e4       	ldi	r24, 0x40	; 64
    2a06:	80 0f       	add	r24, r16
    2a08:	80 32       	cpi	r24, 0x20	; 32
    2a0a:	50 f0       	brcs	.+20     	; 0x2a20 <process_action+0x422>
    2a0c:	96 c0       	rjmp	.+300    	; 0x2b3a <process_action+0x53c>
    2a0e:	02 3f       	cpi	r16, 0xF2	; 242
    2a10:	09 f4       	brne	.+2      	; 0x2a14 <process_action+0x416>
    2a12:	5e c0       	rjmp	.+188    	; 0x2ad0 <process_action+0x4d2>
    2a14:	08 f4       	brcc	.+2      	; 0x2a18 <process_action+0x41a>
    2a16:	49 c0       	rjmp	.+146    	; 0x2aaa <process_action+0x4ac>
    2a18:	03 3f       	cpi	r16, 0xF3	; 243
    2a1a:	09 f4       	brne	.+2      	; 0x2a1e <process_action+0x420>
    2a1c:	6c c0       	rjmp	.+216    	; 0x2af6 <process_action+0x4f8>
    2a1e:	8d c0       	rjmp	.+282    	; 0x2b3a <process_action+0x53c>
    2a20:	f0 2f       	mov	r31, r16
    2a22:	f0 71       	andi	r31, 0x10	; 16
    2a24:	ef 2e       	mov	r14, r31
    2a26:	81 2f       	mov	r24, r17
    2a28:	8f 71       	andi	r24, 0x1F	; 31
                case 0xc0 ... 0xdf:
                    /* layer On/Off with modifiers */
                    if (event.pressed) {
    2a2a:	ff 20       	and	r15, r15
    2a2c:	51 f0       	breq	.+20     	; 0x2a42 <process_action+0x444>
                        layer_on(action.layer_tap.val);
    2a2e:	0e 94 3a 1b 	call	0x3674	; 0x3674 <layer_on>
                        register_mods((action.layer_tap.code & 0x10) ?
    2a32:	80 2f       	mov	r24, r16
    2a34:	ee 20       	and	r14, r14
    2a36:	19 f0       	breq	.+6      	; 0x2a3e <process_action+0x440>
    2a38:	82 95       	swap	r24
    2a3a:	80 7f       	andi	r24, 0xF0	; 240
    2a3c:	8b ce       	rjmp	.-746    	; 0x2754 <process_action+0x156>
    2a3e:	8f 70       	andi	r24, 0x0F	; 15
    2a40:	89 ce       	rjmp	.-750    	; 0x2754 <process_action+0x156>
                                (action.layer_tap.code & 0x0f) << 4 :
                                (action.layer_tap.code & 0x0f));
                    } else {
                        layer_off(action.layer_tap.val);
    2a42:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <layer_off>
                        unregister_mods((action.layer_tap.code & 0x10) ?
    2a46:	80 2f       	mov	r24, r16
    2a48:	ee 20       	and	r14, r14
    2a4a:	19 f0       	breq	.+6      	; 0x2a52 <process_action+0x454>
    2a4c:	82 95       	swap	r24
    2a4e:	80 7f       	andi	r24, 0xF0	; 240
    2a50:	01 c0       	rjmp	.+2      	; 0x2a54 <process_action+0x456>
    2a52:	8f 70       	andi	r24, 0x0F	; 15
            break;
#endif
        default:
            break;
    }
}
    2a54:	0f 90       	pop	r0
    2a56:	0f 90       	pop	r0
    2a58:	0f 90       	pop	r0
    2a5a:	0f 90       	pop	r0
    2a5c:	0f 90       	pop	r0
    2a5e:	df 91       	pop	r29
    2a60:	cf 91       	pop	r28
    2a62:	1f 91       	pop	r17
    2a64:	0f 91       	pop	r16
    2a66:	ff 90       	pop	r15
    2a68:	ef 90       	pop	r14
    2a6a:	df 90       	pop	r13
    2a6c:	cf 90       	pop	r12
                        register_mods((action.layer_tap.code & 0x10) ?
                                (action.layer_tap.code & 0x0f) << 4 :
                                (action.layer_tap.code & 0x0f));
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods((action.layer_tap.code & 0x10) ?
    2a6e:	0c 94 f8 12 	jmp	0x25f0	; 0x25f0 <unregister_mods>
                                (action.layer_tap.code & 0x0f));
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2a72:	ff 20       	and	r15, r15
    2a74:	a9 f0       	breq	.+42     	; 0x2aa0 <process_action+0x4a2>
                        if (tap_count < TAPPING_TOGGLE) {
    2a76:	84 e0       	ldi	r24, 0x04	; 4
    2a78:	8e 15       	cp	r24, r14
    2a7a:	08 f4       	brcc	.+2      	; 0x2a7e <process_action+0x480>
    2a7c:	0a c1       	rjmp	.+532    	; 0x2c92 <process_action+0x694>
                            layer_invert(action.layer_tap.val);
    2a7e:	81 2f       	mov	r24, r17
    2a80:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2a82:	0f 90       	pop	r0
    2a84:	0f 90       	pop	r0
    2a86:	0f 90       	pop	r0
    2a88:	0f 90       	pop	r0
    2a8a:	0f 90       	pop	r0
    2a8c:	df 91       	pop	r29
    2a8e:	cf 91       	pop	r28
    2a90:	1f 91       	pop	r17
    2a92:	0f 91       	pop	r16
    2a94:	ff 90       	pop	r15
    2a96:	ef 90       	pop	r14
    2a98:	df 90       	pop	r13
    2a9a:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    2a9c:	0c 94 80 1b 	jmp	0x3700	; 0x3700 <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2aa0:	e5 e0       	ldi	r30, 0x05	; 5
    2aa2:	ee 15       	cp	r30, r14
    2aa4:	08 f4       	brcc	.+2      	; 0x2aa8 <process_action+0x4aa>
    2aa6:	f5 c0       	rjmp	.+490    	; 0x2c92 <process_action+0x694>
    2aa8:	ea cf       	rjmp	.-44     	; 0x2a7e <process_action+0x480>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2aaa:	ff 20       	and	r15, r15
    2aac:	99 f0       	breq	.+38     	; 0x2ad4 <process_action+0x4d6>
    2aae:	81 2f       	mov	r24, r17
    2ab0:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2ab2:	0f 90       	pop	r0
    2ab4:	0f 90       	pop	r0
    2ab6:	0f 90       	pop	r0
    2ab8:	0f 90       	pop	r0
    2aba:	0f 90       	pop	r0
    2abc:	df 91       	pop	r29
    2abe:	cf 91       	pop	r28
    2ac0:	1f 91       	pop	r17
    2ac2:	0f 91       	pop	r16
    2ac4:	ff 90       	pop	r15
    2ac6:	ef 90       	pop	r14
    2ac8:	df 90       	pop	r13
    2aca:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2acc:	0c 94 3a 1b 	jmp	0x3674	; 0x3674 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2ad0:	ff 20       	and	r15, r15
    2ad2:	69 f3       	breq	.-38     	; 0x2aae <process_action+0x4b0>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2ad4:	81 2f       	mov	r24, r17
    2ad6:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2ad8:	0f 90       	pop	r0
    2ada:	0f 90       	pop	r0
    2adc:	0f 90       	pop	r0
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	df 91       	pop	r29
    2ae4:	cf 91       	pop	r28
    2ae6:	1f 91       	pop	r17
    2ae8:	0f 91       	pop	r16
    2aea:	ff 90       	pop	r15
    2aec:	ef 90       	pop	r14
    2aee:	df 90       	pop	r13
    2af0:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2af2:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2af6:	ff 20       	and	r15, r15
    2af8:	89 f0       	breq	.+34     	; 0x2b1c <process_action+0x51e>
    2afa:	81 2f       	mov	r24, r17
    2afc:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2afe:	0f 90       	pop	r0
    2b00:	0f 90       	pop	r0
    2b02:	0f 90       	pop	r0
    2b04:	0f 90       	pop	r0
    2b06:	0f 90       	pop	r0
    2b08:	df 91       	pop	r29
    2b0a:	cf 91       	pop	r28
    2b0c:	1f 91       	pop	r17
    2b0e:	0f 91       	pop	r16
    2b10:	ff 90       	pop	r15
    2b12:	ef 90       	pop	r14
    2b14:	df 90       	pop	r13
    2b16:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2b18:	0c 94 25 1b 	jmp	0x364a	; 0x364a <layer_move>
            break;
#endif
        default:
            break;
    }
}
    2b1c:	0f 90       	pop	r0
    2b1e:	0f 90       	pop	r0
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	df 91       	pop	r29
    2b28:	cf 91       	pop	r28
    2b2a:	1f 91       	pop	r17
    2b2c:	0f 91       	pop	r16
    2b2e:	ff 90       	pop	r15
    2b30:	ef 90       	pop	r14
    2b32:	df 90       	pop	r13
    2b34:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2b36:	0c 94 20 1b 	jmp	0x3640	; 0x3640 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2b3a:	ff 20       	and	r15, r15
    2b3c:	99 f0       	breq	.+38     	; 0x2b64 <process_action+0x566>
                        if (tap_count > 0) {
    2b3e:	ee 20       	and	r14, r14
    2b40:	09 f4       	brne	.+2      	; 0x2b44 <process_action+0x546>
    2b42:	b5 cf       	rjmp	.-150    	; 0x2aae <process_action+0x4b0>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2b44:	80 2f       	mov	r24, r16
            break;
#endif
        default:
            break;
    }
}
    2b46:	0f 90       	pop	r0
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	0f 90       	pop	r0
    2b4e:	0f 90       	pop	r0
    2b50:	df 91       	pop	r29
    2b52:	cf 91       	pop	r28
    2b54:	1f 91       	pop	r17
    2b56:	0f 91       	pop	r16
    2b58:	ff 90       	pop	r15
    2b5a:	ef 90       	pop	r14
    2b5c:	df 90       	pop	r13
    2b5e:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2b60:	0c 94 99 11 	jmp	0x2332	; 0x2332 <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    2b64:	ee 20       	and	r14, r14
    2b66:	09 f4       	brne	.+2      	; 0x2b6a <process_action+0x56c>
    2b68:	b5 cf       	rjmp	.-150    	; 0x2ad4 <process_action+0x4d6>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2b6a:	80 2f       	mov	r24, r16
            break;
#endif
        default:
            break;
    }
}
    2b6c:	0f 90       	pop	r0
    2b6e:	0f 90       	pop	r0
    2b70:	0f 90       	pop	r0
    2b72:	0f 90       	pop	r0
    2b74:	0f 90       	pop	r0
    2b76:	df 91       	pop	r29
    2b78:	cf 91       	pop	r28
    2b7a:	1f 91       	pop	r17
    2b7c:	0f 91       	pop	r16
    2b7e:	ff 90       	pop	r15
    2b80:	ef 90       	pop	r14
    2b82:	df 90       	pop	r13
    2b84:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2b86:	0c 94 87 12 	jmp	0x250e	; 0x250e <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2b8a:	41 2f       	mov	r20, r17
    2b8c:	4f 70       	andi	r20, 0x0F	; 15
    2b8e:	60 2f       	mov	r22, r16
    2b90:	c6 01       	movw	r24, r12
    2b92:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    2b96:	0f 90       	pop	r0
    2b98:	0f 90       	pop	r0
    2b9a:	0f 90       	pop	r0
    2b9c:	0f 90       	pop	r0
    2b9e:	0f 90       	pop	r0
    2ba0:	df 91       	pop	r29
    2ba2:	cf 91       	pop	r28
    2ba4:	1f 91       	pop	r17
    2ba6:	0f 91       	pop	r16
    2ba8:	ff 90       	pop	r15
    2baa:	ef 90       	pop	r14
    2bac:	df 90       	pop	r13
    2bae:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2bb0:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <action_macro_play>
            break;
#endif
#ifdef BACKLIGHT_ENABLE
        case ACT_BACKLIGHT:
            if (!event.pressed) {
    2bb4:	f1 10       	cpse	r15, r1
    2bb6:	6d c0       	rjmp	.+218    	; 0x2c92 <process_action+0x694>
                switch (action.backlight.opt) {
    2bb8:	1f 70       	andi	r17, 0x0F	; 15
    2bba:	12 30       	cpi	r17, 0x02	; 2
    2bbc:	c9 f1       	breq	.+114    	; 0x2c30 <process_action+0x632>
    2bbe:	a0 f4       	brcc	.+40     	; 0x2be8 <process_action+0x5ea>
    2bc0:	11 23       	and	r17, r17
    2bc2:	39 f1       	breq	.+78     	; 0x2c12 <process_action+0x614>
    2bc4:	11 30       	cpi	r17, 0x01	; 1
    2bc6:	09 f0       	breq	.+2      	; 0x2bca <process_action+0x5cc>
    2bc8:	64 c0       	rjmp	.+200    	; 0x2c92 <process_action+0x694>
            break;
#endif
        default:
            break;
    }
}
    2bca:	0f 90       	pop	r0
    2bcc:	0f 90       	pop	r0
    2bce:	0f 90       	pop	r0
    2bd0:	0f 90       	pop	r0
    2bd2:	0f 90       	pop	r0
    2bd4:	df 91       	pop	r29
    2bd6:	cf 91       	pop	r28
    2bd8:	1f 91       	pop	r17
    2bda:	0f 91       	pop	r16
    2bdc:	ff 90       	pop	r15
    2bde:	ef 90       	pop	r14
    2be0:	df 90       	pop	r13
    2be2:	cf 90       	pop	r12
                switch (action.backlight.opt) {
                    case BACKLIGHT_INCREASE:
                        backlight_increase();
                        break;
                    case BACKLIGHT_DECREASE:
                        backlight_decrease();
    2be4:	0c 94 f4 29 	jmp	0x53e8	; 0x53e8 <backlight_decrease>
            break;
#endif
#ifdef BACKLIGHT_ENABLE
        case ACT_BACKLIGHT:
            if (!event.pressed) {
                switch (action.backlight.opt) {
    2be8:	13 30       	cpi	r17, 0x03	; 3
    2bea:	89 f1       	breq	.+98     	; 0x2c4e <process_action+0x650>
    2bec:	14 30       	cpi	r17, 0x04	; 4
    2bee:	09 f0       	breq	.+2      	; 0x2bf2 <process_action+0x5f4>
    2bf0:	50 c0       	rjmp	.+160    	; 0x2c92 <process_action+0x694>
                        break;
                    case BACKLIGHT_STEP:
                        backlight_step();
                        break;
                    case BACKLIGHT_LEVEL:
                        backlight_level(action.backlight.level);
    2bf2:	80 2f       	mov	r24, r16
            break;
#endif
        default:
            break;
    }
}
    2bf4:	0f 90       	pop	r0
    2bf6:	0f 90       	pop	r0
    2bf8:	0f 90       	pop	r0
    2bfa:	0f 90       	pop	r0
    2bfc:	0f 90       	pop	r0
    2bfe:	df 91       	pop	r29
    2c00:	cf 91       	pop	r28
    2c02:	1f 91       	pop	r17
    2c04:	0f 91       	pop	r16
    2c06:	ff 90       	pop	r15
    2c08:	ef 90       	pop	r14
    2c0a:	df 90       	pop	r13
    2c0c:	cf 90       	pop	r12
                        break;
                    case BACKLIGHT_STEP:
                        backlight_step();
                        break;
                    case BACKLIGHT_LEVEL:
                        backlight_level(action.backlight.level);
    2c0e:	0c 94 7f 2a 	jmp	0x54fe	; 0x54fe <backlight_level>
            break;
#endif
        default:
            break;
    }
}
    2c12:	0f 90       	pop	r0
    2c14:	0f 90       	pop	r0
    2c16:	0f 90       	pop	r0
    2c18:	0f 90       	pop	r0
    2c1a:	0f 90       	pop	r0
    2c1c:	df 91       	pop	r29
    2c1e:	cf 91       	pop	r28
    2c20:	1f 91       	pop	r17
    2c22:	0f 91       	pop	r16
    2c24:	ff 90       	pop	r15
    2c26:	ef 90       	pop	r14
    2c28:	df 90       	pop	r13
    2c2a:	cf 90       	pop	r12
#ifdef BACKLIGHT_ENABLE
        case ACT_BACKLIGHT:
            if (!event.pressed) {
                switch (action.backlight.opt) {
                    case BACKLIGHT_INCREASE:
                        backlight_increase();
    2c2c:	0c 94 d0 29 	jmp	0x53a0	; 0x53a0 <backlight_increase>
            break;
#endif
        default:
            break;
    }
}
    2c30:	0f 90       	pop	r0
    2c32:	0f 90       	pop	r0
    2c34:	0f 90       	pop	r0
    2c36:	0f 90       	pop	r0
    2c38:	0f 90       	pop	r0
    2c3a:	df 91       	pop	r29
    2c3c:	cf 91       	pop	r28
    2c3e:	1f 91       	pop	r17
    2c40:	0f 91       	pop	r16
    2c42:	ff 90       	pop	r15
    2c44:	ef 90       	pop	r14
    2c46:	df 90       	pop	r13
    2c48:	cf 90       	pop	r12
                        break;
                    case BACKLIGHT_DECREASE:
                        backlight_decrease();
                        break;
                    case BACKLIGHT_TOGGLE:
                        backlight_toggle();
    2c4a:	0c 94 23 2a 	jmp	0x5446	; 0x5446 <backlight_toggle>
            break;
#endif
        default:
            break;
    }
}
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	0f 90       	pop	r0
    2c56:	0f 90       	pop	r0
    2c58:	df 91       	pop	r29
    2c5a:	cf 91       	pop	r28
    2c5c:	1f 91       	pop	r17
    2c5e:	0f 91       	pop	r16
    2c60:	ff 90       	pop	r15
    2c62:	ef 90       	pop	r14
    2c64:	df 90       	pop	r13
    2c66:	cf 90       	pop	r12
                        break;
                    case BACKLIGHT_TOGGLE:
                        backlight_toggle();
                        break;
                    case BACKLIGHT_STEP:
                        backlight_step();
    2c68:	0c 94 49 2a 	jmp	0x5492	; 0x5492 <backlight_step>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2c6c:	41 2f       	mov	r20, r17
    2c6e:	4f 70       	andi	r20, 0x0F	; 15
    2c70:	60 2f       	mov	r22, r16
    2c72:	c6 01       	movw	r24, r12
            break;
#endif
        default:
            break;
    }
}
    2c74:	0f 90       	pop	r0
    2c76:	0f 90       	pop	r0
    2c78:	0f 90       	pop	r0
    2c7a:	0f 90       	pop	r0
    2c7c:	0f 90       	pop	r0
    2c7e:	df 91       	pop	r29
    2c80:	cf 91       	pop	r28
    2c82:	1f 91       	pop	r17
    2c84:	0f 91       	pop	r16
    2c86:	ff 90       	pop	r15
    2c88:	ef 90       	pop	r14
    2c8a:	df 90       	pop	r13
    2c8c:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2c8e:	0c 94 35 1f 	jmp	0x3e6a	; 0x3e6a <action_function>
            break;
#endif
        default:
            break;
    }
}
    2c92:	0f 90       	pop	r0
    2c94:	0f 90       	pop	r0
    2c96:	0f 90       	pop	r0
    2c98:	0f 90       	pop	r0
    2c9a:	0f 90       	pop	r0
    2c9c:	df 91       	pop	r29
    2c9e:	cf 91       	pop	r28
    2ca0:	1f 91       	pop	r17
    2ca2:	0f 91       	pop	r16
    2ca4:	ff 90       	pop	r15
    2ca6:	ef 90       	pop	r14
    2ca8:	df 90       	pop	r13
    2caa:	cf 90       	pop	r12
    2cac:	08 95       	ret

00002cae <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2cae:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <clear_weak_mods>
    clear_keys();
    2cb2:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <clear_keys>
    send_keyboard_report();
    2cb6:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2cba:	0e 94 51 24 	call	0x48a2	; 0x48a2 <mousekey_clear>
    mousekey_send();
    2cbe:	0e 94 1f 23 	call	0x463e	; 0x463e <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	0e 94 46 10 	call	0x208c	; 0x208c <host_system_send>
    host_consumer_send(0);
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	0c 94 73 10 	jmp	0x20e6	; 0x20e6 <host_consumer_send>

00002cd2 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2cd2:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <clear_mods>
    clear_keyboard_but_mods();
    2cd6:	0c 94 57 16 	jmp	0x2cae	; 0x2cae <clear_keyboard_but_mods>

00002cda <is_tap_key>:
    host_consumer_send(0);
#endif
}

bool is_tap_key(keyevent_t event)
{
    2cda:	1f 93       	push	r17
    2cdc:	cf 93       	push	r28
    2cde:	df 93       	push	r29
    2ce0:	00 d0       	rcall	.+0      	; 0x2ce2 <is_tap_key+0x8>
    2ce2:	00 d0       	rcall	.+0      	; 0x2ce4 <is_tap_key+0xa>
    2ce4:	1f 92       	push	r1
    2ce6:	cd b7       	in	r28, 0x3d	; 61
    2ce8:	de b7       	in	r29, 0x3e	; 62
    2cea:	94 2f       	mov	r25, r20
    2cec:	49 83       	std	Y+1, r20	; 0x01
    2cee:	25 2f       	mov	r18, r21
    2cf0:	5a 83       	std	Y+2, r21	; 0x02
    2cf2:	6b 83       	std	Y+3, r22	; 0x03
    2cf4:	7c 83       	std	Y+4, r23	; 0x04
    2cf6:	8d 83       	std	Y+5, r24	; 0x05
    2cf8:	4c 81       	ldd	r20, Y+4	; 0x04
    2cfa:	5d 81       	ldd	r21, Y+5	; 0x05
    2cfc:	45 2b       	or	r20, r21
    2cfe:	31 f0       	breq	.+12     	; 0x2d0c <is_tap_key+0x32>
    2d00:	2f 3f       	cpi	r18, 0xFF	; 255
    2d02:	31 f4       	brne	.+12     	; 0x2d10 <is_tap_key+0x36>
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	9f 3f       	cpi	r25, 0xFF	; 255
    2d08:	19 f4       	brne	.+6      	; 0x2d10 <is_tap_key+0x36>
    2d0a:	03 c0       	rjmp	.+6      	; 0x2d12 <is_tap_key+0x38>
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	01 c0       	rjmp	.+2      	; 0x2d12 <is_tap_key+0x38>
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    if (IS_NOEVENT(event)) { return false; }
    2d12:	18 2f       	mov	r17, r24
    2d14:	11 70       	andi	r17, 0x01	; 1
    2d16:	80 fd       	sbrc	r24, 0
    2d18:	31 c0       	rjmp	.+98     	; 0x2d7c <is_tap_key+0xa2>

    action_t action = layer_switch_get_action(event);
    2d1a:	49 81       	ldd	r20, Y+1	; 0x01
    2d1c:	5a 81       	ldd	r21, Y+2	; 0x02
    2d1e:	6b 81       	ldd	r22, Y+3	; 0x03
    2d20:	7c 81       	ldd	r23, Y+4	; 0x04
    2d22:	8d 81       	ldd	r24, Y+5	; 0x05
    2d24:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <layer_switch_get_action>

    switch (action.kind.id) {
    2d28:	29 2f       	mov	r18, r25
    2d2a:	22 95       	swap	r18
    2d2c:	2f 70       	andi	r18, 0x0F	; 15
    2d2e:	2c 30       	cpi	r18, 0x0C	; 12
    2d30:	30 f4       	brcc	.+12     	; 0x2d3e <is_tap_key+0x64>
    2d32:	2a 30       	cpi	r18, 0x0A	; 10
    2d34:	a0 f4       	brcc	.+40     	; 0x2d5e <is_tap_key+0x84>
    2d36:	22 50       	subi	r18, 0x02	; 2
    2d38:	22 30       	cpi	r18, 0x02	; 2
    2d3a:	30 f0       	brcs	.+12     	; 0x2d48 <is_tap_key+0x6e>
    2d3c:	22 c0       	rjmp	.+68     	; 0x2d82 <is_tap_key+0xa8>
    2d3e:	2c 30       	cpi	r18, 0x0C	; 12
    2d40:	c9 f0       	breq	.+50     	; 0x2d74 <is_tap_key+0x9a>
    2d42:	2f 30       	cpi	r18, 0x0F	; 15
    2d44:	b9 f0       	breq	.+46     	; 0x2d74 <is_tap_key+0x9a>
    2d46:	1d c0       	rjmp	.+58     	; 0x2d82 <is_tap_key+0xa8>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            switch (action.key.code) {
    2d48:	85 3a       	cpi	r24, 0xA5	; 165
    2d4a:	28 f4       	brcc	.+10     	; 0x2d56 <is_tap_key+0x7c>
    2d4c:	84 30       	cpi	r24, 0x04	; 4
    2d4e:	c0 f4       	brcc	.+48     	; 0x2d80 <is_tap_key+0xa6>
    2d50:	82 30       	cpi	r24, 0x02	; 2
    2d52:	28 f4       	brcc	.+10     	; 0x2d5e <is_tap_key+0x84>
    2d54:	15 c0       	rjmp	.+42     	; 0x2d80 <is_tap_key+0xa6>
    2d56:	90 e2       	ldi	r25, 0x20	; 32
    2d58:	98 0f       	add	r25, r24
    2d5a:	98 30       	cpi	r25, 0x08	; 8
    2d5c:	88 f0       	brcs	.+34     	; 0x2d80 <is_tap_key+0xa6>
                case KC_LCTRL ... KC_RGUI:              // tap key
                    return true;
            }
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2d5e:	88 3e       	cpi	r24, 0xE8	; 232
    2d60:	30 f4       	brcc	.+12     	; 0x2d6e <is_tap_key+0x94>
    2d62:	80 3e       	cpi	r24, 0xE0	; 224
    2d64:	68 f4       	brcc	.+26     	; 0x2d80 <is_tap_key+0xa6>
    2d66:	84 50       	subi	r24, 0x04	; 4
    2d68:	81 3a       	cpi	r24, 0xA1	; 161
    2d6a:	58 f4       	brcc	.+22     	; 0x2d82 <is_tap_key+0xa8>
    2d6c:	09 c0       	rjmp	.+18     	; 0x2d80 <is_tap_key+0xa6>
    2d6e:	80 3f       	cpi	r24, 0xF0	; 240
    2d70:	41 f4       	brne	.+16     	; 0x2d82 <is_tap_key+0xa8>
    2d72:	06 c0       	rjmp	.+12     	; 0x2d80 <is_tap_key+0xa6>
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2d74:	93 fb       	bst	r25, 3
    2d76:	11 27       	eor	r17, r17
    2d78:	10 f9       	bld	r17, 0
    2d7a:	03 c0       	rjmp	.+6      	; 0x2d82 <is_tap_key+0xa8>
#endif
}

bool is_tap_key(keyevent_t event)
{
    if (IS_NOEVENT(event)) { return false; }
    2d7c:	10 e0       	ldi	r17, 0x00	; 0
    2d7e:	01 c0       	rjmp	.+2      	; 0x2d82 <is_tap_key+0xa8>
            switch (action.key.code) {
                case MODS_ONESHOT:
                case MODS_TAP_TOGGLE:
                case KC_A ... KC_EXSEL:                 // tap key
                case KC_LCTRL ... KC_RGUI:              // tap key
                    return true;
    2d80:	11 e0       	ldi	r17, 0x01	; 1
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2d82:	81 2f       	mov	r24, r17
    2d84:	0f 90       	pop	r0
    2d86:	0f 90       	pop	r0
    2d88:	0f 90       	pop	r0
    2d8a:	0f 90       	pop	r0
    2d8c:	0f 90       	pop	r0
    2d8e:	df 91       	pop	r29
    2d90:	cf 91       	pop	r28
    2d92:	1f 91       	pop	r17
    2d94:	08 95       	ret

00002d96 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2d96:	cf 93       	push	r28
    2d98:	df 93       	push	r29
    2d9a:	00 d0       	rcall	.+0      	; 0x2d9c <debug_event+0x6>
    2d9c:	00 d0       	rcall	.+0      	; 0x2d9e <debug_event+0x8>
    2d9e:	1f 92       	push	r1
    2da0:	cd b7       	in	r28, 0x3d	; 61
    2da2:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2da4:	0f 90       	pop	r0
    2da6:	0f 90       	pop	r0
    2da8:	0f 90       	pop	r0
    2daa:	0f 90       	pop	r0
    2dac:	0f 90       	pop	r0
    2dae:	df 91       	pop	r29
    2db0:	cf 91       	pop	r28
    2db2:	08 95       	ret

00002db4 <debug_record>:

void debug_record(keyrecord_t record)
{
    2db4:	cf 93       	push	r28
    2db6:	df 93       	push	r29
    2db8:	00 d0       	rcall	.+0      	; 0x2dba <debug_record+0x6>
    2dba:	00 d0       	rcall	.+0      	; 0x2dbc <debug_record+0x8>
    2dbc:	00 d0       	rcall	.+0      	; 0x2dbe <debug_record+0xa>
    2dbe:	cd b7       	in	r28, 0x3d	; 61
    2dc0:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2dc2:	26 96       	adiw	r28, 0x06	; 6
    2dc4:	0f b6       	in	r0, 0x3f	; 63
    2dc6:	f8 94       	cli
    2dc8:	de bf       	out	0x3e, r29	; 62
    2dca:	0f be       	out	0x3f, r0	; 63
    2dcc:	cd bf       	out	0x3d, r28	; 61
    2dce:	df 91       	pop	r29
    2dd0:	cf 91       	pop	r28
    2dd2:	08 95       	ret

00002dd4 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2dd4:	1f 93       	push	r17
    2dd6:	cf 93       	push	r28
    2dd8:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2dda:	c0 91 73 01 	lds	r28, 0x0173	; 0x800173 <waiting_buffer_tail>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2dde:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2de0:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <waiting_buffer_head>
    2de4:	c8 17       	cp	r28, r24
    2de6:	99 f0       	breq	.+38     	; 0x2e0e <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2de8:	d0 e0       	ldi	r29, 0x00	; 0
    2dea:	1c 9f       	mul	r17, r28
    2dec:	f0 01       	movw	r30, r0
    2dee:	1d 9f       	mul	r17, r29
    2df0:	f0 0d       	add	r31, r0
    2df2:	11 24       	eor	r1, r1
    2df4:	eb 58       	subi	r30, 0x8B	; 139
    2df6:	fe 4f       	sbci	r31, 0xFE	; 254
    2df8:	40 81       	ld	r20, Z
    2dfa:	51 81       	ldd	r21, Z+1	; 0x01
    2dfc:	62 81       	ldd	r22, Z+2	; 0x02
    2dfe:	73 81       	ldd	r23, Z+3	; 0x03
    2e00:	84 81       	ldd	r24, Z+4	; 0x04
    2e02:	95 81       	ldd	r25, Z+5	; 0x05
    2e04:	0e 94 da 16 	call	0x2db4	; 0x2db4 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e08:	21 96       	adiw	r28, 0x01	; 1
    2e0a:	c7 70       	andi	r28, 0x07	; 7
    2e0c:	e9 cf       	rjmp	.-46     	; 0x2de0 <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2e0e:	df 91       	pop	r29
    2e10:	cf 91       	pop	r28
    2e12:	1f 91       	pop	r17
    2e14:	08 95       	ret

00002e16 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2e16:	40 91 a5 01 	lds	r20, 0x01A5	; 0x8001a5 <tapping_key>
    2e1a:	50 91 a6 01 	lds	r21, 0x01A6	; 0x8001a6 <tapping_key+0x1>
    2e1e:	60 91 a7 01 	lds	r22, 0x01A7	; 0x8001a7 <tapping_key+0x2>
    2e22:	70 91 a8 01 	lds	r23, 0x01A8	; 0x8001a8 <tapping_key+0x3>
    2e26:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <tapping_key+0x4>
    2e2a:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <tapping_key+0x5>
    2e2e:	0c 94 da 16 	jmp	0x2db4	; 0x2db4 <debug_record>

00002e32 <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    2e32:	cf 93       	push	r28
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2e34:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <tapping_key+0x5>
    2e38:	82 95       	swap	r24
    2e3a:	8f 70       	andi	r24, 0x0F	; 15
    2e3c:	09 f0       	breq	.+2      	; 0x2e40 <waiting_buffer_scan_tap+0xe>
    2e3e:	5f c0       	rjmp	.+190    	; 0x2efe <waiting_buffer_scan_tap+0xcc>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2e40:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <tapping_key+0x2>
    2e44:	88 23       	and	r24, r24
    2e46:	09 f4       	brne	.+2      	; 0x2e4a <waiting_buffer_scan_tap+0x18>
    2e48:	5a c0       	rjmp	.+180    	; 0x2efe <waiting_buffer_scan_tap+0xcc>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e4a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <waiting_buffer_tail>
    2e4e:	b0 91 74 01 	lds	r27, 0x0174	; 0x800174 <waiting_buffer_head>
    2e52:	70 91 a5 01 	lds	r23, 0x01A5	; 0x8001a5 <tapping_key>
    2e56:	a0 91 a6 01 	lds	r26, 0x01A6	; 0x8001a6 <tapping_key+0x1>
    2e5a:	40 91 a8 01 	lds	r20, 0x01A8	; 0x8001a8 <tapping_key+0x3>
    2e5e:	50 91 a9 01 	lds	r21, 0x01A9	; 0x8001a9 <tapping_key+0x4>
    2e62:	91 e0       	ldi	r25, 0x01	; 1
    2e64:	7f 3f       	cpi	r23, 0xFF	; 255
    2e66:	09 f0       	breq	.+2      	; 0x2e6a <waiting_buffer_scan_tap+0x38>
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	69 2f       	mov	r22, r25
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2e6c:	c6 e0       	ldi	r28, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e6e:	8b 17       	cp	r24, r27
    2e70:	09 f4       	brne	.+2      	; 0x2e74 <waiting_buffer_scan_tap+0x42>
    2e72:	45 c0       	rjmp	.+138    	; 0x2efe <waiting_buffer_scan_tap+0xcc>
    2e74:	41 15       	cp	r20, r1
    2e76:	51 05       	cpc	r21, r1
    2e78:	21 f0       	breq	.+8      	; 0x2e82 <waiting_buffer_scan_tap+0x50>
    2e7a:	af 3f       	cpi	r26, 0xFF	; 255
    2e7c:	21 f0       	breq	.+8      	; 0x2e86 <waiting_buffer_scan_tap+0x54>
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	03 c0       	rjmp	.+6      	; 0x2e88 <waiting_buffer_scan_tap+0x56>
    2e82:	21 e0       	ldi	r18, 0x01	; 1
    2e84:	01 c0       	rjmp	.+2      	; 0x2e88 <waiting_buffer_scan_tap+0x56>
    2e86:	26 2f       	mov	r18, r22
    2e88:	90 e0       	ldi	r25, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2e8a:	20 fd       	sbrc	r18, 0
    2e8c:	35 c0       	rjmp	.+106    	; 0x2ef8 <waiting_buffer_scan_tap+0xc6>
    2e8e:	c8 9f       	mul	r28, r24
    2e90:	f0 01       	movw	r30, r0
    2e92:	c9 9f       	mul	r28, r25
    2e94:	f0 0d       	add	r31, r0
    2e96:	11 24       	eor	r1, r1
    2e98:	eb 58       	subi	r30, 0x8B	; 139
    2e9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e9c:	21 81       	ldd	r18, Z+1	; 0x01
    2e9e:	2a 13       	cpse	r18, r26
    2ea0:	2b c0       	rjmp	.+86     	; 0x2ef8 <waiting_buffer_scan_tap+0xc6>
    2ea2:	20 81       	ld	r18, Z
    2ea4:	27 13       	cpse	r18, r23
    2ea6:	28 c0       	rjmp	.+80     	; 0x2ef8 <waiting_buffer_scan_tap+0xc6>
    2ea8:	22 81       	ldd	r18, Z+2	; 0x02
    2eaa:	21 11       	cpse	r18, r1
    2eac:	25 c0       	rjmp	.+74     	; 0x2ef8 <waiting_buffer_scan_tap+0xc6>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2eae:	23 81       	ldd	r18, Z+3	; 0x03
    2eb0:	34 81       	ldd	r19, Z+4	; 0x04
    2eb2:	24 17       	cp	r18, r20
    2eb4:	35 07       	cpc	r19, r21
    2eb6:	10 f4       	brcc	.+4      	; 0x2ebc <waiting_buffer_scan_tap+0x8a>
    2eb8:	21 50       	subi	r18, 0x01	; 1
    2eba:	31 09       	sbc	r19, r1
    2ebc:	24 1b       	sub	r18, r20
    2ebe:	35 0b       	sbc	r19, r21
    2ec0:	28 3c       	cpi	r18, 0xC8	; 200
    2ec2:	31 05       	cpc	r19, r1
    2ec4:	c8 f4       	brcc	.+50     	; 0x2ef8 <waiting_buffer_scan_tap+0xc6>
            tapping_key.tap.count = 1;
    2ec6:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <tapping_key+0x5>
    2eca:	2f 70       	andi	r18, 0x0F	; 15
    2ecc:	20 61       	ori	r18, 0x10	; 16
    2ece:	20 93 aa 01 	sts	0x01AA, r18	; 0x8001aa <tapping_key+0x5>
            waiting_buffer[i].tap.count = 1;
    2ed2:	26 e0       	ldi	r18, 0x06	; 6
    2ed4:	28 9f       	mul	r18, r24
    2ed6:	f0 01       	movw	r30, r0
    2ed8:	29 9f       	mul	r18, r25
    2eda:	f0 0d       	add	r31, r0
    2edc:	11 24       	eor	r1, r1
    2ede:	e6 58       	subi	r30, 0x86	; 134
    2ee0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ee2:	80 81       	ld	r24, Z
    2ee4:	8f 70       	andi	r24, 0x0F	; 15
    2ee6:	80 61       	ori	r24, 0x10	; 16
    2ee8:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2eea:	85 ea       	ldi	r24, 0xA5	; 165
    2eec:	91 e0       	ldi	r25, 0x01	; 1
    2eee:	0e 94 ff 12 	call	0x25fe	; 0x25fe <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2ef2:	cf 91       	pop	r28
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    2ef4:	0c 94 ea 16 	jmp	0x2dd4	; 0x2dd4 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2ef8:	01 96       	adiw	r24, 0x01	; 1
    2efa:	87 70       	andi	r24, 0x07	; 7
    2efc:	b8 cf       	rjmp	.-144    	; 0x2e6e <waiting_buffer_scan_tap+0x3c>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2efe:	cf 91       	pop	r28
    2f00:	08 95       	ret

00002f02 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    2f02:	af 92       	push	r10
    2f04:	bf 92       	push	r11
    2f06:	cf 92       	push	r12
    2f08:	df 92       	push	r13
    2f0a:	ef 92       	push	r14
    2f0c:	ff 92       	push	r15
    2f0e:	0f 93       	push	r16
    2f10:	1f 93       	push	r17
    2f12:	cf 93       	push	r28
    2f14:	df 93       	push	r29
    2f16:	cd b7       	in	r28, 0x3d	; 61
    2f18:	de b7       	in	r29, 0x3e	; 62
    2f1a:	61 97       	sbiw	r28, 0x11	; 17
    2f1c:	0f b6       	in	r0, 0x3f	; 63
    2f1e:	f8 94       	cli
    2f20:	de bf       	out	0x3e, r29	; 62
    2f22:	0f be       	out	0x3f, r0	; 63
    2f24:	cd bf       	out	0x3d, r28	; 61
    2f26:	7c 01       	movw	r14, r24
    keyevent_t event = keyp->event;
    2f28:	85 e0       	ldi	r24, 0x05	; 5
    2f2a:	f7 01       	movw	r30, r14
    2f2c:	de 01       	movw	r26, r28
    2f2e:	1d 96       	adiw	r26, 0x0d	; 13
    2f30:	01 90       	ld	r0, Z+
    2f32:	0d 92       	st	X+, r0
    2f34:	8a 95       	dec	r24
    2f36:	e1 f7       	brne	.-8      	; 0x2f30 <process_tapping+0x2e>
    2f38:	d7 01       	movw	r26, r14
    2f3a:	4c 91       	ld	r20, X
    2f3c:	11 96       	adiw	r26, 0x01	; 1
    2f3e:	5c 91       	ld	r21, X
    2f40:	11 97       	sbiw	r26, 0x01	; 1
    2f42:	12 96       	adiw	r26, 0x02	; 2
    2f44:	dc 90       	ld	r13, X
    2f46:	12 97       	sbiw	r26, 0x02	; 2
    2f48:	13 96       	adiw	r26, 0x03	; 3
    2f4a:	0d 91       	ld	r16, X+
    2f4c:	1c 91       	ld	r17, X
    2f4e:	14 97       	sbiw	r26, 0x04	; 4
    2f50:	30 91 a5 01 	lds	r19, 0x01A5	; 0x8001a5 <tapping_key>
    2f54:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <tapping_key+0x1>
    2f58:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <tapping_key+0x3>
    2f5c:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <tapping_key+0x4>
    2f60:	00 97       	sbiw	r24, 0x00	; 0
    2f62:	31 f0       	breq	.+12     	; 0x2f70 <process_tapping+0x6e>
    2f64:	6f 3f       	cpi	r22, 0xFF	; 255
    2f66:	31 f4       	brne	.+12     	; 0x2f74 <process_tapping+0x72>
    2f68:	21 e0       	ldi	r18, 0x01	; 1
    2f6a:	3f 3f       	cpi	r19, 0xFF	; 255
    2f6c:	19 f4       	brne	.+6      	; 0x2f74 <process_tapping+0x72>
    2f6e:	03 c0       	rjmp	.+6      	; 0x2f76 <process_tapping+0x74>
    2f70:	21 e0       	ldi	r18, 0x01	; 1
    2f72:	01 c0       	rjmp	.+2      	; 0x2f76 <process_tapping+0x74>
    2f74:	20 e0       	ldi	r18, 0x00	; 0

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2f76:	b2 2f       	mov	r27, r18
    2f78:	b1 70       	andi	r27, 0x01	; 1
    2f7a:	bb 2e       	mov	r11, r27
    2f7c:	20 fd       	sbrc	r18, 0
    2f7e:	6e c1       	rjmp	.+732    	; 0x325c <process_tapping+0x35a>
    2f80:	a0 90 a7 01 	lds	r10, 0x01A7	; 0x8001a7 <tapping_key+0x2>
    2f84:	aa 20       	and	r10, r10
    2f86:	09 f4       	brne	.+2      	; 0x2f8a <process_tapping+0x88>
    2f88:	cc c0       	rjmp	.+408    	; 0x3122 <process_tapping+0x220>
    2f8a:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <tapping_key+0x5>
        if (WITHIN_TAPPING_TERM(event)) {
    2f8e:	08 17       	cp	r16, r24
    2f90:	19 07       	cpc	r17, r25
    2f92:	28 f0       	brcs	.+10     	; 0x2f9e <process_tapping+0x9c>
    2f94:	f8 01       	movw	r30, r16
    2f96:	e8 1b       	sub	r30, r24
    2f98:	f9 0b       	sbc	r31, r25
    2f9a:	cf 01       	movw	r24, r30
    2f9c:	04 c0       	rjmp	.+8      	; 0x2fa6 <process_tapping+0xa4>
    2f9e:	80 95       	com	r24
    2fa0:	90 95       	com	r25
    2fa2:	80 0f       	add	r24, r16
    2fa4:	91 1f       	adc	r25, r17
    2fa6:	cc 24       	eor	r12, r12
    2fa8:	c3 94       	inc	r12
    2faa:	88 3c       	cpi	r24, 0xC8	; 200
    2fac:	91 05       	cpc	r25, r1
    2fae:	80 f0       	brcs	.+32     	; 0x2fd0 <process_tapping+0xce>
    2fb0:	c1 2c       	mov	r12, r1
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    2fb2:	20 7f       	andi	r18, 0xF0	; 240
    2fb4:	09 f0       	breq	.+2      	; 0x2fb8 <process_tapping+0xb6>
    2fb6:	a1 c0       	rjmp	.+322    	; 0x30fa <process_tapping+0x1f8>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    2fb8:	70 2f       	mov	r23, r16
    2fba:	19 8b       	std	Y+17, r17	; 0x11
    2fbc:	08 8b       	std	Y+16, r16	; 0x10
    2fbe:	6d 2d       	mov	r22, r13
    2fc0:	89 89       	ldd	r24, Y+17	; 0x11
    2fc2:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <debug_event>
                process_action(&tapping_key);
    2fc6:	85 ea       	ldi	r24, 0xA5	; 165
    2fc8:	91 e0       	ldi	r25, 0x01	; 1
    2fca:	0e 94 ff 12 	call	0x25fe	; 0x25fe <process_action>
    2fce:	bd c0       	rjmp	.+378    	; 0x314a <process_tapping+0x248>
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
    2fd0:	82 2f       	mov	r24, r18
    2fd2:	80 7f       	andi	r24, 0xF0	; 240
    2fd4:	09 f0       	breq	.+2      	; 0x2fd8 <process_tapping+0xd6>
    2fd6:	56 c0       	rjmp	.+172    	; 0x3084 <process_tapping+0x182>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2fd8:	56 13       	cpse	r21, r22
    2fda:	15 c0       	rjmp	.+42     	; 0x3006 <process_tapping+0x104>
    2fdc:	43 13       	cpse	r20, r19
    2fde:	13 c0       	rjmp	.+38     	; 0x3006 <process_tapping+0x104>
    2fe0:	cd 2c       	mov	r12, r13
    2fe2:	d1 10       	cpse	r13, r1
    2fe4:	10 c0       	rjmp	.+32     	; 0x3006 <process_tapping+0x104>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    2fe6:	2f 70       	andi	r18, 0x0F	; 15
    2fe8:	20 61       	ori	r18, 0x10	; 16
    2fea:	20 93 aa 01 	sts	0x01AA, r18	; 0x8001aa <tapping_key+0x5>
                    debug_tapping_key();
    2fee:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <debug_tapping_key>
                    process_action(&tapping_key);
    2ff2:	85 ea       	ldi	r24, 0xA5	; 165
    2ff4:	91 e0       	ldi	r25, 0x01	; 1
    2ff6:	0e 94 ff 12 	call	0x25fe	; 0x25fe <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    2ffa:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <tapping_key+0x5>
    2ffe:	d7 01       	movw	r26, r14
    3000:	15 96       	adiw	r26, 0x05	; 5
    3002:	8c 93       	st	X, r24
                    // enqueue
                    return false;
    3004:	5f c1       	rjmp	.+702    	; 0x32c4 <process_tapping+0x3c2>
    3006:	01 15       	cp	r16, r1
    3008:	11 05       	cpc	r17, r1
    300a:	31 f0       	breq	.+12     	; 0x3018 <process_tapping+0x116>
    300c:	5f 3f       	cpi	r21, 0xFF	; 255
    300e:	31 f4       	brne	.+12     	; 0x301c <process_tapping+0x11a>
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	4f 3f       	cpi	r20, 0xFF	; 255
    3014:	19 f4       	brne	.+6      	; 0x301c <process_tapping+0x11a>
    3016:	03 c0       	rjmp	.+6      	; 0x301e <process_tapping+0x11c>
    3018:	81 e0       	ldi	r24, 0x01	; 1
    301a:	01 c0       	rjmp	.+2      	; 0x301e <process_tapping+0x11c>
    301c:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    301e:	80 fd       	sbrc	r24, 0
    3020:	03 c0       	rjmp	.+6      	; 0x3028 <process_tapping+0x126>
    3022:	81 e0       	ldi	r24, 0x01	; 1
    3024:	8d 25       	eor	r24, r13
    3026:	02 c0       	rjmp	.+4      	; 0x302c <process_tapping+0x12a>
    3028:	80 e0       	ldi	r24, 0x00	; 0
    302a:	90 e0       	ldi	r25, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    302c:	b8 2f       	mov	r27, r24
    302e:	b1 70       	andi	r27, 0x01	; 1
    3030:	cb 2e       	mov	r12, r27
    3032:	80 ff       	sbrs	r24, 0
    3034:	1c c0       	rjmp	.+56     	; 0x306e <process_tapping+0x16c>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3036:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <waiting_buffer_tail>
    303a:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <waiting_buffer_head>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    303e:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3040:	82 17       	cp	r24, r18
    3042:	09 f4       	brne	.+2      	; 0x3046 <process_tapping+0x144>
    3044:	1c c1       	rjmp	.+568    	; 0x327e <process_tapping+0x37c>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	38 9f       	mul	r19, r24
    304a:	f0 01       	movw	r30, r0
    304c:	39 9f       	mul	r19, r25
    304e:	f0 0d       	add	r31, r0
    3050:	11 24       	eor	r1, r1
    3052:	eb 58       	subi	r30, 0x8B	; 139
    3054:	fe 4f       	sbci	r31, 0xFE	; 254
    3056:	61 81       	ldd	r22, Z+1	; 0x01
    3058:	56 13       	cpse	r21, r22
    305a:	06 c0       	rjmp	.+12     	; 0x3068 <process_tapping+0x166>
    305c:	60 81       	ld	r22, Z
    305e:	46 13       	cpse	r20, r22
    3060:	03 c0       	rjmp	.+6      	; 0x3068 <process_tapping+0x166>
    3062:	62 81       	ldd	r22, Z+2	; 0x02
    3064:	d6 12       	cpse	r13, r22
    3066:	03 c0       	rjmp	.+6      	; 0x306e <process_tapping+0x16c>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3068:	01 96       	adiw	r24, 0x01	; 1
    306a:	87 70       	andi	r24, 0x07	; 7
    306c:	e9 cf       	rjmp	.-46     	; 0x3040 <process_tapping+0x13e>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    306e:	cd 2c       	mov	r12, r13
    3070:	dd 20       	and	r13, r13
    3072:	09 f4       	brne	.+2      	; 0x3076 <process_tapping+0x174>
    3074:	27 c1       	rjmp	.+590    	; 0x32c4 <process_tapping+0x3c2>
                        tapping_key.tap.interrupted = true;
    3076:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <tapping_key+0x5>
    307a:	81 60       	ori	r24, 0x01	; 1
    307c:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <tapping_key+0x5>
                    }
                    // enqueue 
                    return false;
    3080:	c1 2c       	mov	r12, r1
    3082:	20 c1       	rjmp	.+576    	; 0x32c4 <process_tapping+0x3c2>
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3084:	56 13       	cpse	r21, r22
    3086:	08 c0       	rjmp	.+16     	; 0x3098 <process_tapping+0x196>
    3088:	43 13       	cpse	r20, r19
    308a:	06 c0       	rjmp	.+12     	; 0x3098 <process_tapping+0x196>
    308c:	d1 10       	cpse	r13, r1
    308e:	04 c0       	rjmp	.+8      	; 0x3098 <process_tapping+0x196>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    3090:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <tapping_key+0x5>
    3094:	d7 01       	movw	r26, r14
    3096:	b6 c0       	rjmp	.+364    	; 0x3204 <process_tapping+0x302>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event) && event.pressed) {
    3098:	4d 87       	std	Y+13, r20	; 0x0d
    309a:	5e 87       	std	Y+14, r21	; 0x0e
    309c:	df 86       	std	Y+15, r13	; 0x0f
    309e:	70 2f       	mov	r23, r16
    30a0:	19 8b       	std	Y+17, r17	; 0x11
    30a2:	08 8b       	std	Y+16, r16	; 0x10
    30a4:	6d 2d       	mov	r22, r13
    30a6:	89 89       	ldd	r24, Y+17	; 0x11
    30a8:	0e 94 6d 16 	call	0x2cda	; 0x2cda <is_tap_key>
    30ac:	88 23       	and	r24, r24
    30ae:	99 f1       	breq	.+102    	; 0x3116 <process_tapping+0x214>
    30b0:	dd 20       	and	r13, r13
    30b2:	89 f1       	breq	.+98     	; 0x3116 <process_tapping+0x214>
                    if (tapping_key.tap.count > 1) {
    30b4:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <tapping_key+0x5>
    30b8:	82 2f       	mov	r24, r18
    30ba:	82 95       	swap	r24
    30bc:	8f 70       	andi	r24, 0x0F	; 15
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	02 97       	sbiw	r24, 0x02	; 2
    30c2:	74 f0       	brlt	.+28     	; 0x30e0 <process_tapping+0x1de>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    30c4:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <tapping_key>
    30c8:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <tapping_key+0x1>
    30cc:	98 87       	std	Y+8, r25	; 0x08
    30ce:	8f 83       	std	Y+7, r24	; 0x07
    30d0:	19 86       	std	Y+9, r1	; 0x09
    30d2:	1b 87       	std	Y+11, r17	; 0x0b
    30d4:	0a 87       	std	Y+10, r16	; 0x0a
    30d6:	2c 87       	std	Y+12, r18	; 0x0c
    30d8:	ce 01       	movw	r24, r28
    30da:	07 96       	adiw	r24, 0x07	; 7
    30dc:	0e 94 ff 12 	call	0x25fe	; 0x25fe <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
    30e0:	86 e0       	ldi	r24, 0x06	; 6
    30e2:	f7 01       	movw	r30, r14
    30e4:	a5 ea       	ldi	r26, 0xA5	; 165
    30e6:	b1 e0       	ldi	r27, 0x01	; 1
    30e8:	01 90       	ld	r0, Z+
    30ea:	0d 92       	st	X+, r0
    30ec:	8a 95       	dec	r24
    30ee:	e1 f7       	brne	.-8      	; 0x30e8 <process_tapping+0x1e6>
                    waiting_buffer_scan_tap();
    30f0:	0e 94 19 17 	call	0x2e32	; 0x2e32 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    30f4:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <debug_tapping_key>
    30f8:	11 c0       	rjmp	.+34     	; 0x311c <process_tapping+0x21a>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    30fa:	56 17       	cp	r21, r22
    30fc:	81 f1       	breq	.+96     	; 0x315e <process_tapping+0x25c>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event) && event.pressed) {
    30fe:	4d 87       	std	Y+13, r20	; 0x0d
    3100:	5e 87       	std	Y+14, r21	; 0x0e
    3102:	df 86       	std	Y+15, r13	; 0x0f
    3104:	70 2f       	mov	r23, r16
    3106:	19 8b       	std	Y+17, r17	; 0x11
    3108:	08 8b       	std	Y+16, r16	; 0x10
    310a:	6d 2d       	mov	r22, r13
    310c:	89 89       	ldd	r24, Y+17	; 0x11
    310e:	0e 94 6d 16 	call	0x2cda	; 0x2cda <is_tap_key>
    3112:	81 11       	cpse	r24, r1
    3114:	38 c0       	rjmp	.+112    	; 0x3186 <process_tapping+0x284>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    3116:	c7 01       	movw	r24, r14
    3118:	0e 94 ff 12 	call	0x25fe	; 0x25fe <process_action>
                    return true;
    311c:	cc 24       	eor	r12, r12
    311e:	c3 94       	inc	r12
    3120:	d1 c0       	rjmp	.+418    	; 0x32c4 <process_tapping+0x3c2>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    3122:	08 17       	cp	r16, r24
    3124:	19 07       	cpc	r17, r25
    3126:	08 f4       	brcc	.+2      	; 0x312a <process_tapping+0x228>
    3128:	46 c0       	rjmp	.+140    	; 0x31b6 <process_tapping+0x2b4>
    312a:	f8 01       	movw	r30, r16
    312c:	e8 1b       	sub	r30, r24
    312e:	f9 0b       	sbc	r31, r25
    3130:	cf 01       	movw	r24, r30
    3132:	88 3c       	cpi	r24, 0xC8	; 200
    3134:	91 05       	cpc	r25, r1
    3136:	08 f4       	brcc	.+2      	; 0x313a <process_tapping+0x238>
    3138:	43 c0       	rjmp	.+134    	; 0x31c0 <process_tapping+0x2be>
    313a:	c1 2c       	mov	r12, r1
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    313c:	70 2f       	mov	r23, r16
    313e:	19 8b       	std	Y+17, r17	; 0x11
    3140:	08 8b       	std	Y+16, r16	; 0x10
    3142:	6d 2d       	mov	r22, r13
    3144:	89 89       	ldd	r24, Y+17	; 0x11
    3146:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <debug_event>
        else {
            if (tapping_key.tap.count == 0) {
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
    314a:	e5 ea       	ldi	r30, 0xA5	; 165
    314c:	f1 e0       	ldi	r31, 0x01	; 1
    314e:	86 e0       	ldi	r24, 0x06	; 6
    3150:	df 01       	movw	r26, r30
    3152:	1d 92       	st	X+, r1
    3154:	8a 95       	dec	r24
    3156:	e9 f7       	brne	.-6      	; 0x3152 <process_tapping+0x250>
                debug_tapping_key();
    3158:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <debug_tapping_key>
                return false;
    315c:	b3 c0       	rjmp	.+358    	; 0x32c4 <process_tapping+0x3c2>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    315e:	43 13       	cpse	r20, r19
    3160:	ce cf       	rjmp	.-100    	; 0x30fe <process_tapping+0x1fc>
    3162:	d1 10       	cpse	r13, r1
    3164:	cc cf       	rjmp	.-104    	; 0x30fe <process_tapping+0x1fc>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    3166:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <tapping_key+0x5>
    316a:	f7 01       	movw	r30, r14
    316c:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    316e:	c7 01       	movw	r24, r14
    3170:	0e 94 ff 12 	call	0x25fe	; 0x25fe <process_action>
                    tapping_key = (keyrecord_t){};
    3174:	86 e0       	ldi	r24, 0x06	; 6
    3176:	e5 ea       	ldi	r30, 0xA5	; 165
    3178:	f1 e0       	ldi	r31, 0x01	; 1
    317a:	df 01       	movw	r26, r30
    317c:	1d 92       	st	X+, r1
    317e:	8a 95       	dec	r24
    3180:	e9 f7       	brne	.-6      	; 0x317c <process_tapping+0x27a>
                    return true;
    3182:	ca 2c       	mov	r12, r10
    3184:	9f c0       	rjmp	.+318    	; 0x32c4 <process_tapping+0x3c2>
                }
                else if (is_tap_key(event) && event.pressed) {
    3186:	dd 20       	and	r13, r13
    3188:	31 f2       	breq	.-116    	; 0x3116 <process_tapping+0x214>
                    if (tapping_key.tap.count > 1) {
    318a:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <tapping_key+0x5>
    318e:	82 2f       	mov	r24, r18
    3190:	82 95       	swap	r24
    3192:	8f 70       	andi	r24, 0x0F	; 15
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	02 97       	sbiw	r24, 0x02	; 2
    3198:	0c f4       	brge	.+2      	; 0x319c <process_tapping+0x29a>
    319a:	a2 cf       	rjmp	.-188    	; 0x30e0 <process_tapping+0x1de>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    319c:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <tapping_key>
    31a0:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <tapping_key+0x1>
    31a4:	9a 83       	std	Y+2, r25	; 0x02
    31a6:	89 83       	std	Y+1, r24	; 0x01
    31a8:	1b 82       	std	Y+3, r1	; 0x03
    31aa:	1d 83       	std	Y+5, r17	; 0x05
    31ac:	0c 83       	std	Y+4, r16	; 0x04
    31ae:	2e 83       	std	Y+6, r18	; 0x06
    31b0:	ce 01       	movw	r24, r28
    31b2:	01 96       	adiw	r24, 0x01	; 1
    31b4:	93 cf       	rjmp	.-218    	; 0x30dc <process_tapping+0x1da>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    31b6:	80 95       	com	r24
    31b8:	90 95       	com	r25
    31ba:	80 0f       	add	r24, r16
    31bc:	91 1f       	adc	r25, r17
    31be:	b9 cf       	rjmp	.-142    	; 0x3132 <process_tapping+0x230>
            if (event.pressed) {
    31c0:	cd 2c       	mov	r12, r13
    31c2:	dd 20       	and	r13, r13
    31c4:	09 f4       	brne	.+2      	; 0x31c8 <process_tapping+0x2c6>
    31c6:	a7 cf       	rjmp	.-178    	; 0x3116 <process_tapping+0x214>
                if (IS_TAPPING_KEY(event.key)) {
    31c8:	56 13       	cpse	r21, r22
    31ca:	33 c0       	rjmp	.+102    	; 0x3232 <process_tapping+0x330>
    31cc:	43 13       	cpse	r20, r19
    31ce:	31 c0       	rjmp	.+98     	; 0x3232 <process_tapping+0x330>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    31d0:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <tapping_key+0x5>
    31d4:	20 fd       	sbrc	r18, 0
    31d6:	24 c0       	rjmp	.+72     	; 0x3220 <process_tapping+0x31e>
    31d8:	82 2f       	mov	r24, r18
    31da:	82 95       	swap	r24
    31dc:	8f 70       	andi	r24, 0x0F	; 15
    31de:	48 2f       	mov	r20, r24
    31e0:	50 e0       	ldi	r21, 0x00	; 0
    31e2:	41 15       	cp	r20, r1
    31e4:	51 05       	cpc	r21, r1
    31e6:	e1 f0       	breq	.+56     	; 0x3220 <process_tapping+0x31e>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    31e8:	d7 01       	movw	r26, r14
    31ea:	15 96       	adiw	r26, 0x05	; 5
    31ec:	2c 93       	st	X, r18
    31ee:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    31f0:	4f 30       	cpi	r20, 0x0F	; 15
    31f2:	51 05       	cpc	r21, r1
    31f4:	49 f0       	breq	.+18     	; 0x3208 <process_tapping+0x306>
    31f6:	8f 5f       	subi	r24, 0xFF	; 255
    31f8:	98 2f       	mov	r25, r24
    31fa:	92 95       	swap	r25
    31fc:	90 7f       	andi	r25, 0xF0	; 240
    31fe:	82 2f       	mov	r24, r18
    3200:	8f 70       	andi	r24, 0x0F	; 15
    3202:	89 2b       	or	r24, r25
    3204:	15 96       	adiw	r26, 0x05	; 5
    3206:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    3208:	c7 01       	movw	r24, r14
    320a:	0e 94 ff 12 	call	0x25fe	; 0x25fe <process_action>
                        tapping_key = *keyp;
    320e:	86 e0       	ldi	r24, 0x06	; 6
    3210:	f7 01       	movw	r30, r14
    3212:	a5 ea       	ldi	r26, 0xA5	; 165
    3214:	b1 e0       	ldi	r27, 0x01	; 1
    3216:	01 90       	ld	r0, Z+
    3218:	0d 92       	st	X+, r0
    321a:	8a 95       	dec	r24
    321c:	e1 f7       	brne	.-8      	; 0x3216 <process_tapping+0x314>
    321e:	9c cf       	rjmp	.-200    	; 0x3158 <process_tapping+0x256>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    3220:	86 e0       	ldi	r24, 0x06	; 6
    3222:	f7 01       	movw	r30, r14
    3224:	a5 ea       	ldi	r26, 0xA5	; 165
    3226:	b1 e0       	ldi	r27, 0x01	; 1
    3228:	01 90       	ld	r0, Z+
    322a:	0d 92       	st	X+, r0
    322c:	8a 95       	dec	r24
    322e:	e1 f7       	brne	.-8      	; 0x3228 <process_tapping+0x326>
                        return true;
    3230:	49 c0       	rjmp	.+146    	; 0x32c4 <process_tapping+0x3c2>
                    }
                } else if (is_tap_key(event)) {
    3232:	4d 87       	std	Y+13, r20	; 0x0d
    3234:	5e 87       	std	Y+14, r21	; 0x0e
    3236:	df 86       	std	Y+15, r13	; 0x0f
    3238:	70 2f       	mov	r23, r16
    323a:	19 8b       	std	Y+17, r17	; 0x11
    323c:	08 8b       	std	Y+16, r16	; 0x10
    323e:	6d 2d       	mov	r22, r13
    3240:	89 89       	ldd	r24, Y+17	; 0x11
    3242:	0e 94 6d 16 	call	0x2cda	; 0x2cda <is_tap_key>
    3246:	81 11       	cpse	r24, r1
    3248:	4b cf       	rjmp	.-362    	; 0x30e0 <process_tapping+0x1de>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    324a:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <tapping_key+0x5>
    324e:	81 60       	ori	r24, 0x01	; 1
    3250:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <tapping_key+0x5>
                    process_action(keyp);
    3254:	c7 01       	movw	r24, r14
    3256:	0e 94 ff 12 	call	0x25fe	; 0x25fe <process_action>
                    return true;
    325a:	34 c0       	rjmp	.+104    	; 0x32c4 <process_tapping+0x3c2>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event)) {
    325c:	dd 20       	and	r13, r13
    325e:	09 f4       	brne	.+2      	; 0x3262 <process_tapping+0x360>
    3260:	5a cf       	rjmp	.-332    	; 0x3116 <process_tapping+0x214>
    3262:	4d 87       	std	Y+13, r20	; 0x0d
    3264:	5e 87       	std	Y+14, r21	; 0x0e
    3266:	df 86       	std	Y+15, r13	; 0x0f
    3268:	70 2f       	mov	r23, r16
    326a:	19 8b       	std	Y+17, r17	; 0x11
    326c:	08 8b       	std	Y+16, r16	; 0x10
    326e:	6d 2d       	mov	r22, r13
    3270:	89 89       	ldd	r24, Y+17	; 0x11
    3272:	0e 94 6d 16 	call	0x2cda	; 0x2cda <is_tap_key>
    3276:	88 23       	and	r24, r24
    3278:	09 f4       	brne	.+2      	; 0x327c <process_tapping+0x37a>
    327a:	4d cf       	rjmp	.-358    	; 0x3116 <process_tapping+0x214>
    327c:	31 cf       	rjmp	.-414    	; 0x30e0 <process_tapping+0x1de>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event);
    327e:	70 2f       	mov	r23, r16
    3280:	19 8b       	std	Y+17, r17	; 0x11
    3282:	08 8b       	std	Y+16, r16	; 0x10
    3284:	6d 2d       	mov	r22, r13
    3286:	89 89       	ldd	r24, Y+17	; 0x11
    3288:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <layer_switch_get_action>
                    switch (action.kind.id) {
    328c:	29 2f       	mov	r18, r25
    328e:	22 95       	swap	r18
    3290:	2f 70       	andi	r18, 0x0F	; 15
    3292:	22 30       	cpi	r18, 0x02	; 2
    3294:	28 f4       	brcc	.+10     	; 0x32a0 <process_tapping+0x39e>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    3296:	9f 70       	andi	r25, 0x0F	; 15
    3298:	39 f0       	breq	.+14     	; 0x32a8 <process_tapping+0x3a6>
    329a:	81 11       	cpse	r24, r1
    329c:	05 c0       	rjmp	.+10     	; 0x32a8 <process_tapping+0x3a6>
    329e:	0b c0       	rjmp	.+22     	; 0x32b6 <process_tapping+0x3b4>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event);
                    switch (action.kind.id) {
    32a0:	24 30       	cpi	r18, 0x04	; 4
    32a2:	28 f4       	brcc	.+10     	; 0x32ae <process_tapping+0x3ac>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    32a4:	9f 70       	andi	r25, 0x0F	; 15
    32a6:	49 f4       	brne	.+18     	; 0x32ba <process_tapping+0x3b8>
                            if (IS_MOD(action.key.code)) return false;
    32a8:	80 5e       	subi	r24, 0xE0	; 224
    32aa:	88 30       	cpi	r24, 0x08	; 8
    32ac:	20 f0       	brcs	.+8      	; 0x32b6 <process_tapping+0x3b4>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    32ae:	c7 01       	movw	r24, r14
    32b0:	0e 94 ff 12 	call	0x25fe	; 0x25fe <process_action>
                    return true;
    32b4:	bc 2c       	mov	r11, r12
    32b6:	cb 2c       	mov	r12, r11
    32b8:	05 c0       	rjmp	.+10     	; 0x32c4 <process_tapping+0x3c2>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    32ba:	f7 01       	movw	r30, r14
    32bc:	95 81       	ldd	r25, Z+5	; 0x05
    32be:	90 7f       	andi	r25, 0xF0	; 240
    32c0:	99 f7       	brne	.-26     	; 0x32a8 <process_tapping+0x3a6>
    32c2:	f9 cf       	rjmp	.-14     	; 0x32b6 <process_tapping+0x3b4>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    32c4:	8c 2d       	mov	r24, r12
    32c6:	61 96       	adiw	r28, 0x11	; 17
    32c8:	0f b6       	in	r0, 0x3f	; 63
    32ca:	f8 94       	cli
    32cc:	de bf       	out	0x3e, r29	; 62
    32ce:	0f be       	out	0x3f, r0	; 63
    32d0:	cd bf       	out	0x3d, r28	; 61
    32d2:	df 91       	pop	r29
    32d4:	cf 91       	pop	r28
    32d6:	1f 91       	pop	r17
    32d8:	0f 91       	pop	r16
    32da:	ff 90       	pop	r15
    32dc:	ef 90       	pop	r14
    32de:	df 90       	pop	r13
    32e0:	cf 90       	pop	r12
    32e2:	bf 90       	pop	r11
    32e4:	af 90       	pop	r10
    32e6:	08 95       	ret

000032e8 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    32e8:	1f 93       	push	r17
    32ea:	cf 93       	push	r28
    32ec:	df 93       	push	r29
    32ee:	cd b7       	in	r28, 0x3d	; 61
    32f0:	de b7       	in	r29, 0x3e	; 62
    32f2:	2c 97       	sbiw	r28, 0x0c	; 12
    32f4:	0f b6       	in	r0, 0x3f	; 63
    32f6:	f8 94       	cli
    32f8:	de bf       	out	0x3e, r29	; 62
    32fa:	0f be       	out	0x3f, r0	; 63
    32fc:	cd bf       	out	0x3d, r28	; 61
    32fe:	4f 83       	std	Y+7, r20	; 0x07
    3300:	58 87       	std	Y+8, r21	; 0x08
    3302:	69 87       	std	Y+9, r22	; 0x09
    3304:	7a 87       	std	Y+10, r23	; 0x0a
    3306:	8b 87       	std	Y+11, r24	; 0x0b
    3308:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    330a:	ce 01       	movw	r24, r28
    330c:	07 96       	adiw	r24, 0x07	; 7
    330e:	0e 94 81 17 	call	0x2f02	; 0x2f02 <process_tapping>
    3312:	88 23       	and	r24, r24
    3314:	d1 f0       	breq	.+52     	; 0x334a <action_tapping_process+0x62>
    3316:	9f 81       	ldd	r25, Y+7	; 0x07
    3318:	88 85       	ldd	r24, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    331a:	2a 85       	ldd	r18, Y+10	; 0x0a
    331c:	3b 85       	ldd	r19, Y+11	; 0x0b
    331e:	23 2b       	or	r18, r19
    3320:	31 f0       	breq	.+12     	; 0x332e <action_tapping_process+0x46>
    3322:	8f 3f       	cpi	r24, 0xFF	; 255
    3324:	31 f4       	brne	.+12     	; 0x3332 <action_tapping_process+0x4a>
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	9f 3f       	cpi	r25, 0xFF	; 255
    332a:	19 f4       	brne	.+6      	; 0x3332 <action_tapping_process+0x4a>
    332c:	03 c0       	rjmp	.+6      	; 0x3334 <action_tapping_process+0x4c>
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	01 c0       	rjmp	.+2      	; 0x3334 <action_tapping_process+0x4c>
    3332:	80 e0       	ldi	r24, 0x00	; 0
        if (!IS_NOEVENT(record.event)) {
    3334:	80 fd       	sbrc	r24, 0
    3336:	47 c0       	rjmp	.+142    	; 0x33c6 <action_tapping_process+0xde>
            debug("processed: "); debug_record(record); debug("\n");
    3338:	4f 81       	ldd	r20, Y+7	; 0x07
    333a:	58 85       	ldd	r21, Y+8	; 0x08
    333c:	69 85       	ldd	r22, Y+9	; 0x09
    333e:	7a 85       	ldd	r23, Y+10	; 0x0a
    3340:	8b 85       	ldd	r24, Y+11	; 0x0b
    3342:	9c 85       	ldd	r25, Y+12	; 0x0c
    3344:	0e 94 da 16 	call	0x2db4	; 0x2db4 <debug_record>
    3348:	3e c0       	rjmp	.+124    	; 0x33c6 <action_tapping_process+0xde>
    334a:	86 e0       	ldi	r24, 0x06	; 6
    334c:	fe 01       	movw	r30, r28
    334e:	37 96       	adiw	r30, 0x07	; 7
    3350:	de 01       	movw	r26, r28
    3352:	11 96       	adiw	r26, 0x01	; 1
    3354:	01 90       	ld	r0, Z+
    3356:	0d 92       	st	X+, r0
    3358:	8a 95       	dec	r24
    335a:	e1 f7       	brne	.-8      	; 0x3354 <action_tapping_process+0x6c>
    335c:	ff 81       	ldd	r31, Y+7	; 0x07
    335e:	e8 85       	ldd	r30, Y+8	; 0x08
    3360:	6a 85       	ldd	r22, Y+10	; 0x0a
    3362:	7b 85       	ldd	r23, Y+11	; 0x0b
    3364:	61 15       	cp	r22, r1
    3366:	71 05       	cpc	r23, r1
    3368:	31 f0       	breq	.+12     	; 0x3376 <action_tapping_process+0x8e>
    336a:	ef 3f       	cpi	r30, 0xFF	; 255
    336c:	31 f4       	brne	.+12     	; 0x337a <action_tapping_process+0x92>
    336e:	81 e0       	ldi	r24, 0x01	; 1
    3370:	ff 3f       	cpi	r31, 0xFF	; 255
    3372:	19 f4       	brne	.+6      	; 0x337a <action_tapping_process+0x92>
    3374:	03 c0       	rjmp	.+6      	; 0x337c <action_tapping_process+0x94>
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	01 c0       	rjmp	.+2      	; 0x337c <action_tapping_process+0x94>
    337a:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    337c:	80 fd       	sbrc	r24, 0
    337e:	23 c0       	rjmp	.+70     	; 0x33c6 <action_tapping_process+0xde>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    3380:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <waiting_buffer_head>
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	c9 01       	movw	r24, r18
    3388:	01 96       	adiw	r24, 0x01	; 1
    338a:	87 70       	andi	r24, 0x07	; 7
    338c:	99 27       	eor	r25, r25
    338e:	40 91 73 01 	lds	r20, 0x0173	; 0x800173 <waiting_buffer_tail>
    3392:	50 e0       	ldi	r21, 0x00	; 0
    3394:	84 17       	cp	r24, r20
    3396:	95 07       	cpc	r25, r21
    3398:	f1 f1       	breq	.+124    	; 0x3416 <action_tapping_process+0x12e>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    339a:	f9 83       	std	Y+1, r31	; 0x01
    339c:	ea 83       	std	Y+2, r30	; 0x02
    339e:	7d 83       	std	Y+5, r23	; 0x05
    33a0:	6c 83       	std	Y+4, r22	; 0x04
    33a2:	96 e0       	ldi	r25, 0x06	; 6
    33a4:	92 9f       	mul	r25, r18
    33a6:	d0 01       	movw	r26, r0
    33a8:	93 9f       	mul	r25, r19
    33aa:	b0 0d       	add	r27, r0
    33ac:	11 24       	eor	r1, r1
    33ae:	ab 58       	subi	r26, 0x8B	; 139
    33b0:	be 4f       	sbci	r27, 0xFE	; 254
    33b2:	fe 01       	movw	r30, r28
    33b4:	31 96       	adiw	r30, 0x01	; 1
    33b6:	01 90       	ld	r0, Z+
    33b8:	0d 92       	st	X+, r0
    33ba:	9a 95       	dec	r25
    33bc:	e1 f7       	brne	.-8      	; 0x33b6 <action_tapping_process+0xce>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    33be:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <waiting_buffer_head>

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    33c2:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    33c6:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    33c8:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <waiting_buffer_tail>
    33cc:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <waiting_buffer_head>
    33d0:	89 17       	cp	r24, r25
    33d2:	71 f1       	breq	.+92     	; 0x3430 <action_tapping_process+0x148>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    33d4:	18 9f       	mul	r17, r24
    33d6:	c0 01       	movw	r24, r0
    33d8:	11 24       	eor	r1, r1
    33da:	8b 58       	subi	r24, 0x8B	; 139
    33dc:	9e 4f       	sbci	r25, 0xFE	; 254
    33de:	0e 94 81 17 	call	0x2f02	; 0x2f02 <process_tapping>
    33e2:	88 23       	and	r24, r24
    33e4:	29 f1       	breq	.+74     	; 0x3430 <action_tapping_process+0x148>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    33e6:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <waiting_buffer_tail>
    33ea:	1e 9f       	mul	r17, r30
    33ec:	f0 01       	movw	r30, r0
    33ee:	11 24       	eor	r1, r1
    33f0:	eb 58       	subi	r30, 0x8B	; 139
    33f2:	fe 4f       	sbci	r31, 0xFE	; 254
    33f4:	40 81       	ld	r20, Z
    33f6:	51 81       	ldd	r21, Z+1	; 0x01
    33f8:	62 81       	ldd	r22, Z+2	; 0x02
    33fa:	73 81       	ldd	r23, Z+3	; 0x03
    33fc:	84 81       	ldd	r24, Z+4	; 0x04
    33fe:	95 81       	ldd	r25, Z+5	; 0x05
    3400:	0e 94 da 16 	call	0x2db4	; 0x2db4 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3404:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <waiting_buffer_tail>
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	01 96       	adiw	r24, 0x01	; 1
    340c:	87 70       	andi	r24, 0x07	; 7
    340e:	99 27       	eor	r25, r25
    3410:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <waiting_buffer_tail>
    3414:	d9 cf       	rjmp	.-78     	; 0x33c8 <action_tapping_process+0xe0>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    3416:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    341a:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <waiting_buffer_head>
    waiting_buffer_tail = 0;
    341e:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <waiting_buffer_tail>
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    3422:	e5 ea       	ldi	r30, 0xA5	; 165
    3424:	f1 e0       	ldi	r31, 0x01	; 1
    3426:	86 e0       	ldi	r24, 0x06	; 6
    3428:	df 01       	movw	r26, r30
    342a:	1d 92       	st	X+, r1
    342c:	8a 95       	dec	r24
    342e:	e9 f7       	brne	.-6      	; 0x342a <action_tapping_process+0x142>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    3430:	2c 96       	adiw	r28, 0x0c	; 12
    3432:	0f b6       	in	r0, 0x3f	; 63
    3434:	f8 94       	cli
    3436:	de bf       	out	0x3e, r29	; 62
    3438:	0f be       	out	0x3f, r0	; 63
    343a:	cd bf       	out	0x3d, r28	; 61
    343c:	df 91       	pop	r29
    343e:	cf 91       	pop	r28
    3440:	1f 91       	pop	r17
    3442:	08 95       	ret

00003444 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    3444:	df 92       	push	r13
    3446:	ef 92       	push	r14
    3448:	ff 92       	push	r15
    344a:	0f 93       	push	r16
    344c:	1f 93       	push	r17
    344e:	cf 93       	push	r28
    3450:	df 93       	push	r29
    3452:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    3454:	89 2b       	or	r24, r25
    3456:	09 f4       	brne	.+2      	; 0x345a <action_macro_play+0x16>
    3458:	88 c0       	rjmp	.+272    	; 0x356a <action_macro_play+0x126>
    345a:	e1 2c       	mov	r14, r1
    345c:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    345e:	dd 24       	eor	r13, r13
    3460:	d3 94       	inc	r13

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    3462:	ef 01       	movw	r28, r30
    3464:	21 96       	adiw	r28, 0x01	; 1
    3466:	84 91       	lpm	r24, Z
    3468:	85 37       	cpi	r24, 0x75	; 117
    346a:	09 f4       	brne	.+2      	; 0x346e <action_macro_play+0x2a>
    346c:	60 c0       	rjmp	.+192    	; 0x352e <action_macro_play+0xea>
    346e:	58 f4       	brcc	.+22     	; 0x3486 <action_macro_play+0x42>
    3470:	84 37       	cpi	r24, 0x74	; 116
    3472:	08 f0       	brcs	.+2      	; 0x3476 <action_macro_play+0x32>
    3474:	4e c0       	rjmp	.+156    	; 0x3512 <action_macro_play+0xce>
    3476:	84 30       	cpi	r24, 0x04	; 4
    3478:	08 f0       	brcs	.+2      	; 0x347c <action_macro_play+0x38>
    347a:	68 c0       	rjmp	.+208    	; 0x354c <action_macro_play+0x108>
    347c:	81 30       	cpi	r24, 0x01	; 1
    347e:	d1 f0       	breq	.+52     	; 0x34b4 <action_macro_play+0x70>
    3480:	82 30       	cpi	r24, 0x02	; 2
    3482:	71 f1       	breq	.+92     	; 0x34e0 <action_macro_play+0x9c>
    3484:	72 c0       	rjmp	.+228    	; 0x356a <action_macro_play+0x126>
    3486:	88 37       	cpi	r24, 0x78	; 120
    3488:	09 f4       	brne	.+2      	; 0x348c <action_macro_play+0x48>
    348a:	5b c0       	rjmp	.+182    	; 0x3542 <action_macro_play+0xfe>
    348c:	50 f4       	brcc	.+20     	; 0x34a2 <action_macro_play+0x5e>
    348e:	86 37       	cpi	r24, 0x76	; 118
    3490:	09 f4       	brne	.+2      	; 0x3494 <action_macro_play+0x50>
    3492:	53 c0       	rjmp	.+166    	; 0x353a <action_macro_play+0xf6>
    3494:	87 37       	cpi	r24, 0x77	; 119
    3496:	09 f0       	breq	.+2      	; 0x349a <action_macro_play+0x56>
    3498:	68 c0       	rjmp	.+208    	; 0x356a <action_macro_play+0x126>
                break;
            case MOD_STORE:
                mod_storage = get_mods();
                break;
            case MOD_RESTORE:
                set_mods(mod_storage);
    349a:	8e 2d       	mov	r24, r14
    349c:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <set_mods>
    34a0:	52 c0       	rjmp	.+164    	; 0x3546 <action_macro_play+0x102>

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    34a2:	9c e7       	ldi	r25, 0x7C	; 124
    34a4:	98 0f       	add	r25, r24
    34a6:	90 37       	cpi	r25, 0x70	; 112
    34a8:	08 f0       	brcs	.+2      	; 0x34ac <action_macro_play+0x68>
    34aa:	5f c0       	rjmp	.+190    	; 0x356a <action_macro_play+0x126>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    34ac:	8f 77       	andi	r24, 0x7F	; 127
    34ae:	0e 94 87 12 	call	0x250e	; 0x250e <unregister_code>
                break;
    34b2:	4e c0       	rjmp	.+156    	; 0x3550 <action_macro_play+0x10c>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    34b4:	8f 01       	movw	r16, r30
    34b6:	0e 5f       	subi	r16, 0xFE	; 254
    34b8:	1f 4f       	sbci	r17, 0xFF	; 255
    34ba:	fe 01       	movw	r30, r28
    34bc:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    34be:	90 e2       	ldi	r25, 0x20	; 32
    34c0:	98 0f       	add	r25, r24
    34c2:	98 30       	cpi	r25, 0x08	; 8
    34c4:	50 f4       	brcc	.+20     	; 0x34da <action_macro_play+0x96>
                    add_weak_mods(MOD_BIT(macro));
    34c6:	87 70       	andi	r24, 0x07	; 7
    34c8:	fd 2d       	mov	r31, r13
    34ca:	01 c0       	rjmp	.+2      	; 0x34ce <action_macro_play+0x8a>
    34cc:	ff 0f       	add	r31, r31
    34ce:	8a 95       	dec	r24
    34d0:	ea f7       	brpl	.-6      	; 0x34cc <action_macro_play+0x88>
    34d2:	8f 2f       	mov	r24, r31
    34d4:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <add_weak_mods>
    34d8:	15 c0       	rjmp	.+42     	; 0x3504 <action_macro_play+0xc0>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    34da:	0e 94 99 11 	call	0x2332	; 0x2332 <register_code>
    34de:	14 c0       	rjmp	.+40     	; 0x3508 <action_macro_play+0xc4>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    34e0:	8f 01       	movw	r16, r30
    34e2:	0e 5f       	subi	r16, 0xFE	; 254
    34e4:	1f 4f       	sbci	r17, 0xFF	; 255
    34e6:	fe 01       	movw	r30, r28
    34e8:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    34ea:	90 e2       	ldi	r25, 0x20	; 32
    34ec:	98 0f       	add	r25, r24
    34ee:	98 30       	cpi	r25, 0x08	; 8
    34f0:	68 f4       	brcc	.+26     	; 0x350c <action_macro_play+0xc8>
                    del_weak_mods(MOD_BIT(macro));
    34f2:	87 70       	andi	r24, 0x07	; 7
    34f4:	fd 2d       	mov	r31, r13
    34f6:	01 c0       	rjmp	.+2      	; 0x34fa <action_macro_play+0xb6>
    34f8:	ff 0f       	add	r31, r31
    34fa:	8a 95       	dec	r24
    34fc:	ea f7       	brpl	.-6      	; 0x34f8 <action_macro_play+0xb4>
    34fe:	8f 2f       	mov	r24, r31
    3500:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <del_weak_mods>
                    send_keyboard_report();
    3504:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <send_keyboard_report>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3508:	e8 01       	movw	r28, r16
    350a:	22 c0       	rjmp	.+68     	; 0x3550 <action_macro_play+0x10c>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                    send_keyboard_report();
                } else {
                    unregister_code(macro);
    350c:	0e 94 87 12 	call	0x250e	; 0x250e <unregister_code>
    3510:	fb cf       	rjmp	.-10     	; 0x3508 <action_macro_play+0xc4>
                }
                break;
            case WAIT:
                MACRO_READ();
    3512:	cf 01       	movw	r24, r30
    3514:	02 96       	adiw	r24, 0x02	; 2
    3516:	fe 01       	movw	r30, r28
    3518:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    351a:	cc 23       	and	r28, r28
    351c:	61 f0       	breq	.+24     	; 0x3536 <action_macro_play+0xf2>
    351e:	ef e9       	ldi	r30, 0x9F	; 159
    3520:	ff e0       	ldi	r31, 0x0F	; 15
    3522:	31 97       	sbiw	r30, 0x01	; 1
    3524:	f1 f7       	brne	.-4      	; 0x3522 <action_macro_play+0xde>
    3526:	00 c0       	rjmp	.+0      	; 0x3528 <action_macro_play+0xe4>
    3528:	00 00       	nop
    352a:	c1 50       	subi	r28, 0x01	; 1
    352c:	f6 cf       	rjmp	.-20     	; 0x351a <action_macro_play+0xd6>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    352e:	cf 01       	movw	r24, r30
    3530:	02 96       	adiw	r24, 0x02	; 2
    3532:	fe 01       	movw	r30, r28
    3534:	f4 90       	lpm	r15, Z
    3536:	ec 01       	movw	r28, r24
                dprintf("INTERVAL(%u)\n", interval);
                break;
    3538:	0b c0       	rjmp	.+22     	; 0x3550 <action_macro_play+0x10c>
            case MOD_STORE:
                mod_storage = get_mods();
    353a:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <get_mods>
    353e:	e8 2e       	mov	r14, r24
                break;
    3540:	07 c0       	rjmp	.+14     	; 0x3550 <action_macro_play+0x10c>
            case MOD_RESTORE:
                set_mods(mod_storage);
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    3542:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <clear_mods>
                send_keyboard_report();
    3546:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <send_keyboard_report>
                break;
    354a:	02 c0       	rjmp	.+4      	; 0x3550 <action_macro_play+0x10c>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    354c:	0e 94 99 11 	call	0x2332	; 0x2332 <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    3550:	8f 2d       	mov	r24, r15
    3552:	88 23       	and	r24, r24
    3554:	41 f0       	breq	.+16     	; 0x3566 <action_macro_play+0x122>
    3556:	ef e9       	ldi	r30, 0x9F	; 159
    3558:	ff e0       	ldi	r31, 0x0F	; 15
    355a:	31 97       	sbiw	r30, 0x01	; 1
    355c:	f1 f7       	brne	.-4      	; 0x355a <action_macro_play+0x116>
    355e:	00 c0       	rjmp	.+0      	; 0x3560 <action_macro_play+0x11c>
    3560:	00 00       	nop
    3562:	81 50       	subi	r24, 0x01	; 1
    3564:	f6 cf       	rjmp	.-20     	; 0x3552 <action_macro_play+0x10e>
    3566:	fe 01       	movw	r30, r28
    3568:	7c cf       	rjmp	.-264    	; 0x3462 <action_macro_play+0x1e>
    }
}
    356a:	df 91       	pop	r29
    356c:	cf 91       	pop	r28
    356e:	1f 91       	pop	r17
    3570:	0f 91       	pop	r16
    3572:	ff 90       	pop	r15
    3574:	ef 90       	pop	r14
    3576:	df 90       	pop	r13
    3578:	08 95       	ret

0000357a <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    357a:	60 93 bb 01 	sts	0x01BB, r22	; 0x8001bb <layer_state>
    357e:	70 93 bc 01 	sts	0x01BC, r23	; 0x8001bc <layer_state+0x1>
    3582:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <layer_state+0x2>
    3586:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <layer_state+0x3>
    hook_layer_change(layer_state);
    358a:	0c 94 9c 1d 	jmp	0x3b38	; 0x3b38 <hook_layer_change>

0000358e <default_layer_debug>:
    358e:	08 95       	ret

00003590 <default_layer_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3590:	60 93 bf 01 	sts	0x01BF, r22	; 0x8001bf <default_layer_state>
    3594:	70 93 c0 01 	sts	0x01C0, r23	; 0x8001c0 <default_layer_state+0x1>
    3598:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <default_layer_state+0x2>
    359c:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    35a0:	0c 94 9b 1d 	jmp	0x3b36	; 0x3b36 <hook_default_layer_change>

000035a4 <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    35a4:	0f 93       	push	r16
    35a6:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    35a8:	00 91 bf 01 	lds	r16, 0x01BF	; 0x8001bf <default_layer_state>
    35ac:	10 91 c0 01 	lds	r17, 0x01C0	; 0x8001c0 <default_layer_state+0x1>
    35b0:	20 91 c1 01 	lds	r18, 0x01C1	; 0x8001c1 <default_layer_state+0x2>
    35b4:	30 91 c2 01 	lds	r19, 0x01C2	; 0x8001c2 <default_layer_state+0x3>
    35b8:	60 2b       	or	r22, r16
    35ba:	71 2b       	or	r23, r17
    35bc:	82 2b       	or	r24, r18
    35be:	93 2b       	or	r25, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    35c0:	60 93 bf 01 	sts	0x01BF, r22	; 0x8001bf <default_layer_state>
    35c4:	70 93 c0 01 	sts	0x01C0, r23	; 0x8001c0 <default_layer_state+0x1>
    35c8:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <default_layer_state+0x2>
    35cc:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <default_layer_state+0x3>

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
    35d0:	1f 91       	pop	r17
    35d2:	0f 91       	pop	r16
static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    hook_default_layer_change(default_layer_state);
    35d4:	0c 94 9b 1d 	jmp	0x3b36	; 0x3b36 <hook_default_layer_change>

000035d8 <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    35d8:	0f 93       	push	r16
    35da:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    35dc:	00 91 bf 01 	lds	r16, 0x01BF	; 0x8001bf <default_layer_state>
    35e0:	10 91 c0 01 	lds	r17, 0x01C0	; 0x8001c0 <default_layer_state+0x1>
    35e4:	20 91 c1 01 	lds	r18, 0x01C1	; 0x8001c1 <default_layer_state+0x2>
    35e8:	30 91 c2 01 	lds	r19, 0x01C2	; 0x8001c2 <default_layer_state+0x3>
    35ec:	60 23       	and	r22, r16
    35ee:	71 23       	and	r23, r17
    35f0:	82 23       	and	r24, r18
    35f2:	93 23       	and	r25, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    35f4:	60 93 bf 01 	sts	0x01BF, r22	; 0x8001bf <default_layer_state>
    35f8:	70 93 c0 01 	sts	0x01C0, r23	; 0x8001c0 <default_layer_state+0x1>
    35fc:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <default_layer_state+0x2>
    3600:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <default_layer_state+0x3>
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
    3604:	1f 91       	pop	r17
    3606:	0f 91       	pop	r16
static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    hook_default_layer_change(default_layer_state);
    3608:	0c 94 9b 1d 	jmp	0x3b36	; 0x3b36 <hook_default_layer_change>

0000360c <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    360c:	0f 93       	push	r16
    360e:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    3610:	00 91 bf 01 	lds	r16, 0x01BF	; 0x8001bf <default_layer_state>
    3614:	10 91 c0 01 	lds	r17, 0x01C0	; 0x8001c0 <default_layer_state+0x1>
    3618:	20 91 c1 01 	lds	r18, 0x01C1	; 0x8001c1 <default_layer_state+0x2>
    361c:	30 91 c2 01 	lds	r19, 0x01C2	; 0x8001c2 <default_layer_state+0x3>
    3620:	60 27       	eor	r22, r16
    3622:	71 27       	eor	r23, r17
    3624:	82 27       	eor	r24, r18
    3626:	93 27       	eor	r25, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3628:	60 93 bf 01 	sts	0x01BF, r22	; 0x8001bf <default_layer_state>
    362c:	70 93 c0 01 	sts	0x01C0, r23	; 0x8001c0 <default_layer_state+0x1>
    3630:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <default_layer_state+0x2>
    3634:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <default_layer_state+0x3>
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
}
    3638:	1f 91       	pop	r17
    363a:	0f 91       	pop	r16
static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    hook_default_layer_change(default_layer_state);
    363c:	0c 94 9b 1d 	jmp	0x3b36	; 0x3b36 <hook_default_layer_change>

00003640 <layer_clear>:
#endif
}

void layer_clear(void)
{
    layer_state_set(0);
    3640:	60 e0       	ldi	r22, 0x00	; 0
    3642:	70 e0       	ldi	r23, 0x00	; 0
    3644:	cb 01       	movw	r24, r22
    3646:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <layer_state_set>

0000364a <layer_move>:
}

void layer_move(uint8_t layer)
{
    364a:	0f 93       	push	r16
    364c:	1f 93       	push	r17
    layer_state_set(1UL<<layer);
    364e:	41 e0       	ldi	r20, 0x01	; 1
    3650:	50 e0       	ldi	r21, 0x00	; 0
    3652:	60 e0       	ldi	r22, 0x00	; 0
    3654:	70 e0       	ldi	r23, 0x00	; 0
    3656:	8a 01       	movw	r16, r20
    3658:	9b 01       	movw	r18, r22
    365a:	04 c0       	rjmp	.+8      	; 0x3664 <layer_move+0x1a>
    365c:	00 0f       	add	r16, r16
    365e:	11 1f       	adc	r17, r17
    3660:	22 1f       	adc	r18, r18
    3662:	33 1f       	adc	r19, r19
    3664:	8a 95       	dec	r24
    3666:	d2 f7       	brpl	.-12     	; 0x365c <layer_move+0x12>
    3668:	c9 01       	movw	r24, r18
    366a:	b8 01       	movw	r22, r16
}
    366c:	1f 91       	pop	r17
    366e:	0f 91       	pop	r16
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    3670:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <layer_state_set>

00003674 <layer_on>:
}

void layer_on(uint8_t layer)
{
    3674:	0f 93       	push	r16
    3676:	1f 93       	push	r17
    layer_state_set(layer_state | (1UL<<layer));
    3678:	41 e0       	ldi	r20, 0x01	; 1
    367a:	50 e0       	ldi	r21, 0x00	; 0
    367c:	60 e0       	ldi	r22, 0x00	; 0
    367e:	70 e0       	ldi	r23, 0x00	; 0
    3680:	04 c0       	rjmp	.+8      	; 0x368a <layer_on+0x16>
    3682:	44 0f       	add	r20, r20
    3684:	55 1f       	adc	r21, r21
    3686:	66 1f       	adc	r22, r22
    3688:	77 1f       	adc	r23, r23
    368a:	8a 95       	dec	r24
    368c:	d2 f7       	brpl	.-12     	; 0x3682 <layer_on+0xe>
    368e:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <layer_state>
    3692:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <layer_state+0x1>
    3696:	a0 91 bd 01 	lds	r26, 0x01BD	; 0x8001bd <layer_state+0x2>
    369a:	b0 91 be 01 	lds	r27, 0x01BE	; 0x8001be <layer_state+0x3>
    369e:	8a 01       	movw	r16, r20
    36a0:	9b 01       	movw	r18, r22
    36a2:	08 2b       	or	r16, r24
    36a4:	19 2b       	or	r17, r25
    36a6:	2a 2b       	or	r18, r26
    36a8:	3b 2b       	or	r19, r27
    36aa:	c9 01       	movw	r24, r18
    36ac:	b8 01       	movw	r22, r16
}
    36ae:	1f 91       	pop	r17
    36b0:	0f 91       	pop	r16
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    36b2:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <layer_state_set>

000036b6 <layer_off>:
}

void layer_off(uint8_t layer)
{
    36b6:	0f 93       	push	r16
    36b8:	1f 93       	push	r17
    layer_state_set(layer_state & ~(1UL<<layer));
    36ba:	41 e0       	ldi	r20, 0x01	; 1
    36bc:	50 e0       	ldi	r21, 0x00	; 0
    36be:	60 e0       	ldi	r22, 0x00	; 0
    36c0:	70 e0       	ldi	r23, 0x00	; 0
    36c2:	04 c0       	rjmp	.+8      	; 0x36cc <layer_off+0x16>
    36c4:	44 0f       	add	r20, r20
    36c6:	55 1f       	adc	r21, r21
    36c8:	66 1f       	adc	r22, r22
    36ca:	77 1f       	adc	r23, r23
    36cc:	8a 95       	dec	r24
    36ce:	d2 f7       	brpl	.-12     	; 0x36c4 <layer_off+0xe>
    36d0:	40 95       	com	r20
    36d2:	50 95       	com	r21
    36d4:	60 95       	com	r22
    36d6:	70 95       	com	r23
    36d8:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <layer_state>
    36dc:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <layer_state+0x1>
    36e0:	a0 91 bd 01 	lds	r26, 0x01BD	; 0x8001bd <layer_state+0x2>
    36e4:	b0 91 be 01 	lds	r27, 0x01BE	; 0x8001be <layer_state+0x3>
    36e8:	8a 01       	movw	r16, r20
    36ea:	9b 01       	movw	r18, r22
    36ec:	08 23       	and	r16, r24
    36ee:	19 23       	and	r17, r25
    36f0:	2a 23       	and	r18, r26
    36f2:	3b 23       	and	r19, r27
    36f4:	c9 01       	movw	r24, r18
    36f6:	b8 01       	movw	r22, r16
}
    36f8:	1f 91       	pop	r17
    36fa:	0f 91       	pop	r16
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    36fc:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <layer_state_set>

00003700 <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    3700:	0f 93       	push	r16
    3702:	1f 93       	push	r17
    layer_state_set(layer_state ^ (1UL<<layer));
    3704:	41 e0       	ldi	r20, 0x01	; 1
    3706:	50 e0       	ldi	r21, 0x00	; 0
    3708:	60 e0       	ldi	r22, 0x00	; 0
    370a:	70 e0       	ldi	r23, 0x00	; 0
    370c:	04 c0       	rjmp	.+8      	; 0x3716 <layer_invert+0x16>
    370e:	44 0f       	add	r20, r20
    3710:	55 1f       	adc	r21, r21
    3712:	66 1f       	adc	r22, r22
    3714:	77 1f       	adc	r23, r23
    3716:	8a 95       	dec	r24
    3718:	d2 f7       	brpl	.-12     	; 0x370e <layer_invert+0xe>
    371a:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <layer_state>
    371e:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <layer_state+0x1>
    3722:	a0 91 bd 01 	lds	r26, 0x01BD	; 0x8001bd <layer_state+0x2>
    3726:	b0 91 be 01 	lds	r27, 0x01BE	; 0x8001be <layer_state+0x3>
    372a:	8a 01       	movw	r16, r20
    372c:	9b 01       	movw	r18, r22
    372e:	08 27       	eor	r16, r24
    3730:	19 27       	eor	r17, r25
    3732:	2a 27       	eor	r18, r26
    3734:	3b 27       	eor	r19, r27
    3736:	c9 01       	movw	r24, r18
    3738:	b8 01       	movw	r22, r16
}
    373a:	1f 91       	pop	r17
    373c:	0f 91       	pop	r16
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    373e:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <layer_state_set>

00003742 <layer_or>:
}

void layer_or(uint32_t state)
{
    3742:	0f 93       	push	r16
    3744:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    3746:	00 91 bb 01 	lds	r16, 0x01BB	; 0x8001bb <layer_state>
    374a:	10 91 bc 01 	lds	r17, 0x01BC	; 0x8001bc <layer_state+0x1>
    374e:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <layer_state+0x2>
    3752:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <layer_state+0x3>
    3756:	60 2b       	or	r22, r16
    3758:	71 2b       	or	r23, r17
    375a:	82 2b       	or	r24, r18
    375c:	93 2b       	or	r25, r19
}
    375e:	1f 91       	pop	r17
    3760:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    3762:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <layer_state_set>

00003766 <layer_and>:
}
void layer_and(uint32_t state)
{
    3766:	0f 93       	push	r16
    3768:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    376a:	00 91 bb 01 	lds	r16, 0x01BB	; 0x8001bb <layer_state>
    376e:	10 91 bc 01 	lds	r17, 0x01BC	; 0x8001bc <layer_state+0x1>
    3772:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <layer_state+0x2>
    3776:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <layer_state+0x3>
    377a:	60 23       	and	r22, r16
    377c:	71 23       	and	r23, r17
    377e:	82 23       	and	r24, r18
    3780:	93 23       	and	r25, r19
}
    3782:	1f 91       	pop	r17
    3784:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    3786:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <layer_state_set>

0000378a <layer_xor>:
}
void layer_xor(uint32_t state)
{
    378a:	0f 93       	push	r16
    378c:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    378e:	00 91 bb 01 	lds	r16, 0x01BB	; 0x8001bb <layer_state>
    3792:	10 91 bc 01 	lds	r17, 0x01BC	; 0x8001bc <layer_state+0x1>
    3796:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <layer_state+0x2>
    379a:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <layer_state+0x3>
    379e:	60 27       	eor	r22, r16
    37a0:	71 27       	eor	r23, r17
    37a2:	82 27       	eor	r24, r18
    37a4:	93 27       	eor	r25, r19
}
    37a6:	1f 91       	pop	r17
    37a8:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    37aa:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <layer_state_set>

000037ae <layer_debug>:
}

void layer_debug(void)
{
    37ae:	08 95       	ret

000037b0 <layer_switch_get_action>:
#ifndef NO_TRACK_KEY_PRESS
/* record layer on where key is pressed */
static uint8_t layer_pressed[MATRIX_ROWS][MATRIX_COLS] = {};
#endif
action_t layer_switch_get_action(keyevent_t event)
{
    37b0:	8f 92       	push	r8
    37b2:	9f 92       	push	r9
    37b4:	af 92       	push	r10
    37b6:	bf 92       	push	r11
    37b8:	df 92       	push	r13
    37ba:	ef 92       	push	r14
    37bc:	ff 92       	push	r15
    37be:	0f 93       	push	r16
    37c0:	1f 93       	push	r17
    37c2:	cf 93       	push	r28
    37c4:	df 93       	push	r29
    37c6:	00 d0       	rcall	.+0      	; 0x37c8 <layer_switch_get_action+0x18>
    37c8:	00 d0       	rcall	.+0      	; 0x37ca <layer_switch_get_action+0x1a>
    37ca:	1f 92       	push	r1
    37cc:	cd b7       	in	r28, 0x3d	; 61
    37ce:	de b7       	in	r29, 0x3e	; 62
    37d0:	6b 83       	std	Y+3, r22	; 0x03
    37d2:	7c 83       	std	Y+4, r23	; 0x04
    37d4:	8d 83       	std	Y+5, r24	; 0x05
    37d6:	8a 01       	movw	r16, r20
    37d8:	8c 81       	ldd	r24, Y+4	; 0x04
    37da:	9d 81       	ldd	r25, Y+5	; 0x05
    37dc:	89 2b       	or	r24, r25
    37de:	31 f0       	breq	.+12     	; 0x37ec <layer_switch_get_action+0x3c>
    37e0:	1f 3f       	cpi	r17, 0xFF	; 255
    37e2:	31 f4       	brne	.+12     	; 0x37f0 <layer_switch_get_action+0x40>
    37e4:	81 e0       	ldi	r24, 0x01	; 1
    37e6:	4f 3f       	cpi	r20, 0xFF	; 255
    37e8:	19 f4       	brne	.+6      	; 0x37f0 <layer_switch_get_action+0x40>
    37ea:	03 c0       	rjmp	.+6      	; 0x37f2 <layer_switch_get_action+0x42>
    37ec:	81 e0       	ldi	r24, 0x01	; 1
    37ee:	01 c0       	rjmp	.+2      	; 0x37f2 <layer_switch_get_action+0x42>
    37f0:	80 e0       	ldi	r24, 0x00	; 0
    if (IS_NOEVENT(event)) return (action_t)ACTION_NO;
    37f2:	80 ff       	sbrs	r24, 0
    37f4:	03 c0       	rjmp	.+6      	; 0x37fc <layer_switch_get_action+0x4c>
    37f6:	80 e0       	ldi	r24, 0x00	; 0
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	4d c0       	rjmp	.+154    	; 0x3896 <layer_switch_get_action+0xe6>

    uint8_t layer = 0;
#ifndef NO_TRACK_KEY_PRESS
    if (event.pressed) {
    37fc:	8b 81       	ldd	r24, Y+3	; 0x03
    37fe:	88 23       	and	r24, r24
    3800:	d1 f1       	breq	.+116    	; 0x3876 <layer_switch_get_action+0xc6>
/* return layer effective for key at this time */
static uint8_t current_layer_for_key(keypos_t key)
{
#ifndef NO_ACTION_LAYER
    action_t action = ACTION_TRANSPARENT;
    uint32_t layers = layer_state | default_layer_state;
    3802:	80 90 bb 01 	lds	r8, 0x01BB	; 0x8001bb <layer_state>
    3806:	90 90 bc 01 	lds	r9, 0x01BC	; 0x8001bc <layer_state+0x1>
    380a:	a0 90 bd 01 	lds	r10, 0x01BD	; 0x8001bd <layer_state+0x2>
    380e:	b0 90 be 01 	lds	r11, 0x01BE	; 0x8001be <layer_state+0x3>
    3812:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <default_layer_state>
    3816:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <default_layer_state+0x1>
    381a:	a0 91 c1 01 	lds	r26, 0x01C1	; 0x8001c1 <default_layer_state+0x2>
    381e:	b0 91 c2 01 	lds	r27, 0x01C2	; 0x8001c2 <default_layer_state+0x3>
    3822:	88 2a       	or	r8, r24
    3824:	99 2a       	or	r9, r25
    3826:	aa 2a       	or	r10, r26
    3828:	bb 2a       	or	r11, r27
    382a:	8f e1       	ldi	r24, 0x1F	; 31
    382c:	e8 2e       	mov	r14, r24
    382e:	f1 2c       	mov	r15, r1
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    3830:	d5 01       	movw	r26, r10
    3832:	c4 01       	movw	r24, r8
    3834:	0e 2c       	mov	r0, r14
    3836:	04 c0       	rjmp	.+8      	; 0x3840 <layer_switch_get_action+0x90>
    3838:	b6 95       	lsr	r27
    383a:	a7 95       	ror	r26
    383c:	97 95       	ror	r25
    383e:	87 95       	ror	r24
    3840:	0a 94       	dec	r0
    3842:	d2 f7       	brpl	.-12     	; 0x3838 <layer_switch_get_action+0x88>
    3844:	80 fd       	sbrc	r24, 0
    3846:	06 c0       	rjmp	.+12     	; 0x3854 <layer_switch_get_action+0xa4>
    3848:	81 e0       	ldi	r24, 0x01	; 1
    384a:	e8 1a       	sub	r14, r24
    384c:	f1 08       	sbc	r15, r1
    384e:	80 f7       	brcc	.-32     	; 0x3830 <layer_switch_get_action+0x80>
                return i;
            }
        }
    }
    /* fall back to layer 0 */
    return 0;
    3850:	d1 2c       	mov	r13, r1
    3852:	07 c0       	rjmp	.+14     	; 0x3862 <layer_switch_get_action+0xb2>
    action_t action = ACTION_TRANSPARENT;
    uint32_t layers = layer_state | default_layer_state;
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
            action = action_for_key(i, key);
    3854:	de 2c       	mov	r13, r14
    3856:	b8 01       	movw	r22, r16
    3858:	8e 2d       	mov	r24, r14
    385a:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <action_for_key>
            if (action.code != (action_t)ACTION_TRANSPARENT.code) {
    385e:	01 97       	sbiw	r24, 0x01	; 1
    3860:	99 f3       	breq	.-26     	; 0x3848 <layer_switch_get_action+0x98>

    uint8_t layer = 0;
#ifndef NO_TRACK_KEY_PRESS
    if (event.pressed) {
        layer = current_layer_for_key(event.key);
        layer_pressed[event.key.row][event.key.col] = layer;
    3862:	84 e0       	ldi	r24, 0x04	; 4
    3864:	18 9f       	mul	r17, r24
    3866:	f0 01       	movw	r30, r0
    3868:	11 24       	eor	r1, r1
    386a:	e5 55       	subi	r30, 0x55	; 85
    386c:	fe 4f       	sbci	r31, 0xFE	; 254
    386e:	e0 0f       	add	r30, r16
    3870:	f1 1d       	adc	r31, r1
    3872:	d0 82       	st	Z, r13
    3874:	09 c0       	rjmp	.+18     	; 0x3888 <layer_switch_get_action+0xd8>
    } else {
        layer = layer_pressed[event.key.row][event.key.col];
    3876:	84 e0       	ldi	r24, 0x04	; 4
    3878:	18 9f       	mul	r17, r24
    387a:	f0 01       	movw	r30, r0
    387c:	11 24       	eor	r1, r1
    387e:	e5 55       	subi	r30, 0x55	; 85
    3880:	fe 4f       	sbci	r31, 0xFE	; 254
    3882:	e0 0f       	add	r30, r16
    3884:	f1 1d       	adc	r31, r1
    3886:	d0 80       	ld	r13, Z
    }
#else
    layer = current_layer_for_key(event.key);
#endif
    return action_for_key(layer, event.key);
    3888:	09 83       	std	Y+1, r16	; 0x01
    388a:	1a 83       	std	Y+2, r17	; 0x02
    388c:	69 81       	ldd	r22, Y+1	; 0x01
    388e:	7a 81       	ldd	r23, Y+2	; 0x02
    3890:	8d 2d       	mov	r24, r13
    3892:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <action_for_key>
}
    3896:	0f 90       	pop	r0
    3898:	0f 90       	pop	r0
    389a:	0f 90       	pop	r0
    389c:	0f 90       	pop	r0
    389e:	0f 90       	pop	r0
    38a0:	df 91       	pop	r29
    38a2:	cf 91       	pop	r28
    38a4:	1f 91       	pop	r17
    38a6:	0f 91       	pop	r16
    38a8:	ff 90       	pop	r15
    38aa:	ef 90       	pop	r14
    38ac:	df 90       	pop	r13
    38ae:	bf 90       	pop	r11
    38b0:	af 90       	pop	r10
    38b2:	9f 90       	pop	r9
    38b4:	8f 90       	pop	r8
    38b6:	08 95       	ret

000038b8 <add_key>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
    38b8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <keyboard_protocol>
    38bc:	99 23       	and	r25, r25
    38be:	79 f1       	breq	.+94     	; 0x391e <add_key+0x66>
    38c0:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <keyboard_nkro>
    38c4:	99 23       	and	r25, r25
    38c6:	59 f1       	breq	.+86     	; 0x391e <add_key+0x66>
    38c8:	98 2f       	mov	r25, r24
    38ca:	96 95       	lsr	r25
    38cc:	96 95       	lsr	r25
    38ce:	96 95       	lsr	r25
    38d0:	9f 31       	cpi	r25, 0x1F	; 31
    38d2:	a1 f0       	breq	.+40     	; 0x38fc <add_key+0x44>
    38d4:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    38d8:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    38dc:	e9 0f       	add	r30, r25
    38de:	f1 1d       	adc	r31, r1
    38e0:	87 70       	andi	r24, 0x07	; 7
    38e2:	21 e0       	ldi	r18, 0x01	; 1
    38e4:	30 e0       	ldi	r19, 0x00	; 0
    38e6:	a9 01       	movw	r20, r18
    38e8:	02 c0       	rjmp	.+4      	; 0x38ee <add_key+0x36>
    38ea:	44 0f       	add	r20, r20
    38ec:	55 1f       	adc	r21, r21
    38ee:	8a 95       	dec	r24
    38f0:	e2 f7       	brpl	.-8      	; 0x38ea <add_key+0x32>
    38f2:	ca 01       	movw	r24, r20
    38f4:	91 81       	ldd	r25, Z+1	; 0x01
    38f6:	89 2b       	or	r24, r25
    38f8:	81 83       	std	Z+1, r24	; 0x01
    38fa:	08 95       	ret
    38fc:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <debug_config>
    3900:	90 ff       	sbrs	r25, 0
    3902:	29 c0       	rjmp	.+82     	; 0x3956 <add_key+0x9e>
    3904:	1f 92       	push	r1
    3906:	8f 93       	push	r24
    3908:	8f ea       	ldi	r24, 0xAF	; 175
    390a:	93 e0       	ldi	r25, 0x03	; 3
    390c:	9f 93       	push	r25
    390e:	8f 93       	push	r24
    3910:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    3914:	0f 90       	pop	r0
    3916:	0f 90       	pop	r0
    3918:	0f 90       	pop	r0
    391a:	0f 90       	pop	r0
    391c:	08 95       	ret
    391e:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <keyboard_report>
    3922:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <keyboard_report+0x1>
    3926:	f9 01       	movw	r30, r18
    3928:	32 96       	adiw	r30, 0x02	; 2
    392a:	9f ef       	ldi	r25, 0xFF	; 255
    392c:	40 e0       	ldi	r20, 0x00	; 0
    392e:	51 91       	ld	r21, Z+
    3930:	85 17       	cp	r24, r21
    3932:	89 f0       	breq	.+34     	; 0x3956 <add_key+0x9e>
    3934:	9f 3f       	cpi	r25, 0xFF	; 255
    3936:	19 f4       	brne	.+6      	; 0x393e <add_key+0x86>
    3938:	51 11       	cpse	r21, r1
    393a:	01 c0       	rjmp	.+2      	; 0x393e <add_key+0x86>
    393c:	94 2f       	mov	r25, r20
    393e:	4f 5f       	subi	r20, 0xFF	; 255
    3940:	4e 31       	cpi	r20, 0x1E	; 30
    3942:	a9 f7       	brne	.-22     	; 0x392e <add_key+0x76>
    3944:	9f 3f       	cpi	r25, 0xFF	; 255
    3946:	39 f0       	breq	.+14     	; 0x3956 <add_key+0x9e>
    3948:	f9 01       	movw	r30, r18
    394a:	e9 0f       	add	r30, r25
    394c:	f1 1d       	adc	r31, r1
    394e:	97 fd       	sbrc	r25, 7
    3950:	fa 95       	dec	r31
    3952:	82 83       	std	Z+2, r24	; 0x02
    3954:	08 95       	ret
    3956:	08 95       	ret

00003958 <del_key>:
    3958:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <keyboard_protocol>
    395c:	99 23       	and	r25, r25
    395e:	81 f1       	breq	.+96     	; 0x39c0 <del_key+0x68>
    3960:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <keyboard_nkro>
    3964:	99 23       	and	r25, r25
    3966:	61 f1       	breq	.+88     	; 0x39c0 <del_key+0x68>
    3968:	98 2f       	mov	r25, r24
    396a:	96 95       	lsr	r25
    396c:	96 95       	lsr	r25
    396e:	96 95       	lsr	r25
    3970:	9f 31       	cpi	r25, 0x1F	; 31
    3972:	a9 f0       	breq	.+42     	; 0x399e <del_key+0x46>
    3974:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    3978:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    397c:	e9 0f       	add	r30, r25
    397e:	f1 1d       	adc	r31, r1
    3980:	87 70       	andi	r24, 0x07	; 7
    3982:	21 e0       	ldi	r18, 0x01	; 1
    3984:	30 e0       	ldi	r19, 0x00	; 0
    3986:	a9 01       	movw	r20, r18
    3988:	02 c0       	rjmp	.+4      	; 0x398e <del_key+0x36>
    398a:	44 0f       	add	r20, r20
    398c:	55 1f       	adc	r21, r21
    398e:	8a 95       	dec	r24
    3990:	e2 f7       	brpl	.-8      	; 0x398a <del_key+0x32>
    3992:	ca 01       	movw	r24, r20
    3994:	80 95       	com	r24
    3996:	91 81       	ldd	r25, Z+1	; 0x01
    3998:	89 23       	and	r24, r25
    399a:	81 83       	std	Z+1, r24	; 0x01
    399c:	08 95       	ret
    399e:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <debug_config>
    39a2:	90 ff       	sbrs	r25, 0
    39a4:	1c c0       	rjmp	.+56     	; 0x39de <del_key+0x86>
    39a6:	1f 92       	push	r1
    39a8:	8f 93       	push	r24
    39aa:	81 e9       	ldi	r24, 0x91	; 145
    39ac:	93 e0       	ldi	r25, 0x03	; 3
    39ae:	9f 93       	push	r25
    39b0:	8f 93       	push	r24
    39b2:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    39b6:	0f 90       	pop	r0
    39b8:	0f 90       	pop	r0
    39ba:	0f 90       	pop	r0
    39bc:	0f 90       	pop	r0
    39be:	08 95       	ret
    39c0:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    39c4:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    39c8:	9f 01       	movw	r18, r30
    39ca:	22 5e       	subi	r18, 0xE2	; 226
    39cc:	3f 4f       	sbci	r19, 0xFF	; 255
    39ce:	92 81       	ldd	r25, Z+2	; 0x02
    39d0:	89 13       	cpse	r24, r25
    39d2:	01 c0       	rjmp	.+2      	; 0x39d6 <del_key+0x7e>
    39d4:	12 82       	std	Z+2, r1	; 0x02
    39d6:	31 96       	adiw	r30, 0x01	; 1
    39d8:	e2 17       	cp	r30, r18
    39da:	f3 07       	cpc	r31, r19
    39dc:	c1 f7       	brne	.-16     	; 0x39ce <del_key+0x76>
    39de:	08 95       	ret

000039e0 <clear_keys>:
    39e0:	81 e0       	ldi	r24, 0x01	; 1
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    39e8:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    39ec:	e8 0f       	add	r30, r24
    39ee:	f9 1f       	adc	r31, r25
    39f0:	10 82       	st	Z, r1
    39f2:	01 96       	adiw	r24, 0x01	; 1
    39f4:	80 32       	cpi	r24, 0x20	; 32
    39f6:	91 05       	cpc	r25, r1
    39f8:	a9 f7       	brne	.-22     	; 0x39e4 <clear_keys+0x4>
    39fa:	08 95       	ret

000039fc <get_mods>:
    39fc:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <real_mods>
    3a00:	08 95       	ret

00003a02 <add_mods>:
    3a02:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <real_mods>
    3a06:	89 2b       	or	r24, r25
    3a08:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <real_mods>
    3a0c:	08 95       	ret

00003a0e <del_mods>:
    3a0e:	80 95       	com	r24
    3a10:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <real_mods>
    3a14:	89 23       	and	r24, r25
    3a16:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <real_mods>
    3a1a:	08 95       	ret

00003a1c <set_mods>:
    3a1c:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <real_mods>
    3a20:	08 95       	ret

00003a22 <clear_mods>:
    3a22:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <real_mods>
    3a26:	08 95       	ret

00003a28 <add_weak_mods>:
    3a28:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <weak_mods>
    3a2c:	89 2b       	or	r24, r25
    3a2e:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <weak_mods>
    3a32:	08 95       	ret

00003a34 <del_weak_mods>:
    3a34:	80 95       	com	r24
    3a36:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <weak_mods>
    3a3a:	89 23       	and	r24, r25
    3a3c:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <weak_mods>
    3a40:	08 95       	ret

00003a42 <clear_weak_mods>:
void clear_weak_mods(void) { weak_mods = 0; }
    3a42:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <weak_mods>
    3a46:	08 95       	ret

00003a48 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3a48:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <oneshot_mods>
    3a4c:	08 95       	ret

00003a4e <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3a4e:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <oneshot_mods>
    3a52:	08 95       	ret

00003a54 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3a54:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <keyboard_report>
    3a58:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <keyboard_report+0x1>
    3a5c:	fc 01       	movw	r30, r24
    3a5e:	31 96       	adiw	r30, 0x01	; 1
    3a60:	9c 01       	movw	r18, r24
    3a62:	20 5e       	subi	r18, 0xE0	; 224
    3a64:	3f 4f       	sbci	r19, 0xFF	; 255
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    3a66:	80 e0       	ldi	r24, 0x00	; 0
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3a68:	91 91       	ld	r25, Z+
    3a6a:	91 11       	cpse	r25, r1
            cnt++;
    3a6c:	8f 5f       	subi	r24, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3a6e:	e2 17       	cp	r30, r18
    3a70:	f3 07       	cpc	r31, r19
    3a72:	d1 f7       	brne	.-12     	; 0x3a68 <has_anykey+0x14>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    3a74:	08 95       	ret

00003a76 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    3a76:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    3a7a:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    3a7e:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <real_mods>
    3a82:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3a84:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    3a88:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    3a8c:	90 81       	ld	r25, Z
    3a8e:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <weak_mods>
    3a92:	89 2b       	or	r24, r25
    3a94:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    3a96:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <oneshot_mods>
    3a9a:	88 23       	and	r24, r24
    3a9c:	61 f0       	breq	.+24     	; 0x3ab6 <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3a9e:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    3aa2:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    3aa6:	90 81       	ld	r25, Z
    3aa8:	89 2b       	or	r24, r25
    3aaa:	80 83       	st	Z, r24
        if (has_anykey()) {
    3aac:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <has_anykey>
    3ab0:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3ab2:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <oneshot_mods>
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    3ab6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <keyboard_report>
    3aba:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <keyboard_report+0x1>
    3abe:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <host_keyboard_send>

00003ac2 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3ac2:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <__data_end+0x1>
    3ac6:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end>
    3aca:	08 95       	ret

00003acc <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3acc:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3ace:	98 2f       	mov	r25, r24
    3ad0:	93 73       	andi	r25, 0x33	; 51
    3ad2:	44 e0       	ldi	r20, 0x04	; 4
    3ad4:	94 9f       	mul	r25, r20
    3ad6:	90 01       	movw	r18, r0
    3ad8:	11 24       	eor	r1, r1
    3ada:	8c 7c       	andi	r24, 0xCC	; 204
    3adc:	86 95       	lsr	r24
    3ade:	86 95       	lsr	r24
    3ae0:	28 2b       	or	r18, r24
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3ae2:	82 2f       	mov	r24, r18
    3ae4:	85 75       	andi	r24, 0x55	; 85
    3ae6:	88 0f       	add	r24, r24
    3ae8:	2a 7a       	andi	r18, 0xAA	; 170
    3aea:	26 95       	lsr	r18
    return bits;
}
    3aec:	82 2b       	or	r24, r18
    3aee:	08 95       	ret

00003af0 <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3af0:	cf 93       	push	r28
    3af2:	df 93       	push	r29
    3af4:	d9 2f       	mov	r29, r25
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    3af6:	0e 94 66 1d 	call	0x3acc	; 0x3acc <bitrev>
    3afa:	c8 2f       	mov	r28, r24
    3afc:	8d 2f       	mov	r24, r29
    3afe:	0e 94 66 1d 	call	0x3acc	; 0x3acc <bitrev>
    return bits;
    3b02:	2c 2f       	mov	r18, r28
    3b04:	30 e0       	ldi	r19, 0x00	; 0
    3b06:	32 2f       	mov	r19, r18
    3b08:	22 27       	eor	r18, r18
}
    3b0a:	a9 01       	movw	r20, r18
    3b0c:	48 2b       	or	r20, r24
    3b0e:	ca 01       	movw	r24, r20
    3b10:	df 91       	pop	r29
    3b12:	cf 91       	pop	r28
    3b14:	08 95       	ret

00003b16 <hook_keyboard_loop>:
    3b16:	08 95       	ret

00003b18 <hook_matrix_change>:

__attribute__((weak))
void hook_keyboard_loop(void) {}

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    3b18:	cf 93       	push	r28
    3b1a:	df 93       	push	r29
    3b1c:	00 d0       	rcall	.+0      	; 0x3b1e <hook_matrix_change+0x6>
    3b1e:	00 d0       	rcall	.+0      	; 0x3b20 <hook_matrix_change+0x8>
    3b20:	1f 92       	push	r1
    3b22:	cd b7       	in	r28, 0x3d	; 61
    3b24:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    3b26:	0f 90       	pop	r0
    3b28:	0f 90       	pop	r0
    3b2a:	0f 90       	pop	r0
    3b2c:	0f 90       	pop	r0
    3b2e:	0f 90       	pop	r0
    3b30:	df 91       	pop	r29
    3b32:	cf 91       	pop	r28
    3b34:	08 95       	ret

00003b36 <hook_default_layer_change>:
    3b36:	08 95       	ret

00003b38 <hook_layer_change>:
void hook_default_layer_change(uint32_t default_layer_state) {
    (void)default_layer_state;
}

__attribute__((weak))
void hook_layer_change(uint32_t layer_state) {
    3b38:	08 95       	ret

00003b3a <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    3b3a:	0c 94 4d 11 	jmp	0x229a	; 0x229a <keyboard_set_leds>

00003b3e <hook_bootmagic>:
}

__attribute__((weak))
void hook_bootmagic(void) {}
    3b3e:	08 95       	ret

00003b40 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3b40:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <USB_DeviceState>
    3b44:	84 30       	cpi	r24, 0x04	; 4
    3b46:	21 f1       	breq	.+72     	; 0x3b90 <suspend_power_down+0x50>
#endif
    wdt_timeout = wdto;
    3b48:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <wdt_timeout>

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3b4c:	20 e4       	ldi	r18, 0x40	; 64
    3b4e:	88 e1       	ldi	r24, 0x18	; 24
    3b50:	90 e0       	ldi	r25, 0x00	; 0
    3b52:	0f b6       	in	r0, 0x3f	; 63
    3b54:	f8 94       	cli
    3b56:	a8 95       	wdr
    3b58:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3b5c:	0f be       	out	0x3f, r0	; 63
    3b5e:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3b62:	83 b7       	in	r24, 0x33	; 51
    3b64:	81 7f       	andi	r24, 0xF1	; 241
    3b66:	84 60       	ori	r24, 0x04	; 4
    3b68:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3b6a:	83 b7       	in	r24, 0x33	; 51
    3b6c:	81 60       	ori	r24, 0x01	; 1
    3b6e:	83 bf       	out	0x33, r24	; 51
    sei();
    3b70:	78 94       	sei
    sleep_cpu();
    3b72:	88 95       	sleep
    sleep_disable();
    3b74:	83 b7       	in	r24, 0x33	; 51
    3b76:	8e 7f       	andi	r24, 0xFE	; 254
    3b78:	83 bf       	out	0x33, r24	; 51
    3b7a:	0f b6       	in	r0, 0x3f	; 63
    3b7c:	f8 94       	cli
    3b7e:	a8 95       	wdr
    3b80:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3b84:	88 61       	ori	r24, 0x18	; 24
    3b86:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3b8a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3b8e:	0f be       	out	0x3f, r0	; 63
    3b90:	08 95       	ret

00003b92 <suspend_wakeup_condition>:
    power_down(WDTO_15MS);
#endif
}

bool suspend_wakeup_condition(void)
{
    3b92:	cf 93       	push	r28
    matrix_power_up();
    3b94:	0e 94 51 11 	call	0x22a2	; 0x22a2 <matrix_power_up>
    matrix_scan();
    3b98:	0e 94 2b 07 	call	0xe56	; 0xe56 <matrix_scan>
    matrix_power_down();
    3b9c:	0e 94 52 11 	call	0x22a4	; 0x22a4 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3ba0:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3ba2:	8c 2f       	mov	r24, r28
    3ba4:	0e 94 c2 07 	call	0xf84	; 0xf84 <matrix_get_row>
    3ba8:	81 11       	cpse	r24, r1
    3baa:	04 c0       	rjmp	.+8      	; 0x3bb4 <suspend_wakeup_condition+0x22>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3bac:	cf 5f       	subi	r28, 0xFF	; 255
    3bae:	c4 30       	cpi	r28, 0x04	; 4
    3bb0:	c1 f7       	brne	.-16     	; 0x3ba2 <suspend_wakeup_condition+0x10>
    3bb2:	01 c0       	rjmp	.+2      	; 0x3bb6 <suspend_wakeup_condition+0x24>
        if (matrix_get_row(r)) return true;
    3bb4:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3bb6:	cf 91       	pop	r28
    3bb8:	08 95       	ret

00003bba <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    matrix_clear();
    3bba:	0e 94 4f 11 	call	0x229e	; 0x229e <matrix_clear>
    clear_keyboard();
    3bbe:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <clear_keyboard>
#ifdef BACKLIGHT_ENABLE
    backlight_init();
    3bc2:	0c 94 bf 29 	jmp	0x537e	; 0x537e <backlight_init>

00003bc6 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3bc6:	1f 92       	push	r1
    3bc8:	0f 92       	push	r0
    3bca:	0f b6       	in	r0, 0x3f	; 63
    3bcc:	0f 92       	push	r0
    3bce:	11 24       	eor	r1, r1
    3bd0:	8f 93       	push	r24
    3bd2:	9f 93       	push	r25
    3bd4:	af 93       	push	r26
    3bd6:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3bd8:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <wdt_timeout>
    3bdc:	81 11       	cpse	r24, r1
    3bde:	13 c0       	rjmp	.+38     	; 0x3c06 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3be0:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <timer_count>
    3be4:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <timer_count+0x1>
    3be8:	a0 91 ea 01 	lds	r26, 0x01EA	; 0x8001ea <timer_count+0x2>
    3bec:	b0 91 eb 01 	lds	r27, 0x01EB	; 0x8001eb <timer_count+0x3>
    3bf0:	41 96       	adiw	r24, 0x11	; 17
    3bf2:	a1 1d       	adc	r26, r1
    3bf4:	b1 1d       	adc	r27, r1
    3bf6:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <timer_count>
    3bfa:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <timer_count+0x1>
    3bfe:	a0 93 ea 01 	sts	0x01EA, r26	; 0x8001ea <timer_count+0x2>
    3c02:	b0 93 eb 01 	sts	0x01EB, r27	; 0x8001eb <timer_count+0x3>
            break;
        default:
            ;
    }
}
    3c06:	bf 91       	pop	r27
    3c08:	af 91       	pop	r26
    3c0a:	9f 91       	pop	r25
    3c0c:	8f 91       	pop	r24
    3c0e:	0f 90       	pop	r0
    3c10:	0f be       	out	0x3f, r0	; 63
    3c12:	0f 90       	pop	r0
    3c14:	1f 90       	pop	r1
    3c16:	18 95       	reti

00003c18 <timer_init>:
    cli();
    t = timer_count;
    SREG = sreg;

    return TIMER_DIFF_32(t, last);
}
    3c18:	82 e0       	ldi	r24, 0x02	; 2
    3c1a:	84 bd       	out	0x24, r24	; 36
    3c1c:	93 e0       	ldi	r25, 0x03	; 3
    3c1e:	95 bd       	out	0x25, r25	; 37
    3c20:	9a ef       	ldi	r25, 0xFA	; 250
    3c22:	97 bd       	out	0x27, r25	; 39
    3c24:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    3c28:	08 95       	ret

00003c2a <timer_read>:
    3c2a:	2f b7       	in	r18, 0x3f	; 63
    3c2c:	f8 94       	cli
    3c2e:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <timer_count>
    3c32:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <timer_count+0x1>
    3c36:	a0 91 ea 01 	lds	r26, 0x01EA	; 0x8001ea <timer_count+0x2>
    3c3a:	b0 91 eb 01 	lds	r27, 0x01EB	; 0x8001eb <timer_count+0x3>
    3c3e:	2f bf       	out	0x3f, r18	; 63
    3c40:	08 95       	ret

00003c42 <timer_read32>:
    3c42:	2f b7       	in	r18, 0x3f	; 63
    3c44:	f8 94       	cli
    3c46:	60 91 e8 01 	lds	r22, 0x01E8	; 0x8001e8 <timer_count>
    3c4a:	70 91 e9 01 	lds	r23, 0x01E9	; 0x8001e9 <timer_count+0x1>
    3c4e:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <timer_count+0x2>
    3c52:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <timer_count+0x3>
    3c56:	2f bf       	out	0x3f, r18	; 63
    3c58:	08 95       	ret

00003c5a <timer_elapsed>:
    3c5a:	cf 92       	push	r12
    3c5c:	df 92       	push	r13
    3c5e:	ef 92       	push	r14
    3c60:	ff 92       	push	r15
    3c62:	0f 93       	push	r16
    3c64:	1f 93       	push	r17
    3c66:	2f b7       	in	r18, 0x3f	; 63
    3c68:	f8 94       	cli
    3c6a:	40 91 e8 01 	lds	r20, 0x01E8	; 0x8001e8 <timer_count>
    3c6e:	50 91 e9 01 	lds	r21, 0x01E9	; 0x8001e9 <timer_count+0x1>
    3c72:	60 91 ea 01 	lds	r22, 0x01EA	; 0x8001ea <timer_count+0x2>
    3c76:	70 91 eb 01 	lds	r23, 0x01EB	; 0x8001eb <timer_count+0x3>
    3c7a:	2f bf       	out	0x3f, r18	; 63
    3c7c:	6a 01       	movw	r12, r20
    3c7e:	7b 01       	movw	r14, r22
    3c80:	ee 24       	eor	r14, r14
    3c82:	ff 24       	eor	r15, r15
    3c84:	8c 01       	movw	r16, r24
    3c86:	20 e0       	ldi	r18, 0x00	; 0
    3c88:	30 e0       	ldi	r19, 0x00	; 0
    3c8a:	c0 16       	cp	r12, r16
    3c8c:	d1 06       	cpc	r13, r17
    3c8e:	e2 06       	cpc	r14, r18
    3c90:	f3 06       	cpc	r15, r19
    3c92:	10 f4       	brcc	.+4      	; 0x3c98 <timer_elapsed+0x3e>
    3c94:	41 50       	subi	r20, 0x01	; 1
    3c96:	51 09       	sbc	r21, r1
    3c98:	9a 01       	movw	r18, r20
    3c9a:	28 1b       	sub	r18, r24
    3c9c:	39 0b       	sbc	r19, r25
    3c9e:	c9 01       	movw	r24, r18
    3ca0:	1f 91       	pop	r17
    3ca2:	0f 91       	pop	r16
    3ca4:	ff 90       	pop	r15
    3ca6:	ef 90       	pop	r14
    3ca8:	df 90       	pop	r13
    3caa:	cf 90       	pop	r12
    3cac:	08 95       	ret

00003cae <__vector_21>:

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3cae:	1f 92       	push	r1
    3cb0:	0f 92       	push	r0
    3cb2:	0f b6       	in	r0, 0x3f	; 63
    3cb4:	0f 92       	push	r0
    3cb6:	11 24       	eor	r1, r1
    3cb8:	8f 93       	push	r24
    3cba:	9f 93       	push	r25
    3cbc:	af 93       	push	r26
    3cbe:	bf 93       	push	r27
    timer_count++;
    3cc0:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <timer_count>
    3cc4:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <timer_count+0x1>
    3cc8:	a0 91 ea 01 	lds	r26, 0x01EA	; 0x8001ea <timer_count+0x2>
    3ccc:	b0 91 eb 01 	lds	r27, 0x01EB	; 0x8001eb <timer_count+0x3>
    3cd0:	01 96       	adiw	r24, 0x01	; 1
    3cd2:	a1 1d       	adc	r26, r1
    3cd4:	b1 1d       	adc	r27, r1
    3cd6:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <timer_count>
    3cda:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <timer_count+0x1>
    3cde:	a0 93 ea 01 	sts	0x01EA, r26	; 0x8001ea <timer_count+0x2>
    3ce2:	b0 93 eb 01 	sts	0x01EB, r27	; 0x8001eb <timer_count+0x3>
}
    3ce6:	bf 91       	pop	r27
    3ce8:	af 91       	pop	r26
    3cea:	9f 91       	pop	r25
    3cec:	8f 91       	pop	r24
    3cee:	0f 90       	pop	r0
    3cf0:	0f be       	out	0x3f, r0	; 63
    3cf2:	0f 90       	pop	r0
    3cf4:	1f 90       	pop	r1
    3cf6:	18 95       	reti

00003cf8 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    3cf8:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <USB_Disable>
    cli();
    3cfc:	f8 94       	cli
    3cfe:	2f ef       	ldi	r18, 0xFF	; 255
    3d00:	87 ea       	ldi	r24, 0xA7	; 167
    3d02:	91 e6       	ldi	r25, 0x61	; 97
    3d04:	21 50       	subi	r18, 0x01	; 1
    3d06:	80 40       	sbci	r24, 0x00	; 0
    3d08:	90 40       	sbci	r25, 0x00	; 0
    3d0a:	e1 f7       	brne	.-8      	; 0x3d04 <bootloader_jump+0xc>
    3d0c:	00 c0       	rjmp	.+0      	; 0x3d0e <bootloader_jump+0x16>
    3d0e:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    3d10:	87 e0       	ldi	r24, 0x07	; 7
    3d12:	90 eb       	ldi	r25, 0xB0	; 176
    3d14:	dc 01       	movw	r26, r24
    3d16:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__bss_end>
    3d1a:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <__bss_end+0x1>
    3d1e:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <__bss_end+0x2>
    3d22:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <__bss_end+0x3>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    3d26:	9c e0       	ldi	r25, 0x0C	; 12
    3d28:	88 e1       	ldi	r24, 0x18	; 24
    3d2a:	0f b6       	in	r0, 0x3f	; 63
    3d2c:	f8 94       	cli
    3d2e:	a8 95       	wdr
    3d30:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3d34:	0f be       	out	0x3f, r0	; 63
    3d36:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3d3a:	ff cf       	rjmp	.-2      	; 0x3d3a <bootloader_jump+0x42>

00003d3c <keycode_to_action>:


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    3d3c:	8d 3b       	cpi	r24, 0xBD	; 189
    3d3e:	60 f4       	brcc	.+24     	; 0x3d58 <keycode_to_action+0x1c>
    3d40:	88 3a       	cpi	r24, 0xA8	; 168
    3d42:	90 f5       	brcc	.+100    	; 0x3da8 <keycode_to_action+0x6c>
    3d44:	85 3a       	cpi	r24, 0xA5	; 165
    3d46:	28 f5       	brcc	.+74     	; 0x3d92 <keycode_to_action+0x56>
    3d48:	84 30       	cpi	r24, 0x04	; 4
    3d4a:	08 f5       	brcc	.+66     	; 0x3d8e <keycode_to_action+0x52>
    3d4c:	81 30       	cpi	r24, 0x01	; 1
    3d4e:	09 f0       	breq	.+2      	; 0x3d52 <keycode_to_action+0x16>
    3d50:	86 c0       	rjmp	.+268    	; 0x3e5e <keycode_to_action+0x122>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            return (action_t)ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            return (action_t)ACTION_TRANSPARENT;
    3d52:	81 e0       	ldi	r24, 0x01	; 1
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	08 95       	ret


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    3d58:	88 3e       	cpi	r24, 0xE8	; 232
    3d5a:	98 f4       	brcc	.+38     	; 0x3d82 <keycode_to_action+0x46>
    3d5c:	80 3e       	cpi	r24, 0xE0	; 224
    3d5e:	b8 f4       	brcc	.+46     	; 0x3d8e <keycode_to_action+0x52>
    3d60:	8f 3b       	cpi	r24, 0xBF	; 191
    3d62:	09 f0       	breq	.+2      	; 0x3d66 <keycode_to_action+0x2a>
    3d64:	7c c0       	rjmp	.+248    	; 0x3e5e <keycode_to_action+0x122>
            break;
        case KC_TRNS:
            return (action_t)ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    3d66:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <clear_keyboard>
    3d6a:	2f ef       	ldi	r18, 0xFF	; 255
    3d6c:	80 e7       	ldi	r24, 0x70	; 112
    3d6e:	92 e0       	ldi	r25, 0x02	; 2
    3d70:	21 50       	subi	r18, 0x01	; 1
    3d72:	80 40       	sbci	r24, 0x00	; 0
    3d74:	90 40       	sbci	r25, 0x00	; 0
    3d76:	e1 f7       	brne	.-8      	; 0x3d70 <keycode_to_action+0x34>
    3d78:	00 c0       	rjmp	.+0      	; 0x3d7a <keycode_to_action+0x3e>
    3d7a:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    3d7c:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <bootloader_jump>
    3d80:	6e c0       	rjmp	.+220    	; 0x3e5e <keycode_to_action+0x122>


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    3d82:	80 3f       	cpi	r24, 0xF0	; 240
    3d84:	08 f4       	brcc	.+2      	; 0x3d88 <keycode_to_action+0x4c>
    3d86:	6b c0       	rjmp	.+214    	; 0x3e5e <keycode_to_action+0x122>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            return (action_t)ACTION_MOUSEKEY(keycode);
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	90 65       	ori	r25, 0x50	; 80
    3d8c:	08 95       	ret
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            return (action_t)ACTION_KEY(keycode);
    3d8e:	90 e0       	ldi	r25, 0x00	; 0
    3d90:	08 95       	ret
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            return (action_t)ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3d92:	85 3a       	cpi	r24, 0xA5	; 165
    3d94:	21 f0       	breq	.+8      	; 0x3d9e <keycode_to_action+0x62>
    3d96:	86 3a       	cpi	r24, 0xA6	; 166
    3d98:	21 f0       	breq	.+8      	; 0x3da2 <keycode_to_action+0x66>
    3d9a:	33 e8       	ldi	r19, 0x83	; 131
    3d9c:	03 c0       	rjmp	.+6      	; 0x3da4 <keycode_to_action+0x68>
    3d9e:	31 e8       	ldi	r19, 0x81	; 129
    3da0:	01 c0       	rjmp	.+2      	; 0x3da4 <keycode_to_action+0x68>
    3da2:	32 e8       	ldi	r19, 0x82	; 130
    3da4:	20 e4       	ldi	r18, 0x40	; 64
    3da6:	58 c0       	rjmp	.+176    	; 0x3e58 <keycode_to_action+0x11c>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3da8:	88 3a       	cpi	r24, 0xA8	; 168
    3daa:	51 f1       	breq	.+84     	; 0x3e00 <keycode_to_action+0xc4>
    3dac:	89 3a       	cpi	r24, 0xA9	; 169
    3dae:	59 f1       	breq	.+86     	; 0x3e06 <keycode_to_action+0xca>
    3db0:	8a 3a       	cpi	r24, 0xAA	; 170
    3db2:	59 f1       	breq	.+86     	; 0x3e0a <keycode_to_action+0xce>
    3db4:	8b 3a       	cpi	r24, 0xAB	; 171
    3db6:	59 f1       	breq	.+86     	; 0x3e0e <keycode_to_action+0xd2>
    3db8:	8c 3a       	cpi	r24, 0xAC	; 172
    3dba:	59 f1       	breq	.+86     	; 0x3e12 <keycode_to_action+0xd6>
    3dbc:	8d 3a       	cpi	r24, 0xAD	; 173
    3dbe:	59 f1       	breq	.+86     	; 0x3e16 <keycode_to_action+0xda>
    3dc0:	8e 3a       	cpi	r24, 0xAE	; 174
    3dc2:	59 f1       	breq	.+86     	; 0x3e1a <keycode_to_action+0xde>
    3dc4:	8f 3a       	cpi	r24, 0xAF	; 175
    3dc6:	59 f1       	breq	.+86     	; 0x3e1e <keycode_to_action+0xe2>
    3dc8:	81 3b       	cpi	r24, 0xB1	; 177
    3dca:	59 f1       	breq	.+86     	; 0x3e22 <keycode_to_action+0xe6>
    3dcc:	80 3b       	cpi	r24, 0xB0	; 176
    3dce:	59 f1       	breq	.+86     	; 0x3e26 <keycode_to_action+0xea>
    3dd0:	82 3b       	cpi	r24, 0xB2	; 178
    3dd2:	59 f1       	breq	.+86     	; 0x3e2a <keycode_to_action+0xee>
    3dd4:	83 3b       	cpi	r24, 0xB3	; 179
    3dd6:	59 f1       	breq	.+86     	; 0x3e2e <keycode_to_action+0xf2>
    3dd8:	84 3b       	cpi	r24, 0xB4	; 180
    3dda:	59 f1       	breq	.+86     	; 0x3e32 <keycode_to_action+0xf6>
    3ddc:	85 3b       	cpi	r24, 0xB5	; 181
    3dde:	59 f1       	breq	.+86     	; 0x3e36 <keycode_to_action+0xfa>
    3de0:	86 3b       	cpi	r24, 0xB6	; 182
    3de2:	61 f1       	breq	.+88     	; 0x3e3c <keycode_to_action+0x100>
    3de4:	87 3b       	cpi	r24, 0xB7	; 183
    3de6:	61 f1       	breq	.+88     	; 0x3e40 <keycode_to_action+0x104>
    3de8:	88 3b       	cpi	r24, 0xB8	; 184
    3dea:	61 f1       	breq	.+88     	; 0x3e44 <keycode_to_action+0x108>
    3dec:	89 3b       	cpi	r24, 0xB9	; 185
    3dee:	61 f1       	breq	.+88     	; 0x3e48 <keycode_to_action+0x10c>
    3df0:	8a 3b       	cpi	r24, 0xBA	; 186
    3df2:	61 f1       	breq	.+88     	; 0x3e4c <keycode_to_action+0x110>
    3df4:	8b 3b       	cpi	r24, 0xBB	; 187
    3df6:	61 f1       	breq	.+88     	; 0x3e50 <keycode_to_action+0x114>
    3df8:	8c 3b       	cpi	r24, 0xBC	; 188
    3dfa:	61 f1       	breq	.+88     	; 0x3e54 <keycode_to_action+0x118>
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	01 c0       	rjmp	.+2      	; 0x3e02 <keycode_to_action+0xc6>
    3e00:	32 ee       	ldi	r19, 0xE2	; 226
    3e02:	24 e4       	ldi	r18, 0x44	; 68
    3e04:	29 c0       	rjmp	.+82     	; 0x3e58 <keycode_to_action+0x11c>
    3e06:	39 ee       	ldi	r19, 0xE9	; 233
    3e08:	fc cf       	rjmp	.-8      	; 0x3e02 <keycode_to_action+0xc6>
    3e0a:	3a ee       	ldi	r19, 0xEA	; 234
    3e0c:	fa cf       	rjmp	.-12     	; 0x3e02 <keycode_to_action+0xc6>
    3e0e:	35 eb       	ldi	r19, 0xB5	; 181
    3e10:	f8 cf       	rjmp	.-16     	; 0x3e02 <keycode_to_action+0xc6>
    3e12:	36 eb       	ldi	r19, 0xB6	; 182
    3e14:	f6 cf       	rjmp	.-20     	; 0x3e02 <keycode_to_action+0xc6>
    3e16:	33 eb       	ldi	r19, 0xB3	; 179
    3e18:	f4 cf       	rjmp	.-24     	; 0x3e02 <keycode_to_action+0xc6>
    3e1a:	34 eb       	ldi	r19, 0xB4	; 180
    3e1c:	f2 cf       	rjmp	.-28     	; 0x3e02 <keycode_to_action+0xc6>
    3e1e:	37 eb       	ldi	r19, 0xB7	; 183
    3e20:	f0 cf       	rjmp	.-32     	; 0x3e02 <keycode_to_action+0xc6>
    3e22:	3c ec       	ldi	r19, 0xCC	; 204
    3e24:	ee cf       	rjmp	.-36     	; 0x3e02 <keycode_to_action+0xc6>
    3e26:	3d ec       	ldi	r19, 0xCD	; 205
    3e28:	ec cf       	rjmp	.-40     	; 0x3e02 <keycode_to_action+0xc6>
    3e2a:	33 e8       	ldi	r19, 0x83	; 131
    3e2c:	05 c0       	rjmp	.+10     	; 0x3e38 <keycode_to_action+0xfc>
    3e2e:	3a e8       	ldi	r19, 0x8A	; 138
    3e30:	03 c0       	rjmp	.+6      	; 0x3e38 <keycode_to_action+0xfc>
    3e32:	32 e9       	ldi	r19, 0x92	; 146
    3e34:	01 c0       	rjmp	.+2      	; 0x3e38 <keycode_to_action+0xfc>
    3e36:	34 e9       	ldi	r19, 0x94	; 148
    3e38:	25 e4       	ldi	r18, 0x45	; 69
    3e3a:	0e c0       	rjmp	.+28     	; 0x3e58 <keycode_to_action+0x11c>
    3e3c:	31 e2       	ldi	r19, 0x21	; 33
    3e3e:	0b c0       	rjmp	.+22     	; 0x3e56 <keycode_to_action+0x11a>
    3e40:	33 e2       	ldi	r19, 0x23	; 35
    3e42:	09 c0       	rjmp	.+18     	; 0x3e56 <keycode_to_action+0x11a>
    3e44:	34 e2       	ldi	r19, 0x24	; 36
    3e46:	07 c0       	rjmp	.+14     	; 0x3e56 <keycode_to_action+0x11a>
    3e48:	35 e2       	ldi	r19, 0x25	; 37
    3e4a:	05 c0       	rjmp	.+10     	; 0x3e56 <keycode_to_action+0x11a>
    3e4c:	36 e2       	ldi	r19, 0x26	; 38
    3e4e:	03 c0       	rjmp	.+6      	; 0x3e56 <keycode_to_action+0x11a>
    3e50:	37 e2       	ldi	r19, 0x27	; 39
    3e52:	01 c0       	rjmp	.+2      	; 0x3e56 <keycode_to_action+0x11a>
    3e54:	3a e2       	ldi	r19, 0x2A	; 42
    3e56:	26 e4       	ldi	r18, 0x46	; 70
    3e58:	83 2f       	mov	r24, r19
    3e5a:	92 2f       	mov	r25, r18
    3e5c:	08 95       	ret
            clear_keyboard();
            wait_ms(50);
            bootloader_jump(); // not return
            break;
        default:
            return (action_t)ACTION_NO;
    3e5e:	80 e0       	ldi	r24, 0x00	; 0
    3e60:	90 e0       	ldi	r25, 0x00	; 0
            break;
    }
    return (action_t)ACTION_NO;
}
    3e62:	08 95       	ret

00003e64 <action_get_macro>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    3e64:	80 e0       	ldi	r24, 0x00	; 0
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	08 95       	ret

00003e6a <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3e6a:	08 95       	ret

00003e6c <keymap_key_to_keycode>:

__attribute__ ((weak))
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
#if defined(__AVR__)
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
    3e6c:	e7 2f       	mov	r30, r23
    3e6e:	f0 e0       	ldi	r31, 0x00	; 0
    3e70:	94 e0       	ldi	r25, 0x04	; 4
    3e72:	89 9f       	mul	r24, r25
    3e74:	e0 0d       	add	r30, r0
    3e76:	f1 1d       	adc	r31, r1
    3e78:	11 24       	eor	r1, r1
    3e7a:	ee 0f       	add	r30, r30
    3e7c:	ff 1f       	adc	r31, r31
    3e7e:	ee 0f       	add	r30, r30
    3e80:	ff 1f       	adc	r31, r31
    3e82:	e6 0f       	add	r30, r22
    3e84:	f1 1d       	adc	r31, r1
    3e86:	e4 51       	subi	r30, 0x14	; 20
    3e88:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8a:	84 91       	lpm	r24, Z
#else
    return keymaps[(layer)][(key.row)][(key.col)];
#endif
}
    3e8c:	08 95       	ret

00003e8e <keymap_fn_to_action>:

__attribute__ ((weak))
action_t keymap_fn_to_action(uint8_t keycode)
{
#if defined(__AVR__)
    return (action_t)pgm_read_word(&fn_actions[FN_INDEX(keycode)]);
    3e8e:	e8 2f       	mov	r30, r24
    3e90:	f0 e0       	ldi	r31, 0x00	; 0
    3e92:	ee 0f       	add	r30, r30
    3e94:	ff 1f       	adc	r31, r31
    3e96:	e0 5a       	subi	r30, 0xA0	; 160
    3e98:	f0 40       	sbci	r31, 0x00	; 0
    3e9a:	85 91       	lpm	r24, Z+
    3e9c:	94 91       	lpm	r25, Z
#else
    return fn_actions[FN_INDEX(keycode)];
#endif
}
    3e9e:	08 95       	ret

00003ea0 <action_for_key>:

/* converts key to action */
__attribute__ ((weak))
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3ea0:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <keymap_key_to_keycode>
    switch (keycode) {
    3ea4:	80 3e       	cpi	r24, 0xE0	; 224
    3ea6:	a8 f4       	brcc	.+42     	; 0x3ed2 <action_for_key+0x32>
    3ea8:	80 3c       	cpi	r24, 0xC0	; 192
    3eaa:	00 f5       	brcc	.+64     	; 0x3eec <action_for_key+0x4c>
    3eac:	81 33       	cpi	r24, 0x31	; 49
    3eae:	09 f4       	brne	.+2      	; 0x3eb2 <action_for_key+0x12>
    3eb0:	5c c0       	rjmp	.+184    	; 0x3f6a <action_for_key+0xca>
    3eb2:	38 f4       	brcc	.+14     	; 0x3ec2 <action_for_key+0x22>
    3eb4:	89 32       	cpi	r24, 0x29	; 41
    3eb6:	09 f4       	brne	.+2      	; 0x3eba <action_for_key+0x1a>
    3eb8:	52 c0       	rjmp	.+164    	; 0x3f5e <action_for_key+0xbe>
    3eba:	8a 32       	cpi	r24, 0x2A	; 42
    3ebc:	09 f4       	brne	.+2      	; 0x3ec0 <action_for_key+0x20>
    3ebe:	5b c0       	rjmp	.+182    	; 0x3f76 <action_for_key+0xd6>
    3ec0:	5f c0       	rjmp	.+190    	; 0x3f80 <action_for_key+0xe0>
    3ec2:	89 33       	cpi	r24, 0x39	; 57
    3ec4:	b1 f0       	breq	.+44     	; 0x3ef2 <action_for_key+0x52>
    3ec6:	82 38       	cpi	r24, 0x82	; 130
    3ec8:	a1 f0       	breq	.+40     	; 0x3ef2 <action_for_key+0x52>
    3eca:	85 33       	cpi	r24, 0x35	; 53
    3ecc:	09 f4       	brne	.+2      	; 0x3ed0 <action_for_key+0x30>
    3ece:	41 c0       	rjmp	.+130    	; 0x3f52 <action_for_key+0xb2>
    3ed0:	57 c0       	rjmp	.+174    	; 0x3f80 <action_for_key+0xe0>
    3ed2:	83 3e       	cpi	r24, 0xE3	; 227
    3ed4:	41 f1       	breq	.+80     	; 0x3f26 <action_for_key+0x86>
    3ed6:	28 f4       	brcc	.+10     	; 0x3ee2 <action_for_key+0x42>
    3ed8:	80 3e       	cpi	r24, 0xE0	; 224
    3eda:	99 f0       	breq	.+38     	; 0x3f02 <action_for_key+0x62>
    3edc:	82 3e       	cpi	r24, 0xE2	; 226
    3ede:	b9 f0       	breq	.+46     	; 0x3f0e <action_for_key+0x6e>
    3ee0:	4f c0       	rjmp	.+158    	; 0x3f80 <action_for_key+0xe0>
    3ee2:	86 3e       	cpi	r24, 0xE6	; 230
    3ee4:	31 f1       	breq	.+76     	; 0x3f32 <action_for_key+0x92>
    3ee6:	87 3e       	cpi	r24, 0xE7	; 231
    3ee8:	71 f1       	breq	.+92     	; 0x3f46 <action_for_key+0xa6>
    3eea:	4a c0       	rjmp	.+148    	; 0x3f80 <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3eec:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <keymap_fn_to_action>
    3ef0:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3ef2:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <keymap_config>
    3ef6:	90 fd       	sbrc	r25, 0
    3ef8:	02 c0       	rjmp	.+4      	; 0x3efe <action_for_key+0x5e>
    3efa:	91 ff       	sbrs	r25, 1
    3efc:	41 c0       	rjmp	.+130    	; 0x3f80 <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    3efe:	80 ee       	ldi	r24, 0xE0	; 224
    3f00:	3f c0       	rjmp	.+126    	; 0x3f80 <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3f02:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <keymap_config>
    3f06:	80 ff       	sbrs	r24, 0
    3f08:	fa cf       	rjmp	.-12     	; 0x3efe <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    3f0a:	89 e3       	ldi	r24, 0x39	; 57
    3f0c:	39 c0       	rjmp	.+114    	; 0x3f80 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3f0e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <keymap_config>
    3f12:	82 ff       	sbrs	r24, 2
    3f14:	0c c0       	rjmp	.+24     	; 0x3f2e <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    3f16:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <keymap_config>
    3f1a:	84 ff       	sbrs	r24, 4
    3f1c:	02 c0       	rjmp	.+4      	; 0x3f22 <action_for_key+0x82>
                    return keycode_to_action(KC_NO);
    3f1e:	80 e0       	ldi	r24, 0x00	; 0
    3f20:	2f c0       	rjmp	.+94     	; 0x3f80 <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    3f22:	83 ee       	ldi	r24, 0xE3	; 227
    3f24:	2d c0       	rjmp	.+90     	; 0x3f80 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3f26:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <keymap_config>
    3f2a:	82 ff       	sbrs	r24, 2
    3f2c:	f4 cf       	rjmp	.-24     	; 0x3f16 <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(KC_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    3f2e:	82 ee       	ldi	r24, 0xE2	; 226
    3f30:	27 c0       	rjmp	.+78     	; 0x3f80 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(KC_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3f32:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <keymap_config>
    3f36:	83 ff       	sbrs	r24, 3
    3f38:	0a c0       	rjmp	.+20     	; 0x3f4e <action_for_key+0xae>
                if (keymap_config.no_gui) {
    3f3a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <keymap_config>
    3f3e:	84 fd       	sbrc	r24, 4
    3f40:	ee cf       	rjmp	.-36     	; 0x3f1e <action_for_key+0x7e>
                    return keycode_to_action(KC_NO);
                }
                return keycode_to_action(KC_RGUI);
    3f42:	87 ee       	ldi	r24, 0xE7	; 231
    3f44:	1d c0       	rjmp	.+58     	; 0x3f80 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3f46:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <keymap_config>
    3f4a:	83 ff       	sbrs	r24, 3
    3f4c:	f6 cf       	rjmp	.-20     	; 0x3f3a <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(KC_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    3f4e:	86 ee       	ldi	r24, 0xE6	; 230
    3f50:	17 c0       	rjmp	.+46     	; 0x3f80 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(KC_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    3f52:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <keymap_config>
    3f56:	85 ff       	sbrs	r24, 5
    3f58:	06 c0       	rjmp	.+12     	; 0x3f66 <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    3f5a:	89 e2       	ldi	r24, 0x29	; 41
    3f5c:	11 c0       	rjmp	.+34     	; 0x3f80 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3f5e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <keymap_config>
    3f62:	85 ff       	sbrs	r24, 5
    3f64:	fa cf       	rjmp	.-12     	; 0x3f5a <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    3f66:	85 e3       	ldi	r24, 0x35	; 53
    3f68:	0b c0       	rjmp	.+22     	; 0x3f80 <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3f6a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <keymap_config>
    3f6e:	86 ff       	sbrs	r24, 6
    3f70:	06 c0       	rjmp	.+12     	; 0x3f7e <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    3f72:	8a e2       	ldi	r24, 0x2A	; 42
    3f74:	05 c0       	rjmp	.+10     	; 0x3f80 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3f76:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <keymap_config>
    3f7a:	86 ff       	sbrs	r24, 6
    3f7c:	fa cf       	rjmp	.-12     	; 0x3f72 <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    3f7e:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    3f80:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <keycode_to_action>
    }
}
    3f84:	08 95       	ret

00003f86 <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    3f86:	cf 92       	push	r12
    3f88:	df 92       	push	r13
    3f8a:	ef 92       	push	r14
    3f8c:	ff 92       	push	r15
    3f8e:	0f 93       	push	r16
    3f90:	1f 93       	push	r17
    3f92:	cf 93       	push	r28
    3f94:	6c 01       	movw	r12, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3f96:	c0 e0       	ldi	r28, 0x00	; 0
        matrix_row_t matrix_row = matrix_get_row(r);
    3f98:	8c 2f       	mov	r24, r28
    3f9a:	0e 94 c2 07 	call	0xf84	; 0xf84 <matrix_get_row>
    3f9e:	00 e0       	ldi	r16, 0x00	; 0
    3fa0:	10 e0       	ldi	r17, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3fa2:	e8 2e       	mov	r14, r24
    3fa4:	f1 2c       	mov	r15, r1
    3fa6:	c7 01       	movw	r24, r14
    3fa8:	00 2e       	mov	r0, r16
    3faa:	02 c0       	rjmp	.+4      	; 0x3fb0 <scan_key+0x2a>
    3fac:	95 95       	asr	r25
    3fae:	87 95       	ror	r24
    3fb0:	0a 94       	dec	r0
    3fb2:	e2 f7       	brpl	.-8      	; 0x3fac <scan_key+0x26>
    3fb4:	80 ff       	sbrs	r24, 0
    3fb6:	15 c0       	rjmp	.+42     	; 0x3fe2 <scan_key+0x5c>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    3fb8:	60 2f       	mov	r22, r16
    3fba:	7c 2f       	mov	r23, r28
    3fbc:	80 e0       	ldi	r24, 0x00	; 0
    3fbe:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <action_for_key>
                if (action.code == code ||
    3fc2:	8c 15       	cp	r24, r12
    3fc4:	9d 05       	cpc	r25, r13
    3fc6:	59 f0       	breq	.+22     	; 0x3fde <scan_key+0x58>
    3fc8:	29 2f       	mov	r18, r25
    3fca:	20 7e       	andi	r18, 0xE0	; 224
    3fcc:	39 2f       	mov	r19, r25
    3fce:	30 7c       	andi	r19, 0xC0	; 192
    3fd0:	11 f0       	breq	.+4      	; 0x3fd6 <scan_key+0x50>
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
    3fd2:	20 3a       	cpi	r18, 0xA0	; 160
    3fd4:	31 f4       	brne	.+12     	; 0x3fe2 <scan_key+0x5c>
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    3fd6:	90 e0       	ldi	r25, 0x00	; 0
    3fd8:	c8 16       	cp	r12, r24
    3fda:	d9 06       	cpc	r13, r25
    3fdc:	11 f4       	brne	.+4      	; 0x3fe2 <scan_key+0x5c>
                     action.key.code == code)) {
                    return true;
    3fde:	81 e0       	ldi	r24, 0x01	; 1
    3fe0:	09 c0       	rjmp	.+18     	; 0x3ff4 <scan_key+0x6e>
    3fe2:	0f 5f       	subi	r16, 0xFF	; 255
    3fe4:	1f 4f       	sbci	r17, 0xFF	; 255

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    3fe6:	04 30       	cpi	r16, 0x04	; 4
    3fe8:	11 05       	cpc	r17, r1
    3fea:	e9 f6       	brne	.-70     	; 0x3fa6 <scan_key+0x20>
    }
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3fec:	cf 5f       	subi	r28, 0xFF	; 255
    3fee:	c4 30       	cpi	r28, 0x04	; 4
    3ff0:	99 f6       	brne	.-90     	; 0x3f98 <scan_key+0x12>
                    return true;
                }
            }
        }
    }
    return false;
    3ff2:	80 e0       	ldi	r24, 0x00	; 0
}
    3ff4:	cf 91       	pop	r28
    3ff6:	1f 91       	pop	r17
    3ff8:	0f 91       	pop	r16
    3ffa:	ff 90       	pop	r15
    3ffc:	ef 90       	pop	r14
    3ffe:	df 90       	pop	r13
    4000:	cf 90       	pop	r12
    4002:	08 95       	ret

00004004 <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    4004:	cf 93       	push	r28
    4006:	df 93       	push	r29
    4008:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    400a:	8c e2       	ldi	r24, 0x2C	; 44
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <scan_key>
    4012:	88 23       	and	r24, r24
    4014:	29 f0       	breq	.+10     	; 0x4020 <bootmagic_scan_key+0x1c>

    return scan_key(code);
    4016:	ce 01       	movw	r24, r28
}
    4018:	df 91       	pop	r29
    401a:	cf 91       	pop	r28

bool bootmagic_scan_key(uint16_t code)
{
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;

    return scan_key(code);
    401c:	0c 94 c3 1f 	jmp	0x3f86	; 0x3f86 <scan_key>
}
    4020:	80 e0       	ldi	r24, 0x00	; 0
    4022:	df 91       	pop	r29
    4024:	cf 91       	pop	r28
    4026:	08 95       	ret

00004028 <bootmagic>:
#include "hook.h"

keymap_config_t keymap_config;

void bootmagic(void)
{
    4028:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    402a:	0e 94 81 21 	call	0x4302	; 0x4302 <eeconfig_is_enabled>
    402e:	81 11       	cpse	r24, r1
    4030:	02 c0       	rjmp	.+4      	; 0x4036 <bootmagic+0xe>
        eeconfig_init();
    4032:	0e 94 62 21 	call	0x42c4	; 0x42c4 <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("bootmagic scan: ... ");
    4036:	84 ed       	ldi	r24, 0xD4	; 212
    4038:	93 e0       	ldi	r25, 0x03	; 3
    403a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); wait_ms(10); }
    403e:	c5 e6       	ldi	r28, 0x65	; 101
    4040:	c1 50       	subi	r28, 0x01	; 1
    4042:	49 f0       	breq	.+18     	; 0x4056 <bootmagic+0x2e>
    4044:	0e 94 2b 07 	call	0xe56	; 0xe56 <matrix_scan>
    4048:	8f e3       	ldi	r24, 0x3F	; 63
    404a:	9c e9       	ldi	r25, 0x9C	; 156
    404c:	01 97       	sbiw	r24, 0x01	; 1
    404e:	f1 f7       	brne	.-4      	; 0x404c <bootmagic+0x24>
    4050:	00 c0       	rjmp	.+0      	; 0x4052 <bootmagic+0x2a>
    4052:	00 00       	nop
    4054:	f5 cf       	rjmp	.-22     	; 0x4040 <bootmagic+0x18>
    print("done.\n");
    4056:	8d ec       	ldi	r24, 0xCD	; 205
    4058:	93 e0       	ldi	r25, 0x03	; 3
    405a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    405e:	89 e2       	ldi	r24, 0x29	; 41
    4060:	90 e0       	ldi	r25, 0x00	; 0
    4062:	0e 94 02 20 	call	0x4004	; 0x4004 <bootmagic_scan_key>
    4066:	81 11       	cpse	r24, r1
    4068:	2b c1       	rjmp	.+598    	; 0x42c0 <bootmagic+0x298>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    406a:	8a e2       	ldi	r24, 0x2A	; 42
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	0e 94 02 20 	call	0x4004	; 0x4004 <bootmagic_scan_key>
    4072:	81 11       	cpse	r24, r1
        eeconfig_init();
    4074:	0e 94 62 21 	call	0x42c4	; 0x42c4 <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    4078:	85 e0       	ldi	r24, 0x05	; 5
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	0e 94 02 20 	call	0x4004	; 0x4004 <bootmagic_scan_key>
    4080:	81 11       	cpse	r24, r1
        bootloader_jump();
    4082:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <bootloader_jump>
    }

    /* user-defined checks */
    hook_bootmagic();
    4086:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <hook_bootmagic>

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    408a:	0e 94 8c 21 	call	0x4318	; 0x4318 <eeconfig_read_debug>
    408e:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <debug_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    4092:	87 e0       	ldi	r24, 0x07	; 7
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	0e 94 02 20 	call	0x4004	; 0x4004 <bootmagic_scan_key>
    409a:	88 23       	and	r24, r24
    409c:	c1 f1       	breq	.+112    	; 0x410e <bootmagic+0xe6>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    409e:	8b e1       	ldi	r24, 0x1B	; 27
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	0e 94 02 20 	call	0x4004	; 0x4004 <bootmagic_scan_key>
    40a6:	88 23       	and	r24, r24
    40a8:	51 f0       	breq	.+20     	; 0x40be <bootmagic+0x96>
            debug_config.matrix = !debug_config.matrix;
    40aa:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <debug_config>
    40ae:	81 fb       	bst	r24, 1
    40b0:	22 27       	eor	r18, r18
    40b2:	20 f9       	bld	r18, 0
    40b4:	91 e0       	ldi	r25, 0x01	; 1
    40b6:	92 27       	eor	r25, r18
    40b8:	90 fb       	bst	r25, 0
    40ba:	81 f9       	bld	r24, 1
    40bc:	0f c0       	rjmp	.+30     	; 0x40dc <bootmagic+0xb4>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    40be:	8e e0       	ldi	r24, 0x0E	; 14
    40c0:	90 e0       	ldi	r25, 0x00	; 0
    40c2:	0e 94 02 20 	call	0x4004	; 0x4004 <bootmagic_scan_key>
    40c6:	88 23       	and	r24, r24
    40c8:	61 f0       	breq	.+24     	; 0x40e2 <bootmagic+0xba>
            debug_config.keyboard = !debug_config.keyboard;
    40ca:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <debug_config>
    40ce:	82 fb       	bst	r24, 2
    40d0:	22 27       	eor	r18, r18
    40d2:	20 f9       	bld	r18, 0
    40d4:	91 e0       	ldi	r25, 0x01	; 1
    40d6:	92 27       	eor	r25, r18
    40d8:	90 fb       	bst	r25, 0
    40da:	82 f9       	bld	r24, 2
    40dc:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <debug_config>
    40e0:	16 c0       	rjmp	.+44     	; 0x410e <bootmagic+0xe6>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    40e2:	80 e1       	ldi	r24, 0x10	; 16
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	0e 94 02 20 	call	0x4004	; 0x4004 <bootmagic_scan_key>
    40ea:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <debug_config>
    40ee:	88 23       	and	r24, r24
    40f0:	41 f0       	breq	.+16     	; 0x4102 <bootmagic+0xda>
            debug_config.mouse = !debug_config.mouse;
    40f2:	93 fb       	bst	r25, 3
    40f4:	22 27       	eor	r18, r18
    40f6:	20 f9       	bld	r18, 0
    40f8:	81 e0       	ldi	r24, 0x01	; 1
    40fa:	82 27       	eor	r24, r18
    40fc:	80 fb       	bst	r24, 0
    40fe:	93 f9       	bld	r25, 3
    4100:	04 c0       	rjmp	.+8      	; 0x410a <bootmagic+0xe2>
        } else {
            debug_config.enable = !debug_config.enable;
    4102:	89 2f       	mov	r24, r25
    4104:	80 95       	com	r24
    4106:	80 fb       	bst	r24, 0
    4108:	90 f9       	bld	r25, 0
    410a:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <debug_config>
        }
    }
    eeconfig_write_debug(debug_config.raw);
    410e:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <debug_config>
    4112:	0e 94 90 21 	call	0x4320	; 0x4320 <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    4116:	0e 94 9e 21 	call	0x433c	; 0x433c <eeconfig_read_keymap>
    411a:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    411e:	80 ee       	ldi	r24, 0xE0	; 224
    4120:	90 e0       	ldi	r25, 0x00	; 0
    4122:	0e 94 02 20 	call	0x4004	; 0x4004 <bootmagic_scan_key>
    4126:	88 23       	and	r24, r24
    4128:	41 f0       	breq	.+16     	; 0x413a <bootmagic+0x112>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    412a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <keymap_config>
    412e:	98 2f       	mov	r25, r24
    4130:	90 95       	com	r25
    4132:	90 fb       	bst	r25, 0
    4134:	80 f9       	bld	r24, 0
    4136:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    413a:	89 e3       	ldi	r24, 0x39	; 57
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	0e 94 02 20 	call	0x4004	; 0x4004 <bootmagic_scan_key>
    4142:	88 23       	and	r24, r24
    4144:	59 f0       	breq	.+22     	; 0x415c <bootmagic+0x134>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    4146:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <keymap_config>
    414a:	81 fb       	bst	r24, 1
    414c:	22 27       	eor	r18, r18
    414e:	20 f9       	bld	r18, 0
    4150:	91 e0       	ldi	r25, 0x01	; 1
    4152:	92 27       	eor	r25, r18
    4154:	90 fb       	bst	r25, 0
    4156:	81 f9       	bld	r24, 1
    4158:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    415c:	82 ee       	ldi	r24, 0xE2	; 226
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	0e 94 02 20 	call	0x4004	; 0x4004 <bootmagic_scan_key>
    4164:	88 23       	and	r24, r24
    4166:	59 f0       	breq	.+22     	; 0x417e <bootmagic+0x156>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    4168:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <keymap_config>
    416c:	82 fb       	bst	r24, 2
    416e:	22 27       	eor	r18, r18
    4170:	20 f9       	bld	r18, 0
    4172:	91 e0       	ldi	r25, 0x01	; 1
    4174:	92 27       	eor	r25, r18
    4176:	90 fb       	bst	r25, 0
    4178:	82 f9       	bld	r24, 2
    417a:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    417e:	86 ee       	ldi	r24, 0xE6	; 230
    4180:	90 e0       	ldi	r25, 0x00	; 0
    4182:	0e 94 02 20 	call	0x4004	; 0x4004 <bootmagic_scan_key>
    4186:	88 23       	and	r24, r24
    4188:	59 f0       	breq	.+22     	; 0x41a0 <bootmagic+0x178>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    418a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <keymap_config>
    418e:	83 fb       	bst	r24, 3
    4190:	22 27       	eor	r18, r18
    4192:	20 f9       	bld	r18, 0
    4194:	91 e0       	ldi	r25, 0x01	; 1
    4196:	92 27       	eor	r25, r18
    4198:	90 fb       	bst	r25, 0
    419a:	83 f9       	bld	r24, 3
    419c:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    41a0:	83 ee       	ldi	r24, 0xE3	; 227
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	0e 94 02 20 	call	0x4004	; 0x4004 <bootmagic_scan_key>
    41a8:	88 23       	and	r24, r24
    41aa:	59 f0       	breq	.+22     	; 0x41c2 <bootmagic+0x19a>
        keymap_config.no_gui = !keymap_config.no_gui;
    41ac:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <keymap_config>
    41b0:	84 fb       	bst	r24, 4
    41b2:	22 27       	eor	r18, r18
    41b4:	20 f9       	bld	r18, 0
    41b6:	91 e0       	ldi	r25, 0x01	; 1
    41b8:	92 27       	eor	r25, r18
    41ba:	90 fb       	bst	r25, 0
    41bc:	84 f9       	bld	r24, 4
    41be:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    41c2:	85 e3       	ldi	r24, 0x35	; 53
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	0e 94 02 20 	call	0x4004	; 0x4004 <bootmagic_scan_key>
    41ca:	88 23       	and	r24, r24
    41cc:	59 f0       	breq	.+22     	; 0x41e4 <bootmagic+0x1bc>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    41ce:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <keymap_config>
    41d2:	85 fb       	bst	r24, 5
    41d4:	22 27       	eor	r18, r18
    41d6:	20 f9       	bld	r18, 0
    41d8:	91 e0       	ldi	r25, 0x01	; 1
    41da:	92 27       	eor	r25, r18
    41dc:	90 fb       	bst	r25, 0
    41de:	85 f9       	bld	r24, 5
    41e0:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    41e4:	81 e3       	ldi	r24, 0x31	; 49
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	0e 94 02 20 	call	0x4004	; 0x4004 <bootmagic_scan_key>
    41ec:	88 23       	and	r24, r24
    41ee:	59 f0       	breq	.+22     	; 0x4206 <bootmagic+0x1de>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    41f0:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <keymap_config>
    41f4:	86 fb       	bst	r24, 6
    41f6:	22 27       	eor	r18, r18
    41f8:	20 f9       	bld	r18, 0
    41fa:	91 e0       	ldi	r25, 0x01	; 1
    41fc:	92 27       	eor	r25, r18
    41fe:	90 fb       	bst	r25, 0
    4200:	86 f9       	bld	r24, 6
    4202:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    4206:	81 e1       	ldi	r24, 0x11	; 17
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	0e 94 02 20 	call	0x4004	; 0x4004 <bootmagic_scan_key>
    420e:	88 23       	and	r24, r24
    4210:	59 f0       	breq	.+22     	; 0x4228 <bootmagic+0x200>
        keymap_config.nkro = !keymap_config.nkro;
    4212:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <keymap_config>
    4216:	87 fb       	bst	r24, 7
    4218:	22 27       	eor	r18, r18
    421a:	20 f9       	bld	r18, 0
    421c:	91 e0       	ldi	r25, 0x01	; 1
    421e:	92 27       	eor	r25, r18
    4220:	90 fb       	bst	r25, 0
    4222:	87 f9       	bld	r24, 7
    4224:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <keymap_config>
    }
    eeconfig_write_keymap(keymap_config.raw);
    4228:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <keymap_config>
    422c:	0e 94 a2 21 	call	0x4344	; 0x4344 <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    4230:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <keymap_config>
    4234:	87 fb       	bst	r24, 7
    4236:	88 27       	eor	r24, r24
    4238:	80 f9       	bld	r24, 0
    423a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <keyboard_nkro>
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    423e:	87 e2       	ldi	r24, 0x27	; 39
    4240:	90 e0       	ldi	r25, 0x00	; 0
    4242:	0e 94 02 20 	call	0x4004	; 0x4004 <bootmagic_scan_key>
    4246:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    4248:	8e e1       	ldi	r24, 0x1E	; 30
    424a:	90 e0       	ldi	r25, 0x00	; 0
    424c:	0e 94 02 20 	call	0x4004	; 0x4004 <bootmagic_scan_key>
    4250:	81 11       	cpse	r24, r1
    4252:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    4254:	8f e1       	ldi	r24, 0x1F	; 31
    4256:	90 e0       	ldi	r25, 0x00	; 0
    4258:	0e 94 02 20 	call	0x4004	; 0x4004 <bootmagic_scan_key>
    425c:	81 11       	cpse	r24, r1
    425e:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    4260:	80 e2       	ldi	r24, 0x20	; 32
    4262:	90 e0       	ldi	r25, 0x00	; 0
    4264:	0e 94 02 20 	call	0x4004	; 0x4004 <bootmagic_scan_key>
    4268:	81 11       	cpse	r24, r1
    426a:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    426c:	81 e2       	ldi	r24, 0x21	; 33
    426e:	90 e0       	ldi	r25, 0x00	; 0
    4270:	0e 94 02 20 	call	0x4004	; 0x4004 <bootmagic_scan_key>
    4274:	81 11       	cpse	r24, r1
    4276:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    4278:	82 e2       	ldi	r24, 0x22	; 34
    427a:	90 e0       	ldi	r25, 0x00	; 0
    427c:	0e 94 02 20 	call	0x4004	; 0x4004 <bootmagic_scan_key>
    4280:	81 11       	cpse	r24, r1
    4282:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    4284:	83 e2       	ldi	r24, 0x23	; 35
    4286:	90 e0       	ldi	r25, 0x00	; 0
    4288:	0e 94 02 20 	call	0x4004	; 0x4004 <bootmagic_scan_key>
    428c:	81 11       	cpse	r24, r1
    428e:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    4290:	84 e2       	ldi	r24, 0x24	; 36
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	0e 94 02 20 	call	0x4004	; 0x4004 <bootmagic_scan_key>
    4298:	88 23       	and	r24, r24
    429a:	11 f0       	breq	.+4      	; 0x42a0 <bootmagic+0x278>
    429c:	c0 68       	ori	r28, 0x80	; 128
    429e:	02 c0       	rjmp	.+4      	; 0x42a4 <bootmagic+0x27c>
    if (default_layer) {
    42a0:	cc 23       	and	r28, r28
    42a2:	29 f0       	breq	.+10     	; 0x42ae <bootmagic+0x286>
        eeconfig_write_default_layer(default_layer);
    42a4:	8c 2f       	mov	r24, r28
    42a6:	0e 94 99 21 	call	0x4332	; 0x4332 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    42aa:	6c 2f       	mov	r22, r28
    42ac:	03 c0       	rjmp	.+6      	; 0x42b4 <bootmagic+0x28c>
    } else {
        default_layer = eeconfig_read_default_layer();
    42ae:	0e 94 95 21 	call	0x432a	; 0x432a <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    42b2:	68 2f       	mov	r22, r24
    42b4:	70 e0       	ldi	r23, 0x00	; 0
    42b6:	80 e0       	ldi	r24, 0x00	; 0
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    42ba:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    42bc:	0c 94 c8 1a 	jmp	0x3590	; 0x3590 <default_layer_set>
    }
}
    42c0:	cf 91       	pop	r28
    42c2:	08 95       	ret

000042c4 <eeconfig_init>:
    eeprom_write_word(EECONFIG_MAGIC, EECONFIG_MAGIC_NUMBER);
}

void eeconfig_disable(void)
{
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
    42c4:	6d ee       	ldi	r22, 0xED	; 237
    42c6:	7e ef       	ldi	r23, 0xFE	; 254
    42c8:	80 e0       	ldi	r24, 0x00	; 0
    42ca:	90 e0       	ldi	r25, 0x00	; 0
    42cc:	0e 94 23 2c 	call	0x5846	; 0x5846 <eeprom_write_word>
    42d0:	60 e0       	ldi	r22, 0x00	; 0
    42d2:	82 e0       	ldi	r24, 0x02	; 2
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	0e 94 15 2c 	call	0x582a	; 0x582a <eeprom_write_byte>
    42da:	60 e0       	ldi	r22, 0x00	; 0
    42dc:	83 e0       	ldi	r24, 0x03	; 3
    42de:	90 e0       	ldi	r25, 0x00	; 0
    42e0:	0e 94 15 2c 	call	0x582a	; 0x582a <eeprom_write_byte>
    42e4:	60 e0       	ldi	r22, 0x00	; 0
    42e6:	84 e0       	ldi	r24, 0x04	; 4
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	0e 94 15 2c 	call	0x582a	; 0x582a <eeprom_write_byte>
    42ee:	60 e0       	ldi	r22, 0x00	; 0
    42f0:	85 e0       	ldi	r24, 0x05	; 5
    42f2:	90 e0       	ldi	r25, 0x00	; 0
    42f4:	0e 94 15 2c 	call	0x582a	; 0x582a <eeprom_write_byte>
    42f8:	60 e0       	ldi	r22, 0x00	; 0
    42fa:	86 e0       	ldi	r24, 0x06	; 6
    42fc:	90 e0       	ldi	r25, 0x00	; 0
    42fe:	0c 94 15 2c 	jmp	0x582a	; 0x582a <eeprom_write_byte>

00004302 <eeconfig_is_enabled>:
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    4302:	80 e0       	ldi	r24, 0x00	; 0
    4304:	90 e0       	ldi	r25, 0x00	; 0
    4306:	0e 94 0f 2c 	call	0x581e	; 0x581e <eeprom_read_word>
    430a:	21 e0       	ldi	r18, 0x01	; 1
    430c:	8d 3e       	cpi	r24, 0xED	; 237
    430e:	9e 4f       	sbci	r25, 0xFE	; 254
    4310:	09 f0       	breq	.+2      	; 0x4314 <eeconfig_is_enabled+0x12>
    4312:	20 e0       	ldi	r18, 0x00	; 0
}
    4314:	82 2f       	mov	r24, r18
    4316:	08 95       	ret

00004318 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    4318:	82 e0       	ldi	r24, 0x02	; 2
    431a:	90 e0       	ldi	r25, 0x00	; 0
    431c:	0c 94 07 2c 	jmp	0x580e	; 0x580e <eeprom_read_byte>

00004320 <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    4320:	68 2f       	mov	r22, r24
    4322:	82 e0       	ldi	r24, 0x02	; 2
    4324:	90 e0       	ldi	r25, 0x00	; 0
    4326:	0c 94 15 2c 	jmp	0x582a	; 0x582a <eeprom_write_byte>

0000432a <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    432a:	83 e0       	ldi	r24, 0x03	; 3
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	0c 94 07 2c 	jmp	0x580e	; 0x580e <eeprom_read_byte>

00004332 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    4332:	68 2f       	mov	r22, r24
    4334:	83 e0       	ldi	r24, 0x03	; 3
    4336:	90 e0       	ldi	r25, 0x00	; 0
    4338:	0c 94 15 2c 	jmp	0x582a	; 0x582a <eeprom_write_byte>

0000433c <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    433c:	84 e0       	ldi	r24, 0x04	; 4
    433e:	90 e0       	ldi	r25, 0x00	; 0
    4340:	0c 94 07 2c 	jmp	0x580e	; 0x580e <eeprom_read_byte>

00004344 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    4344:	68 2f       	mov	r22, r24
    4346:	84 e0       	ldi	r24, 0x04	; 4
    4348:	90 e0       	ldi	r25, 0x00	; 0
    434a:	0c 94 15 2c 	jmp	0x582a	; 0x582a <eeprom_write_byte>

0000434e <eeconfig_read_backlight>:

#ifdef BACKLIGHT_ENABLE
uint8_t eeconfig_read_backlight(void)      { return eeprom_read_byte(EECONFIG_BACKLIGHT); }
    434e:	86 e0       	ldi	r24, 0x06	; 6
    4350:	90 e0       	ldi	r25, 0x00	; 0
    4352:	0c 94 07 2c 	jmp	0x580e	; 0x580e <eeprom_read_byte>

00004356 <eeconfig_write_backlight>:
void eeconfig_write_backlight(uint8_t val) { eeprom_write_byte(EECONFIG_BACKLIGHT, val); }
    4356:	68 2f       	mov	r22, r24
    4358:	86 e0       	ldi	r24, 0x06	; 6
    435a:	90 e0       	ldi	r25, 0x00	; 0
    435c:	0c 94 15 2c 	jmp	0x582a	; 0x582a <eeprom_write_byte>

00004360 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4360:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <mousekey_accel>
    4364:	80 ff       	sbrs	r24, 0
    4366:	0b c0       	rjmp	.+22     	; 0x437e <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    4368:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <mk_max_speed>
    436c:	85 e0       	ldi	r24, 0x05	; 5
    436e:	68 9f       	mul	r22, r24
    4370:	b0 01       	movw	r22, r0
    4372:	11 24       	eor	r1, r1
    4374:	75 95       	asr	r23
    4376:	67 95       	ror	r22
    4378:	75 95       	asr	r23
    437a:	67 95       	ror	r22
    437c:	2b c0       	rjmp	.+86     	; 0x43d4 <move_unit+0x74>
    } else if (mousekey_accel & (1<<1)) {
    437e:	81 ff       	sbrs	r24, 1
    4380:	09 c0       	rjmp	.+18     	; 0x4394 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    4382:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <mk_max_speed>
    4386:	85 e0       	ldi	r24, 0x05	; 5
    4388:	68 9f       	mul	r22, r24
    438a:	b0 01       	movw	r22, r0
    438c:	11 24       	eor	r1, r1
    438e:	75 95       	asr	r23
    4390:	67 95       	ror	r22
    4392:	20 c0       	rjmp	.+64     	; 0x43d4 <move_unit+0x74>
    } else if (mousekey_accel & (1<<2)) {
    4394:	82 ff       	sbrs	r24, 2
    4396:	07 c0       	rjmp	.+14     	; 0x43a6 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    4398:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <mk_max_speed>
    439c:	85 e0       	ldi	r24, 0x05	; 5
    439e:	68 9f       	mul	r22, r24
    43a0:	b0 01       	movw	r22, r0
    43a2:	11 24       	eor	r1, r1
    43a4:	17 c0       	rjmp	.+46     	; 0x43d4 <move_unit+0x74>
    } else if (mousekey_repeat == 0) {
    43a6:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <mousekey_repeat>
    43aa:	99 23       	and	r25, r25
    43ac:	d1 f0       	breq	.+52     	; 0x43e2 <move_unit+0x82>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    43ae:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <mk_time_to_max>
    43b2:	96 17       	cp	r25, r22
    43b4:	88 f7       	brcc	.-30     	; 0x4398 <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    43b6:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <mk_max_speed>
    43ba:	85 e0       	ldi	r24, 0x05	; 5
    43bc:	28 9f       	mul	r18, r24
    43be:	90 01       	movw	r18, r0
    43c0:	11 24       	eor	r1, r1
    43c2:	92 9f       	mul	r25, r18
    43c4:	a0 01       	movw	r20, r0
    43c6:	93 9f       	mul	r25, r19
    43c8:	50 0d       	add	r21, r0
    43ca:	11 24       	eor	r1, r1
    43cc:	70 e0       	ldi	r23, 0x00	; 0
    43ce:	ca 01       	movw	r24, r20
    43d0:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    43d4:	60 38       	cpi	r22, 0x80	; 128
    43d6:	71 05       	cpc	r23, r1
    43d8:	40 f4       	brcc	.+16     	; 0x43ea <move_unit+0x8a>
    43da:	61 15       	cp	r22, r1
    43dc:	71 05       	cpc	r23, r1
    43de:	19 f4       	brne	.+6      	; 0x43e6 <move_unit+0x86>
    43e0:	06 c0       	rjmp	.+12     	; 0x43ee <move_unit+0x8e>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    43e2:	65 e0       	ldi	r22, 0x05	; 5
    43e4:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    43e6:	86 2f       	mov	r24, r22
    43e8:	08 95       	ret
    43ea:	8f e7       	ldi	r24, 0x7F	; 127
    43ec:	08 95       	ret
    43ee:	81 e0       	ldi	r24, 0x01	; 1
}
    43f0:	08 95       	ret

000043f2 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    43f2:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <mousekey_accel>
    43f6:	80 ff       	sbrs	r24, 0
    43f8:	08 c0       	rjmp	.+16     	; 0x440a <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    43fa:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <mk_wheel_max_speed>
    43fe:	70 e0       	ldi	r23, 0x00	; 0
    4400:	75 95       	asr	r23
    4402:	67 95       	ror	r22
    4404:	75 95       	asr	r23
    4406:	67 95       	ror	r22
    4408:	21 c0       	rjmp	.+66     	; 0x444c <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    440a:	81 ff       	sbrs	r24, 1
    440c:	06 c0       	rjmp	.+12     	; 0x441a <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    440e:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <mk_wheel_max_speed>
    4412:	70 e0       	ldi	r23, 0x00	; 0
    4414:	75 95       	asr	r23
    4416:	67 95       	ror	r22
    4418:	19 c0       	rjmp	.+50     	; 0x444c <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    441a:	82 ff       	sbrs	r24, 2
    441c:	04 c0       	rjmp	.+8      	; 0x4426 <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    441e:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <mk_wheel_max_speed>
    4422:	70 e0       	ldi	r23, 0x00	; 0
    4424:	10 c0       	rjmp	.+32     	; 0x4446 <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    4426:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <mousekey_repeat>
    442a:	99 23       	and	r25, r25
    442c:	99 f0       	breq	.+38     	; 0x4454 <wheel_unit+0x62>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    442e:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <mk_wheel_time_to_max>
    4432:	96 17       	cp	r25, r22
    4434:	a0 f7       	brcc	.-24     	; 0x441e <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    4436:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_max_speed>
    443a:	89 9f       	mul	r24, r25
    443c:	c0 01       	movw	r24, r0
    443e:	11 24       	eor	r1, r1
    4440:	70 e0       	ldi	r23, 0x00	; 0
    4442:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4446:	60 38       	cpi	r22, 0x80	; 128
    4448:	71 05       	cpc	r23, r1
    444a:	40 f4       	brcc	.+16     	; 0x445c <wheel_unit+0x6a>
    444c:	61 15       	cp	r22, r1
    444e:	71 05       	cpc	r23, r1
    4450:	19 f4       	brne	.+6      	; 0x4458 <wheel_unit+0x66>
    4452:	06 c0       	rjmp	.+12     	; 0x4460 <wheel_unit+0x6e>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    4454:	61 e0       	ldi	r22, 0x01	; 1
    4456:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4458:	86 2f       	mov	r24, r22
    445a:	08 95       	ret
    445c:	8f e7       	ldi	r24, 0x7F	; 127
    445e:	08 95       	ret
    4460:	81 e0       	ldi	r24, 0x01	; 1
}
    4462:	08 95       	ret

00004464 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    4464:	80 3f       	cpi	r24, 0xF0	; 240
    4466:	21 f4       	brne	.+8      	; 0x4470 <mousekey_on+0xc>
    4468:	0e 94 b0 21 	call	0x4360	; 0x4360 <move_unit>
    446c:	81 95       	neg	r24
    446e:	04 c0       	rjmp	.+8      	; 0x4478 <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    4470:	81 3f       	cpi	r24, 0xF1	; 241
    4472:	29 f4       	brne	.+10     	; 0x447e <mousekey_on+0x1a>
    4474:	0e 94 b0 21 	call	0x4360	; 0x4360 <move_unit>
    4478:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <mouse_report+0x2>
    447c:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    447e:	82 3f       	cpi	r24, 0xF2	; 242
    4480:	21 f4       	brne	.+8      	; 0x448a <mousekey_on+0x26>
    4482:	0e 94 b0 21 	call	0x4360	; 0x4360 <move_unit>
    4486:	81 95       	neg	r24
    4488:	04 c0       	rjmp	.+8      	; 0x4492 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    448a:	83 3f       	cpi	r24, 0xF3	; 243
    448c:	29 f4       	brne	.+10     	; 0x4498 <mousekey_on+0x34>
    448e:	0e 94 b0 21 	call	0x4360	; 0x4360 <move_unit>
    4492:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <mouse_report+0x1>
    4496:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    4498:	89 3f       	cpi	r24, 0xF9	; 249
    449a:	19 f4       	brne	.+6      	; 0x44a2 <mousekey_on+0x3e>
    449c:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <wheel_unit>
    44a0:	05 c0       	rjmp	.+10     	; 0x44ac <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    44a2:	8a 3f       	cpi	r24, 0xFA	; 250
    44a4:	31 f4       	brne	.+12     	; 0x44b2 <mousekey_on+0x4e>
    44a6:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <wheel_unit>
    44aa:	81 95       	neg	r24
    44ac:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <mouse_report+0x3>
    44b0:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    44b2:	8b 3f       	cpi	r24, 0xFB	; 251
    44b4:	21 f4       	brne	.+8      	; 0x44be <mousekey_on+0x5a>
    44b6:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <wheel_unit>
    44ba:	81 95       	neg	r24
    44bc:	04 c0       	rjmp	.+8      	; 0x44c6 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    44be:	8c 3f       	cpi	r24, 0xFC	; 252
    44c0:	29 f4       	brne	.+10     	; 0x44cc <mousekey_on+0x68>
    44c2:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <wheel_unit>
    44c6:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <mouse_report+0x4>
    44ca:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    44cc:	84 3f       	cpi	r24, 0xF4	; 244
    44ce:	21 f4       	brne	.+8      	; 0x44d8 <mousekey_on+0x74>
    44d0:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <mouse_report>
    44d4:	81 60       	ori	r24, 0x01	; 1
    44d6:	17 c0       	rjmp	.+46     	; 0x4506 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    44d8:	85 3f       	cpi	r24, 0xF5	; 245
    44da:	21 f4       	brne	.+8      	; 0x44e4 <mousekey_on+0x80>
    44dc:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <mouse_report>
    44e0:	82 60       	ori	r24, 0x02	; 2
    44e2:	11 c0       	rjmp	.+34     	; 0x4506 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    44e4:	86 3f       	cpi	r24, 0xF6	; 246
    44e6:	21 f4       	brne	.+8      	; 0x44f0 <mousekey_on+0x8c>
    44e8:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <mouse_report>
    44ec:	84 60       	ori	r24, 0x04	; 4
    44ee:	0b c0       	rjmp	.+22     	; 0x4506 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    44f0:	87 3f       	cpi	r24, 0xF7	; 247
    44f2:	21 f4       	brne	.+8      	; 0x44fc <mousekey_on+0x98>
    44f4:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <mouse_report>
    44f8:	88 60       	ori	r24, 0x08	; 8
    44fa:	05 c0       	rjmp	.+10     	; 0x4506 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    44fc:	88 3f       	cpi	r24, 0xF8	; 248
    44fe:	31 f4       	brne	.+12     	; 0x450c <mousekey_on+0xa8>
    4500:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <mouse_report>
    4504:	80 61       	ori	r24, 0x10	; 16
    4506:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <mouse_report>
    450a:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    450c:	8d 3f       	cpi	r24, 0xFD	; 253
    450e:	21 f4       	brne	.+8      	; 0x4518 <mousekey_on+0xb4>
    4510:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <mousekey_accel>
    4514:	81 60       	ori	r24, 0x01	; 1
    4516:	0b c0       	rjmp	.+22     	; 0x452e <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    4518:	8e 3f       	cpi	r24, 0xFE	; 254
    451a:	21 f4       	brne	.+8      	; 0x4524 <mousekey_on+0xc0>
    451c:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <mousekey_accel>
    4520:	82 60       	ori	r24, 0x02	; 2
    4522:	05 c0       	rjmp	.+10     	; 0x452e <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    4524:	8f 3f       	cpi	r24, 0xFF	; 255
    4526:	29 f4       	brne	.+10     	; 0x4532 <mousekey_on+0xce>
    4528:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <mousekey_accel>
    452c:	84 60       	ori	r24, 0x04	; 4
    452e:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <mousekey_accel>
    4532:	08 95       	ret

00004534 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    4534:	80 3f       	cpi	r24, 0xF0	; 240
    4536:	39 f4       	brne	.+14     	; 0x4546 <mousekey_off+0x12>
    4538:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <mouse_report+0x2>
    453c:	87 ff       	sbrs	r24, 7
    453e:	6c c0       	rjmp	.+216    	; 0x4618 <mousekey_off+0xe4>
    4540:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <mouse_report+0x2>
    4544:	69 c0       	rjmp	.+210    	; 0x4618 <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    4546:	81 3f       	cpi	r24, 0xF1	; 241
    4548:	29 f4       	brne	.+10     	; 0x4554 <mousekey_off+0x20>
    454a:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <mouse_report+0x2>
    454e:	18 16       	cp	r1, r24
    4550:	bc f3       	brlt	.-18     	; 0x4540 <mousekey_off+0xc>
    4552:	62 c0       	rjmp	.+196    	; 0x4618 <mousekey_off+0xe4>
    4554:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <mouse_report+0x1>
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    4558:	82 3f       	cpi	r24, 0xF2	; 242
    455a:	29 f4       	brne	.+10     	; 0x4566 <mousekey_off+0x32>
    455c:	97 ff       	sbrs	r25, 7
    455e:	5c c0       	rjmp	.+184    	; 0x4618 <mousekey_off+0xe4>
    4560:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <mouse_report+0x1>
    4564:	59 c0       	rjmp	.+178    	; 0x4618 <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    4566:	83 3f       	cpi	r24, 0xF3	; 243
    4568:	19 f4       	brne	.+6      	; 0x4570 <mousekey_off+0x3c>
    456a:	19 16       	cp	r1, r25
    456c:	cc f3       	brlt	.-14     	; 0x4560 <mousekey_off+0x2c>
    456e:	54 c0       	rjmp	.+168    	; 0x4618 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    4570:	89 3f       	cpi	r24, 0xF9	; 249
    4572:	41 f4       	brne	.+16     	; 0x4584 <mousekey_off+0x50>
    4574:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <mouse_report+0x3>
    4578:	18 16       	cp	r1, r24
    457a:	0c f0       	brlt	.+2      	; 0x457e <mousekey_off+0x4a>
    457c:	4d c0       	rjmp	.+154    	; 0x4618 <mousekey_off+0xe4>
    457e:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <mouse_report+0x3>
    4582:	4a c0       	rjmp	.+148    	; 0x4618 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    4584:	8a 3f       	cpi	r24, 0xFA	; 250
    4586:	29 f4       	brne	.+10     	; 0x4592 <mousekey_off+0x5e>
    4588:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <mouse_report+0x3>
    458c:	87 ff       	sbrs	r24, 7
    458e:	44 c0       	rjmp	.+136    	; 0x4618 <mousekey_off+0xe4>
    4590:	f6 cf       	rjmp	.-20     	; 0x457e <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    4592:	8b 3f       	cpi	r24, 0xFB	; 251
    4594:	39 f4       	brne	.+14     	; 0x45a4 <mousekey_off+0x70>
    4596:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <mouse_report+0x4>
    459a:	87 ff       	sbrs	r24, 7
    459c:	3d c0       	rjmp	.+122    	; 0x4618 <mousekey_off+0xe4>
    459e:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <mouse_report+0x4>
    45a2:	3a c0       	rjmp	.+116    	; 0x4618 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    45a4:	8c 3f       	cpi	r24, 0xFC	; 252
    45a6:	29 f4       	brne	.+10     	; 0x45b2 <mousekey_off+0x7e>
    45a8:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <mouse_report+0x4>
    45ac:	18 16       	cp	r1, r24
    45ae:	bc f3       	brlt	.-18     	; 0x459e <mousekey_off+0x6a>
    45b0:	33 c0       	rjmp	.+102    	; 0x4618 <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    45b2:	84 3f       	cpi	r24, 0xF4	; 244
    45b4:	21 f4       	brne	.+8      	; 0x45be <mousekey_off+0x8a>
    45b6:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <mouse_report>
    45ba:	8e 7f       	andi	r24, 0xFE	; 254
    45bc:	17 c0       	rjmp	.+46     	; 0x45ec <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    45be:	85 3f       	cpi	r24, 0xF5	; 245
    45c0:	21 f4       	brne	.+8      	; 0x45ca <mousekey_off+0x96>
    45c2:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <mouse_report>
    45c6:	8d 7f       	andi	r24, 0xFD	; 253
    45c8:	11 c0       	rjmp	.+34     	; 0x45ec <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    45ca:	86 3f       	cpi	r24, 0xF6	; 246
    45cc:	21 f4       	brne	.+8      	; 0x45d6 <mousekey_off+0xa2>
    45ce:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <mouse_report>
    45d2:	8b 7f       	andi	r24, 0xFB	; 251
    45d4:	0b c0       	rjmp	.+22     	; 0x45ec <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    45d6:	87 3f       	cpi	r24, 0xF7	; 247
    45d8:	21 f4       	brne	.+8      	; 0x45e2 <mousekey_off+0xae>
    45da:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <mouse_report>
    45de:	87 7f       	andi	r24, 0xF7	; 247
    45e0:	05 c0       	rjmp	.+10     	; 0x45ec <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    45e2:	88 3f       	cpi	r24, 0xF8	; 248
    45e4:	31 f4       	brne	.+12     	; 0x45f2 <mousekey_off+0xbe>
    45e6:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <mouse_report>
    45ea:	8f 7e       	andi	r24, 0xEF	; 239
    45ec:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <mouse_report>
    45f0:	13 c0       	rjmp	.+38     	; 0x4618 <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    45f2:	8d 3f       	cpi	r24, 0xFD	; 253
    45f4:	21 f4       	brne	.+8      	; 0x45fe <mousekey_off+0xca>
    45f6:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <mousekey_accel>
    45fa:	8e 7f       	andi	r24, 0xFE	; 254
    45fc:	0b c0       	rjmp	.+22     	; 0x4614 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    45fe:	8e 3f       	cpi	r24, 0xFE	; 254
    4600:	21 f4       	brne	.+8      	; 0x460a <mousekey_off+0xd6>
    4602:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <mousekey_accel>
    4606:	8d 7f       	andi	r24, 0xFD	; 253
    4608:	05 c0       	rjmp	.+10     	; 0x4614 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    460a:	8f 3f       	cpi	r24, 0xFF	; 255
    460c:	29 f4       	brne	.+10     	; 0x4618 <mousekey_off+0xe4>
    460e:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <mousekey_accel>
    4612:	8b 7f       	andi	r24, 0xFB	; 251
    4614:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <mousekey_accel>

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4618:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <mouse_report+0x1>
    461c:	81 11       	cpse	r24, r1
    461e:	0e c0       	rjmp	.+28     	; 0x463c <mousekey_off+0x108>
    4620:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <mouse_report+0x2>
    4624:	81 11       	cpse	r24, r1
    4626:	0a c0       	rjmp	.+20     	; 0x463c <mousekey_off+0x108>
    4628:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <mouse_report+0x3>
    462c:	81 11       	cpse	r24, r1
    462e:	06 c0       	rjmp	.+12     	; 0x463c <mousekey_off+0x108>
    4630:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <mouse_report+0x4>
    4634:	81 11       	cpse	r24, r1
    4636:	02 c0       	rjmp	.+4      	; 0x463c <mousekey_off+0x108>
        mousekey_repeat = 0;
    4638:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <mousekey_repeat>
    463c:	08 95       	ret

0000463e <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    463e:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <debug_config>
    4642:	83 ff       	sbrs	r24, 3
    4644:	7e c0       	rjmp	.+252    	; 0x4742 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    4646:	80 e1       	ldi	r24, 0x10	; 16
    4648:	94 e0       	ldi	r25, 0x04	; 4
    464a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    phex(mouse_report.buttons); print("|");
    464e:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <mouse_report>
    4652:	1f 92       	push	r1
    4654:	8f 93       	push	r24
    4656:	8b e0       	ldi	r24, 0x0B	; 11
    4658:	94 e0       	ldi	r25, 0x04	; 4
    465a:	9f 93       	push	r25
    465c:	8f 93       	push	r24
    465e:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    4662:	89 e0       	ldi	r24, 0x09	; 9
    4664:	94 e0       	ldi	r25, 0x04	; 4
    4666:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    print_decs(mouse_report.x); print(" ");
    466a:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <mouse_report+0x1>
    466e:	28 2f       	mov	r18, r24
    4670:	08 2e       	mov	r0, r24
    4672:	00 0c       	add	r0, r0
    4674:	33 0b       	sbc	r19, r19
    4676:	3f 93       	push	r19
    4678:	8f 93       	push	r24
    467a:	86 e0       	ldi	r24, 0x06	; 6
    467c:	94 e0       	ldi	r25, 0x04	; 4
    467e:	9f 93       	push	r25
    4680:	8f 93       	push	r24
    4682:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    4686:	84 e0       	ldi	r24, 0x04	; 4
    4688:	94 e0       	ldi	r25, 0x04	; 4
    468a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    print_decs(mouse_report.y); print(" ");
    468e:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <mouse_report+0x2>
    4692:	28 2f       	mov	r18, r24
    4694:	08 2e       	mov	r0, r24
    4696:	00 0c       	add	r0, r0
    4698:	33 0b       	sbc	r19, r19
    469a:	3f 93       	push	r19
    469c:	8f 93       	push	r24
    469e:	81 e0       	ldi	r24, 0x01	; 1
    46a0:	94 e0       	ldi	r25, 0x04	; 4
    46a2:	9f 93       	push	r25
    46a4:	8f 93       	push	r24
    46a6:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    46aa:	8f ef       	ldi	r24, 0xFF	; 255
    46ac:	93 e0       	ldi	r25, 0x03	; 3
    46ae:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    print_decs(mouse_report.v); print(" ");
    46b2:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <mouse_report+0x3>
    46b6:	28 2f       	mov	r18, r24
    46b8:	08 2e       	mov	r0, r24
    46ba:	00 0c       	add	r0, r0
    46bc:	33 0b       	sbc	r19, r19
    46be:	3f 93       	push	r19
    46c0:	8f 93       	push	r24
    46c2:	8c ef       	ldi	r24, 0xFC	; 252
    46c4:	93 e0       	ldi	r25, 0x03	; 3
    46c6:	9f 93       	push	r25
    46c8:	8f 93       	push	r24
    46ca:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    46ce:	8a ef       	ldi	r24, 0xFA	; 250
    46d0:	93 e0       	ldi	r25, 0x03	; 3
    46d2:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    print_decs(mouse_report.h); print("](");
    46d6:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <mouse_report+0x4>
    46da:	28 2f       	mov	r18, r24
    46dc:	08 2e       	mov	r0, r24
    46de:	00 0c       	add	r0, r0
    46e0:	33 0b       	sbc	r19, r19
    46e2:	3f 93       	push	r19
    46e4:	8f 93       	push	r24
    46e6:	87 ef       	ldi	r24, 0xF7	; 247
    46e8:	93 e0       	ldi	r25, 0x03	; 3
    46ea:	9f 93       	push	r25
    46ec:	8f 93       	push	r24
    46ee:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    46f2:	84 ef       	ldi	r24, 0xF4	; 244
    46f4:	93 e0       	ldi	r25, 0x03	; 3
    46f6:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    print_dec(mousekey_repeat); print("/");
    46fa:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <mousekey_repeat>
    46fe:	1f 92       	push	r1
    4700:	8f 93       	push	r24
    4702:	81 ef       	ldi	r24, 0xF1	; 241
    4704:	93 e0       	ldi	r25, 0x03	; 3
    4706:	9f 93       	push	r25
    4708:	8f 93       	push	r24
    470a:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    470e:	8f ee       	ldi	r24, 0xEF	; 239
    4710:	93 e0       	ldi	r25, 0x03	; 3
    4712:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    print_dec(mousekey_accel); print(")\n");
    4716:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <mousekey_accel>
    471a:	1f 92       	push	r1
    471c:	8f 93       	push	r24
    471e:	8c ee       	ldi	r24, 0xEC	; 236
    4720:	93 e0       	ldi	r25, 0x03	; 3
    4722:	9f 93       	push	r25
    4724:	8f 93       	push	r24
    4726:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    472a:	89 ee       	ldi	r24, 0xE9	; 233
    472c:	93 e0       	ldi	r25, 0x03	; 3
    472e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    4732:	8d b7       	in	r24, 0x3d	; 61
    4734:	9e b7       	in	r25, 0x3e	; 62
    4736:	4c 96       	adiw	r24, 0x1c	; 28
    4738:	0f b6       	in	r0, 0x3f	; 63
    473a:	f8 94       	cli
    473c:	9e bf       	out	0x3e, r25	; 62
    473e:	0f be       	out	0x3f, r0	; 63
    4740:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    4742:	80 ef       	ldi	r24, 0xF0	; 240
    4744:	91 e0       	ldi	r25, 0x01	; 1
    4746:	0e 94 3b 10 	call	0x2076	; 0x2076 <host_mouse_send>
    last_timer = timer_read();
    474a:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <timer_read>
    474e:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <last_timer+0x1>
    4752:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <last_timer>
    4756:	08 95       	ret

00004758 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    4758:	1f 93       	push	r17
    475a:	cf 93       	push	r28
    475c:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    475e:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <last_timer>
    4762:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <last_timer+0x1>
    4766:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <timer_elapsed>
    476a:	ac 01       	movw	r20, r24
    476c:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <mousekey_repeat>
    4770:	99 23       	and	r25, r25
    4772:	21 f0       	breq	.+8      	; 0x477c <mousekey_task+0x24>
    4774:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <mk_interval>
    4778:	30 e0       	ldi	r19, 0x00	; 0
    477a:	06 c0       	rjmp	.+12     	; 0x4788 <mousekey_task+0x30>
    477c:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <mk_delay>
    4780:	8a e0       	ldi	r24, 0x0A	; 10
    4782:	28 9f       	mul	r18, r24
    4784:	90 01       	movw	r18, r0
    4786:	11 24       	eor	r1, r1
    4788:	42 17       	cp	r20, r18
    478a:	53 07       	cpc	r21, r19
    478c:	08 f4       	brcc	.+2      	; 0x4790 <mousekey_task+0x38>
    478e:	85 c0       	rjmp	.+266    	; 0x489a <mousekey_task+0x142>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4790:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <mouse_report+0x1>
    4794:	c0 91 f2 01 	lds	r28, 0x01F2	; 0x8001f2 <mouse_report+0x2>
    4798:	d0 91 f3 01 	lds	r29, 0x01F3	; 0x8001f3 <mouse_report+0x3>
    479c:	10 91 f4 01 	lds	r17, 0x01F4	; 0x8001f4 <mouse_report+0x4>
    47a0:	81 11       	cpse	r24, r1
    47a2:	07 c0       	rjmp	.+14     	; 0x47b2 <mousekey_task+0x5a>
    47a4:	c1 11       	cpse	r28, r1
    47a6:	75 c0       	rjmp	.+234    	; 0x4892 <mousekey_task+0x13a>
    47a8:	d1 11       	cpse	r29, r1
    47aa:	73 c0       	rjmp	.+230    	; 0x4892 <mousekey_task+0x13a>
    47ac:	11 11       	cpse	r17, r1
    47ae:	71 c0       	rjmp	.+226    	; 0x4892 <mousekey_task+0x13a>
    47b0:	74 c0       	rjmp	.+232    	; 0x489a <mousekey_task+0x142>
        return;

    if (mousekey_repeat != UINT8_MAX)
    47b2:	9f 3f       	cpi	r25, 0xFF	; 255
    47b4:	19 f0       	breq	.+6      	; 0x47bc <mousekey_task+0x64>
        mousekey_repeat++;
    47b6:	9f 5f       	subi	r25, 0xFF	; 255
    47b8:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <mousekey_repeat>


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    47bc:	18 16       	cp	r1, r24
    47be:	24 f4       	brge	.+8      	; 0x47c8 <mousekey_task+0x70>
    47c0:	0e 94 b0 21 	call	0x4360	; 0x4360 <move_unit>
    47c4:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <mouse_report+0x1>
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    47c8:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <mouse_report+0x1>
    47cc:	87 ff       	sbrs	r24, 7
    47ce:	05 c0       	rjmp	.+10     	; 0x47da <mousekey_task+0x82>
    47d0:	0e 94 b0 21 	call	0x4360	; 0x4360 <move_unit>
    47d4:	81 95       	neg	r24
    47d6:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <mouse_report+0x1>
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    47da:	1c 16       	cp	r1, r28
    47dc:	24 f4       	brge	.+8      	; 0x47e6 <mousekey_task+0x8e>
    47de:	0e 94 b0 21 	call	0x4360	; 0x4360 <move_unit>
    47e2:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <mouse_report+0x2>
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    47e6:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <mouse_report+0x2>
    47ea:	87 ff       	sbrs	r24, 7
    47ec:	05 c0       	rjmp	.+10     	; 0x47f8 <mousekey_task+0xa0>
    47ee:	0e 94 b0 21 	call	0x4360	; 0x4360 <move_unit>
    47f2:	81 95       	neg	r24
    47f4:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <mouse_report+0x2>

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    47f8:	60 91 f1 01 	lds	r22, 0x01F1	; 0x8001f1 <mouse_report+0x1>
    47fc:	66 23       	and	r22, r22
    47fe:	31 f1       	breq	.+76     	; 0x484c <mousekey_task+0xf4>
    4800:	c0 91 f2 01 	lds	r28, 0x01F2	; 0x8001f2 <mouse_report+0x2>
    4804:	cc 23       	and	r28, r28
    4806:	11 f1       	breq	.+68     	; 0x484c <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    4808:	06 2e       	mov	r0, r22
    480a:	00 0c       	add	r0, r0
    480c:	77 0b       	sbc	r23, r23
    480e:	88 0b       	sbc	r24, r24
    4810:	99 0b       	sbc	r25, r25
    4812:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <__floatsisf>
    4816:	23 e3       	ldi	r18, 0x33	; 51
    4818:	33 e3       	ldi	r19, 0x33	; 51
    481a:	43 e3       	ldi	r20, 0x33	; 51
    481c:	5f e3       	ldi	r21, 0x3F	; 63
    481e:	0e 94 38 2b 	call	0x5670	; 0x5670 <__mulsf3>
    4822:	0e 94 9c 2a 	call	0x5538	; 0x5538 <__fixsfsi>
    4826:	60 93 f1 01 	sts	0x01F1, r22	; 0x8001f1 <mouse_report+0x1>
        mouse_report.y *= 0.7;
    482a:	6c 2f       	mov	r22, r28
    482c:	cc 0f       	add	r28, r28
    482e:	77 0b       	sbc	r23, r23
    4830:	88 0b       	sbc	r24, r24
    4832:	99 0b       	sbc	r25, r25
    4834:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <__floatsisf>
    4838:	23 e3       	ldi	r18, 0x33	; 51
    483a:	33 e3       	ldi	r19, 0x33	; 51
    483c:	43 e3       	ldi	r20, 0x33	; 51
    483e:	5f e3       	ldi	r21, 0x3F	; 63
    4840:	0e 94 38 2b 	call	0x5670	; 0x5670 <__mulsf3>
    4844:	0e 94 9c 2a 	call	0x5538	; 0x5538 <__fixsfsi>
    4848:	60 93 f2 01 	sts	0x01F2, r22	; 0x8001f2 <mouse_report+0x2>
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    484c:	1d 16       	cp	r1, r29
    484e:	24 f4       	brge	.+8      	; 0x4858 <mousekey_task+0x100>
    4850:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <wheel_unit>
    4854:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <mouse_report+0x3>
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    4858:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <mouse_report+0x3>
    485c:	87 ff       	sbrs	r24, 7
    485e:	05 c0       	rjmp	.+10     	; 0x486a <mousekey_task+0x112>
    4860:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <wheel_unit>
    4864:	81 95       	neg	r24
    4866:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <mouse_report+0x3>
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    486a:	11 16       	cp	r1, r17
    486c:	24 f4       	brge	.+8      	; 0x4876 <mousekey_task+0x11e>
    486e:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <wheel_unit>
    4872:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <mouse_report+0x4>
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    4876:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <mouse_report+0x4>
    487a:	87 ff       	sbrs	r24, 7
    487c:	05 c0       	rjmp	.+10     	; 0x4888 <mousekey_task+0x130>
    487e:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <wheel_unit>
    4882:	81 95       	neg	r24
    4884:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <mouse_report+0x4>

    mousekey_send();
}
    4888:	df 91       	pop	r29
    488a:	cf 91       	pop	r28
    488c:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    488e:	0c 94 1f 23 	jmp	0x463e	; 0x463e <mousekey_send>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
        return;

    if (mousekey_repeat != UINT8_MAX)
    4892:	9f 3f       	cpi	r25, 0xFF	; 255
    4894:	09 f0       	breq	.+2      	; 0x4898 <mousekey_task+0x140>
    4896:	8f cf       	rjmp	.-226    	; 0x47b6 <mousekey_task+0x5e>
    4898:	a0 cf       	rjmp	.-192    	; 0x47da <mousekey_task+0x82>
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
}
    489a:	df 91       	pop	r29
    489c:	cf 91       	pop	r28
    489e:	1f 91       	pop	r17
    48a0:	08 95       	ret

000048a2 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    48a2:	e0 ef       	ldi	r30, 0xF0	; 240
    48a4:	f1 e0       	ldi	r31, 0x01	; 1
    48a6:	85 e0       	ldi	r24, 0x05	; 5
    48a8:	df 01       	movw	r26, r30
    48aa:	1d 92       	st	X+, r1
    48ac:	8a 95       	dec	r24
    48ae:	e9 f7       	brne	.-6      	; 0x48aa <mousekey_clear+0x8>
    mousekey_repeat = 0;
    48b0:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <mousekey_repeat>
    mousekey_accel = 0;
    48b4:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <mousekey_accel>
    48b8:	08 95       	ret

000048ba <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    48ba:	83 e3       	ldi	r24, 0x33	; 51
    48bc:	96 e0       	ldi	r25, 0x06	; 6
    48be:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    48c2:	1f 92       	push	r1
    48c4:	81 e0       	ldi	r24, 0x01	; 1
    48c6:	8f 93       	push	r24
    48c8:	1f 92       	push	r1
    48ca:	85 e0       	ldi	r24, 0x05	; 5
    48cc:	8f 93       	push	r24
    48ce:	85 ee       	ldi	r24, 0xE5	; 229
    48d0:	95 e0       	ldi	r25, 0x05	; 5
    48d2:	9f 93       	push	r25
    48d4:	8f 93       	push	r24
    48d6:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}
    48da:	0f 90       	pop	r0
    48dc:	0f 90       	pop	r0
    48de:	0f 90       	pop	r0
    48e0:	0f 90       	pop	r0
    48e2:	0f 90       	pop	r0
    48e4:	0f 90       	pop	r0
    48e6:	08 95       	ret

000048e8 <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    48e8:	83 30       	cpi	r24, 0x03	; 3
    48ea:	e9 f1       	breq	.+122    	; 0x4966 <mousekey_param_inc+0x7e>
    48ec:	28 f4       	brcc	.+10     	; 0x48f8 <mousekey_param_inc+0x10>
    48ee:	81 30       	cpi	r24, 0x01	; 1
    48f0:	61 f0       	breq	.+24     	; 0x490a <mousekey_param_inc+0x22>
    48f2:	82 30       	cpi	r24, 0x02	; 2
    48f4:	09 f1       	breq	.+66     	; 0x4938 <mousekey_param_inc+0x50>
    48f6:	08 95       	ret
    48f8:	85 30       	cpi	r24, 0x05	; 5
    48fa:	09 f4       	brne	.+2      	; 0x48fe <mousekey_param_inc+0x16>
    48fc:	62 c0       	rjmp	.+196    	; 0x49c2 <mousekey_param_inc+0xda>
    48fe:	08 f4       	brcc	.+2      	; 0x4902 <mousekey_param_inc+0x1a>
    4900:	49 c0       	rjmp	.+146    	; 0x4994 <mousekey_param_inc+0xac>
    4902:	86 30       	cpi	r24, 0x06	; 6
    4904:	09 f4       	brne	.+2      	; 0x4908 <mousekey_param_inc+0x20>
    4906:	74 c0       	rjmp	.+232    	; 0x49f0 <mousekey_param_inc+0x108>
    4908:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    490a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_delay>
    490e:	26 2f       	mov	r18, r22
    4910:	30 e0       	ldi	r19, 0x00	; 0
    4912:	28 0f       	add	r18, r24
    4914:	31 1d       	adc	r19, r1
    4916:	2f 3f       	cpi	r18, 0xFF	; 255
    4918:	31 05       	cpc	r19, r1
    491a:	24 f4       	brge	.+8      	; 0x4924 <mousekey_param_inc+0x3c>
                mk_delay += inc;
    491c:	68 0f       	add	r22, r24
    491e:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <mk_delay>
    4922:	03 c0       	rjmp	.+6      	; 0x492a <mousekey_param_inc+0x42>
            else
                mk_delay = UINT8_MAX;
    4924:	8f ef       	ldi	r24, 0xFF	; 255
    4926:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_delay>
            PRINT_SET_VAL(mk_delay);
    492a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_delay>
    492e:	1f 92       	push	r1
    4930:	8f 93       	push	r24
    4932:	8e e1       	ldi	r24, 0x1E	; 30
    4934:	95 e0       	ldi	r25, 0x05	; 5
    4936:	72 c0       	rjmp	.+228    	; 0x4a1c <mousekey_param_inc+0x134>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    4938:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_interval>
    493c:	26 2f       	mov	r18, r22
    493e:	30 e0       	ldi	r19, 0x00	; 0
    4940:	28 0f       	add	r18, r24
    4942:	31 1d       	adc	r19, r1
    4944:	2f 3f       	cpi	r18, 0xFF	; 255
    4946:	31 05       	cpc	r19, r1
    4948:	24 f4       	brge	.+8      	; 0x4952 <mousekey_param_inc+0x6a>
                mk_interval += inc;
    494a:	68 0f       	add	r22, r24
    494c:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <mk_interval>
    4950:	03 c0       	rjmp	.+6      	; 0x4958 <mousekey_param_inc+0x70>
            else
                mk_interval = UINT8_MAX;
    4952:	8f ef       	ldi	r24, 0xFF	; 255
    4954:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_interval>
            PRINT_SET_VAL(mk_interval);
    4958:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_interval>
    495c:	1f 92       	push	r1
    495e:	8f 93       	push	r24
    4960:	8c e0       	ldi	r24, 0x0C	; 12
    4962:	95 e0       	ldi	r25, 0x05	; 5
    4964:	5b c0       	rjmp	.+182    	; 0x4a1c <mousekey_param_inc+0x134>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    4966:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_max_speed>
    496a:	26 2f       	mov	r18, r22
    496c:	30 e0       	ldi	r19, 0x00	; 0
    496e:	28 0f       	add	r18, r24
    4970:	31 1d       	adc	r19, r1
    4972:	2f 3f       	cpi	r18, 0xFF	; 255
    4974:	31 05       	cpc	r19, r1
    4976:	24 f4       	brge	.+8      	; 0x4980 <mousekey_param_inc+0x98>
                mk_max_speed += inc;
    4978:	68 0f       	add	r22, r24
    497a:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <mk_max_speed>
    497e:	03 c0       	rjmp	.+6      	; 0x4986 <mousekey_param_inc+0x9e>
            else
                mk_max_speed = UINT8_MAX;
    4980:	8f ef       	ldi	r24, 0xFF	; 255
    4982:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    4986:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_max_speed>
    498a:	1f 92       	push	r1
    498c:	8f 93       	push	r24
    498e:	89 ef       	ldi	r24, 0xF9	; 249
    4990:	94 e0       	ldi	r25, 0x04	; 4
    4992:	44 c0       	rjmp	.+136    	; 0x4a1c <mousekey_param_inc+0x134>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    4994:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_time_to_max>
    4998:	26 2f       	mov	r18, r22
    499a:	30 e0       	ldi	r19, 0x00	; 0
    499c:	28 0f       	add	r18, r24
    499e:	31 1d       	adc	r19, r1
    49a0:	2f 3f       	cpi	r18, 0xFF	; 255
    49a2:	31 05       	cpc	r19, r1
    49a4:	24 f4       	brge	.+8      	; 0x49ae <mousekey_param_inc+0xc6>
                mk_time_to_max += inc;
    49a6:	68 0f       	add	r22, r24
    49a8:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <mk_time_to_max>
    49ac:	03 c0       	rjmp	.+6      	; 0x49b4 <mousekey_param_inc+0xcc>
            else
                mk_time_to_max = UINT8_MAX;
    49ae:	8f ef       	ldi	r24, 0xFF	; 255
    49b0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    49b4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_time_to_max>
    49b8:	1f 92       	push	r1
    49ba:	8f 93       	push	r24
    49bc:	84 ee       	ldi	r24, 0xE4	; 228
    49be:	94 e0       	ldi	r25, 0x04	; 4
    49c0:	2d c0       	rjmp	.+90     	; 0x4a1c <mousekey_param_inc+0x134>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    49c2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_max_speed>
    49c6:	26 2f       	mov	r18, r22
    49c8:	30 e0       	ldi	r19, 0x00	; 0
    49ca:	28 0f       	add	r18, r24
    49cc:	31 1d       	adc	r19, r1
    49ce:	2f 3f       	cpi	r18, 0xFF	; 255
    49d0:	31 05       	cpc	r19, r1
    49d2:	24 f4       	brge	.+8      	; 0x49dc <mousekey_param_inc+0xf4>
                mk_wheel_max_speed += inc;
    49d4:	68 0f       	add	r22, r24
    49d6:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <mk_wheel_max_speed>
    49da:	03 c0       	rjmp	.+6      	; 0x49e2 <mousekey_param_inc+0xfa>
            else
                mk_wheel_max_speed = UINT8_MAX;
    49dc:	8f ef       	ldi	r24, 0xFF	; 255
    49de:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    49e2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_max_speed>
    49e6:	1f 92       	push	r1
    49e8:	8f 93       	push	r24
    49ea:	8b ec       	ldi	r24, 0xCB	; 203
    49ec:	94 e0       	ldi	r25, 0x04	; 4
    49ee:	16 c0       	rjmp	.+44     	; 0x4a1c <mousekey_param_inc+0x134>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    49f0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_time_to_max>
    49f4:	26 2f       	mov	r18, r22
    49f6:	30 e0       	ldi	r19, 0x00	; 0
    49f8:	28 0f       	add	r18, r24
    49fa:	31 1d       	adc	r19, r1
    49fc:	2f 3f       	cpi	r18, 0xFF	; 255
    49fe:	31 05       	cpc	r19, r1
    4a00:	24 f4       	brge	.+8      	; 0x4a0a <mousekey_param_inc+0x122>
                mk_wheel_time_to_max += inc;
    4a02:	68 0f       	add	r22, r24
    4a04:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <mk_wheel_time_to_max>
    4a08:	03 c0       	rjmp	.+6      	; 0x4a10 <mousekey_param_inc+0x128>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    4a0a:	8f ef       	ldi	r24, 0xFF	; 255
    4a0c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4a10:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_time_to_max>
    4a14:	1f 92       	push	r1
    4a16:	8f 93       	push	r24
    4a18:	80 eb       	ldi	r24, 0xB0	; 176
    4a1a:	94 e0       	ldi	r25, 0x04	; 4
    4a1c:	9f 93       	push	r25
    4a1e:	8f 93       	push	r24
    4a20:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
            break;
    4a24:	0f 90       	pop	r0
    4a26:	0f 90       	pop	r0
    4a28:	0f 90       	pop	r0
    4a2a:	0f 90       	pop	r0
    4a2c:	08 95       	ret

00004a2e <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4a2e:	83 30       	cpi	r24, 0x03	; 3
    4a30:	81 f1       	breq	.+96     	; 0x4a92 <mousekey_param_dec+0x64>
    4a32:	28 f4       	brcc	.+10     	; 0x4a3e <mousekey_param_dec+0x10>
    4a34:	81 30       	cpi	r24, 0x01	; 1
    4a36:	59 f0       	breq	.+22     	; 0x4a4e <mousekey_param_dec+0x20>
    4a38:	82 30       	cpi	r24, 0x02	; 2
    4a3a:	d1 f0       	breq	.+52     	; 0x4a70 <mousekey_param_dec+0x42>
    4a3c:	08 95       	ret
    4a3e:	85 30       	cpi	r24, 0x05	; 5
    4a40:	09 f4       	brne	.+2      	; 0x4a44 <mousekey_param_dec+0x16>
    4a42:	49 c0       	rjmp	.+146    	; 0x4ad6 <mousekey_param_dec+0xa8>
    4a44:	b8 f1       	brcs	.+110    	; 0x4ab4 <mousekey_param_dec+0x86>
    4a46:	86 30       	cpi	r24, 0x06	; 6
    4a48:	09 f4       	brne	.+2      	; 0x4a4c <mousekey_param_dec+0x1e>
    4a4a:	56 c0       	rjmp	.+172    	; 0x4af8 <mousekey_param_dec+0xca>
    4a4c:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    4a4e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_delay>
    4a52:	68 17       	cp	r22, r24
    4a54:	20 f4       	brcc	.+8      	; 0x4a5e <mousekey_param_dec+0x30>
                mk_delay -= dec;
    4a56:	86 1b       	sub	r24, r22
    4a58:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_delay>
    4a5c:	02 c0       	rjmp	.+4      	; 0x4a62 <mousekey_param_dec+0x34>
            else
                mk_delay = 0;
    4a5e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <mk_delay>
            PRINT_SET_VAL(mk_delay);
    4a62:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_delay>
    4a66:	1f 92       	push	r1
    4a68:	8f 93       	push	r24
    4a6a:	81 ea       	ldi	r24, 0xA1	; 161
    4a6c:	94 e0       	ldi	r25, 0x04	; 4
    4a6e:	54 c0       	rjmp	.+168    	; 0x4b18 <mousekey_param_dec+0xea>
            break;
        case 2:
            if (mk_interval > dec)
    4a70:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_interval>
    4a74:	68 17       	cp	r22, r24
    4a76:	20 f4       	brcc	.+8      	; 0x4a80 <mousekey_param_dec+0x52>
                mk_interval -= dec;
    4a78:	86 1b       	sub	r24, r22
    4a7a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_interval>
    4a7e:	02 c0       	rjmp	.+4      	; 0x4a84 <mousekey_param_dec+0x56>
            else
                mk_interval = 0;
    4a80:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <mk_interval>
            PRINT_SET_VAL(mk_interval);
    4a84:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_interval>
    4a88:	1f 92       	push	r1
    4a8a:	8f 93       	push	r24
    4a8c:	8f e8       	ldi	r24, 0x8F	; 143
    4a8e:	94 e0       	ldi	r25, 0x04	; 4
    4a90:	43 c0       	rjmp	.+134    	; 0x4b18 <mousekey_param_dec+0xea>
            break;
        case 3:
            if (mk_max_speed > dec)
    4a92:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_max_speed>
    4a96:	68 17       	cp	r22, r24
    4a98:	20 f4       	brcc	.+8      	; 0x4aa2 <mousekey_param_dec+0x74>
                mk_max_speed -= dec;
    4a9a:	86 1b       	sub	r24, r22
    4a9c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mk_max_speed>
    4aa0:	02 c0       	rjmp	.+4      	; 0x4aa6 <mousekey_param_dec+0x78>
            else
                mk_max_speed = 0;
    4aa2:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    4aa6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_max_speed>
    4aaa:	1f 92       	push	r1
    4aac:	8f 93       	push	r24
    4aae:	8c e7       	ldi	r24, 0x7C	; 124
    4ab0:	94 e0       	ldi	r25, 0x04	; 4
    4ab2:	32 c0       	rjmp	.+100    	; 0x4b18 <mousekey_param_dec+0xea>
            break;
        case 4:
            if (mk_time_to_max > dec)
    4ab4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_time_to_max>
    4ab8:	68 17       	cp	r22, r24
    4aba:	20 f4       	brcc	.+8      	; 0x4ac4 <mousekey_param_dec+0x96>
                mk_time_to_max -= dec;
    4abc:	86 1b       	sub	r24, r22
    4abe:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mk_time_to_max>
    4ac2:	02 c0       	rjmp	.+4      	; 0x4ac8 <mousekey_param_dec+0x9a>
            else
                mk_time_to_max = 0;
    4ac4:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    4ac8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_time_to_max>
    4acc:	1f 92       	push	r1
    4ace:	8f 93       	push	r24
    4ad0:	87 e6       	ldi	r24, 0x67	; 103
    4ad2:	94 e0       	ldi	r25, 0x04	; 4
    4ad4:	21 c0       	rjmp	.+66     	; 0x4b18 <mousekey_param_dec+0xea>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    4ad6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_max_speed>
    4ada:	68 17       	cp	r22, r24
    4adc:	20 f4       	brcc	.+8      	; 0x4ae6 <mousekey_param_dec+0xb8>
                mk_wheel_max_speed -= dec;
    4ade:	86 1b       	sub	r24, r22
    4ae0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mk_wheel_max_speed>
    4ae4:	02 c0       	rjmp	.+4      	; 0x4aea <mousekey_param_dec+0xbc>
            else
                mk_wheel_max_speed = 0;
    4ae6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    4aea:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_max_speed>
    4aee:	1f 92       	push	r1
    4af0:	8f 93       	push	r24
    4af2:	8e e4       	ldi	r24, 0x4E	; 78
    4af4:	94 e0       	ldi	r25, 0x04	; 4
    4af6:	10 c0       	rjmp	.+32     	; 0x4b18 <mousekey_param_dec+0xea>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    4af8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_time_to_max>
    4afc:	68 17       	cp	r22, r24
    4afe:	20 f4       	brcc	.+8      	; 0x4b08 <mousekey_param_dec+0xda>
                mk_wheel_time_to_max -= dec;
    4b00:	86 1b       	sub	r24, r22
    4b02:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <mk_wheel_time_to_max>
    4b06:	02 c0       	rjmp	.+4      	; 0x4b0c <mousekey_param_dec+0xde>
            else
                mk_wheel_time_to_max = 0;
    4b08:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4b0c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_time_to_max>
    4b10:	1f 92       	push	r1
    4b12:	8f 93       	push	r24
    4b14:	83 e3       	ldi	r24, 0x33	; 51
    4b16:	94 e0       	ldi	r25, 0x04	; 4
    4b18:	9f 93       	push	r25
    4b1a:	8f 93       	push	r24
    4b1c:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
            break;
    4b20:	0f 90       	pop	r0
    4b22:	0f 90       	pop	r0
    4b24:	0f 90       	pop	r0
    4b26:	0f 90       	pop	r0
    4b28:	08 95       	ret

00004b2a <switch_default_layer>:
    return 0;
}
#endif

static void switch_default_layer(uint8_t layer)
{
    4b2a:	cf 93       	push	r28
    4b2c:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    4b2e:	1f 92       	push	r1
    4b30:	8f 93       	push	r24
    4b32:	88 e3       	ldi	r24, 0x38	; 56
    4b34:	97 e0       	ldi	r25, 0x07	; 7
    4b36:	9f 93       	push	r25
    4b38:	8f 93       	push	r24
    4b3a:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    default_layer_set(1UL<<layer);
    4b3e:	81 e0       	ldi	r24, 0x01	; 1
    4b40:	90 e0       	ldi	r25, 0x00	; 0
    4b42:	a0 e0       	ldi	r26, 0x00	; 0
    4b44:	b0 e0       	ldi	r27, 0x00	; 0
    4b46:	bc 01       	movw	r22, r24
    4b48:	cd 01       	movw	r24, r26
    4b4a:	04 c0       	rjmp	.+8      	; 0x4b54 <switch_default_layer+0x2a>
    4b4c:	66 0f       	add	r22, r22
    4b4e:	77 1f       	adc	r23, r23
    4b50:	88 1f       	adc	r24, r24
    4b52:	99 1f       	adc	r25, r25
    4b54:	ca 95       	dec	r28
    4b56:	d2 f7       	brpl	.-12     	; 0x4b4c <switch_default_layer+0x22>
    4b58:	0e 94 c8 1a 	call	0x3590	; 0x3590 <default_layer_set>
    clear_keyboard();
    4b5c:	0f 90       	pop	r0
    4b5e:	0f 90       	pop	r0
    4b60:	0f 90       	pop	r0
    4b62:	0f 90       	pop	r0
}
    4b64:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    4b66:	0c 94 69 16 	jmp	0x2cd2	; 0x2cd2 <clear_keyboard>

00004b6a <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    4b6a:	cf 93       	push	r28
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    4b6c:	8b 31       	cpi	r24, 0x1B	; 27
    4b6e:	09 f4       	brne	.+2      	; 0x4b72 <command_common+0x8>
    4b70:	09 c2       	rjmp	.+1042   	; 0x4f84 <command_common+0x41a>
    4b72:	08 f0       	brcs	.+2      	; 0x4b76 <command_common+0xc>
    4b74:	49 c0       	rjmp	.+146    	; 0x4c08 <command_common+0x9e>
    4b76:	8e 30       	cpi	r24, 0x0E	; 14
    4b78:	09 f4       	brne	.+2      	; 0x4b7c <command_common+0x12>
    4b7a:	18 c2       	rjmp	.+1072   	; 0x4fac <command_common+0x442>
    4b7c:	00 f5       	brcc	.+64     	; 0x4bbe <command_common+0x54>
    4b7e:	87 30       	cpi	r24, 0x07	; 7
    4b80:	09 f4       	brne	.+2      	; 0x4b84 <command_common+0x1a>
    4b82:	e7 c1       	rjmp	.+974    	; 0x4f52 <command_common+0x3e8>
    4b84:	a8 f4       	brcc	.+42     	; 0x4bb0 <command_common+0x46>
    4b86:	86 30       	cpi	r24, 0x06	; 6
    4b88:	09 f0       	breq	.+2      	; 0x4b8c <command_common+0x22>
    4b8a:	98 c2       	rjmp	.+1328   	; 0x50bc <command_common+0x552>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    4b8c:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <debug_config>
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    4b90:	81 7f       	andi	r24, 0xF1	; 241
    4b92:	8e 7f       	andi	r24, 0xFE	; 254
    4b94:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <debug_config>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4b98:	8d e3       	ldi	r24, 0x3D	; 61
    4b9a:	97 e0       	ldi	r25, 0x07	; 7
    4b9c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    4ba0:	8c e9       	ldi	r24, 0x9C	; 156
    4ba2:	9b e0       	ldi	r25, 0x0B	; 11
    4ba4:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
            command_state = CONSOLE;
    4ba8:	81 e0       	ldi	r24, 0x01	; 1
    4baa:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <command_state>
    4bae:	cf c1       	rjmp	.+926    	; 0x4f4e <command_common+0x3e4>
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    4bb0:	88 30       	cpi	r24, 0x08	; 8
    4bb2:	09 f4       	brne	.+2      	; 0x4bb6 <command_common+0x4c>
    4bb4:	5b c0       	rjmp	.+182    	; 0x4c6c <command_common+0x102>
    4bb6:	8b 30       	cpi	r24, 0x0B	; 11
    4bb8:	09 f4       	brne	.+2      	; 0x4bbc <command_common+0x52>
    4bba:	c5 c1       	rjmp	.+906    	; 0x4f46 <command_common+0x3dc>
    4bbc:	7f c2       	rjmp	.+1278   	; 0x50bc <command_common+0x552>
    4bbe:	81 31       	cpi	r24, 0x11	; 17
    4bc0:	09 f4       	brne	.+2      	; 0x4bc4 <command_common+0x5a>
    4bc2:	64 c2       	rjmp	.+1224   	; 0x508c <command_common+0x522>
    4bc4:	20 f4       	brcc	.+8      	; 0x4bce <command_common+0x64>
    4bc6:	80 31       	cpi	r24, 0x10	; 16
    4bc8:	09 f4       	brne	.+2      	; 0x4bcc <command_common+0x62>
    4bca:	04 c2       	rjmp	.+1032   	; 0x4fd4 <command_common+0x46a>
    4bcc:	77 c2       	rjmp	.+1262   	; 0x50bc <command_common+0x552>
    4bce:	86 31       	cpi	r24, 0x16	; 22
    4bd0:	09 f4       	brne	.+2      	; 0x4bd4 <command_common+0x6a>
    4bd2:	1b c2       	rjmp	.+1078   	; 0x500a <command_common+0x4a0>
    4bd4:	89 31       	cpi	r24, 0x19	; 25
    4bd6:	09 f0       	breq	.+2      	; 0x4bda <command_common+0x70>
    4bd8:	71 c2       	rjmp	.+1250   	; 0x50bc <command_common+0x552>
            } else {
                print("\nmouse: off\n");
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    4bda:	80 e1       	ldi	r24, 0x10	; 16
    4bdc:	9b e0       	ldi	r25, 0x0B	; 11
    4bde:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    4be2:	8b ee       	ldi	r24, 0xEB	; 235
    4be4:	9a e0       	ldi	r25, 0x0A	; 10
    4be6:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    4bea:	87 eb       	ldi	r24, 0xB7	; 183
    4bec:	9a e0       	ldi	r25, 0x0A	; 10
    4bee:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4bf2:	8a e8       	ldi	r24, 0x8A	; 138
    4bf4:	9a e0       	ldi	r25, 0x0A	; 10
    4bf6:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
            /* build options */
            print("OPTIONS:"
    4bfa:	85 e4       	ldi	r24, 0x45	; 69
    4bfc:	9a e0       	ldi	r25, 0x0A	; 10
    4bfe:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4c02:	8a e1       	ldi	r24, 0x1A	; 26
    4c04:	9a e0       	ldi	r25, 0x0A	; 10
    4c06:	a1 c1       	rjmp	.+834    	; 0x4f4a <command_common+0x3e0>
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    4c08:	85 33       	cpi	r24, 0x35	; 53
    4c0a:	09 f4       	brne	.+2      	; 0x4c0e <command_common+0xa4>
    4c0c:	51 c2       	rjmp	.+1186   	; 0x50b0 <command_common+0x546>
    4c0e:	68 f4       	brcc	.+26     	; 0x4c2a <command_common+0xc0>
    4c10:	87 32       	cpi	r24, 0x27	; 39
    4c12:	09 f4       	brne	.+2      	; 0x4c16 <command_common+0xac>
    4c14:	4d c2       	rjmp	.+1178   	; 0x50b0 <command_common+0x546>
    4c16:	28 f4       	brcc	.+10     	; 0x4c22 <command_common+0xb8>
    4c18:	8e 31       	cpi	r24, 0x1E	; 30
    4c1a:	08 f4       	brcc	.+2      	; 0x4c1e <command_common+0xb4>
    4c1c:	4f c2       	rjmp	.+1182   	; 0x50bc <command_common+0x552>
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    4c1e:	8d 51       	subi	r24, 0x1D	; 29
    4c20:	4a c2       	rjmp	.+1172   	; 0x50b6 <command_common+0x54c>
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    4c22:	89 32       	cpi	r24, 0x29	; 41
    4c24:	09 f4       	brne	.+2      	; 0x4c28 <command_common+0xbe>
    4c26:	44 c2       	rjmp	.+1160   	; 0x50b0 <command_common+0x546>
    4c28:	49 c2       	rjmp	.+1170   	; 0x50bc <command_common+0x552>
    4c2a:	83 34       	cpi	r24, 0x43	; 67
    4c2c:	38 f4       	brcc	.+14     	; 0x4c3c <command_common+0xd2>
    4c2e:	8a 33       	cpi	r24, 0x3A	; 58
    4c30:	08 f0       	brcs	.+2      	; 0x4c34 <command_common+0xca>
    4c32:	40 c2       	rjmp	.+1152   	; 0x50b4 <command_common+0x54a>
    4c34:	88 33       	cpi	r24, 0x38	; 56
    4c36:	09 f4       	brne	.+2      	; 0x4c3a <command_common+0xd0>
    4c38:	86 c1       	rjmp	.+780    	; 0x4f46 <command_common+0x3dc>
    4c3a:	40 c2       	rjmp	.+1152   	; 0x50bc <command_common+0x552>
    4c3c:	83 34       	cpi	r24, 0x43	; 67
    4c3e:	09 f4       	brne	.+2      	; 0x4c42 <command_common+0xd8>
    4c40:	37 c2       	rjmp	.+1134   	; 0x50b0 <command_common+0x546>
    4c42:	88 34       	cpi	r24, 0x48	; 72
    4c44:	09 f0       	breq	.+2      	; 0x4c48 <command_common+0xde>
    4c46:	3a c2       	rjmp	.+1140   	; 0x50bc <command_common+0x552>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    4c48:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <clear_keyboard>
            print("\n\nbootloader... ");
    4c4c:	8b e8       	ldi	r24, 0x8B	; 139
    4c4e:	9b e0       	ldi	r25, 0x0B	; 11
    4c50:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    4c54:	9f ef       	ldi	r25, 0xFF	; 255
    4c56:	23 ed       	ldi	r18, 0xD3	; 211
    4c58:	80 e3       	ldi	r24, 0x30	; 48
    4c5a:	91 50       	subi	r25, 0x01	; 1
    4c5c:	20 40       	sbci	r18, 0x00	; 0
    4c5e:	80 40       	sbci	r24, 0x00	; 0
    4c60:	e1 f7       	brne	.-8      	; 0x4c5a <command_common+0xf0>
    4c62:	00 c0       	rjmp	.+0      	; 0x4c64 <command_common+0xfa>
    4c64:	00 00       	nop
            wait_ms(1000);
            bootloader_jump(); // not return
    4c66:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <bootloader_jump>
    4c6a:	71 c1       	rjmp	.+738    	; 0x4f4e <command_common+0x3e4>
            sleep_led_test = !sleep_led_test;
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    4c6c:	80 ea       	ldi	r24, 0xA0	; 160
    4c6e:	9b e0       	ldi	r25, 0x0B	; 11
    4c70:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4c74:	87 e7       	ldi	r24, 0x77	; 119
    4c76:	99 e0       	ldi	r25, 0x09	; 9
    4c78:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    4c7c:	0e 94 95 21 	call	0x432a	; 0x432a <eeconfig_read_default_layer>
    4c80:	1f 92       	push	r1
    4c82:	8f 93       	push	r24
    4c84:	84 e7       	ldi	r24, 0x74	; 116
    4c86:	99 e0       	ldi	r25, 0x09	; 9
    4c88:	9f 93       	push	r25
    4c8a:	8f 93       	push	r24
    4c8c:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    4c90:	82 e7       	ldi	r24, 0x72	; 114
    4c92:	99 e0       	ldi	r25, 0x09	; 9
    4c94:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    4c98:	0e 94 8c 21 	call	0x4318	; 0x4318 <eeconfig_read_debug>
    4c9c:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4c9e:	8f e5       	ldi	r24, 0x5F	; 95
    4ca0:	99 e0       	ldi	r25, 0x09	; 9
    4ca2:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    4ca6:	1f 92       	push	r1
    4ca8:	cf 93       	push	r28
    4caa:	8a e5       	ldi	r24, 0x5A	; 90
    4cac:	99 e0       	ldi	r25, 0x09	; 9
    4cae:	9f 93       	push	r25
    4cb0:	8f 93       	push	r24
    4cb2:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    4cb6:	88 e5       	ldi	r24, 0x58	; 88
    4cb8:	99 e0       	ldi	r25, 0x09	; 9
    4cba:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4cbe:	8e e4       	ldi	r24, 0x4E	; 78
    4cc0:	99 e0       	ldi	r25, 0x09	; 9
    4cc2:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    4cc6:	8c 2f       	mov	r24, r28
    4cc8:	81 70       	andi	r24, 0x01	; 1
    4cca:	1f 92       	push	r1
    4ccc:	8f 93       	push	r24
    4cce:	8b e4       	ldi	r24, 0x4B	; 75
    4cd0:	99 e0       	ldi	r25, 0x09	; 9
    4cd2:	9f 93       	push	r25
    4cd4:	8f 93       	push	r24
    4cd6:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    4cda:	89 e4       	ldi	r24, 0x49	; 73
    4cdc:	99 e0       	ldi	r25, 0x09	; 9
    4cde:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4ce2:	8f e3       	ldi	r24, 0x3F	; 63
    4ce4:	99 e0       	ldi	r25, 0x09	; 9
    4ce6:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    4cea:	c1 fb       	bst	r28, 1
    4cec:	88 27       	eor	r24, r24
    4cee:	80 f9       	bld	r24, 0
    4cf0:	1f 92       	push	r1
    4cf2:	8f 93       	push	r24
    4cf4:	8c e3       	ldi	r24, 0x3C	; 60
    4cf6:	99 e0       	ldi	r25, 0x09	; 9
    4cf8:	9f 93       	push	r25
    4cfa:	8f 93       	push	r24
    4cfc:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    4d00:	8a e3       	ldi	r24, 0x3A	; 58
    4d02:	99 e0       	ldi	r25, 0x09	; 9
    4d04:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4d08:	8e e2       	ldi	r24, 0x2E	; 46
    4d0a:	99 e0       	ldi	r25, 0x09	; 9
    4d0c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    4d10:	c2 fb       	bst	r28, 2
    4d12:	88 27       	eor	r24, r24
    4d14:	80 f9       	bld	r24, 0
    4d16:	1f 92       	push	r1
    4d18:	8f 93       	push	r24
    4d1a:	8b e2       	ldi	r24, 0x2B	; 43
    4d1c:	99 e0       	ldi	r25, 0x09	; 9
    4d1e:	9f 93       	push	r25
    4d20:	8f 93       	push	r24
    4d22:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    4d26:	89 e2       	ldi	r24, 0x29	; 41
    4d28:	99 e0       	ldi	r25, 0x09	; 9
    4d2a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4d2e:	80 e2       	ldi	r24, 0x20	; 32
    4d30:	99 e0       	ldi	r25, 0x09	; 9
    4d32:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    4d36:	c3 fb       	bst	r28, 3
    4d38:	cc 27       	eor	r28, r28
    4d3a:	c0 f9       	bld	r28, 0
    4d3c:	1f 92       	push	r1
    4d3e:	cf 93       	push	r28
    4d40:	8d e1       	ldi	r24, 0x1D	; 29
    4d42:	99 e0       	ldi	r25, 0x09	; 9
    4d44:	9f 93       	push	r25
    4d46:	8f 93       	push	r24
    4d48:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    4d4c:	8b e1       	ldi	r24, 0x1B	; 27
    4d4e:	99 e0       	ldi	r25, 0x09	; 9
    4d50:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    4d54:	0e 94 9e 21 	call	0x433c	; 0x433c <eeconfig_read_keymap>
    4d58:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4d5a:	87 e0       	ldi	r24, 0x07	; 7
    4d5c:	99 e0       	ldi	r25, 0x09	; 9
    4d5e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    4d62:	1f 92       	push	r1
    4d64:	cf 93       	push	r28
    4d66:	82 e0       	ldi	r24, 0x02	; 2
    4d68:	99 e0       	ldi	r25, 0x09	; 9
    4d6a:	9f 93       	push	r25
    4d6c:	8f 93       	push	r24
    4d6e:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    4d72:	80 e0       	ldi	r24, 0x00	; 0
    4d74:	99 e0       	ldi	r25, 0x09	; 9
    4d76:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4d7a:	87 ee       	ldi	r24, 0xE7	; 231
    4d7c:	98 e0       	ldi	r25, 0x08	; 8
    4d7e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    4d82:	8c 2f       	mov	r24, r28
    4d84:	81 70       	andi	r24, 0x01	; 1
    4d86:	1f 92       	push	r1
    4d88:	8f 93       	push	r24
    4d8a:	84 ee       	ldi	r24, 0xE4	; 228
    4d8c:	98 e0       	ldi	r25, 0x08	; 8
    4d8e:	9f 93       	push	r25
    4d90:	8f 93       	push	r24
    4d92:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    4d96:	8d b7       	in	r24, 0x3d	; 61
    4d98:	9e b7       	in	r25, 0x3e	; 62
    4d9a:	80 96       	adiw	r24, 0x20	; 32
    4d9c:	0f b6       	in	r0, 0x3f	; 63
    4d9e:	f8 94       	cli
    4da0:	9e bf       	out	0x3e, r25	; 62
    4da2:	0f be       	out	0x3f, r0	; 63
    4da4:	8d bf       	out	0x3d, r24	; 61
    4da6:	82 ee       	ldi	r24, 0xE2	; 226
    4da8:	98 e0       	ldi	r25, 0x08	; 8
    4daa:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4dae:	8b ec       	ldi	r24, 0xCB	; 203
    4db0:	98 e0       	ldi	r25, 0x08	; 8
    4db2:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    4db6:	c1 fb       	bst	r28, 1
    4db8:	88 27       	eor	r24, r24
    4dba:	80 f9       	bld	r24, 0
    4dbc:	1f 92       	push	r1
    4dbe:	8f 93       	push	r24
    4dc0:	88 ec       	ldi	r24, 0xC8	; 200
    4dc2:	98 e0       	ldi	r25, 0x08	; 8
    4dc4:	9f 93       	push	r25
    4dc6:	8f 93       	push	r24
    4dc8:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    4dcc:	86 ec       	ldi	r24, 0xC6	; 198
    4dce:	98 e0       	ldi	r25, 0x08	; 8
    4dd0:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    4dd4:	84 eb       	ldi	r24, 0xB4	; 180
    4dd6:	98 e0       	ldi	r25, 0x08	; 8
    4dd8:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    4ddc:	c2 fb       	bst	r28, 2
    4dde:	88 27       	eor	r24, r24
    4de0:	80 f9       	bld	r24, 0
    4de2:	1f 92       	push	r1
    4de4:	8f 93       	push	r24
    4de6:	81 eb       	ldi	r24, 0xB1	; 177
    4de8:	98 e0       	ldi	r25, 0x08	; 8
    4dea:	9f 93       	push	r25
    4dec:	8f 93       	push	r24
    4dee:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    4df2:	8f ea       	ldi	r24, 0xAF	; 175
    4df4:	98 e0       	ldi	r25, 0x08	; 8
    4df6:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    4dfa:	8d e9       	ldi	r24, 0x9D	; 157
    4dfc:	98 e0       	ldi	r25, 0x08	; 8
    4dfe:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    4e02:	c3 fb       	bst	r28, 3
    4e04:	88 27       	eor	r24, r24
    4e06:	80 f9       	bld	r24, 0
    4e08:	1f 92       	push	r1
    4e0a:	8f 93       	push	r24
    4e0c:	8a e9       	ldi	r24, 0x9A	; 154
    4e0e:	98 e0       	ldi	r25, 0x08	; 8
    4e10:	9f 93       	push	r25
    4e12:	8f 93       	push	r24
    4e14:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    4e18:	88 e9       	ldi	r24, 0x98	; 152
    4e1a:	98 e0       	ldi	r25, 0x08	; 8
    4e1c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4e20:	8e e8       	ldi	r24, 0x8E	; 142
    4e22:	98 e0       	ldi	r25, 0x08	; 8
    4e24:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    4e28:	c4 fb       	bst	r28, 4
    4e2a:	88 27       	eor	r24, r24
    4e2c:	80 f9       	bld	r24, 0
    4e2e:	1f 92       	push	r1
    4e30:	8f 93       	push	r24
    4e32:	8b e8       	ldi	r24, 0x8B	; 139
    4e34:	98 e0       	ldi	r25, 0x08	; 8
    4e36:	9f 93       	push	r25
    4e38:	8f 93       	push	r24
    4e3a:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    4e3e:	89 e8       	ldi	r24, 0x89	; 137
    4e40:	98 e0       	ldi	r25, 0x08	; 8
    4e42:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    4e46:	87 e7       	ldi	r24, 0x77	; 119
    4e48:	98 e0       	ldi	r25, 0x08	; 8
    4e4a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    4e4e:	c5 fb       	bst	r28, 5
    4e50:	88 27       	eor	r24, r24
    4e52:	80 f9       	bld	r24, 0
    4e54:	1f 92       	push	r1
    4e56:	8f 93       	push	r24
    4e58:	84 e7       	ldi	r24, 0x74	; 116
    4e5a:	98 e0       	ldi	r25, 0x08	; 8
    4e5c:	9f 93       	push	r25
    4e5e:	8f 93       	push	r24
    4e60:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    4e64:	82 e7       	ldi	r24, 0x72	; 114
    4e66:	98 e0       	ldi	r25, 0x08	; 8
    4e68:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    4e6c:	86 e5       	ldi	r24, 0x56	; 86
    4e6e:	98 e0       	ldi	r25, 0x08	; 8
    4e70:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    4e74:	c6 fb       	bst	r28, 6
    4e76:	88 27       	eor	r24, r24
    4e78:	80 f9       	bld	r24, 0
    4e7a:	1f 92       	push	r1
    4e7c:	8f 93       	push	r24
    4e7e:	83 e5       	ldi	r24, 0x53	; 83
    4e80:	98 e0       	ldi	r25, 0x08	; 8
    4e82:	9f 93       	push	r25
    4e84:	8f 93       	push	r24
    4e86:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    4e8a:	81 e5       	ldi	r24, 0x51	; 81
    4e8c:	98 e0       	ldi	r25, 0x08	; 8
    4e8e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    4e92:	89 e4       	ldi	r24, 0x49	; 73
    4e94:	98 e0       	ldi	r25, 0x08	; 8
    4e96:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    4e9a:	c7 fb       	bst	r28, 7
    4e9c:	cc 27       	eor	r28, r28
    4e9e:	c0 f9       	bld	r28, 0
    4ea0:	1f 92       	push	r1
    4ea2:	cf 93       	push	r28
    4ea4:	86 e4       	ldi	r24, 0x46	; 70
    4ea6:	98 e0       	ldi	r25, 0x08	; 8
    4ea8:	9f 93       	push	r25
    4eaa:	8f 93       	push	r24
    4eac:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    4eb0:	84 e4       	ldi	r24, 0x44	; 68
    4eb2:	98 e0       	ldi	r25, 0x08	; 8
    4eb4:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>

#ifdef BACKLIGHT_ENABLE
    backlight_config_t bc;
    bc.raw = eeconfig_read_backlight();
    4eb8:	0e 94 a7 21 	call	0x434e	; 0x434e <eeconfig_read_backlight>
    4ebc:	c8 2f       	mov	r28, r24
    print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
    4ebe:	8d e2       	ldi	r24, 0x2D	; 45
    4ec0:	98 e0       	ldi	r25, 0x08	; 8
    4ec2:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    4ec6:	1f 92       	push	r1
    4ec8:	cf 93       	push	r28
    4eca:	88 e2       	ldi	r24, 0x28	; 40
    4ecc:	98 e0       	ldi	r25, 0x08	; 8
    4ece:	9f 93       	push	r25
    4ed0:	8f 93       	push	r24
    4ed2:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    4ed6:	8d b7       	in	r24, 0x3d	; 61
    4ed8:	9e b7       	in	r25, 0x3e	; 62
    4eda:	80 96       	adiw	r24, 0x20	; 32
    4edc:	0f b6       	in	r0, 0x3f	; 63
    4ede:	f8 94       	cli
    4ee0:	9e bf       	out	0x3e, r25	; 62
    4ee2:	0f be       	out	0x3f, r0	; 63
    4ee4:	8d bf       	out	0x3d, r24	; 61
    4ee6:	86 e2       	ldi	r24, 0x26	; 38
    4ee8:	98 e0       	ldi	r25, 0x08	; 8
    4eea:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    print(".enable: "); print_dec(bc.enable); print("\n");
    4eee:	8c e1       	ldi	r24, 0x1C	; 28
    4ef0:	98 e0       	ldi	r25, 0x08	; 8
    4ef2:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    4ef6:	8c 2f       	mov	r24, r28
    4ef8:	81 70       	andi	r24, 0x01	; 1
    4efa:	1f 92       	push	r1
    4efc:	8f 93       	push	r24
    4efe:	89 e1       	ldi	r24, 0x19	; 25
    4f00:	98 e0       	ldi	r25, 0x08	; 8
    4f02:	9f 93       	push	r25
    4f04:	8f 93       	push	r24
    4f06:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    4f0a:	87 e1       	ldi	r24, 0x17	; 23
    4f0c:	98 e0       	ldi	r25, 0x08	; 8
    4f0e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    print(".level: "); print_dec(bc.level); print("\n");
    4f12:	8e e0       	ldi	r24, 0x0E	; 14
    4f14:	98 e0       	ldi	r25, 0x08	; 8
    4f16:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    4f1a:	c6 95       	lsr	r28
    4f1c:	1f 92       	push	r1
    4f1e:	cf 93       	push	r28
    4f20:	8b e0       	ldi	r24, 0x0B	; 11
    4f22:	98 e0       	ldi	r25, 0x08	; 8
    4f24:	9f 93       	push	r25
    4f26:	8f 93       	push	r24
    4f28:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    4f2c:	89 e0       	ldi	r24, 0x09	; 9
    4f2e:	98 e0       	ldi	r25, 0x08	; 8
    4f30:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    4f34:	8d b7       	in	r24, 0x3d	; 61
    4f36:	9e b7       	in	r25, 0x3e	; 62
    4f38:	08 96       	adiw	r24, 0x08	; 8
    4f3a:	0f b6       	in	r0, 0x3f	; 63
    4f3c:	f8 94       	cli
    4f3e:	9e bf       	out	0x3e, r25	; 62
    4f40:	0f be       	out	0x3f, r0	; 63
    4f42:	8d bf       	out	0x3d, r24	; 61
    4f44:	04 c0       	rjmp	.+8      	; 0x4f4e <command_common+0x3e4>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    4f46:	84 e6       	ldi	r24, 0x64	; 100
    4f48:	97 e0       	ldi	r25, 0x07	; 7
    4f4a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    4f4e:	c1 e0       	ldi	r28, 0x01	; 1
    4f50:	ba c0       	rjmp	.+372    	; 0x50c6 <command_common+0x55c>
            print("\n\nbootloader... ");
            wait_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    4f52:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <debug_config>
    4f56:	c8 2f       	mov	r28, r24
    4f58:	c1 70       	andi	r28, 0x01	; 1
    4f5a:	80 ff       	sbrs	r24, 0
    4f5c:	09 c0       	rjmp	.+18     	; 0x4f70 <command_common+0x406>
                print("\ndebug: off\n");
    4f5e:	8e e7       	ldi	r24, 0x7E	; 126
    4f60:	9b e0       	ldi	r25, 0x0B	; 11
    4f62:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
                debug_matrix   = false;
    4f66:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <debug_config>
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    4f6a:	81 7f       	andi	r24, 0xF1	; 241
    4f6c:	8e 7f       	andi	r24, 0xFE	; 254
    4f6e:	47 c0       	rjmp	.+142    	; 0x4ffe <command_common+0x494>
            } else {
                print("\ndebug: on\n");
    4f70:	82 e7       	ldi	r24, 0x72	; 114
    4f72:	9b e0       	ldi	r25, 0x0B	; 11
    4f74:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
                debug_enable   = true;
    4f78:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <debug_config>
    4f7c:	81 60       	ori	r24, 0x01	; 1
    4f7e:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <debug_config>
    4f82:	e5 cf       	rjmp	.-54     	; 0x4f4e <command_common+0x3e4>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    4f84:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <debug_config>
    4f88:	91 fb       	bst	r25, 1
    4f8a:	cc 27       	eor	r28, r28
    4f8c:	c0 f9       	bld	r28, 0
    4f8e:	81 e0       	ldi	r24, 0x01	; 1
    4f90:	c8 27       	eor	r28, r24
    4f92:	89 2f       	mov	r24, r25
    4f94:	c0 fb       	bst	r28, 0
    4f96:	81 f9       	bld	r24, 1
    4f98:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <debug_config>
            if (debug_matrix) {
    4f9c:	cc 23       	and	r28, r28
    4f9e:	19 f0       	breq	.+6      	; 0x4fa6 <command_common+0x43c>
                print("\nmatrix: on\n");
    4fa0:	85 e6       	ldi	r24, 0x65	; 101
    4fa2:	9b e0       	ldi	r25, 0x0B	; 11
    4fa4:	27 c0       	rjmp	.+78     	; 0x4ff4 <command_common+0x48a>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    4fa6:	87 e5       	ldi	r24, 0x57	; 87
    4fa8:	9b e0       	ldi	r25, 0x0B	; 11
    4faa:	cf cf       	rjmp	.-98     	; 0x4f4a <command_common+0x3e0>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    4fac:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <debug_config>
    4fb0:	92 fb       	bst	r25, 2
    4fb2:	cc 27       	eor	r28, r28
    4fb4:	c0 f9       	bld	r28, 0
    4fb6:	81 e0       	ldi	r24, 0x01	; 1
    4fb8:	c8 27       	eor	r28, r24
    4fba:	89 2f       	mov	r24, r25
    4fbc:	c0 fb       	bst	r28, 0
    4fbe:	82 f9       	bld	r24, 2
    4fc0:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <debug_config>
            if (debug_keyboard) {
    4fc4:	cc 23       	and	r28, r28
    4fc6:	19 f0       	breq	.+6      	; 0x4fce <command_common+0x464>
                print("\nkeyboard: on\n");
    4fc8:	88 e4       	ldi	r24, 0x48	; 72
    4fca:	9b e0       	ldi	r25, 0x0B	; 11
    4fcc:	13 c0       	rjmp	.+38     	; 0x4ff4 <command_common+0x48a>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    4fce:	88 e3       	ldi	r24, 0x38	; 56
    4fd0:	9b e0       	ldi	r25, 0x0B	; 11
    4fd2:	bb cf       	rjmp	.-138    	; 0x4f4a <command_common+0x3e0>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    4fd4:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <debug_config>
    4fd8:	93 fb       	bst	r25, 3
    4fda:	cc 27       	eor	r28, r28
    4fdc:	c0 f9       	bld	r28, 0
    4fde:	81 e0       	ldi	r24, 0x01	; 1
    4fe0:	c8 27       	eor	r28, r24
    4fe2:	89 2f       	mov	r24, r25
    4fe4:	c0 fb       	bst	r28, 0
    4fe6:	83 f9       	bld	r24, 3
    4fe8:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <debug_config>
            if (debug_mouse) {
    4fec:	cc 23       	and	r28, r28
    4fee:	51 f0       	breq	.+20     	; 0x5004 <command_common+0x49a>
                print("\nmouse: on\n");
    4ff0:	8c e2       	ldi	r24, 0x2C	; 44
    4ff2:	9b e0       	ldi	r25, 0x0B	; 11
    4ff4:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
                debug_enable = true;
    4ff8:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <debug_config>
    4ffc:	81 60       	ori	r24, 0x01	; 1
    4ffe:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <debug_config>
    5002:	61 c0       	rjmp	.+194    	; 0x50c6 <command_common+0x55c>
            } else {
                print("\nmouse: off\n");
    5004:	8f e1       	ldi	r24, 0x1F	; 31
    5006:	9b e0       	ldi	r25, 0x0B	; 11
    5008:	a0 cf       	rjmp	.-192    	; 0x4f4a <command_common+0x3e0>
            // TODO
            );
#endif
            break;
        case KC_S:
            print("\n\t- Status -\n");
    500a:	8c e0       	ldi	r24, 0x0C	; 12
    500c:	9a e0       	ldi	r25, 0x0A	; 10
    500e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
            print_val_hex8(host_keyboard_leds());
    5012:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <host_keyboard_leds>
    5016:	1f 92       	push	r1
    5018:	8f 93       	push	r24
    501a:	82 ef       	ldi	r24, 0xF2	; 242
    501c:	99 e0       	ldi	r25, 0x09	; 9
    501e:	9f 93       	push	r25
    5020:	8f 93       	push	r24
    5022:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
            print_val_hex8(keyboard_protocol);
    5026:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <keyboard_protocol>
    502a:	1f 92       	push	r1
    502c:	8f 93       	push	r24
    502e:	8b ed       	ldi	r24, 0xDB	; 219
    5030:	99 e0       	ldi	r25, 0x09	; 9
    5032:	9f 93       	push	r25
    5034:	8f 93       	push	r24
    5036:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
            print_val_hex8(keyboard_idle);
    503a:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <keyboard_idle>
    503e:	1f 92       	push	r1
    5040:	8f 93       	push	r24
    5042:	88 ec       	ldi	r24, 0xC8	; 200
    5044:	99 e0       	ldi	r25, 0x09	; 9
    5046:	9f 93       	push	r25
    5048:	8f 93       	push	r24
    504a:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
    504e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <keyboard_nkro>
    5052:	1f 92       	push	r1
    5054:	8f 93       	push	r24
    5056:	85 eb       	ldi	r24, 0xB5	; 181
    5058:	99 e0       	ldi	r25, 0x09	; 9
    505a:	9f 93       	push	r25
    505c:	8f 93       	push	r24
    505e:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
#endif
            print_val_hex32(timer_read32());
    5062:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <timer_read32>
    5066:	9f 93       	push	r25
    5068:	8f 93       	push	r24
    506a:	7f 93       	push	r23
    506c:	6f 93       	push	r22
    506e:	8e e9       	ldi	r24, 0x9E	; 158
    5070:	99 e0       	ldi	r25, 0x09	; 9
    5072:	9f 93       	push	r25
    5074:	8f 93       	push	r24
    5076:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    507a:	8d b7       	in	r24, 0x3d	; 61
    507c:	9e b7       	in	r25, 0x3e	; 62
    507e:	46 96       	adiw	r24, 0x16	; 22
    5080:	0f b6       	in	r0, 0x3f	; 63
    5082:	f8 94       	cli
    5084:	9e bf       	out	0x3e, r25	; 62
    5086:	0f be       	out	0x3f, r0	; 63
    5088:	8d bf       	out	0x3d, r24	; 61
    508a:	61 cf       	rjmp	.-318    	; 0x4f4e <command_common+0x3e4>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    508c:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    5090:	c0 91 0c 01 	lds	r28, 0x010C	; 0x80010c <keyboard_nkro>
    5094:	81 e0       	ldi	r24, 0x01	; 1
    5096:	c8 27       	eor	r28, r24
    5098:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <keyboard_nkro>
            if (keyboard_nkro) {
    509c:	cc 23       	and	r28, r28
    509e:	29 f0       	breq	.+10     	; 0x50aa <command_common+0x540>
                print("NKRO: on\n");
    50a0:	84 e9       	ldi	r24, 0x94	; 148
    50a2:	99 e0       	ldi	r25, 0x09	; 9
    50a4:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    50a8:	0e c0       	rjmp	.+28     	; 0x50c6 <command_common+0x55c>
            } else {
                print("NKRO: off\n");
    50aa:	89 e8       	ldi	r24, 0x89	; 137
    50ac:	99 e0       	ldi	r25, 0x09	; 9
    50ae:	4d cf       	rjmp	.-358    	; 0x4f4a <command_common+0x3e0>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    50b0:	80 e0       	ldi	r24, 0x00	; 0
    50b2:	01 c0       	rjmp	.+2      	; 0x50b6 <command_common+0x54c>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    50b4:	89 53       	subi	r24, 0x39	; 57
    50b6:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <switch_default_layer>
    50ba:	49 cf       	rjmp	.-366    	; 0x4f4e <command_common+0x3e4>
            break;
        default:
            print("?");
    50bc:	87 e8       	ldi	r24, 0x87	; 135
    50be:	99 e0       	ldi	r25, 0x09	; 9
    50c0:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
            return false;
    50c4:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    50c6:	8c 2f       	mov	r24, r28
    50c8:	cf 91       	pop	r28
    50ca:	08 95       	ret

000050cc <command_console_extra>:
bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    (void)code;
    return false;
}
    50cc:	80 e0       	ldi	r24, 0x00	; 0
    50ce:	08 95       	ret

000050d0 <command_extra>:
    50d0:	0c 94 66 28 	jmp	0x50cc	; 0x50cc <command_console_extra>

000050d4 <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    50d4:	cf 93       	push	r28
    50d6:	c8 2f       	mov	r28, r24
    switch (command_state) {
    50d8:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <command_state>
    50dc:	81 30       	cpi	r24, 0x01	; 1
    50de:	71 f0       	breq	.+28     	; 0x50fc <command_proc+0x28>
    50e0:	20 f0       	brcs	.+8      	; 0x50ea <command_proc+0x16>
    50e2:	82 30       	cpi	r24, 0x02	; 2
    50e4:	09 f4       	brne	.+2      	; 0x50e8 <command_proc+0x14>
    50e6:	4b c0       	rjmp	.+150    	; 0x517e <command_proc+0xaa>
    50e8:	42 c1       	rjmp	.+644    	; 0x536e <command_proc+0x29a>
        case ONESHOT:
            if (!IS_COMMAND())
    50ea:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    50ee:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    50f2:	80 81       	ld	r24, Z
    50f4:	82 32       	cpi	r24, 0x22	; 34
    50f6:	09 f0       	breq	.+2      	; 0x50fa <command_proc+0x26>
    50f8:	3c c1       	rjmp	.+632    	; 0x5372 <command_proc+0x29e>
    50fa:	07 c0       	rjmp	.+14     	; 0x510a <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    50fc:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    5100:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    5104:	80 81       	ld	r24, Z
    5106:	82 32       	cpi	r24, 0x22	; 34
    5108:	61 f4       	brne	.+24     	; 0x5122 <command_proc+0x4e>
                return (command_extra(code) || command_common(code));
    510a:	8c 2f       	mov	r24, r28
    510c:	0e 94 68 28 	call	0x50d0	; 0x50d0 <command_extra>
    5110:	81 11       	cpse	r24, r1
    5112:	04 c0       	rjmp	.+8      	; 0x511c <command_proc+0x48>
    5114:	8c 2f       	mov	r24, r28
    5116:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <command_common>
    511a:	2f c0       	rjmp	.+94     	; 0x517a <command_proc+0xa6>
    511c:	81 e0       	ldi	r24, 0x01	; 1
    511e:	90 e0       	ldi	r25, 0x00	; 0
    5120:	2c c0       	rjmp	.+88     	; 0x517a <command_proc+0xa6>
            else
                return (command_console_extra(code) || command_console(code));
    5122:	8c 2f       	mov	r24, r28
    5124:	0e 94 66 28 	call	0x50cc	; 0x50cc <command_console_extra>
    5128:	81 11       	cpse	r24, r1
    512a:	26 c0       	rjmp	.+76     	; 0x5178 <command_proc+0xa4>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    512c:	c4 31       	cpi	r28, 0x14	; 20
    512e:	e1 f0       	breq	.+56     	; 0x5168 <command_proc+0x94>
    5130:	70 f4       	brcc	.+28     	; 0x514e <command_proc+0x7a>
    5132:	cb 30       	cpi	r28, 0x0B	; 11
    5134:	81 f0       	breq	.+32     	; 0x5156 <command_proc+0x82>
    5136:	c0 31       	cpi	r28, 0x10	; 16
    5138:	d1 f4       	brne	.+52     	; 0x516e <command_proc+0x9a>
        case KC_ESC:
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    513a:	0e 94 5d 24 	call	0x48ba	; 0x48ba <mousekey_console_help>
            print("M> ");
    513e:	80 e3       	ldi	r24, 0x30	; 48
    5140:	97 e0       	ldi	r25, 0x07	; 7
    5142:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
            command_state = MOUSEKEY;
    5146:	82 e0       	ldi	r24, 0x02	; 2
    5148:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <command_state>
    514c:	15 c0       	rjmp	.+42     	; 0x5178 <command_proc+0xa4>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    514e:	c9 32       	cpi	r28, 0x29	; 41
    5150:	59 f0       	breq	.+22     	; 0x5168 <command_proc+0x94>
    5152:	c8 33       	cpi	r28, 0x38	; 56
    5154:	61 f4       	brne	.+24     	; 0x516e <command_proc+0x9a>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    5156:	8d e3       	ldi	r24, 0x3D	; 61
    5158:	97 e0       	ldi	r25, 0x07	; 7
    515a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    515e:	84 e3       	ldi	r24, 0x34	; 52
    5160:	97 e0       	ldi	r25, 0x07	; 7
    5162:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    5166:	08 c0       	rjmp	.+16     	; 0x5178 <command_proc+0xa4>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    5168:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <command_state>
    516c:	04 c1       	rjmp	.+520    	; 0x5376 <command_proc+0x2a2>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    516e:	8e e2       	ldi	r24, 0x2E	; 46
    5170:	97 e0       	ldi	r25, 0x07	; 7
    5172:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    5176:	ff c0       	rjmp	.+510    	; 0x5376 <command_proc+0x2a2>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    5178:	81 e0       	ldi	r24, 0x01	; 1
    517a:	81 70       	andi	r24, 0x01	; 1
    517c:	fe c0       	rjmp	.+508    	; 0x537a <command_proc+0x2a6>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    517e:	c4 32       	cpi	r28, 0x24	; 36
    5180:	28 f5       	brcc	.+74     	; 0x51cc <command_proc+0xf8>
    5182:	ce 31       	cpi	r28, 0x1E	; 30
    5184:	08 f0       	brcs	.+2      	; 0x5188 <command_proc+0xb4>
    5186:	c1 c0       	rjmp	.+386    	; 0x530a <command_proc+0x236>
    5188:	cb 30       	cpi	r28, 0x0B	; 11
    518a:	a1 f1       	breq	.+104    	; 0x51f4 <command_proc+0x120>
    518c:	d0 f4       	brcc	.+52     	; 0x51c2 <command_proc+0xee>
    518e:	c7 30       	cpi	r28, 0x07	; 7
    5190:	09 f0       	breq	.+2      	; 0x5194 <command_proc+0xc0>
    5192:	d3 c0       	rjmp	.+422    	; 0x533a <command_proc+0x266>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    5194:	8e e1       	ldi	r24, 0x1E	; 30
    5196:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_delay>
            mk_interval = MOUSEKEY_INTERVAL;
    519a:	82 e3       	ldi	r24, 0x32	; 50
    519c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_interval>
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    51a0:	8a e0       	ldi	r24, 0x0A	; 10
    51a2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mk_max_speed>
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    51a6:	84 e1       	ldi	r24, 0x14	; 20
    51a8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mk_time_to_max>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    51ac:	88 e0       	ldi	r24, 0x08	; 8
    51ae:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mk_wheel_max_speed>
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    51b2:	88 e2       	ldi	r24, 0x28	; 40
    51b4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <mk_wheel_time_to_max>
            print("set default\n");
    51b8:	84 ed       	ldi	r24, 0xD4	; 212
    51ba:	95 e0       	ldi	r25, 0x05	; 5
    51bc:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    51c0:	bf c0       	rjmp	.+382    	; 0x5340 <command_proc+0x26c>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    51c2:	c3 31       	cpi	r28, 0x13	; 19
    51c4:	49 f1       	breq	.+82     	; 0x5218 <command_proc+0x144>
    51c6:	c4 31       	cpi	r28, 0x14	; 20
    51c8:	c1 f0       	breq	.+48     	; 0x51fa <command_proc+0x126>
    51ca:	b7 c0       	rjmp	.+366    	; 0x533a <command_proc+0x266>
    51cc:	cb 34       	cpi	r28, 0x4B	; 75
    51ce:	09 f4       	brne	.+2      	; 0x51d2 <command_proc+0xfe>
    51d0:	a9 c0       	rjmp	.+338    	; 0x5324 <command_proc+0x250>
    51d2:	28 f4       	brcc	.+10     	; 0x51de <command_proc+0x10a>
    51d4:	c9 32       	cpi	r28, 0x29	; 41
    51d6:	89 f0       	breq	.+34     	; 0x51fa <command_proc+0x126>
    51d8:	c8 33       	cpi	r28, 0x38	; 56
    51da:	61 f0       	breq	.+24     	; 0x51f4 <command_proc+0x120>
    51dc:	ae c0       	rjmp	.+348    	; 0x533a <command_proc+0x266>
    51de:	c1 35       	cpi	r28, 0x51	; 81
    51e0:	09 f4       	brne	.+2      	; 0x51e4 <command_proc+0x110>
    51e2:	9e c0       	rjmp	.+316    	; 0x5320 <command_proc+0x24c>
    51e4:	c2 35       	cpi	r28, 0x52	; 82
    51e6:	09 f4       	brne	.+2      	; 0x51ea <command_proc+0x116>
    51e8:	99 c0       	rjmp	.+306    	; 0x531c <command_proc+0x248>
    51ea:	ce 34       	cpi	r28, 0x4E	; 78
    51ec:	09 f0       	breq	.+2      	; 0x51f0 <command_proc+0x11c>
    51ee:	a5 c0       	rjmp	.+330    	; 0x533a <command_proc+0x266>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    51f0:	6a e0       	ldi	r22, 0x0A	; 10
    51f2:	9e c0       	rjmp	.+316    	; 0x5330 <command_proc+0x25c>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    51f4:	0e 94 5d 24 	call	0x48ba	; 0x48ba <mousekey_console_help>
    51f8:	a3 c0       	rjmp	.+326    	; 0x5340 <command_proc+0x26c>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    51fa:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <mousekey_param>
    51fe:	88 23       	and	r24, r24
    5200:	19 f0       	breq	.+6      	; 0x5208 <command_proc+0x134>
                mousekey_param = 0;
    5202:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <mousekey_param>
    5206:	9c c0       	rjmp	.+312    	; 0x5340 <command_proc+0x26c>
            } else {
                print("C> ");
    5208:	81 ee       	ldi	r24, 0xE1	; 225
    520a:	95 e0       	ldi	r25, 0x05	; 5
    520c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
                command_state = CONSOLE;
    5210:	81 e0       	ldi	r24, 0x01	; 1
    5212:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <command_state>
    5216:	b1 c0       	rjmp	.+354    	; 0x537a <command_proc+0x2a6>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    5218:	8b eb       	ldi	r24, 0xBB	; 187
    521a:	95 e0       	ldi	r25, 0x05	; 5
    521c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    5220:	89 ea       	ldi	r24, 0xA9	; 169
    5222:	95 e0       	ldi	r25, 0x05	; 5
    5224:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    5228:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_delay>
    522c:	1f 92       	push	r1
    522e:	8f 93       	push	r24
    5230:	86 ea       	ldi	r24, 0xA6	; 166
    5232:	95 e0       	ldi	r25, 0x05	; 5
    5234:	9f 93       	push	r25
    5236:	8f 93       	push	r24
    5238:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    523c:	84 ea       	ldi	r24, 0xA4	; 164
    523e:	95 e0       	ldi	r25, 0x05	; 5
    5240:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    5244:	82 e9       	ldi	r24, 0x92	; 146
    5246:	95 e0       	ldi	r25, 0x05	; 5
    5248:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    524c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_interval>
    5250:	1f 92       	push	r1
    5252:	8f 93       	push	r24
    5254:	8f e8       	ldi	r24, 0x8F	; 143
    5256:	95 e0       	ldi	r25, 0x05	; 5
    5258:	9f 93       	push	r25
    525a:	8f 93       	push	r24
    525c:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    5260:	8d e8       	ldi	r24, 0x8D	; 141
    5262:	95 e0       	ldi	r25, 0x05	; 5
    5264:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    5268:	8e e7       	ldi	r24, 0x7E	; 126
    526a:	95 e0       	ldi	r25, 0x05	; 5
    526c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    5270:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_max_speed>
    5274:	1f 92       	push	r1
    5276:	8f 93       	push	r24
    5278:	8b e7       	ldi	r24, 0x7B	; 123
    527a:	95 e0       	ldi	r25, 0x05	; 5
    527c:	9f 93       	push	r25
    527e:	8f 93       	push	r24
    5280:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    5284:	89 e7       	ldi	r24, 0x79	; 121
    5286:	95 e0       	ldi	r25, 0x05	; 5
    5288:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    528c:	88 e6       	ldi	r24, 0x68	; 104
    528e:	95 e0       	ldi	r25, 0x05	; 5
    5290:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    5294:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_time_to_max>
    5298:	1f 92       	push	r1
    529a:	8f 93       	push	r24
    529c:	85 e6       	ldi	r24, 0x65	; 101
    529e:	95 e0       	ldi	r25, 0x05	; 5
    52a0:	9f 93       	push	r25
    52a2:	8f 93       	push	r24
    52a4:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    52a8:	83 e6       	ldi	r24, 0x63	; 99
    52aa:	95 e0       	ldi	r25, 0x05	; 5
    52ac:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    52b0:	8e e4       	ldi	r24, 0x4E	; 78
    52b2:	95 e0       	ldi	r25, 0x05	; 5
    52b4:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    52b8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_max_speed>
    52bc:	1f 92       	push	r1
    52be:	8f 93       	push	r24
    52c0:	8b e4       	ldi	r24, 0x4B	; 75
    52c2:	95 e0       	ldi	r25, 0x05	; 5
    52c4:	9f 93       	push	r25
    52c6:	8f 93       	push	r24
    52c8:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    52cc:	89 e4       	ldi	r24, 0x49	; 73
    52ce:	95 e0       	ldi	r25, 0x05	; 5
    52d0:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    52d4:	82 e3       	ldi	r24, 0x32	; 50
    52d6:	95 e0       	ldi	r25, 0x05	; 5
    52d8:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    52dc:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_time_to_max>
    52e0:	1f 92       	push	r1
    52e2:	8f 93       	push	r24
    52e4:	8f e2       	ldi	r24, 0x2F	; 47
    52e6:	95 e0       	ldi	r25, 0x05	; 5
    52e8:	9f 93       	push	r25
    52ea:	8f 93       	push	r24
    52ec:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    52f0:	8d e2       	ldi	r24, 0x2D	; 45
    52f2:	95 e0       	ldi	r25, 0x05	; 5
    52f4:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
    52f8:	8d b7       	in	r24, 0x3d	; 61
    52fa:	9e b7       	in	r25, 0x3e	; 62
    52fc:	48 96       	adiw	r24, 0x18	; 24
    52fe:	0f b6       	in	r0, 0x3f	; 63
    5300:	f8 94       	cli
    5302:	9e bf       	out	0x3e, r25	; 62
    5304:	0f be       	out	0x3f, r0	; 63
    5306:	8d bf       	out	0x3d, r24	; 61
    5308:	1b c0       	rjmp	.+54     	; 0x5340 <command_proc+0x26c>
    530a:	ce 51       	subi	r28, 0x1E	; 30
    530c:	ec 2f       	mov	r30, r28
    530e:	f0 e0       	ldi	r31, 0x00	; 0
    5310:	e2 5d       	subi	r30, 0xD2	; 210
    5312:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    5314:	80 81       	ld	r24, Z
    5316:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <mousekey_param>
    531a:	12 c0       	rjmp	.+36     	; 0x5340 <command_proc+0x26c>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    531c:	61 e0       	ldi	r22, 0x01	; 1
    531e:	03 c0       	rjmp	.+6      	; 0x5326 <command_proc+0x252>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    5320:	61 e0       	ldi	r22, 0x01	; 1
    5322:	06 c0       	rjmp	.+12     	; 0x5330 <command_proc+0x25c>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    5324:	6a e0       	ldi	r22, 0x0A	; 10
    5326:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <mousekey_param>
    532a:	0e 94 74 24 	call	0x48e8	; 0x48e8 <mousekey_param_inc>
    532e:	08 c0       	rjmp	.+16     	; 0x5340 <command_proc+0x26c>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5330:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <mousekey_param>
    5334:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <mousekey_param_dec>
    5338:	03 c0       	rjmp	.+6      	; 0x5340 <command_proc+0x26c>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default\n");
            break;
        default:
            print("?");
    533a:	82 ed       	ldi	r24, 0xD2	; 210
    533c:	95 e0       	ldi	r25, 0x05	; 5
    533e:	13 c0       	rjmp	.+38     	; 0x5366 <command_proc+0x292>
            return false;
    }
    if (mousekey_param) {
    5340:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <mousekey_param>
    5344:	88 23       	and	r24, r24
    5346:	69 f0       	breq	.+26     	; 0x5362 <command_proc+0x28e>
        xprintf("M%d> ", mousekey_param);
    5348:	1f 92       	push	r1
    534a:	8f 93       	push	r24
    534c:	8c ec       	ldi	r24, 0xCC	; 204
    534e:	95 e0       	ldi	r25, 0x05	; 5
    5350:	9f 93       	push	r25
    5352:	8f 93       	push	r24
    5354:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    5358:	0f 90       	pop	r0
    535a:	0f 90       	pop	r0
    535c:	0f 90       	pop	r0
    535e:	0f 90       	pop	r0
    5360:	04 c0       	rjmp	.+8      	; 0x536a <command_proc+0x296>
    } else {
        print("M>" );
    5362:	89 ec       	ldi	r24, 0xC9	; 201
    5364:	95 e0       	ldi	r25, 0x05	; 5
    5366:	0e 94 58 06 	call	0xcb0	; 0xcb0 <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    536a:	81 e0       	ldi	r24, 0x01	; 1
    536c:	06 c0       	rjmp	.+12     	; 0x537a <command_proc+0x2a6>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    536e:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <command_state>
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    5372:	80 e0       	ldi	r24, 0x00	; 0
    5374:	02 c0       	rjmp	.+4      	; 0x537a <command_proc+0x2a6>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    5376:	80 e0       	ldi	r24, 0x00	; 0
    5378:	00 cf       	rjmp	.-512    	; 0x517a <command_proc+0xa6>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    537a:	cf 91       	pop	r28
    537c:	08 95       	ret

0000537e <backlight_init>:
backlight_config_t backlight_config;

void backlight_init(void)
{
    /* check signature */
    if (!eeconfig_is_enabled()) {
    537e:	0e 94 81 21 	call	0x4302	; 0x4302 <eeconfig_is_enabled>
    5382:	81 11       	cpse	r24, r1
    5384:	02 c0       	rjmp	.+4      	; 0x538a <backlight_init+0xc>
        eeconfig_init();
    5386:	0e 94 62 21 	call	0x42c4	; 0x42c4 <eeconfig_init>
    }
    backlight_config.raw = eeconfig_read_backlight();
    538a:	0e 94 a7 21 	call	0x434e	; 0x434e <eeconfig_read_backlight>
    538e:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <backlight_config>
    backlight_set(backlight_config.enable ? backlight_config.level : 0);
    5392:	80 ff       	sbrs	r24, 0
    5394:	02 c0       	rjmp	.+4      	; 0x539a <backlight_init+0x1c>
    5396:	86 95       	lsr	r24
    5398:	01 c0       	rjmp	.+2      	; 0x539c <backlight_init+0x1e>
    539a:	80 e0       	ldi	r24, 0x00	; 0
    539c:	0c 94 0f 08 	jmp	0x101e	; 0x101e <backlight_set>

000053a0 <backlight_increase>:
}

void backlight_increase(void)
{
    if(backlight_config.level < BACKLIGHT_LEVELS)
    53a0:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <backlight_config>
    53a4:	98 2f       	mov	r25, r24
    53a6:	96 95       	lsr	r25
    53a8:	39 f4       	brne	.+14     	; 0x53b8 <backlight_increase+0x18>
    {
        backlight_config.level++;
    53aa:	81 70       	andi	r24, 0x01	; 1
        backlight_config.enable = 1;
    53ac:	82 60       	ori	r24, 0x02	; 2
    53ae:	81 60       	ori	r24, 0x01	; 1
    53b0:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <backlight_config>
        eeconfig_write_backlight(backlight_config.raw);
    53b4:	0e 94 ab 21 	call	0x4356	; 0x4356 <eeconfig_write_backlight>
    }
    dprintf("backlight increase: %u\n", backlight_config.level);
    53b8:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <debug_config>
    53bc:	80 ff       	sbrs	r24, 0
    53be:	0f c0       	rjmp	.+30     	; 0x53de <backlight_increase+0x3e>
    53c0:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <backlight_config>
    53c4:	86 95       	lsr	r24
    53c6:	1f 92       	push	r1
    53c8:	8f 93       	push	r24
    53ca:	8d ee       	ldi	r24, 0xED	; 237
    53cc:	9b e0       	ldi	r25, 0x0B	; 11
    53ce:	9f 93       	push	r25
    53d0:	8f 93       	push	r24
    53d2:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    53d6:	0f 90       	pop	r0
    53d8:	0f 90       	pop	r0
    53da:	0f 90       	pop	r0
    53dc:	0f 90       	pop	r0
    backlight_set(backlight_config.level);
    53de:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <backlight_config>
    53e2:	86 95       	lsr	r24
    53e4:	0c 94 0f 08 	jmp	0x101e	; 0x101e <backlight_set>

000053e8 <backlight_decrease>:
}

void backlight_decrease(void)
{
    if(backlight_config.level > 0)
    53e8:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <backlight_config>
    53ec:	98 2f       	mov	r25, r24
    53ee:	96 95       	lsr	r25
    53f0:	91 f0       	breq	.+36     	; 0x5416 <backlight_decrease+0x2e>
    {
        backlight_config.level--;
    53f2:	91 58       	subi	r25, 0x81	; 129
    53f4:	99 0f       	add	r25, r25
    53f6:	81 70       	andi	r24, 0x01	; 1
    53f8:	89 2b       	or	r24, r25
    53fa:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <backlight_config>
        backlight_config.enable = !!backlight_config.level;
    53fe:	8e 7f       	andi	r24, 0xFE	; 254
    5400:	91 e0       	ldi	r25, 0x01	; 1
    5402:	09 f4       	brne	.+2      	; 0x5406 <backlight_decrease+0x1e>
    5404:	90 e0       	ldi	r25, 0x00	; 0
    5406:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <backlight_config>
    540a:	90 fb       	bst	r25, 0
    540c:	80 f9       	bld	r24, 0
    540e:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <backlight_config>
        eeconfig_write_backlight(backlight_config.raw);
    5412:	0e 94 ab 21 	call	0x4356	; 0x4356 <eeconfig_write_backlight>
    }
    dprintf("backlight decrease: %u\n", backlight_config.level);
    5416:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <debug_config>
    541a:	80 ff       	sbrs	r24, 0
    541c:	0f c0       	rjmp	.+30     	; 0x543c <backlight_decrease+0x54>
    541e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <backlight_config>
    5422:	86 95       	lsr	r24
    5424:	1f 92       	push	r1
    5426:	8f 93       	push	r24
    5428:	85 ed       	ldi	r24, 0xD5	; 213
    542a:	9b e0       	ldi	r25, 0x0B	; 11
    542c:	9f 93       	push	r25
    542e:	8f 93       	push	r24
    5430:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    5434:	0f 90       	pop	r0
    5436:	0f 90       	pop	r0
    5438:	0f 90       	pop	r0
    543a:	0f 90       	pop	r0
    backlight_set(backlight_config.level);
    543c:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <backlight_config>
    5440:	86 95       	lsr	r24
    5442:	0c 94 0f 08 	jmp	0x101e	; 0x101e <backlight_set>

00005446 <backlight_toggle>:
}

void backlight_toggle(void)
{
    backlight_config.enable ^= 1;
    5446:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <backlight_config>
    544a:	98 2f       	mov	r25, r24
    544c:	90 95       	com	r25
    544e:	90 fb       	bst	r25, 0
    5450:	80 f9       	bld	r24, 0
    5452:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <backlight_config>
    eeconfig_write_backlight(backlight_config.raw);
    5456:	0e 94 ab 21 	call	0x4356	; 0x4356 <eeconfig_write_backlight>
    dprintf("backlight toggle: %u\n", backlight_config.enable);
    545a:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <debug_config>
    545e:	80 ff       	sbrs	r24, 0
    5460:	0f c0       	rjmp	.+30     	; 0x5480 <backlight_toggle+0x3a>
    5462:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <backlight_config>
    5466:	81 70       	andi	r24, 0x01	; 1
    5468:	1f 92       	push	r1
    546a:	8f 93       	push	r24
    546c:	8f eb       	ldi	r24, 0xBF	; 191
    546e:	9b e0       	ldi	r25, 0x0B	; 11
    5470:	9f 93       	push	r25
    5472:	8f 93       	push	r24
    5474:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    5478:	0f 90       	pop	r0
    547a:	0f 90       	pop	r0
    547c:	0f 90       	pop	r0
    547e:	0f 90       	pop	r0
    backlight_set(backlight_config.enable ? backlight_config.level : 0);
    5480:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <backlight_config>
    5484:	80 ff       	sbrs	r24, 0
    5486:	02 c0       	rjmp	.+4      	; 0x548c <backlight_toggle+0x46>
    5488:	86 95       	lsr	r24
    548a:	01 c0       	rjmp	.+2      	; 0x548e <backlight_toggle+0x48>
    548c:	80 e0       	ldi	r24, 0x00	; 0
    548e:	0c 94 0f 08 	jmp	0x101e	; 0x101e <backlight_set>

00005492 <backlight_step>:
}

void backlight_step(void)
{
    backlight_config.level++;
    5492:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <backlight_config>
    5496:	89 2f       	mov	r24, r25
    5498:	86 95       	lsr	r24
    549a:	8f 5f       	subi	r24, 0xFF	; 255
    549c:	8f 77       	andi	r24, 0x7F	; 127
    549e:	91 70       	andi	r25, 0x01	; 1
    if(backlight_config.level > BACKLIGHT_LEVELS)
    54a0:	82 30       	cpi	r24, 0x02	; 2
    54a2:	28 f4       	brcc	.+10     	; 0x54ae <backlight_step+0x1c>
    backlight_set(backlight_config.enable ? backlight_config.level : 0);
}

void backlight_step(void)
{
    backlight_config.level++;
    54a4:	88 0f       	add	r24, r24
    54a6:	89 2b       	or	r24, r25
    54a8:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <backlight_config>
    54ac:	02 c0       	rjmp	.+4      	; 0x54b2 <backlight_step+0x20>
    if(backlight_config.level > BACKLIGHT_LEVELS)
    {
        backlight_config.level = 0;
    54ae:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <backlight_config>
    }
    backlight_config.enable = !!backlight_config.level;
    54b2:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <backlight_config>
    54b6:	8e 7f       	andi	r24, 0xFE	; 254
    54b8:	91 e0       	ldi	r25, 0x01	; 1
    54ba:	09 f4       	brne	.+2      	; 0x54be <backlight_step+0x2c>
    54bc:	90 e0       	ldi	r25, 0x00	; 0
    54be:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <backlight_config>
    54c2:	90 fb       	bst	r25, 0
    54c4:	80 f9       	bld	r24, 0
    54c6:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <backlight_config>
    eeconfig_write_backlight(backlight_config.raw);
    54ca:	0e 94 ab 21 	call	0x4356	; 0x4356 <eeconfig_write_backlight>
    dprintf("backlight step: %u\n", backlight_config.level);
    54ce:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <debug_config>
    54d2:	80 ff       	sbrs	r24, 0
    54d4:	0f c0       	rjmp	.+30     	; 0x54f4 <backlight_step+0x62>
    54d6:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <backlight_config>
    54da:	86 95       	lsr	r24
    54dc:	1f 92       	push	r1
    54de:	8f 93       	push	r24
    54e0:	8b ea       	ldi	r24, 0xAB	; 171
    54e2:	9b e0       	ldi	r25, 0x0B	; 11
    54e4:	9f 93       	push	r25
    54e6:	8f 93       	push	r24
    54e8:	0e 94 f1 06 	call	0xde2	; 0xde2 <__xprintf>
    54ec:	0f 90       	pop	r0
    54ee:	0f 90       	pop	r0
    54f0:	0f 90       	pop	r0
    54f2:	0f 90       	pop	r0
    backlight_set(backlight_config.level);
    54f4:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <backlight_config>
    54f8:	86 95       	lsr	r24
    54fa:	0c 94 0f 08 	jmp	0x101e	; 0x101e <backlight_set>

000054fe <backlight_level>:
}

void backlight_level(uint8_t level)
{
    backlight_config.level ^= level;
    54fe:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <backlight_config>
    5502:	92 2f       	mov	r25, r18
    5504:	96 95       	lsr	r25
    5506:	89 27       	eor	r24, r25
    5508:	98 2f       	mov	r25, r24
    550a:	99 0f       	add	r25, r25
    550c:	82 2f       	mov	r24, r18
    550e:	81 70       	andi	r24, 0x01	; 1
    5510:	89 2b       	or	r24, r25
    5512:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <backlight_config>
    backlight_config.enable = !!backlight_config.level;
    5516:	8e 7f       	andi	r24, 0xFE	; 254
    5518:	91 e0       	ldi	r25, 0x01	; 1
    551a:	09 f4       	brne	.+2      	; 0x551e <backlight_level+0x20>
    551c:	90 e0       	ldi	r25, 0x00	; 0
    551e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <backlight_config>
    5522:	90 fb       	bst	r25, 0
    5524:	80 f9       	bld	r24, 0
    5526:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <backlight_config>
    eeconfig_write_backlight(backlight_config.raw);
    552a:	0e 94 ab 21 	call	0x4356	; 0x4356 <eeconfig_write_backlight>
    backlight_set(backlight_config.level);
    552e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <backlight_config>
    5532:	86 95       	lsr	r24
    5534:	0c 94 0f 08 	jmp	0x101e	; 0x101e <backlight_set>

00005538 <__fixsfsi>:
    5538:	0e 94 a3 2a 	call	0x5546	; 0x5546 <__fixunssfsi>
    553c:	68 94       	set
    553e:	b1 11       	cpse	r27, r1
    5540:	0c 94 32 2b 	jmp	0x5664	; 0x5664 <__fp_szero>
    5544:	08 95       	ret

00005546 <__fixunssfsi>:
    5546:	0e 94 17 2b 	call	0x562e	; 0x562e <__fp_splitA>
    554a:	88 f0       	brcs	.+34     	; 0x556e <__fixunssfsi+0x28>
    554c:	9f 57       	subi	r25, 0x7F	; 127
    554e:	98 f0       	brcs	.+38     	; 0x5576 <__fixunssfsi+0x30>
    5550:	b9 2f       	mov	r27, r25
    5552:	99 27       	eor	r25, r25
    5554:	b7 51       	subi	r27, 0x17	; 23
    5556:	b0 f0       	brcs	.+44     	; 0x5584 <__fixunssfsi+0x3e>
    5558:	e1 f0       	breq	.+56     	; 0x5592 <__fixunssfsi+0x4c>
    555a:	66 0f       	add	r22, r22
    555c:	77 1f       	adc	r23, r23
    555e:	88 1f       	adc	r24, r24
    5560:	99 1f       	adc	r25, r25
    5562:	1a f0       	brmi	.+6      	; 0x556a <__fixunssfsi+0x24>
    5564:	ba 95       	dec	r27
    5566:	c9 f7       	brne	.-14     	; 0x555a <__fixunssfsi+0x14>
    5568:	14 c0       	rjmp	.+40     	; 0x5592 <__fixunssfsi+0x4c>
    556a:	b1 30       	cpi	r27, 0x01	; 1
    556c:	91 f0       	breq	.+36     	; 0x5592 <__fixunssfsi+0x4c>
    556e:	0e 94 31 2b 	call	0x5662	; 0x5662 <__fp_zero>
    5572:	b1 e0       	ldi	r27, 0x01	; 1
    5574:	08 95       	ret
    5576:	0c 94 31 2b 	jmp	0x5662	; 0x5662 <__fp_zero>
    557a:	67 2f       	mov	r22, r23
    557c:	78 2f       	mov	r23, r24
    557e:	88 27       	eor	r24, r24
    5580:	b8 5f       	subi	r27, 0xF8	; 248
    5582:	39 f0       	breq	.+14     	; 0x5592 <__fixunssfsi+0x4c>
    5584:	b9 3f       	cpi	r27, 0xF9	; 249
    5586:	cc f3       	brlt	.-14     	; 0x557a <__fixunssfsi+0x34>
    5588:	86 95       	lsr	r24
    558a:	77 95       	ror	r23
    558c:	67 95       	ror	r22
    558e:	b3 95       	inc	r27
    5590:	d9 f7       	brne	.-10     	; 0x5588 <__fixunssfsi+0x42>
    5592:	3e f4       	brtc	.+14     	; 0x55a2 <__fixunssfsi+0x5c>
    5594:	90 95       	com	r25
    5596:	80 95       	com	r24
    5598:	70 95       	com	r23
    559a:	61 95       	neg	r22
    559c:	7f 4f       	sbci	r23, 0xFF	; 255
    559e:	8f 4f       	sbci	r24, 0xFF	; 255
    55a0:	9f 4f       	sbci	r25, 0xFF	; 255
    55a2:	08 95       	ret

000055a4 <__floatunsisf>:
    55a4:	e8 94       	clt
    55a6:	09 c0       	rjmp	.+18     	; 0x55ba <__floatsisf+0x12>

000055a8 <__floatsisf>:
    55a8:	97 fb       	bst	r25, 7
    55aa:	3e f4       	brtc	.+14     	; 0x55ba <__floatsisf+0x12>
    55ac:	90 95       	com	r25
    55ae:	80 95       	com	r24
    55b0:	70 95       	com	r23
    55b2:	61 95       	neg	r22
    55b4:	7f 4f       	sbci	r23, 0xFF	; 255
    55b6:	8f 4f       	sbci	r24, 0xFF	; 255
    55b8:	9f 4f       	sbci	r25, 0xFF	; 255
    55ba:	99 23       	and	r25, r25
    55bc:	a9 f0       	breq	.+42     	; 0x55e8 <__floatsisf+0x40>
    55be:	f9 2f       	mov	r31, r25
    55c0:	96 e9       	ldi	r25, 0x96	; 150
    55c2:	bb 27       	eor	r27, r27
    55c4:	93 95       	inc	r25
    55c6:	f6 95       	lsr	r31
    55c8:	87 95       	ror	r24
    55ca:	77 95       	ror	r23
    55cc:	67 95       	ror	r22
    55ce:	b7 95       	ror	r27
    55d0:	f1 11       	cpse	r31, r1
    55d2:	f8 cf       	rjmp	.-16     	; 0x55c4 <__floatsisf+0x1c>
    55d4:	fa f4       	brpl	.+62     	; 0x5614 <__floatsisf+0x6c>
    55d6:	bb 0f       	add	r27, r27
    55d8:	11 f4       	brne	.+4      	; 0x55de <__floatsisf+0x36>
    55da:	60 ff       	sbrs	r22, 0
    55dc:	1b c0       	rjmp	.+54     	; 0x5614 <__floatsisf+0x6c>
    55de:	6f 5f       	subi	r22, 0xFF	; 255
    55e0:	7f 4f       	sbci	r23, 0xFF	; 255
    55e2:	8f 4f       	sbci	r24, 0xFF	; 255
    55e4:	9f 4f       	sbci	r25, 0xFF	; 255
    55e6:	16 c0       	rjmp	.+44     	; 0x5614 <__floatsisf+0x6c>
    55e8:	88 23       	and	r24, r24
    55ea:	11 f0       	breq	.+4      	; 0x55f0 <__floatsisf+0x48>
    55ec:	96 e9       	ldi	r25, 0x96	; 150
    55ee:	11 c0       	rjmp	.+34     	; 0x5612 <__floatsisf+0x6a>
    55f0:	77 23       	and	r23, r23
    55f2:	21 f0       	breq	.+8      	; 0x55fc <__floatsisf+0x54>
    55f4:	9e e8       	ldi	r25, 0x8E	; 142
    55f6:	87 2f       	mov	r24, r23
    55f8:	76 2f       	mov	r23, r22
    55fa:	05 c0       	rjmp	.+10     	; 0x5606 <__floatsisf+0x5e>
    55fc:	66 23       	and	r22, r22
    55fe:	71 f0       	breq	.+28     	; 0x561c <__floatsisf+0x74>
    5600:	96 e8       	ldi	r25, 0x86	; 134
    5602:	86 2f       	mov	r24, r22
    5604:	70 e0       	ldi	r23, 0x00	; 0
    5606:	60 e0       	ldi	r22, 0x00	; 0
    5608:	2a f0       	brmi	.+10     	; 0x5614 <__floatsisf+0x6c>
    560a:	9a 95       	dec	r25
    560c:	66 0f       	add	r22, r22
    560e:	77 1f       	adc	r23, r23
    5610:	88 1f       	adc	r24, r24
    5612:	da f7       	brpl	.-10     	; 0x560a <__floatsisf+0x62>
    5614:	88 0f       	add	r24, r24
    5616:	96 95       	lsr	r25
    5618:	87 95       	ror	r24
    561a:	97 f9       	bld	r25, 7
    561c:	08 95       	ret

0000561e <__fp_split3>:
    561e:	57 fd       	sbrc	r21, 7
    5620:	90 58       	subi	r25, 0x80	; 128
    5622:	44 0f       	add	r20, r20
    5624:	55 1f       	adc	r21, r21
    5626:	59 f0       	breq	.+22     	; 0x563e <__fp_splitA+0x10>
    5628:	5f 3f       	cpi	r21, 0xFF	; 255
    562a:	71 f0       	breq	.+28     	; 0x5648 <__fp_splitA+0x1a>
    562c:	47 95       	ror	r20

0000562e <__fp_splitA>:
    562e:	88 0f       	add	r24, r24
    5630:	97 fb       	bst	r25, 7
    5632:	99 1f       	adc	r25, r25
    5634:	61 f0       	breq	.+24     	; 0x564e <__fp_splitA+0x20>
    5636:	9f 3f       	cpi	r25, 0xFF	; 255
    5638:	79 f0       	breq	.+30     	; 0x5658 <__fp_splitA+0x2a>
    563a:	87 95       	ror	r24
    563c:	08 95       	ret
    563e:	12 16       	cp	r1, r18
    5640:	13 06       	cpc	r1, r19
    5642:	14 06       	cpc	r1, r20
    5644:	55 1f       	adc	r21, r21
    5646:	f2 cf       	rjmp	.-28     	; 0x562c <__fp_split3+0xe>
    5648:	46 95       	lsr	r20
    564a:	f1 df       	rcall	.-30     	; 0x562e <__fp_splitA>
    564c:	08 c0       	rjmp	.+16     	; 0x565e <__fp_splitA+0x30>
    564e:	16 16       	cp	r1, r22
    5650:	17 06       	cpc	r1, r23
    5652:	18 06       	cpc	r1, r24
    5654:	99 1f       	adc	r25, r25
    5656:	f1 cf       	rjmp	.-30     	; 0x563a <__fp_splitA+0xc>
    5658:	86 95       	lsr	r24
    565a:	71 05       	cpc	r23, r1
    565c:	61 05       	cpc	r22, r1
    565e:	08 94       	sec
    5660:	08 95       	ret

00005662 <__fp_zero>:
    5662:	e8 94       	clt

00005664 <__fp_szero>:
    5664:	bb 27       	eor	r27, r27
    5666:	66 27       	eor	r22, r22
    5668:	77 27       	eor	r23, r23
    566a:	cb 01       	movw	r24, r22
    566c:	97 f9       	bld	r25, 7
    566e:	08 95       	ret

00005670 <__mulsf3>:
    5670:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__mulsf3x>
    5674:	0c 94 bc 2b 	jmp	0x5778	; 0x5778 <__fp_round>
    5678:	0e 94 ae 2b 	call	0x575c	; 0x575c <__fp_pscA>
    567c:	38 f0       	brcs	.+14     	; 0x568c <__mulsf3+0x1c>
    567e:	0e 94 b5 2b 	call	0x576a	; 0x576a <__fp_pscB>
    5682:	20 f0       	brcs	.+8      	; 0x568c <__mulsf3+0x1c>
    5684:	95 23       	and	r25, r21
    5686:	11 f0       	breq	.+4      	; 0x568c <__mulsf3+0x1c>
    5688:	0c 94 a5 2b 	jmp	0x574a	; 0x574a <__fp_inf>
    568c:	0c 94 ab 2b 	jmp	0x5756	; 0x5756 <__fp_nan>
    5690:	11 24       	eor	r1, r1
    5692:	0c 94 32 2b 	jmp	0x5664	; 0x5664 <__fp_szero>

00005696 <__mulsf3x>:
    5696:	0e 94 0f 2b 	call	0x561e	; 0x561e <__fp_split3>
    569a:	70 f3       	brcs	.-36     	; 0x5678 <__mulsf3+0x8>

0000569c <__mulsf3_pse>:
    569c:	95 9f       	mul	r25, r21
    569e:	c1 f3       	breq	.-16     	; 0x5690 <__mulsf3+0x20>
    56a0:	95 0f       	add	r25, r21
    56a2:	50 e0       	ldi	r21, 0x00	; 0
    56a4:	55 1f       	adc	r21, r21
    56a6:	62 9f       	mul	r22, r18
    56a8:	f0 01       	movw	r30, r0
    56aa:	72 9f       	mul	r23, r18
    56ac:	bb 27       	eor	r27, r27
    56ae:	f0 0d       	add	r31, r0
    56b0:	b1 1d       	adc	r27, r1
    56b2:	63 9f       	mul	r22, r19
    56b4:	aa 27       	eor	r26, r26
    56b6:	f0 0d       	add	r31, r0
    56b8:	b1 1d       	adc	r27, r1
    56ba:	aa 1f       	adc	r26, r26
    56bc:	64 9f       	mul	r22, r20
    56be:	66 27       	eor	r22, r22
    56c0:	b0 0d       	add	r27, r0
    56c2:	a1 1d       	adc	r26, r1
    56c4:	66 1f       	adc	r22, r22
    56c6:	82 9f       	mul	r24, r18
    56c8:	22 27       	eor	r18, r18
    56ca:	b0 0d       	add	r27, r0
    56cc:	a1 1d       	adc	r26, r1
    56ce:	62 1f       	adc	r22, r18
    56d0:	73 9f       	mul	r23, r19
    56d2:	b0 0d       	add	r27, r0
    56d4:	a1 1d       	adc	r26, r1
    56d6:	62 1f       	adc	r22, r18
    56d8:	83 9f       	mul	r24, r19
    56da:	a0 0d       	add	r26, r0
    56dc:	61 1d       	adc	r22, r1
    56de:	22 1f       	adc	r18, r18
    56e0:	74 9f       	mul	r23, r20
    56e2:	33 27       	eor	r19, r19
    56e4:	a0 0d       	add	r26, r0
    56e6:	61 1d       	adc	r22, r1
    56e8:	23 1f       	adc	r18, r19
    56ea:	84 9f       	mul	r24, r20
    56ec:	60 0d       	add	r22, r0
    56ee:	21 1d       	adc	r18, r1
    56f0:	82 2f       	mov	r24, r18
    56f2:	76 2f       	mov	r23, r22
    56f4:	6a 2f       	mov	r22, r26
    56f6:	11 24       	eor	r1, r1
    56f8:	9f 57       	subi	r25, 0x7F	; 127
    56fa:	50 40       	sbci	r21, 0x00	; 0
    56fc:	9a f0       	brmi	.+38     	; 0x5724 <__mulsf3_pse+0x88>
    56fe:	f1 f0       	breq	.+60     	; 0x573c <__mulsf3_pse+0xa0>
    5700:	88 23       	and	r24, r24
    5702:	4a f0       	brmi	.+18     	; 0x5716 <__mulsf3_pse+0x7a>
    5704:	ee 0f       	add	r30, r30
    5706:	ff 1f       	adc	r31, r31
    5708:	bb 1f       	adc	r27, r27
    570a:	66 1f       	adc	r22, r22
    570c:	77 1f       	adc	r23, r23
    570e:	88 1f       	adc	r24, r24
    5710:	91 50       	subi	r25, 0x01	; 1
    5712:	50 40       	sbci	r21, 0x00	; 0
    5714:	a9 f7       	brne	.-22     	; 0x5700 <__mulsf3_pse+0x64>
    5716:	9e 3f       	cpi	r25, 0xFE	; 254
    5718:	51 05       	cpc	r21, r1
    571a:	80 f0       	brcs	.+32     	; 0x573c <__mulsf3_pse+0xa0>
    571c:	0c 94 a5 2b 	jmp	0x574a	; 0x574a <__fp_inf>
    5720:	0c 94 32 2b 	jmp	0x5664	; 0x5664 <__fp_szero>
    5724:	5f 3f       	cpi	r21, 0xFF	; 255
    5726:	e4 f3       	brlt	.-8      	; 0x5720 <__mulsf3_pse+0x84>
    5728:	98 3e       	cpi	r25, 0xE8	; 232
    572a:	d4 f3       	brlt	.-12     	; 0x5720 <__mulsf3_pse+0x84>
    572c:	86 95       	lsr	r24
    572e:	77 95       	ror	r23
    5730:	67 95       	ror	r22
    5732:	b7 95       	ror	r27
    5734:	f7 95       	ror	r31
    5736:	e7 95       	ror	r30
    5738:	9f 5f       	subi	r25, 0xFF	; 255
    573a:	c1 f7       	brne	.-16     	; 0x572c <__mulsf3_pse+0x90>
    573c:	fe 2b       	or	r31, r30
    573e:	88 0f       	add	r24, r24
    5740:	91 1d       	adc	r25, r1
    5742:	96 95       	lsr	r25
    5744:	87 95       	ror	r24
    5746:	97 f9       	bld	r25, 7
    5748:	08 95       	ret

0000574a <__fp_inf>:
    574a:	97 f9       	bld	r25, 7
    574c:	9f 67       	ori	r25, 0x7F	; 127
    574e:	80 e8       	ldi	r24, 0x80	; 128
    5750:	70 e0       	ldi	r23, 0x00	; 0
    5752:	60 e0       	ldi	r22, 0x00	; 0
    5754:	08 95       	ret

00005756 <__fp_nan>:
    5756:	9f ef       	ldi	r25, 0xFF	; 255
    5758:	80 ec       	ldi	r24, 0xC0	; 192
    575a:	08 95       	ret

0000575c <__fp_pscA>:
    575c:	00 24       	eor	r0, r0
    575e:	0a 94       	dec	r0
    5760:	16 16       	cp	r1, r22
    5762:	17 06       	cpc	r1, r23
    5764:	18 06       	cpc	r1, r24
    5766:	09 06       	cpc	r0, r25
    5768:	08 95       	ret

0000576a <__fp_pscB>:
    576a:	00 24       	eor	r0, r0
    576c:	0a 94       	dec	r0
    576e:	12 16       	cp	r1, r18
    5770:	13 06       	cpc	r1, r19
    5772:	14 06       	cpc	r1, r20
    5774:	05 06       	cpc	r0, r21
    5776:	08 95       	ret

00005778 <__fp_round>:
    5778:	09 2e       	mov	r0, r25
    577a:	03 94       	inc	r0
    577c:	00 0c       	add	r0, r0
    577e:	11 f4       	brne	.+4      	; 0x5784 <__fp_round+0xc>
    5780:	88 23       	and	r24, r24
    5782:	52 f0       	brmi	.+20     	; 0x5798 <__fp_round+0x20>
    5784:	bb 0f       	add	r27, r27
    5786:	40 f4       	brcc	.+16     	; 0x5798 <__fp_round+0x20>
    5788:	bf 2b       	or	r27, r31
    578a:	11 f4       	brne	.+4      	; 0x5790 <__fp_round+0x18>
    578c:	60 ff       	sbrs	r22, 0
    578e:	04 c0       	rjmp	.+8      	; 0x5798 <__fp_round+0x20>
    5790:	6f 5f       	subi	r22, 0xFF	; 255
    5792:	7f 4f       	sbci	r23, 0xFF	; 255
    5794:	8f 4f       	sbci	r24, 0xFF	; 255
    5796:	9f 4f       	sbci	r25, 0xFF	; 255
    5798:	08 95       	ret

0000579a <__udivmodqi4>:
    579a:	99 1b       	sub	r25, r25
    579c:	79 e0       	ldi	r23, 0x09	; 9
    579e:	04 c0       	rjmp	.+8      	; 0x57a8 <__udivmodqi4_ep>

000057a0 <__udivmodqi4_loop>:
    57a0:	99 1f       	adc	r25, r25
    57a2:	96 17       	cp	r25, r22
    57a4:	08 f0       	brcs	.+2      	; 0x57a8 <__udivmodqi4_ep>
    57a6:	96 1b       	sub	r25, r22

000057a8 <__udivmodqi4_ep>:
    57a8:	88 1f       	adc	r24, r24
    57aa:	7a 95       	dec	r23
    57ac:	c9 f7       	brne	.-14     	; 0x57a0 <__udivmodqi4_loop>
    57ae:	80 95       	com	r24
    57b0:	08 95       	ret

000057b2 <__divmodhi4>:
    57b2:	97 fb       	bst	r25, 7
    57b4:	07 2e       	mov	r0, r23
    57b6:	16 f4       	brtc	.+4      	; 0x57bc <__divmodhi4+0xa>
    57b8:	00 94       	com	r0
    57ba:	07 d0       	rcall	.+14     	; 0x57ca <__divmodhi4_neg1>
    57bc:	77 fd       	sbrc	r23, 7
    57be:	09 d0       	rcall	.+18     	; 0x57d2 <__divmodhi4_neg2>
    57c0:	0e 94 f3 2b 	call	0x57e6	; 0x57e6 <__udivmodhi4>
    57c4:	07 fc       	sbrc	r0, 7
    57c6:	05 d0       	rcall	.+10     	; 0x57d2 <__divmodhi4_neg2>
    57c8:	3e f4       	brtc	.+14     	; 0x57d8 <__divmodhi4_exit>

000057ca <__divmodhi4_neg1>:
    57ca:	90 95       	com	r25
    57cc:	81 95       	neg	r24
    57ce:	9f 4f       	sbci	r25, 0xFF	; 255
    57d0:	08 95       	ret

000057d2 <__divmodhi4_neg2>:
    57d2:	70 95       	com	r23
    57d4:	61 95       	neg	r22
    57d6:	7f 4f       	sbci	r23, 0xFF	; 255

000057d8 <__divmodhi4_exit>:
    57d8:	08 95       	ret

000057da <__tablejump2__>:
    57da:	ee 0f       	add	r30, r30
    57dc:	ff 1f       	adc	r31, r31
    57de:	05 90       	lpm	r0, Z+
    57e0:	f4 91       	lpm	r31, Z
    57e2:	e0 2d       	mov	r30, r0
    57e4:	09 94       	ijmp

000057e6 <__udivmodhi4>:
    57e6:	aa 1b       	sub	r26, r26
    57e8:	bb 1b       	sub	r27, r27
    57ea:	51 e1       	ldi	r21, 0x11	; 17
    57ec:	07 c0       	rjmp	.+14     	; 0x57fc <__udivmodhi4_ep>

000057ee <__udivmodhi4_loop>:
    57ee:	aa 1f       	adc	r26, r26
    57f0:	bb 1f       	adc	r27, r27
    57f2:	a6 17       	cp	r26, r22
    57f4:	b7 07       	cpc	r27, r23
    57f6:	10 f0       	brcs	.+4      	; 0x57fc <__udivmodhi4_ep>
    57f8:	a6 1b       	sub	r26, r22
    57fa:	b7 0b       	sbc	r27, r23

000057fc <__udivmodhi4_ep>:
    57fc:	88 1f       	adc	r24, r24
    57fe:	99 1f       	adc	r25, r25
    5800:	5a 95       	dec	r21
    5802:	a9 f7       	brne	.-22     	; 0x57ee <__udivmodhi4_loop>
    5804:	80 95       	com	r24
    5806:	90 95       	com	r25
    5808:	bc 01       	movw	r22, r24
    580a:	cd 01       	movw	r24, r26
    580c:	08 95       	ret

0000580e <eeprom_read_byte>:
    580e:	f9 99       	sbic	0x1f, 1	; 31
    5810:	fe cf       	rjmp	.-4      	; 0x580e <eeprom_read_byte>
    5812:	92 bd       	out	0x22, r25	; 34
    5814:	81 bd       	out	0x21, r24	; 33
    5816:	f8 9a       	sbi	0x1f, 0	; 31
    5818:	99 27       	eor	r25, r25
    581a:	80 b5       	in	r24, 0x20	; 32
    581c:	08 95       	ret

0000581e <eeprom_read_word>:
    581e:	a8 e1       	ldi	r26, 0x18	; 24
    5820:	b0 e0       	ldi	r27, 0x00	; 0
    5822:	42 e0       	ldi	r20, 0x02	; 2
    5824:	50 e0       	ldi	r21, 0x00	; 0
    5826:	0c 94 2a 2c 	jmp	0x5854	; 0x5854 <eeprom_read_blraw>

0000582a <eeprom_write_byte>:
    582a:	26 2f       	mov	r18, r22

0000582c <eeprom_write_r18>:
    582c:	f9 99       	sbic	0x1f, 1	; 31
    582e:	fe cf       	rjmp	.-4      	; 0x582c <eeprom_write_r18>
    5830:	1f ba       	out	0x1f, r1	; 31
    5832:	92 bd       	out	0x22, r25	; 34
    5834:	81 bd       	out	0x21, r24	; 33
    5836:	20 bd       	out	0x20, r18	; 32
    5838:	0f b6       	in	r0, 0x3f	; 63
    583a:	f8 94       	cli
    583c:	fa 9a       	sbi	0x1f, 2	; 31
    583e:	f9 9a       	sbi	0x1f, 1	; 31
    5840:	0f be       	out	0x3f, r0	; 63
    5842:	01 96       	adiw	r24, 0x01	; 1
    5844:	08 95       	ret

00005846 <eeprom_write_word>:
    5846:	0e 94 15 2c 	call	0x582a	; 0x582a <eeprom_write_byte>
    584a:	27 2f       	mov	r18, r23
    584c:	0c 94 16 2c 	jmp	0x582c	; 0x582c <eeprom_write_r18>

00005850 <eeprom_read_block>:
    5850:	dc 01       	movw	r26, r24
    5852:	cb 01       	movw	r24, r22

00005854 <eeprom_read_blraw>:
    5854:	fc 01       	movw	r30, r24
    5856:	f9 99       	sbic	0x1f, 1	; 31
    5858:	fe cf       	rjmp	.-4      	; 0x5856 <eeprom_read_blraw+0x2>
    585a:	06 c0       	rjmp	.+12     	; 0x5868 <eeprom_read_blraw+0x14>
    585c:	f2 bd       	out	0x22, r31	; 34
    585e:	e1 bd       	out	0x21, r30	; 33
    5860:	f8 9a       	sbi	0x1f, 0	; 31
    5862:	31 96       	adiw	r30, 0x01	; 1
    5864:	00 b4       	in	r0, 0x20	; 32
    5866:	0d 92       	st	X+, r0
    5868:	41 50       	subi	r20, 0x01	; 1
    586a:	50 40       	sbci	r21, 0x00	; 0
    586c:	b8 f7       	brcc	.-18     	; 0x585c <eeprom_read_blraw+0x8>
    586e:	08 95       	ret

00005870 <_exit>:
    5870:	f8 94       	cli

00005872 <__stop_program>:
    5872:	ff cf       	rjmp	.-2      	; 0x5872 <__stop_program>
