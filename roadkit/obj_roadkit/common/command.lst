   1               		.file	"command.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.mousekey_console_help,"ax",@progbits
  12               	mousekey_console_help:
  13               	.LFB114:
  14               		.file 1 "../../tmk_core/common/command.c"
   1:../../tmk_core/common/command.c **** /*
   2:../../tmk_core/common/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/command.c **** 
   4:../../tmk_core/common/command.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/command.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/command.c **** (at your option) any later version.
   8:../../tmk_core/common/command.c **** 
   9:../../tmk_core/common/command.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/command.c **** GNU General Public License for more details.
  13:../../tmk_core/common/command.c **** 
  14:../../tmk_core/common/command.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/command.c **** */
  17:../../tmk_core/common/command.c **** #include <stdint.h>
  18:../../tmk_core/common/command.c **** #include <stdbool.h>
  19:../../tmk_core/common/command.c **** #include "wait.h"
  20:../../tmk_core/common/command.c **** #include "keycode.h"
  21:../../tmk_core/common/command.c **** #include "host.h"
  22:../../tmk_core/common/command.c **** #include "keymap.h"
  23:../../tmk_core/common/command.c **** #include "print.h"
  24:../../tmk_core/common/command.c **** #include "debug.h"
  25:../../tmk_core/common/command.c **** #include "util.h"
  26:../../tmk_core/common/command.c **** #include "timer.h"
  27:../../tmk_core/common/command.c **** #include "keyboard.h"
  28:../../tmk_core/common/command.c **** #include "bootloader.h"
  29:../../tmk_core/common/command.c **** #include "action_layer.h"
  30:../../tmk_core/common/command.c **** #include "action_util.h"
  31:../../tmk_core/common/command.c **** #include "eeconfig.h"
  32:../../tmk_core/common/command.c **** #include "sleep_led.h"
  33:../../tmk_core/common/command.c **** #include "led.h"
  34:../../tmk_core/common/command.c **** #include "command.h"
  35:../../tmk_core/common/command.c **** #include "backlight.h"
  36:../../tmk_core/common/command.c **** 
  37:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  38:../../tmk_core/common/command.c **** #include "mousekey.h"
  39:../../tmk_core/common/command.c **** #endif
  40:../../tmk_core/common/command.c **** 
  41:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
  42:../../tmk_core/common/command.c **** #   include "usb_keyboard.h"
  43:../../tmk_core/common/command.c **** #   ifdef EXTRAKEY_ENABLE
  44:../../tmk_core/common/command.c **** #       include "usb_extra.h"
  45:../../tmk_core/common/command.c **** #   endif
  46:../../tmk_core/common/command.c **** #endif
  47:../../tmk_core/common/command.c **** 
  48:../../tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
  49:../../tmk_core/common/command.c **** #   include "usbdrv.h"
  50:../../tmk_core/common/command.c **** #endif
  51:../../tmk_core/common/command.c **** 
  52:../../tmk_core/common/command.c **** 
  53:../../tmk_core/common/command.c **** static bool command_common(uint8_t code);
  54:../../tmk_core/common/command.c **** static void command_common_help(void);
  55:../../tmk_core/common/command.c **** static bool command_console(uint8_t code);
  56:../../tmk_core/common/command.c **** static void command_console_help(void);
  57:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  58:../../tmk_core/common/command.c **** static bool mousekey_console(uint8_t code);
  59:../../tmk_core/common/command.c **** static void mousekey_console_help(void);
  60:../../tmk_core/common/command.c **** static uint8_t numkey2num(uint8_t code);
  61:../../tmk_core/common/command.c **** #endif
  62:../../tmk_core/common/command.c **** 
  63:../../tmk_core/common/command.c **** 
  64:../../tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer);
  65:../../tmk_core/common/command.c **** 
  66:../../tmk_core/common/command.c **** 
  67:../../tmk_core/common/command.c **** command_state_t command_state = ONESHOT;
  68:../../tmk_core/common/command.c **** 
  69:../../tmk_core/common/command.c **** 
  70:../../tmk_core/common/command.c **** bool command_proc(uint8_t code)
  71:../../tmk_core/common/command.c **** {
  72:../../tmk_core/common/command.c ****     switch (command_state) {
  73:../../tmk_core/common/command.c ****         case ONESHOT:
  74:../../tmk_core/common/command.c ****             if (!IS_COMMAND())
  75:../../tmk_core/common/command.c ****                 return false;
  76:../../tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
  77:../../tmk_core/common/command.c ****             break;
  78:../../tmk_core/common/command.c ****         case CONSOLE:
  79:../../tmk_core/common/command.c ****             if (IS_COMMAND())
  80:../../tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
  81:../../tmk_core/common/command.c ****             else
  82:../../tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
  83:../../tmk_core/common/command.c ****             break;
  84:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  85:../../tmk_core/common/command.c ****         case MOUSEKEY:
  86:../../tmk_core/common/command.c ****             mousekey_console(code);
  87:../../tmk_core/common/command.c ****             break;
  88:../../tmk_core/common/command.c **** #endif
  89:../../tmk_core/common/command.c ****         default:
  90:../../tmk_core/common/command.c ****             command_state = ONESHOT;
  91:../../tmk_core/common/command.c ****             return false;
  92:../../tmk_core/common/command.c ****     }
  93:../../tmk_core/common/command.c ****     return true;
  94:../../tmk_core/common/command.c **** }
  95:../../tmk_core/common/command.c **** 
  96:../../tmk_core/common/command.c **** /* TODO: Refactoring is needed. */
  97:../../tmk_core/common/command.c **** /* This allows to define extra commands. return false when not processed. */
  98:../../tmk_core/common/command.c **** bool command_extra(uint8_t code) __attribute__ ((weak));
  99:../../tmk_core/common/command.c **** bool command_extra(uint8_t code)
 100:../../tmk_core/common/command.c **** {
 101:../../tmk_core/common/command.c ****     (void)code;
 102:../../tmk_core/common/command.c ****     return false;
 103:../../tmk_core/common/command.c **** }
 104:../../tmk_core/common/command.c **** 
 105:../../tmk_core/common/command.c **** bool command_console_extra(uint8_t code) __attribute__ ((weak));
 106:../../tmk_core/common/command.c **** bool command_console_extra(uint8_t code)
 107:../../tmk_core/common/command.c **** {
 108:../../tmk_core/common/command.c ****     (void)code;
 109:../../tmk_core/common/command.c ****     return false;
 110:../../tmk_core/common/command.c **** }
 111:../../tmk_core/common/command.c **** 
 112:../../tmk_core/common/command.c **** 
 113:../../tmk_core/common/command.c **** /***********************************************************
 114:../../tmk_core/common/command.c ****  * Command common
 115:../../tmk_core/common/command.c ****  ***********************************************************/
 116:../../tmk_core/common/command.c **** static void command_common_help(void)
 117:../../tmk_core/common/command.c **** {
 118:../../tmk_core/common/command.c ****     print("\n\t- Magic -\n"
 119:../../tmk_core/common/command.c ****           "d:	debug\n"
 120:../../tmk_core/common/command.c ****           "x:	debug matrix\n"
 121:../../tmk_core/common/command.c ****           "k:	debug keyboard\n"
 122:../../tmk_core/common/command.c ****           "m:	debug mouse\n"
 123:../../tmk_core/common/command.c ****           "v:	version\n"
 124:../../tmk_core/common/command.c ****           "s:	status\n"
 125:../../tmk_core/common/command.c ****           "c:	console mode\n"
 126:../../tmk_core/common/command.c ****           "0-4:	layer0-4(F10-F4)\n"
 127:../../tmk_core/common/command.c ****           "Paus:	bootloader\n"
 128:../../tmk_core/common/command.c **** 
 129:../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 130:../../tmk_core/common/command.c ****           "Caps:	Lock\n"
 131:../../tmk_core/common/command.c **** #endif
 132:../../tmk_core/common/command.c **** 
 133:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 134:../../tmk_core/common/command.c ****           "e:	eeprom\n"
 135:../../tmk_core/common/command.c **** #endif
 136:../../tmk_core/common/command.c **** 
 137:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 138:../../tmk_core/common/command.c ****           "n:	NKRO\n"
 139:../../tmk_core/common/command.c **** #endif
 140:../../tmk_core/common/command.c **** 
 141:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 142:../../tmk_core/common/command.c ****           "z:	sleep LED test\n"
 143:../../tmk_core/common/command.c **** #endif
 144:../../tmk_core/common/command.c ****     );
 145:../../tmk_core/common/command.c **** }
 146:../../tmk_core/common/command.c **** 
 147:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 148:../../tmk_core/common/command.c **** static void print_eeconfig(void)
 149:../../tmk_core/common/command.c **** {
 150:../../tmk_core/common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 151:../../tmk_core/common/command.c **** 
 152:../../tmk_core/common/command.c ****     debug_config_t dc;
 153:../../tmk_core/common/command.c ****     dc.raw = eeconfig_read_debug();
 154:../../tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 155:../../tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 156:../../tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 157:../../tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 158:../../tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 159:../../tmk_core/common/command.c **** 
 160:../../tmk_core/common/command.c ****     keymap_config_t kc;
 161:../../tmk_core/common/command.c ****     kc.raw = eeconfig_read_keymap();
 162:../../tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 163:../../tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 164:../../tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 165:../../tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 166:../../tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 167:../../tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 168:../../tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 169:../../tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 170:../../tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 171:../../tmk_core/common/command.c **** 
 172:../../tmk_core/common/command.c **** #ifdef BACKLIGHT_ENABLE
 173:../../tmk_core/common/command.c ****     backlight_config_t bc;
 174:../../tmk_core/common/command.c ****     bc.raw = eeconfig_read_backlight();
 175:../../tmk_core/common/command.c ****     print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
 176:../../tmk_core/common/command.c ****     print(".enable: "); print_dec(bc.enable); print("\n");
 177:../../tmk_core/common/command.c ****     print(".level: "); print_dec(bc.level); print("\n");
 178:../../tmk_core/common/command.c **** #endif
 179:../../tmk_core/common/command.c **** }
 180:../../tmk_core/common/command.c **** #endif
 181:../../tmk_core/common/command.c **** 
 182:../../tmk_core/common/command.c **** static bool command_common(uint8_t code)
 183:../../tmk_core/common/command.c **** {
 184:../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 185:../../tmk_core/common/command.c ****     static host_driver_t *host_driver = 0;
 186:../../tmk_core/common/command.c **** #endif
 187:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 188:../../tmk_core/common/command.c ****     static bool sleep_led_test = false;
 189:../../tmk_core/common/command.c **** #endif
 190:../../tmk_core/common/command.c ****     switch (code) {
 191:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 192:../../tmk_core/common/command.c ****         case KC_Z:
 193:../../tmk_core/common/command.c ****             // test breathing sleep LED
 194:../../tmk_core/common/command.c ****             print("Sleep LED test\n");
 195:../../tmk_core/common/command.c ****             if (sleep_led_test) {
 196:../../tmk_core/common/command.c ****                 sleep_led_disable();
 197:../../tmk_core/common/command.c ****                 led_set(host_keyboard_leds());
 198:../../tmk_core/common/command.c ****             } else {
 199:../../tmk_core/common/command.c ****                 sleep_led_enable();
 200:../../tmk_core/common/command.c ****             }
 201:../../tmk_core/common/command.c ****             sleep_led_test = !sleep_led_test;
 202:../../tmk_core/common/command.c ****             break;
 203:../../tmk_core/common/command.c **** #endif
 204:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 205:../../tmk_core/common/command.c ****         case KC_E:
 206:../../tmk_core/common/command.c ****             print("eeconfig:\n");
 207:../../tmk_core/common/command.c ****             print_eeconfig();
 208:../../tmk_core/common/command.c ****             break;
 209:../../tmk_core/common/command.c **** #endif
 210:../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 211:../../tmk_core/common/command.c ****         case KC_CAPSLOCK:
 212:../../tmk_core/common/command.c ****             if (host_get_driver()) {
 213:../../tmk_core/common/command.c ****                 host_driver = host_get_driver();
 214:../../tmk_core/common/command.c ****                 clear_keyboard();
 215:../../tmk_core/common/command.c ****                 host_set_driver(0);
 216:../../tmk_core/common/command.c ****                 print("Locked.\n");
 217:../../tmk_core/common/command.c ****             } else {
 218:../../tmk_core/common/command.c ****                 host_set_driver(host_driver);
 219:../../tmk_core/common/command.c ****                 print("Unlocked.\n");
 220:../../tmk_core/common/command.c ****             }
 221:../../tmk_core/common/command.c ****             break;
 222:../../tmk_core/common/command.c **** #endif
 223:../../tmk_core/common/command.c ****         case KC_H:
 224:../../tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 225:../../tmk_core/common/command.c ****             command_common_help();
 226:../../tmk_core/common/command.c ****             break;
 227:../../tmk_core/common/command.c ****         case KC_C:
 228:../../tmk_core/common/command.c ****             debug_matrix   = false;
 229:../../tmk_core/common/command.c ****             debug_keyboard = false;
 230:../../tmk_core/common/command.c ****             debug_mouse    = false;
 231:../../tmk_core/common/command.c ****             debug_enable   = false;
 232:../../tmk_core/common/command.c ****             command_console_help();
 233:../../tmk_core/common/command.c ****             print("C> ");
 234:../../tmk_core/common/command.c ****             command_state = CONSOLE;
 235:../../tmk_core/common/command.c ****             break;
 236:../../tmk_core/common/command.c ****         case KC_PAUSE:
 237:../../tmk_core/common/command.c ****             clear_keyboard();
 238:../../tmk_core/common/command.c ****             print("\n\nbootloader... ");
 239:../../tmk_core/common/command.c ****             wait_ms(1000);
 240:../../tmk_core/common/command.c ****             bootloader_jump(); // not return
 241:../../tmk_core/common/command.c ****             break;
 242:../../tmk_core/common/command.c ****         case KC_D:
 243:../../tmk_core/common/command.c ****             if (debug_enable) {
 244:../../tmk_core/common/command.c ****                 print("\ndebug: off\n");
 245:../../tmk_core/common/command.c ****                 debug_matrix   = false;
 246:../../tmk_core/common/command.c ****                 debug_keyboard = false;
 247:../../tmk_core/common/command.c ****                 debug_mouse    = false;
 248:../../tmk_core/common/command.c ****                 debug_enable   = false;
 249:../../tmk_core/common/command.c ****             } else {
 250:../../tmk_core/common/command.c ****                 print("\ndebug: on\n");
 251:../../tmk_core/common/command.c ****                 debug_enable   = true;
 252:../../tmk_core/common/command.c ****             }
 253:../../tmk_core/common/command.c ****             break;
 254:../../tmk_core/common/command.c ****         case KC_X: // debug matrix toggle
 255:../../tmk_core/common/command.c ****             debug_matrix = !debug_matrix;
 256:../../tmk_core/common/command.c ****             if (debug_matrix) {
 257:../../tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 258:../../tmk_core/common/command.c ****                 debug_enable = true;
 259:../../tmk_core/common/command.c ****             } else {
 260:../../tmk_core/common/command.c ****                 print("\nmatrix: off\n");
 261:../../tmk_core/common/command.c ****             }
 262:../../tmk_core/common/command.c ****             break;
 263:../../tmk_core/common/command.c ****         case KC_K: // debug keyboard toggle
 264:../../tmk_core/common/command.c ****             debug_keyboard = !debug_keyboard;
 265:../../tmk_core/common/command.c ****             if (debug_keyboard) {
 266:../../tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 267:../../tmk_core/common/command.c ****                 debug_enable = true;
 268:../../tmk_core/common/command.c ****             } else {
 269:../../tmk_core/common/command.c ****                 print("\nkeyboard: off\n");
 270:../../tmk_core/common/command.c ****             }
 271:../../tmk_core/common/command.c ****             break;
 272:../../tmk_core/common/command.c ****         case KC_M: // debug mouse toggle
 273:../../tmk_core/common/command.c ****             debug_mouse = !debug_mouse;
 274:../../tmk_core/common/command.c ****             if (debug_mouse) {
 275:../../tmk_core/common/command.c ****                 print("\nmouse: on\n");
 276:../../tmk_core/common/command.c ****                 debug_enable = true;
 277:../../tmk_core/common/command.c ****             } else {
 278:../../tmk_core/common/command.c ****                 print("\nmouse: off\n");
 279:../../tmk_core/common/command.c ****             }
 280:../../tmk_core/common/command.c ****             break;
 281:../../tmk_core/common/command.c ****         case KC_V: // print version & information
 282:../../tmk_core/common/command.c ****             print("\n\t- Version -\n");
 283:../../tmk_core/common/command.c ****             print("DESC: " STR(DESCRIPTION) "\n");
 284:../../tmk_core/common/command.c ****             print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 285:../../tmk_core/common/command.c ****                   "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 286:../../tmk_core/common/command.c ****                   "VER: " STR(DEVICE_VER) "\n");
 287:../../tmk_core/common/command.c ****             print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
 288:../../tmk_core/common/command.c ****             /* build options */
 289:../../tmk_core/common/command.c ****             print("OPTIONS:"
 290:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 291:../../tmk_core/common/command.c ****             " PJRC"
 292:../../tmk_core/common/command.c **** #endif
 293:../../tmk_core/common/command.c **** #ifdef PROTOCOL_LUFA
 294:../../tmk_core/common/command.c ****             " LUFA"
 295:../../tmk_core/common/command.c **** #endif
 296:../../tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
 297:../../tmk_core/common/command.c ****             " VUSB"
 298:../../tmk_core/common/command.c **** #endif
 299:../../tmk_core/common/command.c **** #ifdef PROTOCOL_CHIBIOS
 300:../../tmk_core/common/command.c ****             " CHIBIOS"
 301:../../tmk_core/common/command.c **** #endif
 302:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 303:../../tmk_core/common/command.c ****             " BOOTMAGIC"
 304:../../tmk_core/common/command.c **** #endif
 305:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 306:../../tmk_core/common/command.c ****             " MOUSEKEY"
 307:../../tmk_core/common/command.c **** #endif
 308:../../tmk_core/common/command.c **** #ifdef EXTRAKEY_ENABLE
 309:../../tmk_core/common/command.c ****             " EXTRAKEY"
 310:../../tmk_core/common/command.c **** #endif
 311:../../tmk_core/common/command.c **** #ifdef CONSOLE_ENABLE
 312:../../tmk_core/common/command.c ****             " CONSOLE"
 313:../../tmk_core/common/command.c **** #endif
 314:../../tmk_core/common/command.c **** #ifdef COMMAND_ENABLE
 315:../../tmk_core/common/command.c ****             " COMMAND"
 316:../../tmk_core/common/command.c **** #endif
 317:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 318:../../tmk_core/common/command.c ****             " NKRO"
 319:../../tmk_core/common/command.c **** #endif
 320:../../tmk_core/common/command.c **** #ifdef KEYMAP_SECTION_ENABLE
 321:../../tmk_core/common/command.c ****             " KEYMAP_SECTION"
 322:../../tmk_core/common/command.c **** #endif
 323:../../tmk_core/common/command.c ****             " " STR(BOOTLOADER_SIZE) "\n");
 324:../../tmk_core/common/command.c **** 
 325:../../tmk_core/common/command.c ****             print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 326:../../tmk_core/common/command.c **** #if defined(__AVR__)
 327:../../tmk_core/common/command.c ****                   " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 328:../../tmk_core/common/command.c ****                   " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
 329:../../tmk_core/common/command.c **** #elif defined(__arm__)
 330:../../tmk_core/common/command.c ****             // TODO
 331:../../tmk_core/common/command.c ****             );
 332:../../tmk_core/common/command.c **** #endif
 333:../../tmk_core/common/command.c ****             break;
 334:../../tmk_core/common/command.c ****         case KC_S:
 335:../../tmk_core/common/command.c ****             print("\n\t- Status -\n");
 336:../../tmk_core/common/command.c ****             print_val_hex8(host_keyboard_leds());
 337:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_protocol);
 338:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_idle);
 339:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 340:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_nkro);
 341:../../tmk_core/common/command.c **** #endif
 342:../../tmk_core/common/command.c ****             print_val_hex32(timer_read32());
 343:../../tmk_core/common/command.c **** 
 344:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 345:../../tmk_core/common/command.c ****             print_val_hex8(UDCON);
 346:../../tmk_core/common/command.c ****             print_val_hex8(UDIEN);
 347:../../tmk_core/common/command.c ****             print_val_hex8(UDINT);
 348:../../tmk_core/common/command.c ****             print_val_hex8(usb_keyboard_leds);
 349:../../tmk_core/common/command.c ****             print_val_hex8(usb_keyboard_idle_count);
 350:../../tmk_core/common/command.c **** #endif
 351:../../tmk_core/common/command.c **** 
 352:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 353:../../tmk_core/common/command.c **** #   if USB_COUNT_SOF
 354:../../tmk_core/common/command.c ****             print_val_hex8(usbSofCount);
 355:../../tmk_core/common/command.c **** #   endif
 356:../../tmk_core/common/command.c **** #endif
 357:../../tmk_core/common/command.c ****             break;
 358:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 359:../../tmk_core/common/command.c ****         case KC_N:
 360:../../tmk_core/common/command.c ****             clear_keyboard(); //Prevents stuck keys.
 361:../../tmk_core/common/command.c ****             keyboard_nkro = !keyboard_nkro;
 362:../../tmk_core/common/command.c ****             if (keyboard_nkro) {
 363:../../tmk_core/common/command.c ****                 print("NKRO: on\n");
 364:../../tmk_core/common/command.c ****             } else {
 365:../../tmk_core/common/command.c ****                 print("NKRO: off\n");
 366:../../tmk_core/common/command.c ****             }
 367:../../tmk_core/common/command.c ****             break;
 368:../../tmk_core/common/command.c **** #endif
 369:../../tmk_core/common/command.c ****         case KC_ESC:
 370:../../tmk_core/common/command.c ****         case KC_GRV:
 371:../../tmk_core/common/command.c ****         case KC_0:
 372:../../tmk_core/common/command.c ****         case KC_F10:
 373:../../tmk_core/common/command.c ****             switch_default_layer(0);
 374:../../tmk_core/common/command.c ****             break;
 375:../../tmk_core/common/command.c ****         case KC_1 ... KC_9:
 376:../../tmk_core/common/command.c ****             switch_default_layer((code - KC_1) + 1);
 377:../../tmk_core/common/command.c ****             break;
 378:../../tmk_core/common/command.c ****         case KC_F1 ... KC_F9:
 379:../../tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 380:../../tmk_core/common/command.c ****             break;
 381:../../tmk_core/common/command.c ****         default:
 382:../../tmk_core/common/command.c ****             print("?");
 383:../../tmk_core/common/command.c ****             return false;
 384:../../tmk_core/common/command.c ****     }
 385:../../tmk_core/common/command.c ****     return true;
 386:../../tmk_core/common/command.c **** }
 387:../../tmk_core/common/command.c **** 
 388:../../tmk_core/common/command.c **** 
 389:../../tmk_core/common/command.c **** /***********************************************************
 390:../../tmk_core/common/command.c ****  * Command console
 391:../../tmk_core/common/command.c ****  ***********************************************************/
 392:../../tmk_core/common/command.c **** static void command_console_help(void)
 393:../../tmk_core/common/command.c **** {
 394:../../tmk_core/common/command.c ****     print("\n\t- Console -\n"
 395:../../tmk_core/common/command.c ****           "ESC/q:	quit\n"
 396:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 397:../../tmk_core/common/command.c ****           "m:	mousekey\n"
 398:../../tmk_core/common/command.c **** #endif
 399:../../tmk_core/common/command.c ****     );
 400:../../tmk_core/common/command.c **** }
 401:../../tmk_core/common/command.c **** 
 402:../../tmk_core/common/command.c **** static bool command_console(uint8_t code)
 403:../../tmk_core/common/command.c **** {
 404:../../tmk_core/common/command.c ****     switch (code) {
 405:../../tmk_core/common/command.c ****         case KC_H:
 406:../../tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 407:../../tmk_core/common/command.c ****             command_console_help();
 408:../../tmk_core/common/command.c ****             break;
 409:../../tmk_core/common/command.c ****         case KC_Q:
 410:../../tmk_core/common/command.c ****         case KC_ESC:
 411:../../tmk_core/common/command.c ****             command_state = ONESHOT;
 412:../../tmk_core/common/command.c ****             return false;
 413:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 414:../../tmk_core/common/command.c ****         case KC_M:
 415:../../tmk_core/common/command.c ****             mousekey_console_help();
 416:../../tmk_core/common/command.c ****             print("M> ");
 417:../../tmk_core/common/command.c ****             command_state = MOUSEKEY;
 418:../../tmk_core/common/command.c ****             return true;
 419:../../tmk_core/common/command.c **** #endif
 420:../../tmk_core/common/command.c ****         default:
 421:../../tmk_core/common/command.c ****             print("?");
 422:../../tmk_core/common/command.c ****             return false;
 423:../../tmk_core/common/command.c ****     }
 424:../../tmk_core/common/command.c ****     print("C> ");
 425:../../tmk_core/common/command.c ****     return true;
 426:../../tmk_core/common/command.c **** }
 427:../../tmk_core/common/command.c **** 
 428:../../tmk_core/common/command.c **** 
 429:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 430:../../tmk_core/common/command.c **** /***********************************************************
 431:../../tmk_core/common/command.c ****  * Mousekey console
 432:../../tmk_core/common/command.c ****  ***********************************************************/
 433:../../tmk_core/common/command.c **** static uint8_t mousekey_param = 0;
 434:../../tmk_core/common/command.c **** 
 435:../../tmk_core/common/command.c **** static void mousekey_param_print(void)
 436:../../tmk_core/common/command.c **** {
 437:../../tmk_core/common/command.c ****     print("\n\t- Values -\n");
 438:../../tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 439:../../tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 440:../../tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 441:../../tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 442:../../tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 443:../../tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 444:../../tmk_core/common/command.c **** }
 445:../../tmk_core/common/command.c **** 
 446:../../tmk_core/common/command.c **** //#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
 447:../../tmk_core/common/command.c **** #define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
 448:../../tmk_core/common/command.c **** static void mousekey_param_inc(uint8_t param, uint8_t inc)
 449:../../tmk_core/common/command.c **** {
 450:../../tmk_core/common/command.c ****     switch (param) {
 451:../../tmk_core/common/command.c ****         case 1:
 452:../../tmk_core/common/command.c ****             if (mk_delay + inc < UINT8_MAX)
 453:../../tmk_core/common/command.c ****                 mk_delay += inc;
 454:../../tmk_core/common/command.c ****             else
 455:../../tmk_core/common/command.c ****                 mk_delay = UINT8_MAX;
 456:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 457:../../tmk_core/common/command.c ****             break;
 458:../../tmk_core/common/command.c ****         case 2:
 459:../../tmk_core/common/command.c ****             if (mk_interval + inc < UINT8_MAX)
 460:../../tmk_core/common/command.c ****                 mk_interval += inc;
 461:../../tmk_core/common/command.c ****             else
 462:../../tmk_core/common/command.c ****                 mk_interval = UINT8_MAX;
 463:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 464:../../tmk_core/common/command.c ****             break;
 465:../../tmk_core/common/command.c ****         case 3:
 466:../../tmk_core/common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
 467:../../tmk_core/common/command.c ****                 mk_max_speed += inc;
 468:../../tmk_core/common/command.c ****             else
 469:../../tmk_core/common/command.c ****                 mk_max_speed = UINT8_MAX;
 470:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 471:../../tmk_core/common/command.c ****             break;
 472:../../tmk_core/common/command.c ****         case 4:
 473:../../tmk_core/common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 474:../../tmk_core/common/command.c ****                 mk_time_to_max += inc;
 475:../../tmk_core/common/command.c ****             else
 476:../../tmk_core/common/command.c ****                 mk_time_to_max = UINT8_MAX;
 477:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 478:../../tmk_core/common/command.c ****             break;
 479:../../tmk_core/common/command.c ****         case 5:
 480:../../tmk_core/common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 481:../../tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 482:../../tmk_core/common/command.c ****             else
 483:../../tmk_core/common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 484:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 485:../../tmk_core/common/command.c ****             break;
 486:../../tmk_core/common/command.c ****         case 6:
 487:../../tmk_core/common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 488:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 489:../../tmk_core/common/command.c ****             else
 490:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 491:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 492:../../tmk_core/common/command.c ****             break;
 493:../../tmk_core/common/command.c ****     }
 494:../../tmk_core/common/command.c **** }
 495:../../tmk_core/common/command.c **** 
 496:../../tmk_core/common/command.c **** static void mousekey_param_dec(uint8_t param, uint8_t dec)
 497:../../tmk_core/common/command.c **** {
 498:../../tmk_core/common/command.c ****     switch (param) {
 499:../../tmk_core/common/command.c ****         case 1:
 500:../../tmk_core/common/command.c ****             if (mk_delay > dec)
 501:../../tmk_core/common/command.c ****                 mk_delay -= dec;
 502:../../tmk_core/common/command.c ****             else
 503:../../tmk_core/common/command.c ****                 mk_delay = 0;
 504:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 505:../../tmk_core/common/command.c ****             break;
 506:../../tmk_core/common/command.c ****         case 2:
 507:../../tmk_core/common/command.c ****             if (mk_interval > dec)
 508:../../tmk_core/common/command.c ****                 mk_interval -= dec;
 509:../../tmk_core/common/command.c ****             else
 510:../../tmk_core/common/command.c ****                 mk_interval = 0;
 511:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 512:../../tmk_core/common/command.c ****             break;
 513:../../tmk_core/common/command.c ****         case 3:
 514:../../tmk_core/common/command.c ****             if (mk_max_speed > dec)
 515:../../tmk_core/common/command.c ****                 mk_max_speed -= dec;
 516:../../tmk_core/common/command.c ****             else
 517:../../tmk_core/common/command.c ****                 mk_max_speed = 0;
 518:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 519:../../tmk_core/common/command.c ****             break;
 520:../../tmk_core/common/command.c ****         case 4:
 521:../../tmk_core/common/command.c ****             if (mk_time_to_max > dec)
 522:../../tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 523:../../tmk_core/common/command.c ****             else
 524:../../tmk_core/common/command.c ****                 mk_time_to_max = 0;
 525:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 526:../../tmk_core/common/command.c ****             break;
 527:../../tmk_core/common/command.c ****         case 5:
 528:../../tmk_core/common/command.c ****             if (mk_wheel_max_speed > dec)
 529:../../tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 530:../../tmk_core/common/command.c ****             else
 531:../../tmk_core/common/command.c ****                 mk_wheel_max_speed = 0;
 532:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 533:../../tmk_core/common/command.c ****             break;
 534:../../tmk_core/common/command.c ****         case 6:
 535:../../tmk_core/common/command.c ****             if (mk_wheel_time_to_max > dec)
 536:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 537:../../tmk_core/common/command.c ****             else
 538:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max = 0;
 539:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 540:../../tmk_core/common/command.c ****             break;
 541:../../tmk_core/common/command.c ****     }
 542:../../tmk_core/common/command.c **** }
 543:../../tmk_core/common/command.c **** 
 544:../../tmk_core/common/command.c **** static void mousekey_console_help(void)
 545:../../tmk_core/common/command.c **** {
  15               		.loc 1 545 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 546:../../tmk_core/common/command.c ****     print("\n\t- Mousekey -\n"
  21               		.loc 1 546 0
  22 0000 80E0      		ldi r24,lo8(__c.5347)
  23 0002 90E0      		ldi r25,hi8(__c.5347)
  24 0004 0E94 0000 		call xputs
  25               	.LVL0:
 547:../../tmk_core/common/command.c ****           "ESC/q:	quit\n"
 548:../../tmk_core/common/command.c ****           "1:	delay(*10ms)\n"
 549:../../tmk_core/common/command.c ****           "2:	interval(ms)\n"
 550:../../tmk_core/common/command.c ****           "3:	max_speed\n"
 551:../../tmk_core/common/command.c ****           "4:	time_to_max\n"
 552:../../tmk_core/common/command.c ****           "5:	wheel_max_speed\n"
 553:../../tmk_core/common/command.c ****           "6:	wheel_time_to_max\n"
 554:../../tmk_core/common/command.c ****           "\n"
 555:../../tmk_core/common/command.c ****           "p:	print values\n"
 556:../../tmk_core/common/command.c ****           "d:	set defaults\n"
 557:../../tmk_core/common/command.c ****           "up:	+1\n"
 558:../../tmk_core/common/command.c ****           "down:	-1\n"
 559:../../tmk_core/common/command.c ****           "pgup:	+10\n"
 560:../../tmk_core/common/command.c ****           "pgdown:	-10\n"
 561:../../tmk_core/common/command.c ****           "\n"
 562:../../tmk_core/common/command.c ****           "speed = delta * max_speed * (repeat / time_to_max)\n");
 563:../../tmk_core/common/command.c ****     xprintf("where delta: cursor=%d, wheel=%d\n" 
  26               		.loc 1 563 0
  27 0008 1F92      		push __zero_reg__
  28               	.LCFI0:
  29               		.cfi_def_cfa_offset 3
  30 000a 81E0      		ldi r24,lo8(1)
  31 000c 8F93      		push r24
  32               	.LCFI1:
  33               		.cfi_def_cfa_offset 4
  34 000e 1F92      		push __zero_reg__
  35               	.LCFI2:
  36               		.cfi_def_cfa_offset 5
  37 0010 85E0      		ldi r24,lo8(5)
  38 0012 8F93      		push r24
  39               	.LCFI3:
  40               		.cfi_def_cfa_offset 6
  41 0014 80E0      		ldi r24,lo8(__c.5349)
  42 0016 90E0      		ldi r25,hi8(__c.5349)
  43 0018 9F93      		push r25
  44               	.LCFI4:
  45               		.cfi_def_cfa_offset 7
  46 001a 8F93      		push r24
  47               	.LCFI5:
  48               		.cfi_def_cfa_offset 8
  49 001c 0E94 0000 		call __xprintf
  50               	.LVL1:
 564:../../tmk_core/common/command.c ****             "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_D
 565:../../tmk_core/common/command.c **** }
  51               		.loc 1 565 0
  52 0020 0F90      		pop __tmp_reg__
  53 0022 0F90      		pop __tmp_reg__
  54 0024 0F90      		pop __tmp_reg__
  55 0026 0F90      		pop __tmp_reg__
  56 0028 0F90      		pop __tmp_reg__
  57 002a 0F90      		pop __tmp_reg__
  58               	.LCFI6:
  59               		.cfi_def_cfa_offset 2
  60 002c 0895      		ret
  61               		.cfi_endproc
  62               	.LFE114:
  64               		.section	.text.mousekey_param_inc,"ax",@progbits
  66               	mousekey_param_inc:
  67               	.LFB112:
 449:../../tmk_core/common/command.c ****     switch (param) {
  68               		.loc 1 449 0
  69               		.cfi_startproc
  70               	.LVL2:
  71               	/* prologue: function */
  72               	/* frame size = 0 */
  73               	/* stack size = 0 */
  74               	.L__stack_usage = 0
 450:../../tmk_core/common/command.c ****         case 1:
  75               		.loc 1 450 0
  76 0000 8330      		cpi r24,lo8(3)
  77 0002 01F0      		breq .L4
  78 0004 00F4      		brsh .L5
  79 0006 8130      		cpi r24,lo8(1)
  80 0008 01F0      		breq .L6
  81 000a 8230      		cpi r24,lo8(2)
  82 000c 01F0      		breq .L7
  83 000e 0895      		ret
  84               	.L5:
  85 0010 8530      		cpi r24,lo8(5)
  86 0012 01F4      		brne .+2
  87 0014 00C0      		rjmp .L8
  88 0016 00F4      		brsh .+2
  89 0018 00C0      		rjmp .L9
  90 001a 8630      		cpi r24,lo8(6)
  91 001c 01F4      		brne .+2
  92 001e 00C0      		rjmp .L10
  93 0020 0895      		ret
  94               	.L6:
 452:../../tmk_core/common/command.c ****                 mk_delay += inc;
  95               		.loc 1 452 0
  96 0022 8091 0000 		lds r24,mk_delay
  97               	.LVL3:
  98 0026 262F      		mov r18,r22
  99 0028 30E0      		ldi r19,0
 100 002a 280F      		add r18,r24
 101 002c 311D      		adc r19,__zero_reg__
 102 002e 2F3F      		cpi r18,-1
 103 0030 3105      		cpc r19,__zero_reg__
 104 0032 04F4      		brge .L11
 453:../../tmk_core/common/command.c ****             else
 105               		.loc 1 453 0
 106 0034 680F      		add r22,r24
 107               	.LVL4:
 108 0036 6093 0000 		sts mk_delay,r22
 109 003a 00C0      		rjmp .L12
 110               	.LVL5:
 111               	.L11:
 455:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 112               		.loc 1 455 0
 113 003c 8FEF      		ldi r24,lo8(-1)
 114 003e 8093 0000 		sts mk_delay,r24
 115               	.LVL6:
 116               	.L12:
 456:../../tmk_core/common/command.c ****             break;
 117               		.loc 1 456 0
 118 0042 8091 0000 		lds r24,mk_delay
 119 0046 1F92      		push __zero_reg__
 120               	.LCFI7:
 121               		.cfi_remember_state
 122               		.cfi_def_cfa_offset 3
 123 0048 8F93      		push r24
 124               	.LCFI8:
 125               		.cfi_def_cfa_offset 4
 126 004a 80E0      		ldi r24,lo8(__c.5303)
 127 004c 90E0      		ldi r25,hi8(__c.5303)
 128 004e 00C0      		rjmp .L23
 129               	.LVL7:
 130               	.L7:
 131               	.LCFI9:
 132               		.cfi_restore_state
 459:../../tmk_core/common/command.c ****                 mk_interval += inc;
 133               		.loc 1 459 0
 134 0050 8091 0000 		lds r24,mk_interval
 135               	.LVL8:
 136 0054 262F      		mov r18,r22
 137 0056 30E0      		ldi r19,0
 138 0058 280F      		add r18,r24
 139 005a 311D      		adc r19,__zero_reg__
 140 005c 2F3F      		cpi r18,-1
 141 005e 3105      		cpc r19,__zero_reg__
 142 0060 04F4      		brge .L13
 460:../../tmk_core/common/command.c ****             else
 143               		.loc 1 460 0
 144 0062 680F      		add r22,r24
 145               	.LVL9:
 146 0064 6093 0000 		sts mk_interval,r22
 147 0068 00C0      		rjmp .L14
 148               	.LVL10:
 149               	.L13:
 462:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 150               		.loc 1 462 0
 151 006a 8FEF      		ldi r24,lo8(-1)
 152 006c 8093 0000 		sts mk_interval,r24
 153               	.LVL11:
 154               	.L14:
 463:../../tmk_core/common/command.c ****             break;
 155               		.loc 1 463 0
 156 0070 8091 0000 		lds r24,mk_interval
 157 0074 1F92      		push __zero_reg__
 158               	.LCFI10:
 159               		.cfi_remember_state
 160               		.cfi_def_cfa_offset 3
 161 0076 8F93      		push r24
 162               	.LCFI11:
 163               		.cfi_def_cfa_offset 4
 164 0078 80E0      		ldi r24,lo8(__c.5307)
 165 007a 90E0      		ldi r25,hi8(__c.5307)
 166 007c 00C0      		rjmp .L23
 167               	.LVL12:
 168               	.L4:
 169               	.LCFI12:
 170               		.cfi_restore_state
 466:../../tmk_core/common/command.c ****                 mk_max_speed += inc;
 171               		.loc 1 466 0
 172 007e 8091 0000 		lds r24,mk_max_speed
 173               	.LVL13:
 174 0082 262F      		mov r18,r22
 175 0084 30E0      		ldi r19,0
 176 0086 280F      		add r18,r24
 177 0088 311D      		adc r19,__zero_reg__
 178 008a 2F3F      		cpi r18,-1
 179 008c 3105      		cpc r19,__zero_reg__
 180 008e 04F4      		brge .L15
 467:../../tmk_core/common/command.c ****             else
 181               		.loc 1 467 0
 182 0090 680F      		add r22,r24
 183               	.LVL14:
 184 0092 6093 0000 		sts mk_max_speed,r22
 185 0096 00C0      		rjmp .L16
 186               	.LVL15:
 187               	.L15:
 469:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 188               		.loc 1 469 0
 189 0098 8FEF      		ldi r24,lo8(-1)
 190 009a 8093 0000 		sts mk_max_speed,r24
 191               	.LVL16:
 192               	.L16:
 470:../../tmk_core/common/command.c ****             break;
 193               		.loc 1 470 0
 194 009e 8091 0000 		lds r24,mk_max_speed
 195 00a2 1F92      		push __zero_reg__
 196               	.LCFI13:
 197               		.cfi_remember_state
 198               		.cfi_def_cfa_offset 3
 199 00a4 8F93      		push r24
 200               	.LCFI14:
 201               		.cfi_def_cfa_offset 4
 202 00a6 80E0      		ldi r24,lo8(__c.5310)
 203 00a8 90E0      		ldi r25,hi8(__c.5310)
 204 00aa 00C0      		rjmp .L23
 205               	.LVL17:
 206               	.L9:
 207               	.LCFI15:
 208               		.cfi_restore_state
 473:../../tmk_core/common/command.c ****                 mk_time_to_max += inc;
 209               		.loc 1 473 0
 210 00ac 8091 0000 		lds r24,mk_time_to_max
 211               	.LVL18:
 212 00b0 262F      		mov r18,r22
 213 00b2 30E0      		ldi r19,0
 214 00b4 280F      		add r18,r24
 215 00b6 311D      		adc r19,__zero_reg__
 216 00b8 2F3F      		cpi r18,-1
 217 00ba 3105      		cpc r19,__zero_reg__
 218 00bc 04F4      		brge .L17
 474:../../tmk_core/common/command.c ****             else
 219               		.loc 1 474 0
 220 00be 680F      		add r22,r24
 221               	.LVL19:
 222 00c0 6093 0000 		sts mk_time_to_max,r22
 223 00c4 00C0      		rjmp .L18
 224               	.LVL20:
 225               	.L17:
 476:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 226               		.loc 1 476 0
 227 00c6 8FEF      		ldi r24,lo8(-1)
 228 00c8 8093 0000 		sts mk_time_to_max,r24
 229               	.LVL21:
 230               	.L18:
 477:../../tmk_core/common/command.c ****             break;
 231               		.loc 1 477 0
 232 00cc 8091 0000 		lds r24,mk_time_to_max
 233 00d0 1F92      		push __zero_reg__
 234               	.LCFI16:
 235               		.cfi_remember_state
 236               		.cfi_def_cfa_offset 3
 237 00d2 8F93      		push r24
 238               	.LCFI17:
 239               		.cfi_def_cfa_offset 4
 240 00d4 80E0      		ldi r24,lo8(__c.5313)
 241 00d6 90E0      		ldi r25,hi8(__c.5313)
 242 00d8 00C0      		rjmp .L23
 243               	.LVL22:
 244               	.L8:
 245               	.LCFI18:
 246               		.cfi_restore_state
 480:../../tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 247               		.loc 1 480 0
 248 00da 8091 0000 		lds r24,mk_wheel_max_speed
 249               	.LVL23:
 250 00de 262F      		mov r18,r22
 251 00e0 30E0      		ldi r19,0
 252 00e2 280F      		add r18,r24
 253 00e4 311D      		adc r19,__zero_reg__
 254 00e6 2F3F      		cpi r18,-1
 255 00e8 3105      		cpc r19,__zero_reg__
 256 00ea 04F4      		brge .L19
 481:../../tmk_core/common/command.c ****             else
 257               		.loc 1 481 0
 258 00ec 680F      		add r22,r24
 259               	.LVL24:
 260 00ee 6093 0000 		sts mk_wheel_max_speed,r22
 261 00f2 00C0      		rjmp .L20
 262               	.LVL25:
 263               	.L19:
 483:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 264               		.loc 1 483 0
 265 00f4 8FEF      		ldi r24,lo8(-1)
 266 00f6 8093 0000 		sts mk_wheel_max_speed,r24
 267               	.LVL26:
 268               	.L20:
 484:../../tmk_core/common/command.c ****             break;
 269               		.loc 1 484 0
 270 00fa 8091 0000 		lds r24,mk_wheel_max_speed
 271 00fe 1F92      		push __zero_reg__
 272               	.LCFI19:
 273               		.cfi_remember_state
 274               		.cfi_def_cfa_offset 3
 275 0100 8F93      		push r24
 276               	.LCFI20:
 277               		.cfi_def_cfa_offset 4
 278 0102 80E0      		ldi r24,lo8(__c.5316)
 279 0104 90E0      		ldi r25,hi8(__c.5316)
 280 0106 00C0      		rjmp .L23
 281               	.LVL27:
 282               	.L10:
 283               	.LCFI21:
 284               		.cfi_restore_state
 487:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 285               		.loc 1 487 0
 286 0108 8091 0000 		lds r24,mk_wheel_time_to_max
 287               	.LVL28:
 288 010c 262F      		mov r18,r22
 289 010e 30E0      		ldi r19,0
 290 0110 280F      		add r18,r24
 291 0112 311D      		adc r19,__zero_reg__
 292 0114 2F3F      		cpi r18,-1
 293 0116 3105      		cpc r19,__zero_reg__
 294 0118 04F4      		brge .L21
 488:../../tmk_core/common/command.c ****             else
 295               		.loc 1 488 0
 296 011a 680F      		add r22,r24
 297               	.LVL29:
 298 011c 6093 0000 		sts mk_wheel_time_to_max,r22
 299 0120 00C0      		rjmp .L22
 300               	.LVL30:
 301               	.L21:
 490:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 302               		.loc 1 490 0
 303 0122 8FEF      		ldi r24,lo8(-1)
 304 0124 8093 0000 		sts mk_wheel_time_to_max,r24
 305               	.LVL31:
 306               	.L22:
 491:../../tmk_core/common/command.c ****             break;
 307               		.loc 1 491 0
 308 0128 8091 0000 		lds r24,mk_wheel_time_to_max
 309 012c 1F92      		push __zero_reg__
 310               	.LCFI22:
 311               		.cfi_def_cfa_offset 3
 312 012e 8F93      		push r24
 313               	.LCFI23:
 314               		.cfi_def_cfa_offset 4
 315 0130 80E0      		ldi r24,lo8(__c.5319)
 316 0132 90E0      		ldi r25,hi8(__c.5319)
 317               	.L23:
 318 0134 9F93      		push r25
 319               	.LCFI24:
 320               		.cfi_def_cfa_offset 5
 321 0136 8F93      		push r24
 322               	.LCFI25:
 323               		.cfi_def_cfa_offset 6
 324 0138 0E94 0000 		call __xprintf
 325               	.LVL32:
 492:../../tmk_core/common/command.c ****     }
 326               		.loc 1 492 0
 327 013c 0F90      		pop __tmp_reg__
 328 013e 0F90      		pop __tmp_reg__
 329 0140 0F90      		pop __tmp_reg__
 330 0142 0F90      		pop __tmp_reg__
 331               	.LCFI26:
 332               		.cfi_def_cfa_offset 2
 333 0144 0895      		ret
 334               		.cfi_endproc
 335               	.LFE112:
 337               		.section	.text.mousekey_param_dec,"ax",@progbits
 339               	mousekey_param_dec:
 340               	.LFB113:
 497:../../tmk_core/common/command.c ****     switch (param) {
 341               		.loc 1 497 0
 342               		.cfi_startproc
 343               	.LVL33:
 344               	/* prologue: function */
 345               	/* frame size = 0 */
 346               	/* stack size = 0 */
 347               	.L__stack_usage = 0
 498:../../tmk_core/common/command.c ****         case 1:
 348               		.loc 1 498 0
 349 0000 8330      		cpi r24,lo8(3)
 350 0002 01F0      		breq .L27
 351 0004 00F4      		brsh .L28
 352 0006 8130      		cpi r24,lo8(1)
 353 0008 01F0      		breq .L29
 354 000a 8230      		cpi r24,lo8(2)
 355 000c 01F0      		breq .L30
 356 000e 0895      		ret
 357               	.L28:
 358 0010 8530      		cpi r24,lo8(5)
 359 0012 01F4      		brne .+2
 360 0014 00C0      		rjmp .L31
 361 0016 00F0      		brlo .L32
 362 0018 8630      		cpi r24,lo8(6)
 363 001a 01F4      		brne .+2
 364 001c 00C0      		rjmp .L33
 365 001e 0895      		ret
 366               	.L29:
 500:../../tmk_core/common/command.c ****                 mk_delay -= dec;
 367               		.loc 1 500 0
 368 0020 8091 0000 		lds r24,mk_delay
 369               	.LVL34:
 370 0024 6817      		cp r22,r24
 371 0026 00F4      		brsh .L34
 501:../../tmk_core/common/command.c ****             else
 372               		.loc 1 501 0
 373 0028 861B      		sub r24,r22
 374 002a 8093 0000 		sts mk_delay,r24
 375 002e 00C0      		rjmp .L35
 376               	.L34:
 503:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 377               		.loc 1 503 0
 378 0030 1092 0000 		sts mk_delay,__zero_reg__
 379               	.L35:
 504:../../tmk_core/common/command.c ****             break;
 380               		.loc 1 504 0
 381 0034 8091 0000 		lds r24,mk_delay
 382 0038 1F92      		push __zero_reg__
 383               	.LCFI27:
 384               		.cfi_remember_state
 385               		.cfi_def_cfa_offset 3
 386 003a 8F93      		push r24
 387               	.LCFI28:
 388               		.cfi_def_cfa_offset 4
 389 003c 80E0      		ldi r24,lo8(__c.5326)
 390 003e 90E0      		ldi r25,hi8(__c.5326)
 391 0040 00C0      		rjmp .L46
 392               	.LVL35:
 393               	.L30:
 394               	.LCFI29:
 395               		.cfi_restore_state
 507:../../tmk_core/common/command.c ****                 mk_interval -= dec;
 396               		.loc 1 507 0
 397 0042 8091 0000 		lds r24,mk_interval
 398               	.LVL36:
 399 0046 6817      		cp r22,r24
 400 0048 00F4      		brsh .L36
 508:../../tmk_core/common/command.c ****             else
 401               		.loc 1 508 0
 402 004a 861B      		sub r24,r22
 403 004c 8093 0000 		sts mk_interval,r24
 404 0050 00C0      		rjmp .L37
 405               	.L36:
 510:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 406               		.loc 1 510 0
 407 0052 1092 0000 		sts mk_interval,__zero_reg__
 408               	.L37:
 511:../../tmk_core/common/command.c ****             break;
 409               		.loc 1 511 0
 410 0056 8091 0000 		lds r24,mk_interval
 411 005a 1F92      		push __zero_reg__
 412               	.LCFI30:
 413               		.cfi_remember_state
 414               		.cfi_def_cfa_offset 3
 415 005c 8F93      		push r24
 416               	.LCFI31:
 417               		.cfi_def_cfa_offset 4
 418 005e 80E0      		ldi r24,lo8(__c.5330)
 419 0060 90E0      		ldi r25,hi8(__c.5330)
 420 0062 00C0      		rjmp .L46
 421               	.LVL37:
 422               	.L27:
 423               	.LCFI32:
 424               		.cfi_restore_state
 514:../../tmk_core/common/command.c ****                 mk_max_speed -= dec;
 425               		.loc 1 514 0
 426 0064 8091 0000 		lds r24,mk_max_speed
 427               	.LVL38:
 428 0068 6817      		cp r22,r24
 429 006a 00F4      		brsh .L38
 515:../../tmk_core/common/command.c ****             else
 430               		.loc 1 515 0
 431 006c 861B      		sub r24,r22
 432 006e 8093 0000 		sts mk_max_speed,r24
 433 0072 00C0      		rjmp .L39
 434               	.L38:
 517:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 435               		.loc 1 517 0
 436 0074 1092 0000 		sts mk_max_speed,__zero_reg__
 437               	.L39:
 518:../../tmk_core/common/command.c ****             break;
 438               		.loc 1 518 0
 439 0078 8091 0000 		lds r24,mk_max_speed
 440 007c 1F92      		push __zero_reg__
 441               	.LCFI33:
 442               		.cfi_remember_state
 443               		.cfi_def_cfa_offset 3
 444 007e 8F93      		push r24
 445               	.LCFI34:
 446               		.cfi_def_cfa_offset 4
 447 0080 80E0      		ldi r24,lo8(__c.5333)
 448 0082 90E0      		ldi r25,hi8(__c.5333)
 449 0084 00C0      		rjmp .L46
 450               	.LVL39:
 451               	.L32:
 452               	.LCFI35:
 453               		.cfi_restore_state
 521:../../tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 454               		.loc 1 521 0
 455 0086 8091 0000 		lds r24,mk_time_to_max
 456               	.LVL40:
 457 008a 6817      		cp r22,r24
 458 008c 00F4      		brsh .L40
 522:../../tmk_core/common/command.c ****             else
 459               		.loc 1 522 0
 460 008e 861B      		sub r24,r22
 461 0090 8093 0000 		sts mk_time_to_max,r24
 462 0094 00C0      		rjmp .L41
 463               	.L40:
 524:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 464               		.loc 1 524 0
 465 0096 1092 0000 		sts mk_time_to_max,__zero_reg__
 466               	.L41:
 525:../../tmk_core/common/command.c ****             break;
 467               		.loc 1 525 0
 468 009a 8091 0000 		lds r24,mk_time_to_max
 469 009e 1F92      		push __zero_reg__
 470               	.LCFI36:
 471               		.cfi_remember_state
 472               		.cfi_def_cfa_offset 3
 473 00a0 8F93      		push r24
 474               	.LCFI37:
 475               		.cfi_def_cfa_offset 4
 476 00a2 80E0      		ldi r24,lo8(__c.5336)
 477 00a4 90E0      		ldi r25,hi8(__c.5336)
 478 00a6 00C0      		rjmp .L46
 479               	.LVL41:
 480               	.L31:
 481               	.LCFI38:
 482               		.cfi_restore_state
 528:../../tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 483               		.loc 1 528 0
 484 00a8 8091 0000 		lds r24,mk_wheel_max_speed
 485               	.LVL42:
 486 00ac 6817      		cp r22,r24
 487 00ae 00F4      		brsh .L42
 529:../../tmk_core/common/command.c ****             else
 488               		.loc 1 529 0
 489 00b0 861B      		sub r24,r22
 490 00b2 8093 0000 		sts mk_wheel_max_speed,r24
 491 00b6 00C0      		rjmp .L43
 492               	.L42:
 531:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 493               		.loc 1 531 0
 494 00b8 1092 0000 		sts mk_wheel_max_speed,__zero_reg__
 495               	.L43:
 532:../../tmk_core/common/command.c ****             break;
 496               		.loc 1 532 0
 497 00bc 8091 0000 		lds r24,mk_wheel_max_speed
 498 00c0 1F92      		push __zero_reg__
 499               	.LCFI39:
 500               		.cfi_remember_state
 501               		.cfi_def_cfa_offset 3
 502 00c2 8F93      		push r24
 503               	.LCFI40:
 504               		.cfi_def_cfa_offset 4
 505 00c4 80E0      		ldi r24,lo8(__c.5339)
 506 00c6 90E0      		ldi r25,hi8(__c.5339)
 507 00c8 00C0      		rjmp .L46
 508               	.LVL43:
 509               	.L33:
 510               	.LCFI41:
 511               		.cfi_restore_state
 535:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 512               		.loc 1 535 0
 513 00ca 8091 0000 		lds r24,mk_wheel_time_to_max
 514               	.LVL44:
 515 00ce 6817      		cp r22,r24
 516 00d0 00F4      		brsh .L44
 536:../../tmk_core/common/command.c ****             else
 517               		.loc 1 536 0
 518 00d2 861B      		sub r24,r22
 519 00d4 8093 0000 		sts mk_wheel_time_to_max,r24
 520 00d8 00C0      		rjmp .L45
 521               	.L44:
 538:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 522               		.loc 1 538 0
 523 00da 1092 0000 		sts mk_wheel_time_to_max,__zero_reg__
 524               	.L45:
 539:../../tmk_core/common/command.c ****             break;
 525               		.loc 1 539 0
 526 00de 8091 0000 		lds r24,mk_wheel_time_to_max
 527 00e2 1F92      		push __zero_reg__
 528               	.LCFI42:
 529               		.cfi_def_cfa_offset 3
 530 00e4 8F93      		push r24
 531               	.LCFI43:
 532               		.cfi_def_cfa_offset 4
 533 00e6 80E0      		ldi r24,lo8(__c.5342)
 534 00e8 90E0      		ldi r25,hi8(__c.5342)
 535               	.L46:
 536 00ea 9F93      		push r25
 537               	.LCFI44:
 538               		.cfi_def_cfa_offset 5
 539 00ec 8F93      		push r24
 540               	.LCFI45:
 541               		.cfi_def_cfa_offset 6
 542 00ee 0E94 0000 		call __xprintf
 543               	.LVL45:
 540:../../tmk_core/common/command.c ****     }
 544               		.loc 1 540 0
 545 00f2 0F90      		pop __tmp_reg__
 546 00f4 0F90      		pop __tmp_reg__
 547 00f6 0F90      		pop __tmp_reg__
 548 00f8 0F90      		pop __tmp_reg__
 549               	.LCFI46:
 550               		.cfi_def_cfa_offset 2
 551 00fa 0895      		ret
 552               		.cfi_endproc
 553               	.LFE113:
 555               		.section	.text.switch_default_layer,"ax",@progbits
 557               	switch_default_layer:
 558               	.LFB117:
 566:../../tmk_core/common/command.c **** 
 567:../../tmk_core/common/command.c **** static bool mousekey_console(uint8_t code)
 568:../../tmk_core/common/command.c **** {
 569:../../tmk_core/common/command.c ****     switch (code) {
 570:../../tmk_core/common/command.c ****         case KC_H:
 571:../../tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 572:../../tmk_core/common/command.c ****             mousekey_console_help();
 573:../../tmk_core/common/command.c ****             break;
 574:../../tmk_core/common/command.c ****         case KC_Q:
 575:../../tmk_core/common/command.c ****         case KC_ESC:
 576:../../tmk_core/common/command.c ****             if (mousekey_param) {
 577:../../tmk_core/common/command.c ****                 mousekey_param = 0;
 578:../../tmk_core/common/command.c ****             } else {
 579:../../tmk_core/common/command.c ****                 print("C> ");
 580:../../tmk_core/common/command.c ****                 command_state = CONSOLE;
 581:../../tmk_core/common/command.c ****                 return false;
 582:../../tmk_core/common/command.c ****             }
 583:../../tmk_core/common/command.c ****             break;
 584:../../tmk_core/common/command.c ****         case KC_P:
 585:../../tmk_core/common/command.c ****             mousekey_param_print();
 586:../../tmk_core/common/command.c ****             break;
 587:../../tmk_core/common/command.c ****         case KC_1:
 588:../../tmk_core/common/command.c ****         case KC_2:
 589:../../tmk_core/common/command.c ****         case KC_3:
 590:../../tmk_core/common/command.c ****         case KC_4:
 591:../../tmk_core/common/command.c ****         case KC_5:
 592:../../tmk_core/common/command.c ****         case KC_6:
 593:../../tmk_core/common/command.c ****             mousekey_param = numkey2num(code);
 594:../../tmk_core/common/command.c ****             break;
 595:../../tmk_core/common/command.c ****         case KC_UP:
 596:../../tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 597:../../tmk_core/common/command.c ****             break;
 598:../../tmk_core/common/command.c ****         case KC_DOWN:
 599:../../tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 600:../../tmk_core/common/command.c ****             break;
 601:../../tmk_core/common/command.c ****         case KC_PGUP:
 602:../../tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 603:../../tmk_core/common/command.c ****             break;
 604:../../tmk_core/common/command.c ****         case KC_PGDN:
 605:../../tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 606:../../tmk_core/common/command.c ****             break;
 607:../../tmk_core/common/command.c ****         case KC_D:
 608:../../tmk_core/common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 609:../../tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 610:../../tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 611:../../tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 612:../../tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 613:../../tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 614:../../tmk_core/common/command.c ****             print("set default\n");
 615:../../tmk_core/common/command.c ****             break;
 616:../../tmk_core/common/command.c ****         default:
 617:../../tmk_core/common/command.c ****             print("?");
 618:../../tmk_core/common/command.c ****             return false;
 619:../../tmk_core/common/command.c ****     }
 620:../../tmk_core/common/command.c ****     if (mousekey_param) {
 621:../../tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 622:../../tmk_core/common/command.c ****     } else {
 623:../../tmk_core/common/command.c ****         print("M>" );
 624:../../tmk_core/common/command.c ****     }
 625:../../tmk_core/common/command.c ****     return true;
 626:../../tmk_core/common/command.c **** }
 627:../../tmk_core/common/command.c **** #endif
 628:../../tmk_core/common/command.c **** 
 629:../../tmk_core/common/command.c **** 
 630:../../tmk_core/common/command.c **** /***********************************************************
 631:../../tmk_core/common/command.c ****  * Utilities
 632:../../tmk_core/common/command.c ****  ***********************************************************/
 633:../../tmk_core/common/command.c **** #if MOUSEKEY_ENABLE
 634:../../tmk_core/common/command.c **** static uint8_t numkey2num(uint8_t code)
 635:../../tmk_core/common/command.c **** {
 636:../../tmk_core/common/command.c ****     switch (code) {
 637:../../tmk_core/common/command.c ****         case KC_1: return 1;
 638:../../tmk_core/common/command.c ****         case KC_2: return 2;
 639:../../tmk_core/common/command.c ****         case KC_3: return 3;
 640:../../tmk_core/common/command.c ****         case KC_4: return 4;
 641:../../tmk_core/common/command.c ****         case KC_5: return 5;
 642:../../tmk_core/common/command.c ****         case KC_6: return 6;
 643:../../tmk_core/common/command.c ****         case KC_7: return 7;
 644:../../tmk_core/common/command.c ****         case KC_8: return 8;
 645:../../tmk_core/common/command.c ****         case KC_9: return 9;
 646:../../tmk_core/common/command.c ****         case KC_0: return 0;
 647:../../tmk_core/common/command.c ****     }
 648:../../tmk_core/common/command.c ****     return 0;
 649:../../tmk_core/common/command.c **** }
 650:../../tmk_core/common/command.c **** #endif
 651:../../tmk_core/common/command.c **** 
 652:../../tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer)
 653:../../tmk_core/common/command.c **** {
 559               		.loc 1 653 0
 560               		.cfi_startproc
 561               	.LVL46:
 562 0000 CF93      		push r28
 563               	.LCFI47:
 564               		.cfi_def_cfa_offset 3
 565               		.cfi_offset 28, -2
 566               	/* prologue: function */
 567               	/* frame size = 0 */
 568               	/* stack size = 1 */
 569               	.L__stack_usage = 1
 570 0002 C82F      		mov r28,r24
 654:../../tmk_core/common/command.c ****     xprintf("L%d\n", layer);
 571               		.loc 1 654 0
 572 0004 1F92      		push __zero_reg__
 573               	.LCFI48:
 574               		.cfi_def_cfa_offset 4
 575 0006 8F93      		push r24
 576               	.LCFI49:
 577               		.cfi_def_cfa_offset 5
 578 0008 80E0      		ldi r24,lo8(__c.5398)
 579 000a 90E0      		ldi r25,hi8(__c.5398)
 580               	.LVL47:
 581 000c 9F93      		push r25
 582               	.LCFI50:
 583               		.cfi_def_cfa_offset 6
 584 000e 8F93      		push r24
 585               	.LCFI51:
 586               		.cfi_def_cfa_offset 7
 587 0010 0E94 0000 		call __xprintf
 588               	.LVL48:
 655:../../tmk_core/common/command.c ****     default_layer_set(1UL<<layer);
 589               		.loc 1 655 0
 590 0014 81E0      		ldi r24,lo8(1)
 591 0016 90E0      		ldi r25,0
 592 0018 A0E0      		ldi r26,0
 593 001a B0E0      		ldi r27,0
 594 001c BC01      		movw r22,r24
 595 001e CD01      		movw r24,r26
 596 0020 00C0      		rjmp 2f
 597               		1:
 598 0022 660F      		lsl r22
 599 0024 771F      		rol r23
 600 0026 881F      		rol r24
 601 0028 991F      		rol r25
 602               		2:
 603 002a CA95      		dec r28
 604 002c 02F4      		brpl 1b
 605 002e 0E94 0000 		call default_layer_set
 606               	.LVL49:
 656:../../tmk_core/common/command.c ****     clear_keyboard();
 607               		.loc 1 656 0
 608 0032 0F90      		pop __tmp_reg__
 609 0034 0F90      		pop __tmp_reg__
 610 0036 0F90      		pop __tmp_reg__
 611 0038 0F90      		pop __tmp_reg__
 612               	.LCFI52:
 613               		.cfi_def_cfa_offset 3
 614               	/* epilogue start */
 657:../../tmk_core/common/command.c **** }
 615               		.loc 1 657 0
 616 003a CF91      		pop r28
 617               	.LVL50:
 656:../../tmk_core/common/command.c ****     clear_keyboard();
 618               		.loc 1 656 0
 619 003c 0C94 0000 		jmp clear_keyboard
 620               	.LVL51:
 621               		.cfi_endproc
 622               	.LFE117:
 624               		.section	.text.command_common,"ax",@progbits
 626               	command_common:
 627               	.LFB108:
 183:../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 628               		.loc 1 183 0
 629               		.cfi_startproc
 630 0000 CF93      		push r28
 631               	.LCFI53:
 632               		.cfi_def_cfa_offset 3
 633               		.cfi_offset 28, -2
 634               	/* prologue: function */
 635               	/* frame size = 0 */
 636               	/* stack size = 1 */
 637               	.L__stack_usage = 1
 190:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 638               		.loc 1 190 0
 639 0002 8B31      		cpi r24,lo8(27)
 640 0004 01F4      		brne .+2
 641 0006 00C0      		rjmp .L50
 642 0008 00F0      		brlo .+2
 643 000a 00C0      		rjmp .L51
 644 000c 8E30      		cpi r24,lo8(14)
 645 000e 01F4      		brne .+2
 646 0010 00C0      		rjmp .L52
 647 0012 00F4      		brsh .L53
 648 0014 8730      		cpi r24,lo8(7)
 649 0016 01F4      		brne .+2
 650 0018 00C0      		rjmp .L54
 651 001a 00F4      		brsh .L55
 652 001c 8630      		cpi r24,lo8(6)
 653 001e 01F0      		breq .+2
 654 0020 00C0      		rjmp .L49
 228:../../tmk_core/common/command.c ****             debug_keyboard = false;
 655               		.loc 1 228 0
 656 0022 8091 0000 		lds r24,debug_config
 231:../../tmk_core/common/command.c ****             command_console_help();
 657               		.loc 1 231 0
 658 0026 817F      		andi r24,lo8(-15)
 659 0028 8E7F      		andi r24,lo8(~(1<<0))
 660 002a 8093 0000 		sts debug_config,r24
 661               	.LBB120:
 662               	.LBB121:
 394:../../tmk_core/common/command.c ****           "ESC/q:	quit\n"
 663               		.loc 1 394 0
 664 002e 80E0      		ldi r24,lo8(__c.5238)
 665 0030 90E0      		ldi r25,hi8(__c.5238)
 666 0032 0E94 0000 		call xputs
 667               	.LBE121:
 668               	.LBE120:
 233:../../tmk_core/common/command.c ****             command_state = CONSOLE;
 669               		.loc 1 233 0
 670 0036 80E0      		ldi r24,lo8(__c.5170)
 671 0038 90E0      		ldi r25,hi8(__c.5170)
 672 003a 0E94 0000 		call xputs
 234:../../tmk_core/common/command.c ****             break;
 673               		.loc 1 234 0
 674 003e 81E0      		ldi r24,lo8(1)
 675 0040 8093 0000 		sts command_state,r24
 676 0044 00C0      		rjmp .L96
 677               	.L55:
 190:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 678               		.loc 1 190 0
 679 0046 8830      		cpi r24,lo8(8)
 680 0048 01F4      		brne .+2
 681 004a 00C0      		rjmp .L57
 682 004c 8B30      		cpi r24,lo8(11)
 683 004e 01F4      		brne .+2
 684 0050 00C0      		rjmp .L58
 685 0052 00C0      		rjmp .L49
 686               	.L53:
 687 0054 8131      		cpi r24,lo8(17)
 688 0056 01F4      		brne .+2
 689 0058 00C0      		rjmp .L59
 690 005a 00F4      		brsh .L60
 691 005c 8031      		cpi r24,lo8(16)
 692 005e 01F4      		brne .+2
 693 0060 00C0      		rjmp .L61
 694 0062 00C0      		rjmp .L49
 695               	.L60:
 696 0064 8631      		cpi r24,lo8(22)
 697 0066 01F4      		brne .+2
 698 0068 00C0      		rjmp .L62
 699 006a 8931      		cpi r24,lo8(25)
 700 006c 01F0      		breq .+2
 701 006e 00C0      		rjmp .L49
 282:../../tmk_core/common/command.c ****             print("DESC: " STR(DESCRIPTION) "\n");
 702               		.loc 1 282 0
 703 0070 80E0      		ldi r24,lo8(__c.5196)
 704 0072 90E0      		ldi r25,hi8(__c.5196)
 705 0074 0E94 0000 		call xputs
 283:../../tmk_core/common/command.c ****             print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 706               		.loc 1 283 0
 707 0078 80E0      		ldi r24,lo8(__c.5198)
 708 007a 90E0      		ldi r25,hi8(__c.5198)
 709 007c 0E94 0000 		call xputs
 284:../../tmk_core/common/command.c ****                   "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 710               		.loc 1 284 0
 711 0080 80E0      		ldi r24,lo8(__c.5200)
 712 0082 90E0      		ldi r25,hi8(__c.5200)
 713 0084 0E94 0000 		call xputs
 287:../../tmk_core/common/command.c ****             /* build options */
 714               		.loc 1 287 0
 715 0088 80E0      		ldi r24,lo8(__c.5202)
 716 008a 90E0      		ldi r25,hi8(__c.5202)
 717 008c 0E94 0000 		call xputs
 289:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 718               		.loc 1 289 0
 719 0090 80E0      		ldi r24,lo8(__c.5204)
 720 0092 90E0      		ldi r25,hi8(__c.5204)
 721 0094 0E94 0000 		call xputs
 325:../../tmk_core/common/command.c **** #if defined(__AVR__)
 722               		.loc 1 325 0
 723 0098 80E0      		ldi r24,lo8(__c.5206)
 724 009a 90E0      		ldi r25,hi8(__c.5206)
 725 009c 00C0      		rjmp .L99
 726               	.L51:
 190:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 727               		.loc 1 190 0
 728 009e 8533      		cpi r24,lo8(53)
 729 00a0 01F4      		brne .+2
 730 00a2 00C0      		rjmp .L64
 731 00a4 00F4      		brsh .L65
 732 00a6 8732      		cpi r24,lo8(39)
 733 00a8 01F4      		brne .+2
 734 00aa 00C0      		rjmp .L64
 735 00ac 00F4      		brsh .L66
 736 00ae 8E31      		cpi r24,lo8(30)
 737 00b0 00F4      		brsh .+2
 738 00b2 00C0      		rjmp .L49
 376:../../tmk_core/common/command.c ****             break;
 739               		.loc 1 376 0
 740 00b4 8D51      		subi r24,lo8(-(-29))
 741 00b6 00C0      		rjmp .L100
 742               	.L66:
 190:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 743               		.loc 1 190 0
 744 00b8 8932      		cpi r24,lo8(41)
 745 00ba 01F4      		brne .+2
 746 00bc 00C0      		rjmp .L64
 747 00be 00C0      		rjmp .L49
 748               	.L65:
 749 00c0 8334      		cpi r24,lo8(67)
 750 00c2 00F4      		brsh .L68
 751 00c4 8A33      		cpi r24,lo8(58)
 752 00c6 00F0      		brlo .+2
 753 00c8 00C0      		rjmp .L69
 754 00ca 8833      		cpi r24,lo8(56)
 755 00cc 01F4      		brne .+2
 756 00ce 00C0      		rjmp .L58
 757 00d0 00C0      		rjmp .L49
 758               	.L68:
 759 00d2 8334      		cpi r24,lo8(67)
 760 00d4 01F4      		brne .+2
 761 00d6 00C0      		rjmp .L64
 762 00d8 8834      		cpi r24,lo8(72)
 763 00da 01F0      		breq .+2
 764 00dc 00C0      		rjmp .L49
 237:../../tmk_core/common/command.c ****             print("\n\nbootloader... ");
 765               		.loc 1 237 0
 766 00de 0E94 0000 		call clear_keyboard
 238:../../tmk_core/common/command.c ****             wait_ms(1000);
 767               		.loc 1 238 0
 768 00e2 80E0      		ldi r24,lo8(__c.5173)
 769 00e4 90E0      		ldi r25,hi8(__c.5173)
 770 00e6 0E94 0000 		call xputs
 771               	.LBB122:
 772               	.LBB123:
 773               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 774               		.loc 2 187 0
 775 00ea 9FEF      		ldi r25,lo8(3199999)
 776 00ec 23ED      		ldi r18,hi8(3199999)
 777 00ee 80E3      		ldi r24,hlo8(3199999)
 778 00f0 9150      	1:	subi r25,1
 779 00f2 2040      		sbci r18,0
 780 00f4 8040      		sbci r24,0
 781 00f6 01F4      		brne 1b
 782 00f8 00C0      		rjmp .
 783 00fa 0000      		nop
 784               	.LBE123:
 785               	.LBE122:
 240:../../tmk_core/common/command.c ****             break;
 786               		.loc 1 240 0
 787 00fc 0E94 0000 		call bootloader_jump
 788 0100 00C0      		rjmp .L96
 789               	.L57:
 206:../../tmk_core/common/command.c ****             print_eeconfig();
 790               		.loc 1 206 0
 791 0102 80E0      		ldi r24,lo8(__c.5164)
 792 0104 90E0      		ldi r25,hi8(__c.5164)
 793 0106 0E94 0000 		call xputs
 794               	.LBB124:
 795               	.LBB125:
 150:../../tmk_core/common/command.c **** 
 796               		.loc 1 150 0
 797 010a 80E0      		ldi r24,lo8(__c.5049)
 798 010c 90E0      		ldi r25,hi8(__c.5049)
 799 010e 0E94 0000 		call xputs
 800 0112 0E94 0000 		call eeconfig_read_default_layer
 801 0116 1F92      		push __zero_reg__
 802               	.LCFI54:
 803               		.cfi_def_cfa_offset 4
 804 0118 8F93      		push r24
 805               	.LCFI55:
 806               		.cfi_def_cfa_offset 5
 807 011a 80E0      		ldi r24,lo8(__c.5051)
 808 011c 90E0      		ldi r25,hi8(__c.5051)
 809 011e 9F93      		push r25
 810               	.LCFI56:
 811               		.cfi_def_cfa_offset 6
 812 0120 8F93      		push r24
 813               	.LCFI57:
 814               		.cfi_def_cfa_offset 7
 815 0122 0E94 0000 		call __xprintf
 816 0126 80E0      		ldi r24,lo8(__c.5053)
 817 0128 90E0      		ldi r25,hi8(__c.5053)
 818 012a 0E94 0000 		call xputs
 153:../../tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 819               		.loc 1 153 0
 820 012e 0E94 0000 		call eeconfig_read_debug
 821 0132 C82F      		mov r28,r24
 154:../../tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 822               		.loc 1 154 0
 823 0134 80E0      		ldi r24,lo8(__c.5056)
 824 0136 90E0      		ldi r25,hi8(__c.5056)
 825 0138 0E94 0000 		call xputs
 826 013c 1F92      		push __zero_reg__
 827               	.LCFI58:
 828               		.cfi_def_cfa_offset 8
 829 013e CF93      		push r28
 830               	.LCFI59:
 831               		.cfi_def_cfa_offset 9
 832 0140 80E0      		ldi r24,lo8(__c.5058)
 833 0142 90E0      		ldi r25,hi8(__c.5058)
 834 0144 9F93      		push r25
 835               	.LCFI60:
 836               		.cfi_def_cfa_offset 10
 837 0146 8F93      		push r24
 838               	.LCFI61:
 839               		.cfi_def_cfa_offset 11
 840 0148 0E94 0000 		call __xprintf
 841 014c 80E0      		ldi r24,lo8(__c.5060)
 842 014e 90E0      		ldi r25,hi8(__c.5060)
 843 0150 0E94 0000 		call xputs
 155:../../tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 844               		.loc 1 155 0
 845 0154 80E0      		ldi r24,lo8(__c.5062)
 846 0156 90E0      		ldi r25,hi8(__c.5062)
 847 0158 0E94 0000 		call xputs
 848 015c 8C2F      		mov r24,r28
 849 015e 8170      		andi r24,1
 850 0160 1F92      		push __zero_reg__
 851               	.LCFI62:
 852               		.cfi_def_cfa_offset 12
 853 0162 8F93      		push r24
 854               	.LCFI63:
 855               		.cfi_def_cfa_offset 13
 856 0164 80E0      		ldi r24,lo8(__c.5064)
 857 0166 90E0      		ldi r25,hi8(__c.5064)
 858 0168 9F93      		push r25
 859               	.LCFI64:
 860               		.cfi_def_cfa_offset 14
 861 016a 8F93      		push r24
 862               	.LCFI65:
 863               		.cfi_def_cfa_offset 15
 864 016c 0E94 0000 		call __xprintf
 865 0170 80E0      		ldi r24,lo8(__c.5066)
 866 0172 90E0      		ldi r25,hi8(__c.5066)
 867 0174 0E94 0000 		call xputs
 156:../../tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 868               		.loc 1 156 0
 869 0178 80E0      		ldi r24,lo8(__c.5068)
 870 017a 90E0      		ldi r25,hi8(__c.5068)
 871 017c 0E94 0000 		call xputs
 872 0180 C1FB      		bst r28,1
 873 0182 8827      		clr r24
 874 0184 80F9      		bld r24,0
 875 0186 1F92      		push __zero_reg__
 876               	.LCFI66:
 877               		.cfi_def_cfa_offset 16
 878 0188 8F93      		push r24
 879               	.LCFI67:
 880               		.cfi_def_cfa_offset 17
 881 018a 80E0      		ldi r24,lo8(__c.5070)
 882 018c 90E0      		ldi r25,hi8(__c.5070)
 883 018e 9F93      		push r25
 884               	.LCFI68:
 885               		.cfi_def_cfa_offset 18
 886 0190 8F93      		push r24
 887               	.LCFI69:
 888               		.cfi_def_cfa_offset 19
 889 0192 0E94 0000 		call __xprintf
 890 0196 80E0      		ldi r24,lo8(__c.5072)
 891 0198 90E0      		ldi r25,hi8(__c.5072)
 892 019a 0E94 0000 		call xputs
 157:../../tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 893               		.loc 1 157 0
 894 019e 80E0      		ldi r24,lo8(__c.5074)
 895 01a0 90E0      		ldi r25,hi8(__c.5074)
 896 01a2 0E94 0000 		call xputs
 897 01a6 C2FB      		bst r28,2
 898 01a8 8827      		clr r24
 899 01aa 80F9      		bld r24,0
 900 01ac 1F92      		push __zero_reg__
 901               	.LCFI70:
 902               		.cfi_def_cfa_offset 20
 903 01ae 8F93      		push r24
 904               	.LCFI71:
 905               		.cfi_def_cfa_offset 21
 906 01b0 80E0      		ldi r24,lo8(__c.5076)
 907 01b2 90E0      		ldi r25,hi8(__c.5076)
 908 01b4 9F93      		push r25
 909               	.LCFI72:
 910               		.cfi_def_cfa_offset 22
 911 01b6 8F93      		push r24
 912               	.LCFI73:
 913               		.cfi_def_cfa_offset 23
 914 01b8 0E94 0000 		call __xprintf
 915 01bc 80E0      		ldi r24,lo8(__c.5078)
 916 01be 90E0      		ldi r25,hi8(__c.5078)
 917 01c0 0E94 0000 		call xputs
 158:../../tmk_core/common/command.c **** 
 918               		.loc 1 158 0
 919 01c4 80E0      		ldi r24,lo8(__c.5080)
 920 01c6 90E0      		ldi r25,hi8(__c.5080)
 921 01c8 0E94 0000 		call xputs
 922 01cc C3FB      		bst r28,3
 923 01ce CC27      		clr r28
 924 01d0 C0F9      		bld r28,0
 925 01d2 1F92      		push __zero_reg__
 926               	.LCFI74:
 927               		.cfi_def_cfa_offset 24
 928 01d4 CF93      		push r28
 929               	.LCFI75:
 930               		.cfi_def_cfa_offset 25
 931 01d6 80E0      		ldi r24,lo8(__c.5082)
 932 01d8 90E0      		ldi r25,hi8(__c.5082)
 933 01da 9F93      		push r25
 934               	.LCFI76:
 935               		.cfi_def_cfa_offset 26
 936 01dc 8F93      		push r24
 937               	.LCFI77:
 938               		.cfi_def_cfa_offset 27
 939 01de 0E94 0000 		call __xprintf
 940 01e2 80E0      		ldi r24,lo8(__c.5084)
 941 01e4 90E0      		ldi r25,hi8(__c.5084)
 942 01e6 0E94 0000 		call xputs
 161:../../tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 943               		.loc 1 161 0
 944 01ea 0E94 0000 		call eeconfig_read_keymap
 945 01ee C82F      		mov r28,r24
 162:../../tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 946               		.loc 1 162 0
 947 01f0 80E0      		ldi r24,lo8(__c.5087)
 948 01f2 90E0      		ldi r25,hi8(__c.5087)
 949 01f4 0E94 0000 		call xputs
 950 01f8 1F92      		push __zero_reg__
 951               	.LCFI78:
 952               		.cfi_def_cfa_offset 28
 953 01fa CF93      		push r28
 954               	.LCFI79:
 955               		.cfi_def_cfa_offset 29
 956 01fc 80E0      		ldi r24,lo8(__c.5089)
 957 01fe 90E0      		ldi r25,hi8(__c.5089)
 958 0200 9F93      		push r25
 959               	.LCFI80:
 960               		.cfi_def_cfa_offset 30
 961 0202 8F93      		push r24
 962               	.LCFI81:
 963               		.cfi_def_cfa_offset 31
 964 0204 0E94 0000 		call __xprintf
 965 0208 80E0      		ldi r24,lo8(__c.5091)
 966 020a 90E0      		ldi r25,hi8(__c.5091)
 967 020c 0E94 0000 		call xputs
 163:../../tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 968               		.loc 1 163 0
 969 0210 80E0      		ldi r24,lo8(__c.5093)
 970 0212 90E0      		ldi r25,hi8(__c.5093)
 971 0214 0E94 0000 		call xputs
 972 0218 8C2F      		mov r24,r28
 973 021a 8170      		andi r24,1
 974 021c 1F92      		push __zero_reg__
 975               	.LCFI82:
 976               		.cfi_def_cfa_offset 32
 977 021e 8F93      		push r24
 978               	.LCFI83:
 979               		.cfi_def_cfa_offset 33
 980 0220 80E0      		ldi r24,lo8(__c.5095)
 981 0222 90E0      		ldi r25,hi8(__c.5095)
 982 0224 9F93      		push r25
 983               	.LCFI84:
 984               		.cfi_def_cfa_offset 34
 985 0226 8F93      		push r24
 986               	.LCFI85:
 987               		.cfi_def_cfa_offset 35
 988 0228 0E94 0000 		call __xprintf
 989 022c 8DB7      		in r24,__SP_L__
 990 022e 9EB7      		in r25,__SP_H__
 991 0230 8096      		adiw r24,32
 992 0232 0FB6      		in __tmp_reg__,__SREG__
 993 0234 F894      		cli
 994 0236 9EBF      		out __SP_H__,r25
 995 0238 0FBE      		out __SREG__,__tmp_reg__
 996 023a 8DBF      		out __SP_L__,r24
 997               	.LCFI86:
 998               		.cfi_def_cfa_offset 3
 999 023c 80E0      		ldi r24,lo8(__c.5097)
 1000 023e 90E0      		ldi r25,hi8(__c.5097)
 1001 0240 0E94 0000 		call xputs
 164:../../tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 1002               		.loc 1 164 0
 1003 0244 80E0      		ldi r24,lo8(__c.5099)
 1004 0246 90E0      		ldi r25,hi8(__c.5099)
 1005 0248 0E94 0000 		call xputs
 1006 024c C1FB      		bst r28,1
 1007 024e 8827      		clr r24
 1008 0250 80F9      		bld r24,0
 1009 0252 1F92      		push __zero_reg__
 1010               	.LCFI87:
 1011               		.cfi_def_cfa_offset 4
 1012 0254 8F93      		push r24
 1013               	.LCFI88:
 1014               		.cfi_def_cfa_offset 5
 1015 0256 80E0      		ldi r24,lo8(__c.5101)
 1016 0258 90E0      		ldi r25,hi8(__c.5101)
 1017 025a 9F93      		push r25
 1018               	.LCFI89:
 1019               		.cfi_def_cfa_offset 6
 1020 025c 8F93      		push r24
 1021               	.LCFI90:
 1022               		.cfi_def_cfa_offset 7
 1023 025e 0E94 0000 		call __xprintf
 1024 0262 80E0      		ldi r24,lo8(__c.5103)
 1025 0264 90E0      		ldi r25,hi8(__c.5103)
 1026 0266 0E94 0000 		call xputs
 165:../../tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 1027               		.loc 1 165 0
 1028 026a 80E0      		ldi r24,lo8(__c.5105)
 1029 026c 90E0      		ldi r25,hi8(__c.5105)
 1030 026e 0E94 0000 		call xputs
 1031 0272 C2FB      		bst r28,2
 1032 0274 8827      		clr r24
 1033 0276 80F9      		bld r24,0
 1034 0278 1F92      		push __zero_reg__
 1035               	.LCFI91:
 1036               		.cfi_def_cfa_offset 8
 1037 027a 8F93      		push r24
 1038               	.LCFI92:
 1039               		.cfi_def_cfa_offset 9
 1040 027c 80E0      		ldi r24,lo8(__c.5107)
 1041 027e 90E0      		ldi r25,hi8(__c.5107)
 1042 0280 9F93      		push r25
 1043               	.LCFI93:
 1044               		.cfi_def_cfa_offset 10
 1045 0282 8F93      		push r24
 1046               	.LCFI94:
 1047               		.cfi_def_cfa_offset 11
 1048 0284 0E94 0000 		call __xprintf
 1049 0288 80E0      		ldi r24,lo8(__c.5109)
 1050 028a 90E0      		ldi r25,hi8(__c.5109)
 1051 028c 0E94 0000 		call xputs
 166:../../tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 1052               		.loc 1 166 0
 1053 0290 80E0      		ldi r24,lo8(__c.5111)
 1054 0292 90E0      		ldi r25,hi8(__c.5111)
 1055 0294 0E94 0000 		call xputs
 1056 0298 C3FB      		bst r28,3
 1057 029a 8827      		clr r24
 1058 029c 80F9      		bld r24,0
 1059 029e 1F92      		push __zero_reg__
 1060               	.LCFI95:
 1061               		.cfi_def_cfa_offset 12
 1062 02a0 8F93      		push r24
 1063               	.LCFI96:
 1064               		.cfi_def_cfa_offset 13
 1065 02a2 80E0      		ldi r24,lo8(__c.5113)
 1066 02a4 90E0      		ldi r25,hi8(__c.5113)
 1067 02a6 9F93      		push r25
 1068               	.LCFI97:
 1069               		.cfi_def_cfa_offset 14
 1070 02a8 8F93      		push r24
 1071               	.LCFI98:
 1072               		.cfi_def_cfa_offset 15
 1073 02aa 0E94 0000 		call __xprintf
 1074 02ae 80E0      		ldi r24,lo8(__c.5115)
 1075 02b0 90E0      		ldi r25,hi8(__c.5115)
 1076 02b2 0E94 0000 		call xputs
 167:../../tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 1077               		.loc 1 167 0
 1078 02b6 80E0      		ldi r24,lo8(__c.5117)
 1079 02b8 90E0      		ldi r25,hi8(__c.5117)
 1080 02ba 0E94 0000 		call xputs
 1081 02be C4FB      		bst r28,4
 1082 02c0 8827      		clr r24
 1083 02c2 80F9      		bld r24,0
 1084 02c4 1F92      		push __zero_reg__
 1085               	.LCFI99:
 1086               		.cfi_def_cfa_offset 16
 1087 02c6 8F93      		push r24
 1088               	.LCFI100:
 1089               		.cfi_def_cfa_offset 17
 1090 02c8 80E0      		ldi r24,lo8(__c.5119)
 1091 02ca 90E0      		ldi r25,hi8(__c.5119)
 1092 02cc 9F93      		push r25
 1093               	.LCFI101:
 1094               		.cfi_def_cfa_offset 18
 1095 02ce 8F93      		push r24
 1096               	.LCFI102:
 1097               		.cfi_def_cfa_offset 19
 1098 02d0 0E94 0000 		call __xprintf
 1099 02d4 80E0      		ldi r24,lo8(__c.5121)
 1100 02d6 90E0      		ldi r25,hi8(__c.5121)
 1101 02d8 0E94 0000 		call xputs
 168:../../tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 1102               		.loc 1 168 0
 1103 02dc 80E0      		ldi r24,lo8(__c.5123)
 1104 02de 90E0      		ldi r25,hi8(__c.5123)
 1105 02e0 0E94 0000 		call xputs
 1106 02e4 C5FB      		bst r28,5
 1107 02e6 8827      		clr r24
 1108 02e8 80F9      		bld r24,0
 1109 02ea 1F92      		push __zero_reg__
 1110               	.LCFI103:
 1111               		.cfi_def_cfa_offset 20
 1112 02ec 8F93      		push r24
 1113               	.LCFI104:
 1114               		.cfi_def_cfa_offset 21
 1115 02ee 80E0      		ldi r24,lo8(__c.5125)
 1116 02f0 90E0      		ldi r25,hi8(__c.5125)
 1117 02f2 9F93      		push r25
 1118               	.LCFI105:
 1119               		.cfi_def_cfa_offset 22
 1120 02f4 8F93      		push r24
 1121               	.LCFI106:
 1122               		.cfi_def_cfa_offset 23
 1123 02f6 0E94 0000 		call __xprintf
 1124 02fa 80E0      		ldi r24,lo8(__c.5127)
 1125 02fc 90E0      		ldi r25,hi8(__c.5127)
 1126 02fe 0E94 0000 		call xputs
 169:../../tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 1127               		.loc 1 169 0
 1128 0302 80E0      		ldi r24,lo8(__c.5129)
 1129 0304 90E0      		ldi r25,hi8(__c.5129)
 1130 0306 0E94 0000 		call xputs
 1131 030a C6FB      		bst r28,6
 1132 030c 8827      		clr r24
 1133 030e 80F9      		bld r24,0
 1134 0310 1F92      		push __zero_reg__
 1135               	.LCFI107:
 1136               		.cfi_def_cfa_offset 24
 1137 0312 8F93      		push r24
 1138               	.LCFI108:
 1139               		.cfi_def_cfa_offset 25
 1140 0314 80E0      		ldi r24,lo8(__c.5131)
 1141 0316 90E0      		ldi r25,hi8(__c.5131)
 1142 0318 9F93      		push r25
 1143               	.LCFI109:
 1144               		.cfi_def_cfa_offset 26
 1145 031a 8F93      		push r24
 1146               	.LCFI110:
 1147               		.cfi_def_cfa_offset 27
 1148 031c 0E94 0000 		call __xprintf
 1149 0320 80E0      		ldi r24,lo8(__c.5133)
 1150 0322 90E0      		ldi r25,hi8(__c.5133)
 1151 0324 0E94 0000 		call xputs
 170:../../tmk_core/common/command.c **** 
 1152               		.loc 1 170 0
 1153 0328 80E0      		ldi r24,lo8(__c.5135)
 1154 032a 90E0      		ldi r25,hi8(__c.5135)
 1155 032c 0E94 0000 		call xputs
 1156 0330 C7FB      		bst r28,7
 1157 0332 CC27      		clr r28
 1158 0334 C0F9      		bld r28,0
 1159 0336 1F92      		push __zero_reg__
 1160               	.LCFI111:
 1161               		.cfi_def_cfa_offset 28
 1162 0338 CF93      		push r28
 1163               	.LCFI112:
 1164               		.cfi_def_cfa_offset 29
 1165 033a 80E0      		ldi r24,lo8(__c.5137)
 1166 033c 90E0      		ldi r25,hi8(__c.5137)
 1167 033e 9F93      		push r25
 1168               	.LCFI113:
 1169               		.cfi_def_cfa_offset 30
 1170 0340 8F93      		push r24
 1171               	.LCFI114:
 1172               		.cfi_def_cfa_offset 31
 1173 0342 0E94 0000 		call __xprintf
 1174 0346 80E0      		ldi r24,lo8(__c.5139)
 1175 0348 90E0      		ldi r25,hi8(__c.5139)
 1176 034a 0E94 0000 		call xputs
 174:../../tmk_core/common/command.c ****     print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
 1177               		.loc 1 174 0
 1178 034e 0E94 0000 		call eeconfig_read_backlight
 1179 0352 C82F      		mov r28,r24
 175:../../tmk_core/common/command.c ****     print(".enable: "); print_dec(bc.enable); print("\n");
 1180               		.loc 1 175 0
 1181 0354 80E0      		ldi r24,lo8(__c.5142)
 1182 0356 90E0      		ldi r25,hi8(__c.5142)
 1183 0358 0E94 0000 		call xputs
 1184 035c 1F92      		push __zero_reg__
 1185               	.LCFI115:
 1186               		.cfi_def_cfa_offset 32
 1187 035e CF93      		push r28
 1188               	.LCFI116:
 1189               		.cfi_def_cfa_offset 33
 1190 0360 80E0      		ldi r24,lo8(__c.5144)
 1191 0362 90E0      		ldi r25,hi8(__c.5144)
 1192 0364 9F93      		push r25
 1193               	.LCFI117:
 1194               		.cfi_def_cfa_offset 34
 1195 0366 8F93      		push r24
 1196               	.LCFI118:
 1197               		.cfi_def_cfa_offset 35
 1198 0368 0E94 0000 		call __xprintf
 1199 036c 8DB7      		in r24,__SP_L__
 1200 036e 9EB7      		in r25,__SP_H__
 1201 0370 8096      		adiw r24,32
 1202 0372 0FB6      		in __tmp_reg__,__SREG__
 1203 0374 F894      		cli
 1204 0376 9EBF      		out __SP_H__,r25
 1205 0378 0FBE      		out __SREG__,__tmp_reg__
 1206 037a 8DBF      		out __SP_L__,r24
 1207               	.LCFI119:
 1208               		.cfi_def_cfa_offset 3
 1209 037c 80E0      		ldi r24,lo8(__c.5146)
 1210 037e 90E0      		ldi r25,hi8(__c.5146)
 1211 0380 0E94 0000 		call xputs
 176:../../tmk_core/common/command.c ****     print(".level: "); print_dec(bc.level); print("\n");
 1212               		.loc 1 176 0
 1213 0384 80E0      		ldi r24,lo8(__c.5148)
 1214 0386 90E0      		ldi r25,hi8(__c.5148)
 1215 0388 0E94 0000 		call xputs
 1216 038c 8C2F      		mov r24,r28
 1217 038e 8170      		andi r24,1
 1218 0390 1F92      		push __zero_reg__
 1219               	.LCFI120:
 1220               		.cfi_def_cfa_offset 4
 1221 0392 8F93      		push r24
 1222               	.LCFI121:
 1223               		.cfi_def_cfa_offset 5
 1224 0394 80E0      		ldi r24,lo8(__c.5150)
 1225 0396 90E0      		ldi r25,hi8(__c.5150)
 1226 0398 9F93      		push r25
 1227               	.LCFI122:
 1228               		.cfi_def_cfa_offset 6
 1229 039a 8F93      		push r24
 1230               	.LCFI123:
 1231               		.cfi_def_cfa_offset 7
 1232 039c 0E94 0000 		call __xprintf
 1233 03a0 80E0      		ldi r24,lo8(__c.5152)
 1234 03a2 90E0      		ldi r25,hi8(__c.5152)
 1235 03a4 0E94 0000 		call xputs
 177:../../tmk_core/common/command.c **** #endif
 1236               		.loc 1 177 0
 1237 03a8 80E0      		ldi r24,lo8(__c.5154)
 1238 03aa 90E0      		ldi r25,hi8(__c.5154)
 1239 03ac 0E94 0000 		call xputs
 1240 03b0 C695      		lsr r28
 1241 03b2 1F92      		push __zero_reg__
 1242               	.LCFI124:
 1243               		.cfi_def_cfa_offset 8
 1244 03b4 CF93      		push r28
 1245               	.LCFI125:
 1246               		.cfi_def_cfa_offset 9
 1247 03b6 80E0      		ldi r24,lo8(__c.5156)
 1248 03b8 90E0      		ldi r25,hi8(__c.5156)
 1249 03ba 9F93      		push r25
 1250               	.LCFI126:
 1251               		.cfi_def_cfa_offset 10
 1252 03bc 8F93      		push r24
 1253               	.LCFI127:
 1254               		.cfi_def_cfa_offset 11
 1255 03be 0E94 0000 		call __xprintf
 1256 03c2 80E0      		ldi r24,lo8(__c.5158)
 1257 03c4 90E0      		ldi r25,hi8(__c.5158)
 1258 03c6 0E94 0000 		call xputs
 1259 03ca 8DB7      		in r24,__SP_L__
 1260 03cc 9EB7      		in r25,__SP_H__
 1261 03ce 0896      		adiw r24,8
 1262 03d0 0FB6      		in __tmp_reg__,__SREG__
 1263 03d2 F894      		cli
 1264 03d4 9EBF      		out __SP_H__,r25
 1265 03d6 0FBE      		out __SREG__,__tmp_reg__
 1266 03d8 8DBF      		out __SP_L__,r24
 1267               	.LCFI128:
 1268               		.cfi_def_cfa_offset 3
 1269 03da 00C0      		rjmp .L96
 1270               	.L58:
 1271               	.LBE125:
 1272               	.LBE124:
 1273               	.LBB126:
 1274               	.LBB127:
 118:../../tmk_core/common/command.c ****           "d:	debug\n"
 1275               		.loc 1 118 0
 1276 03dc 80E0      		ldi r24,lo8(__c.5044)
 1277 03de 90E0      		ldi r25,hi8(__c.5044)
 1278               	.L99:
 1279 03e0 0E94 0000 		call xputs
 1280               	.L96:
 1281               	.LBE127:
 1282               	.LBE126:
 385:../../tmk_core/common/command.c **** }
 1283               		.loc 1 385 0
 1284 03e4 C1E0      		ldi r28,lo8(1)
 1285 03e6 00C0      		rjmp .L71
 1286               	.L54:
 243:../../tmk_core/common/command.c ****                 print("\ndebug: off\n");
 1287               		.loc 1 243 0
 1288 03e8 8091 0000 		lds r24,debug_config
 1289 03ec C82F      		mov r28,r24
 1290 03ee C170      		andi r28,1
 1291 03f0 80FF      		sbrs r24,0
 1292 03f2 00C0      		rjmp .L72
 244:../../tmk_core/common/command.c ****                 debug_matrix   = false;
 1293               		.loc 1 244 0
 1294 03f4 80E0      		ldi r24,lo8(__c.5176)
 1295 03f6 90E0      		ldi r25,hi8(__c.5176)
 1296 03f8 0E94 0000 		call xputs
 245:../../tmk_core/common/command.c ****                 debug_keyboard = false;
 1297               		.loc 1 245 0
 1298 03fc 8091 0000 		lds r24,debug_config
 248:../../tmk_core/common/command.c ****             } else {
 1299               		.loc 1 248 0
 1300 0400 817F      		andi r24,lo8(-15)
 1301 0402 8E7F      		andi r24,lo8(~(1<<0))
 1302 0404 00C0      		rjmp .L97
 1303               	.L72:
 250:../../tmk_core/common/command.c ****                 debug_enable   = true;
 1304               		.loc 1 250 0
 1305 0406 80E0      		ldi r24,lo8(__c.5178)
 1306 0408 90E0      		ldi r25,hi8(__c.5178)
 1307 040a 0E94 0000 		call xputs
 251:../../tmk_core/common/command.c ****             }
 1308               		.loc 1 251 0
 1309 040e 8091 0000 		lds r24,debug_config
 1310 0412 8160      		ori r24,lo8(1<<0)
 1311 0414 8093 0000 		sts debug_config,r24
 1312 0418 00C0      		rjmp .L96
 1313               	.L50:
 255:../../tmk_core/common/command.c ****             if (debug_matrix) {
 1314               		.loc 1 255 0
 1315 041a 9091 0000 		lds r25,debug_config
 1316 041e 91FB      		bst r25,1
 1317 0420 CC27      		clr r28
 1318 0422 C0F9      		bld r28,0
 1319 0424 81E0      		ldi r24,lo8(1)
 1320 0426 C827      		eor r28,r24
 1321 0428 892F      		mov r24,r25
 1322 042a C0FB      		bst r28,0
 1323 042c 81F9      		bld r24,1
 1324 042e 8093 0000 		sts debug_config,r24
 256:../../tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 1325               		.loc 1 256 0
 1326 0432 CC23      		tst r28
 1327 0434 01F0      		breq .L73
 257:../../tmk_core/common/command.c ****                 debug_enable = true;
 1328               		.loc 1 257 0
 1329 0436 80E0      		ldi r24,lo8(__c.5181)
 1330 0438 90E0      		ldi r25,hi8(__c.5181)
 1331 043a 00C0      		rjmp .L98
 1332               	.L73:
 260:../../tmk_core/common/command.c ****             }
 1333               		.loc 1 260 0
 1334 043c 80E0      		ldi r24,lo8(__c.5183)
 1335 043e 90E0      		ldi r25,hi8(__c.5183)
 1336 0440 00C0      		rjmp .L99
 1337               	.L52:
 264:../../tmk_core/common/command.c ****             if (debug_keyboard) {
 1338               		.loc 1 264 0
 1339 0442 9091 0000 		lds r25,debug_config
 1340 0446 92FB      		bst r25,2
 1341 0448 CC27      		clr r28
 1342 044a C0F9      		bld r28,0
 1343 044c 81E0      		ldi r24,lo8(1)
 1344 044e C827      		eor r28,r24
 1345 0450 892F      		mov r24,r25
 1346 0452 C0FB      		bst r28,0
 1347 0454 82F9      		bld r24,2
 1348 0456 8093 0000 		sts debug_config,r24
 265:../../tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 1349               		.loc 1 265 0
 1350 045a CC23      		tst r28
 1351 045c 01F0      		breq .L74
 266:../../tmk_core/common/command.c ****                 debug_enable = true;
 1352               		.loc 1 266 0
 1353 045e 80E0      		ldi r24,lo8(__c.5186)
 1354 0460 90E0      		ldi r25,hi8(__c.5186)
 1355 0462 00C0      		rjmp .L98
 1356               	.L74:
 269:../../tmk_core/common/command.c ****             }
 1357               		.loc 1 269 0
 1358 0464 80E0      		ldi r24,lo8(__c.5188)
 1359 0466 90E0      		ldi r25,hi8(__c.5188)
 1360 0468 00C0      		rjmp .L99
 1361               	.L61:
 273:../../tmk_core/common/command.c ****             if (debug_mouse) {
 1362               		.loc 1 273 0
 1363 046a 9091 0000 		lds r25,debug_config
 1364 046e 93FB      		bst r25,3
 1365 0470 CC27      		clr r28
 1366 0472 C0F9      		bld r28,0
 1367 0474 81E0      		ldi r24,lo8(1)
 1368 0476 C827      		eor r28,r24
 1369 0478 892F      		mov r24,r25
 1370 047a C0FB      		bst r28,0
 1371 047c 83F9      		bld r24,3
 1372 047e 8093 0000 		sts debug_config,r24
 274:../../tmk_core/common/command.c ****                 print("\nmouse: on\n");
 1373               		.loc 1 274 0
 1374 0482 CC23      		tst r28
 1375 0484 01F0      		breq .L75
 275:../../tmk_core/common/command.c ****                 debug_enable = true;
 1376               		.loc 1 275 0
 1377 0486 80E0      		ldi r24,lo8(__c.5191)
 1378 0488 90E0      		ldi r25,hi8(__c.5191)
 1379               	.L98:
 1380 048a 0E94 0000 		call xputs
 276:../../tmk_core/common/command.c ****             } else {
 1381               		.loc 1 276 0
 1382 048e 8091 0000 		lds r24,debug_config
 1383 0492 8160      		ori r24,lo8(1<<0)
 1384               	.L97:
 1385 0494 8093 0000 		sts debug_config,r24
 1386 0498 00C0      		rjmp .L71
 1387               	.L75:
 278:../../tmk_core/common/command.c ****             }
 1388               		.loc 1 278 0
 1389 049a 80E0      		ldi r24,lo8(__c.5193)
 1390 049c 90E0      		ldi r25,hi8(__c.5193)
 1391 049e 00C0      		rjmp .L99
 1392               	.L62:
 335:../../tmk_core/common/command.c ****             print_val_hex8(host_keyboard_leds());
 1393               		.loc 1 335 0
 1394 04a0 80E0      		ldi r24,lo8(__c.5209)
 1395 04a2 90E0      		ldi r25,hi8(__c.5209)
 1396 04a4 0E94 0000 		call xputs
 336:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_protocol);
 1397               		.loc 1 336 0
 1398 04a8 0E94 0000 		call host_keyboard_leds
 1399 04ac 1F92      		push __zero_reg__
 1400               	.LCFI129:
 1401               		.cfi_def_cfa_offset 4
 1402 04ae 8F93      		push r24
 1403               	.LCFI130:
 1404               		.cfi_def_cfa_offset 5
 1405 04b0 80E0      		ldi r24,lo8(__c.5211)
 1406 04b2 90E0      		ldi r25,hi8(__c.5211)
 1407 04b4 9F93      		push r25
 1408               	.LCFI131:
 1409               		.cfi_def_cfa_offset 6
 1410 04b6 8F93      		push r24
 1411               	.LCFI132:
 1412               		.cfi_def_cfa_offset 7
 1413 04b8 0E94 0000 		call __xprintf
 337:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_idle);
 1414               		.loc 1 337 0
 1415 04bc 8091 0000 		lds r24,keyboard_protocol
 1416 04c0 1F92      		push __zero_reg__
 1417               	.LCFI133:
 1418               		.cfi_def_cfa_offset 8
 1419 04c2 8F93      		push r24
 1420               	.LCFI134:
 1421               		.cfi_def_cfa_offset 9
 1422 04c4 80E0      		ldi r24,lo8(__c.5213)
 1423 04c6 90E0      		ldi r25,hi8(__c.5213)
 1424 04c8 9F93      		push r25
 1425               	.LCFI135:
 1426               		.cfi_def_cfa_offset 10
 1427 04ca 8F93      		push r24
 1428               	.LCFI136:
 1429               		.cfi_def_cfa_offset 11
 1430 04cc 0E94 0000 		call __xprintf
 338:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 1431               		.loc 1 338 0
 1432 04d0 8091 0000 		lds r24,keyboard_idle
 1433 04d4 1F92      		push __zero_reg__
 1434               	.LCFI137:
 1435               		.cfi_def_cfa_offset 12
 1436 04d6 8F93      		push r24
 1437               	.LCFI138:
 1438               		.cfi_def_cfa_offset 13
 1439 04d8 80E0      		ldi r24,lo8(__c.5215)
 1440 04da 90E0      		ldi r25,hi8(__c.5215)
 1441 04dc 9F93      		push r25
 1442               	.LCFI139:
 1443               		.cfi_def_cfa_offset 14
 1444 04de 8F93      		push r24
 1445               	.LCFI140:
 1446               		.cfi_def_cfa_offset 15
 1447 04e0 0E94 0000 		call __xprintf
 340:../../tmk_core/common/command.c **** #endif
 1448               		.loc 1 340 0
 1449 04e4 8091 0000 		lds r24,keyboard_nkro
 1450 04e8 1F92      		push __zero_reg__
 1451               	.LCFI141:
 1452               		.cfi_def_cfa_offset 16
 1453 04ea 8F93      		push r24
 1454               	.LCFI142:
 1455               		.cfi_def_cfa_offset 17
 1456 04ec 80E0      		ldi r24,lo8(__c.5217)
 1457 04ee 90E0      		ldi r25,hi8(__c.5217)
 1458 04f0 9F93      		push r25
 1459               	.LCFI143:
 1460               		.cfi_def_cfa_offset 18
 1461 04f2 8F93      		push r24
 1462               	.LCFI144:
 1463               		.cfi_def_cfa_offset 19
 1464 04f4 0E94 0000 		call __xprintf
 342:../../tmk_core/common/command.c **** 
 1465               		.loc 1 342 0
 1466 04f8 0E94 0000 		call timer_read32
 1467 04fc 9F93      		push r25
 1468               	.LCFI145:
 1469               		.cfi_def_cfa_offset 20
 1470 04fe 8F93      		push r24
 1471               	.LCFI146:
 1472               		.cfi_def_cfa_offset 21
 1473 0500 7F93      		push r23
 1474               	.LCFI147:
 1475               		.cfi_def_cfa_offset 22
 1476 0502 6F93      		push r22
 1477               	.LCFI148:
 1478               		.cfi_def_cfa_offset 23
 1479 0504 80E0      		ldi r24,lo8(__c.5219)
 1480 0506 90E0      		ldi r25,hi8(__c.5219)
 1481 0508 9F93      		push r25
 1482               	.LCFI149:
 1483               		.cfi_def_cfa_offset 24
 1484 050a 8F93      		push r24
 1485               	.LCFI150:
 1486               		.cfi_def_cfa_offset 25
 1487 050c 0E94 0000 		call __xprintf
 357:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 1488               		.loc 1 357 0
 1489 0510 8DB7      		in r24,__SP_L__
 1490 0512 9EB7      		in r25,__SP_H__
 1491 0514 4696      		adiw r24,22
 1492 0516 0FB6      		in __tmp_reg__,__SREG__
 1493 0518 F894      		cli
 1494 051a 9EBF      		out __SP_H__,r25
 1495 051c 0FBE      		out __SREG__,__tmp_reg__
 1496 051e 8DBF      		out __SP_L__,r24
 1497               	.LCFI151:
 1498               		.cfi_def_cfa_offset 3
 1499 0520 00C0      		rjmp .L96
 1500               	.L59:
 360:../../tmk_core/common/command.c ****             keyboard_nkro = !keyboard_nkro;
 1501               		.loc 1 360 0
 1502 0522 0E94 0000 		call clear_keyboard
 361:../../tmk_core/common/command.c ****             if (keyboard_nkro) {
 1503               		.loc 1 361 0
 1504 0526 C091 0000 		lds r28,keyboard_nkro
 1505 052a 81E0      		ldi r24,lo8(1)
 1506 052c C827      		eor r28,r24
 1507 052e C093 0000 		sts keyboard_nkro,r28
 362:../../tmk_core/common/command.c ****                 print("NKRO: on\n");
 1508               		.loc 1 362 0
 1509 0532 CC23      		tst r28
 1510 0534 01F0      		breq .L76
 363:../../tmk_core/common/command.c ****             } else {
 1511               		.loc 1 363 0
 1512 0536 80E0      		ldi r24,lo8(__c.5222)
 1513 0538 90E0      		ldi r25,hi8(__c.5222)
 1514 053a 0E94 0000 		call xputs
 1515 053e 00C0      		rjmp .L71
 1516               	.L76:
 365:../../tmk_core/common/command.c ****             }
 1517               		.loc 1 365 0
 1518 0540 80E0      		ldi r24,lo8(__c.5224)
 1519 0542 90E0      		ldi r25,hi8(__c.5224)
 1520 0544 00C0      		rjmp .L99
 1521               	.L64:
 373:../../tmk_core/common/command.c ****             break;
 1522               		.loc 1 373 0
 1523 0546 80E0      		ldi r24,0
 1524 0548 00C0      		rjmp .L100
 1525               	.L69:
 379:../../tmk_core/common/command.c ****             break;
 1526               		.loc 1 379 0
 1527 054a 8953      		subi r24,lo8(-(-57))
 1528               	.L100:
 1529 054c 0E94 0000 		call switch_default_layer
 1530 0550 00C0      		rjmp .L96
 1531               	.L49:
 382:../../tmk_core/common/command.c ****             return false;
 1532               		.loc 1 382 0
 1533 0552 80E0      		ldi r24,lo8(__c.5233)
 1534 0554 90E0      		ldi r25,hi8(__c.5233)
 1535 0556 0E94 0000 		call xputs
 383:../../tmk_core/common/command.c ****     }
 1536               		.loc 1 383 0
 1537 055a C0E0      		ldi r28,0
 1538               	.L71:
 386:../../tmk_core/common/command.c **** 
 1539               		.loc 1 386 0
 1540 055c 8C2F      		mov r24,r28
 1541               	/* epilogue start */
 1542 055e CF91      		pop r28
 1543 0560 0895      		ret
 1544               		.cfi_endproc
 1545               	.LFE108:
 1547               		.section	.text.command_console_extra,"ax",@progbits
 1548               		.weak	command_console_extra
 1550               	command_console_extra:
 1551               	.LFB105:
 107:../../tmk_core/common/command.c ****     (void)code;
 1552               		.loc 1 107 0
 1553               		.cfi_startproc
 1554               	.LVL52:
 1555               	/* prologue: function */
 1556               	/* frame size = 0 */
 1557               	/* stack size = 0 */
 1558               	.L__stack_usage = 0
 110:../../tmk_core/common/command.c **** 
 1559               		.loc 1 110 0
 1560 0000 80E0      		ldi r24,0
 1561               	.LVL53:
 1562 0002 0895      		ret
 1563               		.cfi_endproc
 1564               	.LFE105:
 1566               		.set	command_console_extra.localalias.0,command_console_extra
 1567               		.section	.text.command_extra,"ax",@progbits
 1568               		.weak	command_extra
 1570               	command_extra:
 1571               	.LFB119:
 1572               		.cfi_startproc
 1573               	/* prologue: function */
 1574               	/* frame size = 0 */
 1575               	/* stack size = 0 */
 1576               	.L__stack_usage = 0
 1577 0000 0C94 0000 		jmp command_console_extra.localalias.0
 1578               		.cfi_endproc
 1579               	.LFE119:
 1581               		.section	.text.command_proc,"ax",@progbits
 1582               	.global	command_proc
 1584               	command_proc:
 1585               	.LFB103:
  71:../../tmk_core/common/command.c ****     switch (command_state) {
 1586               		.loc 1 71 0
 1587               		.cfi_startproc
  71:../../tmk_core/common/command.c ****     switch (command_state) {
 1588               		.loc 1 71 0
 1589 0000 CF93      		push r28
 1590               	.LCFI152:
 1591               		.cfi_def_cfa_offset 3
 1592               		.cfi_offset 28, -2
 1593               	/* prologue: function */
 1594               	/* frame size = 0 */
 1595               	/* stack size = 1 */
 1596               	.L__stack_usage = 1
 1597 0002 C82F      		mov r28,r24
  72:../../tmk_core/common/command.c ****         case ONESHOT:
 1598               		.loc 1 72 0
 1599 0004 8091 0000 		lds r24,command_state
 1600 0008 8130      		cpi r24,lo8(1)
 1601 000a 01F0      		breq .L105
 1602 000c 00F0      		brlo .L106
 1603 000e 8230      		cpi r24,lo8(2)
 1604 0010 01F4      		brne .+2
 1605 0012 00C0      		rjmp .L107
 1606 0014 00C0      		rjmp .L172
 1607               	.L106:
  74:../../tmk_core/common/command.c ****                 return false;
 1608               		.loc 1 74 0
 1609 0016 E091 0000 		lds r30,keyboard_report
 1610 001a F091 0000 		lds r31,keyboard_report+1
 1611 001e 8081      		ld r24,Z
 1612 0020 8232      		cpi r24,lo8(34)
 1613 0022 01F0      		breq .+2
 1614 0024 00C0      		rjmp .L136
 1615 0026 00C0      		rjmp .L171
 1616               	.L105:
  79:../../tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 1617               		.loc 1 79 0
 1618 0028 E091 0000 		lds r30,keyboard_report
 1619 002c F091 0000 		lds r31,keyboard_report+1
 1620 0030 8081      		ld r24,Z
 1621 0032 8232      		cpi r24,lo8(34)
 1622 0034 01F4      		brne .L110
 1623               	.L171:
  80:../../tmk_core/common/command.c ****             else
 1624               		.loc 1 80 0
 1625 0036 8C2F      		mov r24,r28
 1626 0038 0E94 0000 		call command_extra
 1627 003c 8111      		cpse r24,__zero_reg__
 1628 003e 00C0      		rjmp .L138
  80:../../tmk_core/common/command.c ****             else
 1629               		.loc 1 80 0 is_stmt 0 discriminator 2
 1630 0040 8C2F      		mov r24,r28
 1631 0042 0E94 0000 		call command_common
 1632 0046 00C0      		rjmp .L135
 1633               	.L138:
  80:../../tmk_core/common/command.c ****             else
 1634               		.loc 1 80 0
 1635 0048 81E0      		ldi r24,lo8(1)
 1636 004a 90E0      		ldi r25,0
 1637 004c 00C0      		rjmp .L135
 1638               	.L110:
  82:../../tmk_core/common/command.c ****             break;
 1639               		.loc 1 82 0 is_stmt 1
 1640 004e 8C2F      		mov r24,r28
 1641 0050 0E94 0000 		call command_console_extra
 1642 0054 8111      		cpse r24,__zero_reg__
 1643 0056 00C0      		rjmp .L112
 1644               	.LBB166:
 1645               	.LBB167:
 404:../../tmk_core/common/command.c ****         case KC_H:
 1646               		.loc 1 404 0
 1647 0058 C431      		cpi r28,lo8(20)
 1648 005a 01F0      		breq .L114
 1649 005c 00F4      		brsh .L115
 1650 005e CB30      		cpi r28,lo8(11)
 1651 0060 01F0      		breq .L116
 1652 0062 C031      		cpi r28,lo8(16)
 1653 0064 01F4      		brne .L113
 415:../../tmk_core/common/command.c ****             print("M> ");
 1654               		.loc 1 415 0
 1655 0066 0E94 0000 		call mousekey_console_help
 416:../../tmk_core/common/command.c ****             command_state = MOUSEKEY;
 1656               		.loc 1 416 0
 1657 006a 80E0      		ldi r24,lo8(__c.5249)
 1658 006c 90E0      		ldi r25,hi8(__c.5249)
 1659 006e 0E94 0000 		call xputs
 417:../../tmk_core/common/command.c ****             return true;
 1660               		.loc 1 417 0
 1661 0072 82E0      		ldi r24,lo8(2)
 1662 0074 8093 0000 		sts command_state,r24
 1663 0078 00C0      		rjmp .L112
 1664               	.L115:
 404:../../tmk_core/common/command.c ****         case KC_H:
 1665               		.loc 1 404 0
 1666 007a C932      		cpi r28,lo8(41)
 1667 007c 01F0      		breq .L114
 1668 007e C833      		cpi r28,lo8(56)
 1669 0080 01F4      		brne .L113
 1670               	.L116:
 1671               	.LBB168:
 1672               	.LBB169:
 394:../../tmk_core/common/command.c ****           "ESC/q:	quit\n"
 1673               		.loc 1 394 0
 1674 0082 80E0      		ldi r24,lo8(__c.5238)
 1675 0084 90E0      		ldi r25,hi8(__c.5238)
 1676 0086 0E94 0000 		call xputs
 1677               	.LBE169:
 1678               	.LBE168:
 424:../../tmk_core/common/command.c ****     return true;
 1679               		.loc 1 424 0
 1680 008a 80E0      		ldi r24,lo8(__c.5254)
 1681 008c 90E0      		ldi r25,hi8(__c.5254)
 1682 008e 0E94 0000 		call xputs
 1683 0092 00C0      		rjmp .L112
 1684               	.L114:
 411:../../tmk_core/common/command.c ****             return false;
 1685               		.loc 1 411 0
 1686 0094 1092 0000 		sts command_state,__zero_reg__
 1687 0098 00C0      		rjmp .L118
 1688               	.L113:
 421:../../tmk_core/common/command.c ****             return false;
 1689               		.loc 1 421 0
 1690 009a 80E0      		ldi r24,lo8(__c.5252)
 1691 009c 90E0      		ldi r25,hi8(__c.5252)
 1692 009e 0E94 0000 		call xputs
 1693 00a2 00C0      		rjmp .L118
 1694               	.L112:
 1695               	.LBE167:
 1696               	.LBE166:
  82:../../tmk_core/common/command.c ****             break;
 1697               		.loc 1 82 0
 1698 00a4 81E0      		ldi r24,lo8(1)
 1699               	.L135:
  82:../../tmk_core/common/command.c ****             break;
 1700               		.loc 1 82 0 is_stmt 0 discriminator 6
 1701 00a6 8170      		andi r24,lo8(1)
 1702 00a8 00C0      		rjmp .L164
 1703               	.L107:
 1704               	.LBB170:
 1705               	.LBB171:
 569:../../tmk_core/common/command.c ****         case KC_H:
 1706               		.loc 1 569 0 is_stmt 1
 1707 00aa C432      		cpi r28,lo8(36)
 1708 00ac 00F4      		brsh .L120
 1709 00ae CE31      		cpi r28,lo8(30)
 1710 00b0 00F0      		brlo .+2
 1711 00b2 00C0      		rjmp .L121
 1712 00b4 CB30      		cpi r28,lo8(11)
 1713 00b6 01F0      		breq .L122
 1714 00b8 00F4      		brsh .L123
 1715 00ba C730      		cpi r28,lo8(7)
 1716 00bc 01F0      		breq .+2
 1717 00be 00C0      		rjmp .L119
 608:../../tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 1718               		.loc 1 608 0
 1719 00c0 8EE1      		ldi r24,lo8(30)
 1720 00c2 8093 0000 		sts mk_delay,r24
 609:../../tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 1721               		.loc 1 609 0
 1722 00c6 82E3      		ldi r24,lo8(50)
 1723 00c8 8093 0000 		sts mk_interval,r24
 610:../../tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 1724               		.loc 1 610 0
 1725 00cc 8AE0      		ldi r24,lo8(10)
 1726 00ce 8093 0000 		sts mk_max_speed,r24
 611:../../tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 1727               		.loc 1 611 0
 1728 00d2 84E1      		ldi r24,lo8(20)
 1729 00d4 8093 0000 		sts mk_time_to_max,r24
 612:../../tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 1730               		.loc 1 612 0
 1731 00d8 88E0      		ldi r24,lo8(8)
 1732 00da 8093 0000 		sts mk_wheel_max_speed,r24
 613:../../tmk_core/common/command.c ****             print("set default\n");
 1733               		.loc 1 613 0
 1734 00de 88E2      		ldi r24,lo8(40)
 1735 00e0 8093 0000 		sts mk_wheel_time_to_max,r24
 614:../../tmk_core/common/command.c ****             break;
 1736               		.loc 1 614 0
 1737 00e4 80E0      		ldi r24,lo8(__c.5373)
 1738 00e6 90E0      		ldi r25,hi8(__c.5373)
 1739 00e8 0E94 0000 		call xputs
 1740 00ec 00C0      		rjmp .L132
 1741               	.L123:
 569:../../tmk_core/common/command.c ****         case KC_H:
 1742               		.loc 1 569 0
 1743 00ee C331      		cpi r28,lo8(19)
 1744 00f0 01F0      		breq .L125
 1745 00f2 C431      		cpi r28,lo8(20)
 1746 00f4 01F0      		breq .L126
 1747 00f6 00C0      		rjmp .L119
 1748               	.L120:
 1749 00f8 CB34      		cpi r28,lo8(75)
 1750 00fa 01F4      		brne .+2
 1751 00fc 00C0      		rjmp .L127
 1752 00fe 00F4      		brsh .L128
 1753 0100 C932      		cpi r28,lo8(41)
 1754 0102 01F0      		breq .L126
 1755 0104 C833      		cpi r28,lo8(56)
 1756 0106 01F0      		breq .L122
 1757 0108 00C0      		rjmp .L119
 1758               	.L128:
 1759 010a C135      		cpi r28,lo8(81)
 1760 010c 01F4      		brne .+2
 1761 010e 00C0      		rjmp .L129
 1762 0110 C235      		cpi r28,lo8(82)
 1763 0112 01F4      		brne .+2
 1764 0114 00C0      		rjmp .L130
 1765 0116 CE34      		cpi r28,lo8(78)
 1766 0118 01F0      		breq .+2
 1767 011a 00C0      		rjmp .L119
 605:../../tmk_core/common/command.c ****             break;
 1768               		.loc 1 605 0
 1769 011c 6AE0      		ldi r22,lo8(10)
 1770 011e 00C0      		rjmp .L166
 1771               	.L122:
 572:../../tmk_core/common/command.c ****             break;
 1772               		.loc 1 572 0
 1773 0120 0E94 0000 		call mousekey_console_help
 1774 0124 00C0      		rjmp .L132
 1775               	.L126:
 576:../../tmk_core/common/command.c ****                 mousekey_param = 0;
 1776               		.loc 1 576 0
 1777 0126 8091 0000 		lds r24,mousekey_param
 1778 012a 8823      		tst r24
 1779 012c 01F0      		breq .L133
 577:../../tmk_core/common/command.c ****             } else {
 1780               		.loc 1 577 0
 1781 012e 1092 0000 		sts mousekey_param,__zero_reg__
 1782 0132 00C0      		rjmp .L132
 1783               	.L133:
 579:../../tmk_core/common/command.c ****                 command_state = CONSOLE;
 1784               		.loc 1 579 0
 1785 0134 80E0      		ldi r24,lo8(__c.5359)
 1786 0136 90E0      		ldi r25,hi8(__c.5359)
 1787 0138 0E94 0000 		call xputs
 580:../../tmk_core/common/command.c ****                 return false;
 1788               		.loc 1 580 0
 1789 013c 81E0      		ldi r24,lo8(1)
 1790 013e 8093 0000 		sts command_state,r24
 1791 0142 00C0      		rjmp .L164
 1792               	.L125:
 1793               	.LBB172:
 1794               	.LBB173:
 437:../../tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 1795               		.loc 1 437 0
 1796 0144 80E0      		ldi r24,lo8(__c.5260)
 1797 0146 90E0      		ldi r25,hi8(__c.5260)
 1798 0148 0E94 0000 		call xputs
 438:../../tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 1799               		.loc 1 438 0
 1800 014c 80E0      		ldi r24,lo8(__c.5262)
 1801 014e 90E0      		ldi r25,hi8(__c.5262)
 1802 0150 0E94 0000 		call xputs
 1803 0154 8091 0000 		lds r24,mk_delay
 1804 0158 1F92      		push __zero_reg__
 1805               	.LCFI153:
 1806               		.cfi_def_cfa_offset 4
 1807 015a 8F93      		push r24
 1808               	.LCFI154:
 1809               		.cfi_def_cfa_offset 5
 1810 015c 80E0      		ldi r24,lo8(__c.5264)
 1811 015e 90E0      		ldi r25,hi8(__c.5264)
 1812 0160 9F93      		push r25
 1813               	.LCFI155:
 1814               		.cfi_def_cfa_offset 6
 1815 0162 8F93      		push r24
 1816               	.LCFI156:
 1817               		.cfi_def_cfa_offset 7
 1818 0164 0E94 0000 		call __xprintf
 1819 0168 80E0      		ldi r24,lo8(__c.5266)
 1820 016a 90E0      		ldi r25,hi8(__c.5266)
 1821 016c 0E94 0000 		call xputs
 439:../../tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 1822               		.loc 1 439 0
 1823 0170 80E0      		ldi r24,lo8(__c.5268)
 1824 0172 90E0      		ldi r25,hi8(__c.5268)
 1825 0174 0E94 0000 		call xputs
 1826 0178 8091 0000 		lds r24,mk_interval
 1827 017c 1F92      		push __zero_reg__
 1828               	.LCFI157:
 1829               		.cfi_def_cfa_offset 8
 1830 017e 8F93      		push r24
 1831               	.LCFI158:
 1832               		.cfi_def_cfa_offset 9
 1833 0180 80E0      		ldi r24,lo8(__c.5270)
 1834 0182 90E0      		ldi r25,hi8(__c.5270)
 1835 0184 9F93      		push r25
 1836               	.LCFI159:
 1837               		.cfi_def_cfa_offset 10
 1838 0186 8F93      		push r24
 1839               	.LCFI160:
 1840               		.cfi_def_cfa_offset 11
 1841 0188 0E94 0000 		call __xprintf
 1842 018c 80E0      		ldi r24,lo8(__c.5272)
 1843 018e 90E0      		ldi r25,hi8(__c.5272)
 1844 0190 0E94 0000 		call xputs
 440:../../tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 1845               		.loc 1 440 0
 1846 0194 80E0      		ldi r24,lo8(__c.5274)
 1847 0196 90E0      		ldi r25,hi8(__c.5274)
 1848 0198 0E94 0000 		call xputs
 1849 019c 8091 0000 		lds r24,mk_max_speed
 1850 01a0 1F92      		push __zero_reg__
 1851               	.LCFI161:
 1852               		.cfi_def_cfa_offset 12
 1853 01a2 8F93      		push r24
 1854               	.LCFI162:
 1855               		.cfi_def_cfa_offset 13
 1856 01a4 80E0      		ldi r24,lo8(__c.5276)
 1857 01a6 90E0      		ldi r25,hi8(__c.5276)
 1858 01a8 9F93      		push r25
 1859               	.LCFI163:
 1860               		.cfi_def_cfa_offset 14
 1861 01aa 8F93      		push r24
 1862               	.LCFI164:
 1863               		.cfi_def_cfa_offset 15
 1864 01ac 0E94 0000 		call __xprintf
 1865 01b0 80E0      		ldi r24,lo8(__c.5278)
 1866 01b2 90E0      		ldi r25,hi8(__c.5278)
 1867 01b4 0E94 0000 		call xputs
 441:../../tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 1868               		.loc 1 441 0
 1869 01b8 80E0      		ldi r24,lo8(__c.5280)
 1870 01ba 90E0      		ldi r25,hi8(__c.5280)
 1871 01bc 0E94 0000 		call xputs
 1872 01c0 8091 0000 		lds r24,mk_time_to_max
 1873 01c4 1F92      		push __zero_reg__
 1874               	.LCFI165:
 1875               		.cfi_def_cfa_offset 16
 1876 01c6 8F93      		push r24
 1877               	.LCFI166:
 1878               		.cfi_def_cfa_offset 17
 1879 01c8 80E0      		ldi r24,lo8(__c.5282)
 1880 01ca 90E0      		ldi r25,hi8(__c.5282)
 1881 01cc 9F93      		push r25
 1882               	.LCFI167:
 1883               		.cfi_def_cfa_offset 18
 1884 01ce 8F93      		push r24
 1885               	.LCFI168:
 1886               		.cfi_def_cfa_offset 19
 1887 01d0 0E94 0000 		call __xprintf
 1888 01d4 80E0      		ldi r24,lo8(__c.5284)
 1889 01d6 90E0      		ldi r25,hi8(__c.5284)
 1890 01d8 0E94 0000 		call xputs
 442:../../tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 1891               		.loc 1 442 0
 1892 01dc 80E0      		ldi r24,lo8(__c.5286)
 1893 01de 90E0      		ldi r25,hi8(__c.5286)
 1894 01e0 0E94 0000 		call xputs
 1895 01e4 8091 0000 		lds r24,mk_wheel_max_speed
 1896 01e8 1F92      		push __zero_reg__
 1897               	.LCFI169:
 1898               		.cfi_def_cfa_offset 20
 1899 01ea 8F93      		push r24
 1900               	.LCFI170:
 1901               		.cfi_def_cfa_offset 21
 1902 01ec 80E0      		ldi r24,lo8(__c.5288)
 1903 01ee 90E0      		ldi r25,hi8(__c.5288)
 1904 01f0 9F93      		push r25
 1905               	.LCFI171:
 1906               		.cfi_def_cfa_offset 22
 1907 01f2 8F93      		push r24
 1908               	.LCFI172:
 1909               		.cfi_def_cfa_offset 23
 1910 01f4 0E94 0000 		call __xprintf
 1911 01f8 80E0      		ldi r24,lo8(__c.5290)
 1912 01fa 90E0      		ldi r25,hi8(__c.5290)
 1913 01fc 0E94 0000 		call xputs
 443:../../tmk_core/common/command.c **** }
 1914               		.loc 1 443 0
 1915 0200 80E0      		ldi r24,lo8(__c.5292)
 1916 0202 90E0      		ldi r25,hi8(__c.5292)
 1917 0204 0E94 0000 		call xputs
 1918 0208 8091 0000 		lds r24,mk_wheel_time_to_max
 1919 020c 1F92      		push __zero_reg__
 1920               	.LCFI173:
 1921               		.cfi_def_cfa_offset 24
 1922 020e 8F93      		push r24
 1923               	.LCFI174:
 1924               		.cfi_def_cfa_offset 25
 1925 0210 80E0      		ldi r24,lo8(__c.5294)
 1926 0212 90E0      		ldi r25,hi8(__c.5294)
 1927 0214 9F93      		push r25
 1928               	.LCFI175:
 1929               		.cfi_def_cfa_offset 26
 1930 0216 8F93      		push r24
 1931               	.LCFI176:
 1932               		.cfi_def_cfa_offset 27
 1933 0218 0E94 0000 		call __xprintf
 1934 021c 80E0      		ldi r24,lo8(__c.5296)
 1935 021e 90E0      		ldi r25,hi8(__c.5296)
 1936 0220 0E94 0000 		call xputs
 1937 0224 8DB7      		in r24,__SP_L__
 1938 0226 9EB7      		in r25,__SP_H__
 1939 0228 4896      		adiw r24,24
 1940 022a 0FB6      		in __tmp_reg__,__SREG__
 1941 022c F894      		cli
 1942 022e 9EBF      		out __SP_H__,r25
 1943 0230 0FBE      		out __SREG__,__tmp_reg__
 1944 0232 8DBF      		out __SP_L__,r24
 1945               	.LCFI177:
 1946               		.cfi_def_cfa_offset 3
 1947 0234 00C0      		rjmp .L132
 1948               	.L121:
 1949 0236 CE51      		subi r28,lo8(-(-30))
 1950 0238 EC2F      		mov r30,r28
 1951 023a F0E0      		ldi r31,0
 1952 023c E050      		subi r30,lo8(-(CSWTCH.43))
 1953 023e F040      		sbci r31,hi8(-(CSWTCH.43))
 1954               	.LBE173:
 1955               	.LBE172:
 593:../../tmk_core/common/command.c ****             break;
 1956               		.loc 1 593 0
 1957 0240 8081      		ld r24,Z
 1958 0242 8093 0000 		sts mousekey_param,r24
 1959 0246 00C0      		rjmp .L132
 1960               	.L130:
 596:../../tmk_core/common/command.c ****             break;
 1961               		.loc 1 596 0
 1962 0248 61E0      		ldi r22,lo8(1)
 1963 024a 00C0      		rjmp .L165
 1964               	.L129:
 599:../../tmk_core/common/command.c ****             break;
 1965               		.loc 1 599 0
 1966 024c 61E0      		ldi r22,lo8(1)
 1967 024e 00C0      		rjmp .L166
 1968               	.L127:
 602:../../tmk_core/common/command.c ****             break;
 1969               		.loc 1 602 0
 1970 0250 6AE0      		ldi r22,lo8(10)
 1971               	.L165:
 1972 0252 8091 0000 		lds r24,mousekey_param
 1973 0256 0E94 0000 		call mousekey_param_inc
 1974 025a 00C0      		rjmp .L132
 1975               	.L166:
 605:../../tmk_core/common/command.c ****             break;
 1976               		.loc 1 605 0
 1977 025c 8091 0000 		lds r24,mousekey_param
 1978 0260 0E94 0000 		call mousekey_param_dec
 1979 0264 00C0      		rjmp .L132
 1980               	.L119:
 617:../../tmk_core/common/command.c ****             return false;
 1981               		.loc 1 617 0
 1982 0266 80E0      		ldi r24,lo8(__c.5376)
 1983 0268 90E0      		ldi r25,hi8(__c.5376)
 1984 026a 00C0      		rjmp .L168
 1985               	.L132:
 620:../../tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 1986               		.loc 1 620 0
 1987 026c 8091 0000 		lds r24,mousekey_param
 1988 0270 8823      		tst r24
 1989 0272 01F0      		breq .L134
 621:../../tmk_core/common/command.c ****     } else {
 1990               		.loc 1 621 0
 1991 0274 1F92      		push __zero_reg__
 1992               	.LCFI178:
 1993               		.cfi_def_cfa_offset 4
 1994 0276 8F93      		push r24
 1995               	.LCFI179:
 1996               		.cfi_def_cfa_offset 5
 1997 0278 80E0      		ldi r24,lo8(__c.5378)
 1998 027a 90E0      		ldi r25,hi8(__c.5378)
 1999 027c 9F93      		push r25
 2000               	.LCFI180:
 2001               		.cfi_def_cfa_offset 6
 2002 027e 8F93      		push r24
 2003               	.LCFI181:
 2004               		.cfi_def_cfa_offset 7
 2005 0280 0E94 0000 		call __xprintf
 2006 0284 0F90      		pop __tmp_reg__
 2007 0286 0F90      		pop __tmp_reg__
 2008 0288 0F90      		pop __tmp_reg__
 2009 028a 0F90      		pop __tmp_reg__
 2010               	.LCFI182:
 2011               		.cfi_def_cfa_offset 3
 2012 028c 00C0      		rjmp .L167
 2013               	.L134:
 623:../../tmk_core/common/command.c ****     }
 2014               		.loc 1 623 0
 2015 028e 80E0      		ldi r24,lo8(__c.5380)
 2016 0290 90E0      		ldi r25,hi8(__c.5380)
 2017               	.L168:
 2018 0292 0E94 0000 		call xputs
 2019               	.L167:
 2020               	.LBE171:
 2021               	.LBE170:
  93:../../tmk_core/common/command.c **** }
 2022               		.loc 1 93 0
 2023 0296 81E0      		ldi r24,lo8(1)
 2024 0298 00C0      		rjmp .L164
 2025               	.L172:
  90:../../tmk_core/common/command.c ****             return false;
 2026               		.loc 1 90 0
 2027 029a 1092 0000 		sts command_state,__zero_reg__
 2028               	.L136:
  75:../../tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
 2029               		.loc 1 75 0
 2030 029e 80E0      		ldi r24,0
 2031 02a0 00C0      		rjmp .L164
 2032               	.L118:
  82:../../tmk_core/common/command.c ****             break;
 2033               		.loc 1 82 0
 2034 02a2 80E0      		ldi r24,0
 2035 02a4 00C0      		rjmp .L135
 2036               	.L164:
 2037               	/* epilogue start */
  94:../../tmk_core/common/command.c **** 
 2038               		.loc 1 94 0
 2039 02a6 CF91      		pop r28
 2040 02a8 0895      		ret
 2041               		.cfi_endproc
 2042               	.LFE103:
 2044               		.section	.rodata.CSWTCH.43,"a",@progbits
 2047               	CSWTCH.43:
 2048 0000 01        		.byte	1
 2049 0001 02        		.byte	2
 2050 0002 03        		.byte	3
 2051 0003 04        		.byte	4
 2052 0004 05        		.byte	5
 2053 0005 06        		.byte	6
 2054 0006 07        		.byte	7
 2055 0007 08        		.byte	8
 2056 0008 09        		.byte	9
 2057 0009 00        		.byte	0
 2058               		.section	.progmem.data.__c.5342,"a",@progbits
 2061               	__c.5342:
 2062 0000 6D6B 5F77 		.string	"mk_wheel_time_to_max = %d\n"
 2062      6865 656C 
 2062      5F74 696D 
 2062      655F 746F 
 2062      5F6D 6178 
 2063               		.section	.progmem.data.__c.5339,"a",@progbits
 2066               	__c.5339:
 2067 0000 6D6B 5F77 		.string	"mk_wheel_max_speed = %d\n"
 2067      6865 656C 
 2067      5F6D 6178 
 2067      5F73 7065 
 2067      6564 203D 
 2068               		.section	.progmem.data.__c.5336,"a",@progbits
 2071               	__c.5336:
 2072 0000 6D6B 5F74 		.string	"mk_time_to_max = %d\n"
 2072      696D 655F 
 2072      746F 5F6D 
 2072      6178 203D 
 2072      2025 640A 
 2073               		.section	.progmem.data.__c.5333,"a",@progbits
 2076               	__c.5333:
 2077 0000 6D6B 5F6D 		.string	"mk_max_speed = %d\n"
 2077      6178 5F73 
 2077      7065 6564 
 2077      203D 2025 
 2077      640A 00
 2078               		.section	.progmem.data.__c.5330,"a",@progbits
 2081               	__c.5330:
 2082 0000 6D6B 5F69 		.string	"mk_interval = %d\n"
 2082      6E74 6572 
 2082      7661 6C20 
 2082      3D20 2564 
 2082      0A00 
 2083               		.section	.progmem.data.__c.5326,"a",@progbits
 2086               	__c.5326:
 2087 0000 6D6B 5F64 		.string	"mk_delay = %d\n"
 2087      656C 6179 
 2087      203D 2025 
 2087      640A 00
 2088               		.section	.progmem.data.__c.5319,"a",@progbits
 2091               	__c.5319:
 2092 0000 6D6B 5F77 		.string	"mk_wheel_time_to_max = %d\n"
 2092      6865 656C 
 2092      5F74 696D 
 2092      655F 746F 
 2092      5F6D 6178 
 2093               		.section	.progmem.data.__c.5316,"a",@progbits
 2096               	__c.5316:
 2097 0000 6D6B 5F77 		.string	"mk_wheel_max_speed = %d\n"
 2097      6865 656C 
 2097      5F6D 6178 
 2097      5F73 7065 
 2097      6564 203D 
 2098               		.section	.progmem.data.__c.5313,"a",@progbits
 2101               	__c.5313:
 2102 0000 6D6B 5F74 		.string	"mk_time_to_max = %d\n"
 2102      696D 655F 
 2102      746F 5F6D 
 2102      6178 203D 
 2102      2025 640A 
 2103               		.section	.progmem.data.__c.5310,"a",@progbits
 2106               	__c.5310:
 2107 0000 6D6B 5F6D 		.string	"mk_max_speed = %d\n"
 2107      6178 5F73 
 2107      7065 6564 
 2107      203D 2025 
 2107      640A 00
 2108               		.section	.progmem.data.__c.5307,"a",@progbits
 2111               	__c.5307:
 2112 0000 6D6B 5F69 		.string	"mk_interval = %d\n"
 2112      6E74 6572 
 2112      7661 6C20 
 2112      3D20 2564 
 2112      0A00 
 2113               		.section	.progmem.data.__c.5303,"a",@progbits
 2116               	__c.5303:
 2117 0000 6D6B 5F64 		.string	"mk_delay = %d\n"
 2117      656C 6179 
 2117      203D 2025 
 2117      640A 00
 2118               		.section	.progmem.data.__c.5296,"a",@progbits
 2121               	__c.5296:
 2122 0000 0A00      		.string	"\n"
 2123               		.section	.progmem.data.__c.5294,"a",@progbits
 2126               	__c.5294:
 2127 0000 2575 00   		.string	"%u"
 2128               		.section	.progmem.data.__c.5292,"a",@progbits
 2131               	__c.5292:
 2132 0000 363A 2077 		.string	"6: wheel_time_to_max: "
 2132      6865 656C 
 2132      5F74 696D 
 2132      655F 746F 
 2132      5F6D 6178 
 2133               		.section	.progmem.data.__c.5290,"a",@progbits
 2136               	__c.5290:
 2137 0000 0A00      		.string	"\n"
 2138               		.section	.progmem.data.__c.5288,"a",@progbits
 2141               	__c.5288:
 2142 0000 2575 00   		.string	"%u"
 2143               		.section	.progmem.data.__c.5286,"a",@progbits
 2146               	__c.5286:
 2147 0000 353A 2077 		.string	"5: wheel_max_speed: "
 2147      6865 656C 
 2147      5F6D 6178 
 2147      5F73 7065 
 2147      6564 3A20 
 2148               		.section	.progmem.data.__c.5284,"a",@progbits
 2151               	__c.5284:
 2152 0000 0A00      		.string	"\n"
 2153               		.section	.progmem.data.__c.5282,"a",@progbits
 2156               	__c.5282:
 2157 0000 2575 00   		.string	"%u"
 2158               		.section	.progmem.data.__c.5280,"a",@progbits
 2161               	__c.5280:
 2162 0000 343A 2074 		.string	"4: time_to_max: "
 2162      696D 655F 
 2162      746F 5F6D 
 2162      6178 3A20 
 2162      00
 2163               		.section	.progmem.data.__c.5278,"a",@progbits
 2166               	__c.5278:
 2167 0000 0A00      		.string	"\n"
 2168               		.section	.progmem.data.__c.5276,"a",@progbits
 2171               	__c.5276:
 2172 0000 2575 00   		.string	"%u"
 2173               		.section	.progmem.data.__c.5274,"a",@progbits
 2176               	__c.5274:
 2177 0000 333A 206D 		.string	"3: max_speed: "
 2177      6178 5F73 
 2177      7065 6564 
 2177      3A20 00
 2178               		.section	.progmem.data.__c.5272,"a",@progbits
 2181               	__c.5272:
 2182 0000 0A00      		.string	"\n"
 2183               		.section	.progmem.data.__c.5270,"a",@progbits
 2186               	__c.5270:
 2187 0000 2575 00   		.string	"%u"
 2188               		.section	.progmem.data.__c.5268,"a",@progbits
 2191               	__c.5268:
 2192 0000 323A 2069 		.string	"2: interval(ms): "
 2192      6E74 6572 
 2192      7661 6C28 
 2192      6D73 293A 
 2192      2000 
 2193               		.section	.progmem.data.__c.5266,"a",@progbits
 2196               	__c.5266:
 2197 0000 0A00      		.string	"\n"
 2198               		.section	.progmem.data.__c.5264,"a",@progbits
 2201               	__c.5264:
 2202 0000 2575 00   		.string	"%u"
 2203               		.section	.progmem.data.__c.5262,"a",@progbits
 2206               	__c.5262:
 2207 0000 313A 2064 		.string	"1: delay(*10ms): "
 2207      656C 6179 
 2207      282A 3130 
 2207      6D73 293A 
 2207      2000 
 2208               		.section	.progmem.data.__c.5260,"a",@progbits
 2211               	__c.5260:
 2212 0000 0A09 2D20 		.string	"\n\t- Values -\n"
 2212      5661 6C75 
 2212      6573 202D 
 2212      0A00 
 2213               		.section	.progmem.data.__c.5380,"a",@progbits
 2216               	__c.5380:
 2217 0000 4D3E 00   		.string	"M>"
 2218               		.section	.progmem.data.__c.5378,"a",@progbits
 2221               	__c.5378:
 2222 0000 4D25 643E 		.string	"M%d> "
 2222      2000 
 2223               		.section	.progmem.data.__c.5376,"a",@progbits
 2226               	__c.5376:
 2227 0000 3F00      		.string	"?"
 2228               		.section	.progmem.data.__c.5373,"a",@progbits
 2231               	__c.5373:
 2232 0000 7365 7420 		.string	"set default\n"
 2232      6465 6661 
 2232      756C 740A 
 2232      00
 2233               		.section	.progmem.data.__c.5359,"a",@progbits
 2236               	__c.5359:
 2237 0000 433E 2000 		.string	"C> "
 2238               		.section	.progmem.data.__c.5349,"a",@progbits
 2241               	__c.5349:
 2242 0000 7768 6572 		.string	"where delta: cursor=%d, wheel=%d\nSee http://en.wikipedia.org/wiki/Mouse_keys\n"
 2242      6520 6465 
 2242      6C74 613A 
 2242      2063 7572 
 2242      736F 723D 
 2243               		.section	.progmem.data.__c.5347,"a",@progbits
 2246               	__c.5347:
 2247 0000 0A09 2D20 		.string	"\n\t- Mousekey -\nESC/q:\tquit\n1:\tdelay(*10ms)\n2:\tinterval(ms)\n3:\tmax_speed\n4:\tti
 2247      4D6F 7573 
 2247      656B 6579 
 2247      202D 0A45 
 2247      5343 2F71 
 2248               		.section	.progmem.data.__c.5252,"a",@progbits
 2251               	__c.5252:
 2252 0000 3F00      		.string	"?"
 2253               		.section	.progmem.data.__c.5249,"a",@progbits
 2256               	__c.5249:
 2257 0000 4D3E 2000 		.string	"M> "
 2258               		.section	.progmem.data.__c.5254,"a",@progbits
 2261               	__c.5254:
 2262 0000 433E 2000 		.string	"C> "
 2263               		.section	.progmem.data.__c.5398,"a",@progbits
 2266               	__c.5398:
 2267 0000 4C25 640A 		.string	"L%d\n"
 2267      00
 2268               		.section	.progmem.data.__c.5238,"a",@progbits
 2271               	__c.5238:
 2272 0000 0A09 2D20 		.string	"\n\t- Console -\nESC/q:\tquit\nm:\tmousekey\n"
 2272      436F 6E73 
 2272      6F6C 6520 
 2272      2D0A 4553 
 2272      432F 713A 
 2273               		.section	.progmem.data.__c.5044,"a",@progbits
 2276               	__c.5044:
 2277 0000 0A09 2D20 		.string	"\n\t- Magic -\nd:\tdebug\nx:\tdebug matrix\nk:\tdebug keyboard\nm:\tdebug mouse\nv:\tvers
 2277      4D61 6769 
 2277      6320 2D0A 
 2277      643A 0964 
 2277      6562 7567 
 2278               		.section	.progmem.data.__c.5158,"a",@progbits
 2281               	__c.5158:
 2282 0000 0A00      		.string	"\n"
 2283               		.section	.progmem.data.__c.5156,"a",@progbits
 2286               	__c.5156:
 2287 0000 2575 00   		.string	"%u"
 2288               		.section	.progmem.data.__c.5154,"a",@progbits
 2291               	__c.5154:
 2292 0000 2E6C 6576 		.string	".level: "
 2292      656C 3A20 
 2292      00
 2293               		.section	.progmem.data.__c.5152,"a",@progbits
 2296               	__c.5152:
 2297 0000 0A00      		.string	"\n"
 2298               		.section	.progmem.data.__c.5150,"a",@progbits
 2301               	__c.5150:
 2302 0000 2575 00   		.string	"%u"
 2303               		.section	.progmem.data.__c.5148,"a",@progbits
 2306               	__c.5148:
 2307 0000 2E65 6E61 		.string	".enable: "
 2307      626C 653A 
 2307      2000 
 2308               		.section	.progmem.data.__c.5146,"a",@progbits
 2311               	__c.5146:
 2312 0000 0A00      		.string	"\n"
 2313               		.section	.progmem.data.__c.5144,"a",@progbits
 2316               	__c.5144:
 2317 0000 2530 3258 		.string	"%02X"
 2317      00
 2318               		.section	.progmem.data.__c.5142,"a",@progbits
 2321               	__c.5142:
 2322 0000 6261 636B 		.string	"backlight_config.raw: "
 2322      6C69 6768 
 2322      745F 636F 
 2322      6E66 6967 
 2322      2E72 6177 
 2323               		.section	.progmem.data.__c.5139,"a",@progbits
 2326               	__c.5139:
 2327 0000 0A00      		.string	"\n"
 2328               		.section	.progmem.data.__c.5137,"a",@progbits
 2331               	__c.5137:
 2332 0000 2575 00   		.string	"%u"
 2333               		.section	.progmem.data.__c.5135,"a",@progbits
 2336               	__c.5135:
 2337 0000 2E6E 6B72 		.string	".nkro: "
 2337      6F3A 2000 
 2338               		.section	.progmem.data.__c.5133,"a",@progbits
 2341               	__c.5133:
 2342 0000 0A00      		.string	"\n"
 2343               		.section	.progmem.data.__c.5131,"a",@progbits
 2346               	__c.5131:
 2347 0000 2575 00   		.string	"%u"
 2348               		.section	.progmem.data.__c.5129,"a",@progbits
 2351               	__c.5129:
 2352 0000 2E73 7761 		.string	".swap_backslash_backspace: "
 2352      705F 6261 
 2352      636B 736C 
 2352      6173 685F 
 2352      6261 636B 
 2353               		.section	.progmem.data.__c.5127,"a",@progbits
 2356               	__c.5127:
 2357 0000 0A00      		.string	"\n"
 2358               		.section	.progmem.data.__c.5125,"a",@progbits
 2361               	__c.5125:
 2362 0000 2575 00   		.string	"%u"
 2363               		.section	.progmem.data.__c.5123,"a",@progbits
 2366               	__c.5123:
 2367 0000 2E73 7761 		.string	".swap_grave_esc: "
 2367      705F 6772 
 2367      6176 655F 
 2367      6573 633A 
 2367      2000 
 2368               		.section	.progmem.data.__c.5121,"a",@progbits
 2371               	__c.5121:
 2372 0000 0A00      		.string	"\n"
 2373               		.section	.progmem.data.__c.5119,"a",@progbits
 2376               	__c.5119:
 2377 0000 2575 00   		.string	"%u"
 2378               		.section	.progmem.data.__c.5117,"a",@progbits
 2381               	__c.5117:
 2382 0000 2E6E 6F5F 		.string	".no_gui: "
 2382      6775 693A 
 2382      2000 
 2383               		.section	.progmem.data.__c.5115,"a",@progbits
 2386               	__c.5115:
 2387 0000 0A00      		.string	"\n"
 2388               		.section	.progmem.data.__c.5113,"a",@progbits
 2391               	__c.5113:
 2392 0000 2575 00   		.string	"%u"
 2393               		.section	.progmem.data.__c.5111,"a",@progbits
 2396               	__c.5111:
 2397 0000 2E73 7761 		.string	".swap_ralt_rgui: "
 2397      705F 7261 
 2397      6C74 5F72 
 2397      6775 693A 
 2397      2000 
 2398               		.section	.progmem.data.__c.5109,"a",@progbits
 2401               	__c.5109:
 2402 0000 0A00      		.string	"\n"
 2403               		.section	.progmem.data.__c.5107,"a",@progbits
 2406               	__c.5107:
 2407 0000 2575 00   		.string	"%u"
 2408               		.section	.progmem.data.__c.5105,"a",@progbits
 2411               	__c.5105:
 2412 0000 2E73 7761 		.string	".swap_lalt_lgui: "
 2412      705F 6C61 
 2412      6C74 5F6C 
 2412      6775 693A 
 2412      2000 
 2413               		.section	.progmem.data.__c.5103,"a",@progbits
 2416               	__c.5103:
 2417 0000 0A00      		.string	"\n"
 2418               		.section	.progmem.data.__c.5101,"a",@progbits
 2421               	__c.5101:
 2422 0000 2575 00   		.string	"%u"
 2423               		.section	.progmem.data.__c.5099,"a",@progbits
 2426               	__c.5099:
 2427 0000 2E63 6170 		.string	".capslock_to_control: "
 2427      736C 6F63 
 2427      6B5F 746F 
 2427      5F63 6F6E 
 2427      7472 6F6C 
 2428               		.section	.progmem.data.__c.5097,"a",@progbits
 2431               	__c.5097:
 2432 0000 0A00      		.string	"\n"
 2433               		.section	.progmem.data.__c.5095,"a",@progbits
 2436               	__c.5095:
 2437 0000 2575 00   		.string	"%u"
 2438               		.section	.progmem.data.__c.5093,"a",@progbits
 2441               	__c.5093:
 2442 0000 2E73 7761 		.string	".swap_control_capslock: "
 2442      705F 636F 
 2442      6E74 726F 
 2442      6C5F 6361 
 2442      7073 6C6F 
 2443               		.section	.progmem.data.__c.5091,"a",@progbits
 2446               	__c.5091:
 2447 0000 0A00      		.string	"\n"
 2448               		.section	.progmem.data.__c.5089,"a",@progbits
 2451               	__c.5089:
 2452 0000 2530 3258 		.string	"%02X"
 2452      00
 2453               		.section	.progmem.data.__c.5087,"a",@progbits
 2456               	__c.5087:
 2457 0000 6B65 796D 		.string	"keymap_config.raw: "
 2457      6170 5F63 
 2457      6F6E 6669 
 2457      672E 7261 
 2457      773A 2000 
 2458               		.section	.progmem.data.__c.5084,"a",@progbits
 2461               	__c.5084:
 2462 0000 0A00      		.string	"\n"
 2463               		.section	.progmem.data.__c.5082,"a",@progbits
 2466               	__c.5082:
 2467 0000 2575 00   		.string	"%u"
 2468               		.section	.progmem.data.__c.5080,"a",@progbits
 2471               	__c.5080:
 2472 0000 2E6D 6F75 		.string	".mouse: "
 2472      7365 3A20 
 2472      00
 2473               		.section	.progmem.data.__c.5078,"a",@progbits
 2476               	__c.5078:
 2477 0000 0A00      		.string	"\n"
 2478               		.section	.progmem.data.__c.5076,"a",@progbits
 2481               	__c.5076:
 2482 0000 2575 00   		.string	"%u"
 2483               		.section	.progmem.data.__c.5074,"a",@progbits
 2486               	__c.5074:
 2487 0000 2E6B 6579 		.string	".keyboard: "
 2487      626F 6172 
 2487      643A 2000 
 2488               		.section	.progmem.data.__c.5072,"a",@progbits
 2491               	__c.5072:
 2492 0000 0A00      		.string	"\n"
 2493               		.section	.progmem.data.__c.5070,"a",@progbits
 2496               	__c.5070:
 2497 0000 2575 00   		.string	"%u"
 2498               		.section	.progmem.data.__c.5068,"a",@progbits
 2501               	__c.5068:
 2502 0000 2E6D 6174 		.string	".matrix: "
 2502      7269 783A 
 2502      2000 
 2503               		.section	.progmem.data.__c.5066,"a",@progbits
 2506               	__c.5066:
 2507 0000 0A00      		.string	"\n"
 2508               		.section	.progmem.data.__c.5064,"a",@progbits
 2511               	__c.5064:
 2512 0000 2575 00   		.string	"%u"
 2513               		.section	.progmem.data.__c.5062,"a",@progbits
 2516               	__c.5062:
 2517 0000 2E65 6E61 		.string	".enable: "
 2517      626C 653A 
 2517      2000 
 2518               		.section	.progmem.data.__c.5060,"a",@progbits
 2521               	__c.5060:
 2522 0000 0A00      		.string	"\n"
 2523               		.section	.progmem.data.__c.5058,"a",@progbits
 2526               	__c.5058:
 2527 0000 2530 3258 		.string	"%02X"
 2527      00
 2528               		.section	.progmem.data.__c.5056,"a",@progbits
 2531               	__c.5056:
 2532 0000 6465 6275 		.string	"debug_config.raw: "
 2532      675F 636F 
 2532      6E66 6967 
 2532      2E72 6177 
 2532      3A20 00
 2533               		.section	.progmem.data.__c.5053,"a",@progbits
 2536               	__c.5053:
 2537 0000 0A00      		.string	"\n"
 2538               		.section	.progmem.data.__c.5051,"a",@progbits
 2541               	__c.5051:
 2542 0000 2575 00   		.string	"%u"
 2543               		.section	.progmem.data.__c.5049,"a",@progbits
 2546               	__c.5049:
 2547 0000 6465 6661 		.string	"default_layer: "
 2547      756C 745F 
 2547      6C61 7965 
 2547      723A 2000 
 2548               		.section	.progmem.data.__c.5233,"a",@progbits
 2551               	__c.5233:
 2552 0000 3F00      		.string	"?"
 2553               		.section	.progmem.data.__c.5224,"a",@progbits
 2556               	__c.5224:
 2557 0000 4E4B 524F 		.string	"NKRO: off\n"
 2557      3A20 6F66 
 2557      660A 00
 2558               		.section	.progmem.data.__c.5222,"a",@progbits
 2561               	__c.5222:
 2562 0000 4E4B 524F 		.string	"NKRO: on\n"
 2562      3A20 6F6E 
 2562      0A00 
 2563               		.section	.progmem.data.__c.5219,"a",@progbits
 2566               	__c.5219:
 2567 0000 7469 6D65 		.string	"timer_read32(): %04lX\n"
 2567      725F 7265 
 2567      6164 3332 
 2567      2829 3A20 
 2567      2530 346C 
 2568               		.section	.progmem.data.__c.5217,"a",@progbits
 2571               	__c.5217:
 2572 0000 6B65 7962 		.string	"keyboard_nkro: %X\n"
 2572      6F61 7264 
 2572      5F6E 6B72 
 2572      6F3A 2025 
 2572      580A 00
 2573               		.section	.progmem.data.__c.5215,"a",@progbits
 2576               	__c.5215:
 2577 0000 6B65 7962 		.string	"keyboard_idle: %X\n"
 2577      6F61 7264 
 2577      5F69 646C 
 2577      653A 2025 
 2577      580A 00
 2578               		.section	.progmem.data.__c.5213,"a",@progbits
 2581               	__c.5213:
 2582 0000 6B65 7962 		.string	"keyboard_protocol: %X\n"
 2582      6F61 7264 
 2582      5F70 726F 
 2582      746F 636F 
 2582      6C3A 2025 
 2583               		.section	.progmem.data.__c.5211,"a",@progbits
 2586               	__c.5211:
 2587 0000 686F 7374 		.string	"host_keyboard_leds(): %X\n"
 2587      5F6B 6579 
 2587      626F 6172 
 2587      645F 6C65 
 2587      6473 2829 
 2588               		.section	.progmem.data.__c.5209,"a",@progbits
 2591               	__c.5209:
 2592 0000 0A09 2D20 		.string	"\n\t- Status -\n"
 2592      5374 6174 
 2592      7573 202D 
 2592      0A00 
 2593               		.section	.progmem.data.__c.5206,"a",@progbits
 2596               	__c.5206:
 2597 0000 4743 433A 		.string	"GCC: 5.4.0 AVR-LIBC: 2.0.0 AVR_ARCH: avr5\n"
 2597      2035 2E34 
 2597      2E30 2041 
 2597      5652 2D4C 
 2597      4942 433A 
 2598               		.section	.progmem.data.__c.5204,"a",@progbits
 2601               	__c.5204:
 2602 0000 4F50 5449 		.string	"OPTIONS: LUFA BOOTMAGIC MOUSEKEY EXTRAKEY CONSOLE COMMAND NKRO 4096\n"
 2602      4F4E 533A 
 2602      204C 5546 
 2602      4120 424F 
 2602      4F54 4D41 
 2603               		.section	.progmem.data.__c.5202,"a",@progbits
 2606               	__c.5202:
 2607 0000 4255 494C 		.string	"BUILD: 25e8d72-dirty (12:49:21 Mar  8 2022)\n"
 2607      443A 2032 
 2607      3565 3864 
 2607      3732 2D64 
 2607      6972 7479 
 2608               		.section	.progmem.data.__c.5200,"a",@progbits
 2611               	__c.5200:
 2612 0000 5649 443A 		.string	"VID: 0xFEAE(ai03) PID: 0x8846(Roadkit) VER: 0x0001\n"
 2612      2030 7846 
 2612      4541 4528 
 2612      6169 3033 
 2612      2920 5049 
 2613               		.section	.progmem.data.__c.5198,"a",@progbits
 2616               	__c.5198:
 2617 0000 4445 5343 		.string	"DESC: keyboard firmware for Roadkit\n"
 2617      3A20 6B65 
 2617      7962 6F61 
 2617      7264 2066 
 2617      6972 6D77 
 2618               		.section	.progmem.data.__c.5196,"a",@progbits
 2621               	__c.5196:
 2622 0000 0A09 2D20 		.string	"\n\t- Version -\n"
 2622      5665 7273 
 2622      696F 6E20 
 2622      2D0A 00
 2623               		.section	.progmem.data.__c.5193,"a",@progbits
 2626               	__c.5193:
 2627 0000 0A6D 6F75 		.string	"\nmouse: off\n"
 2627      7365 3A20 
 2627      6F66 660A 
 2627      00
 2628               		.section	.progmem.data.__c.5191,"a",@progbits
 2631               	__c.5191:
 2632 0000 0A6D 6F75 		.string	"\nmouse: on\n"
 2632      7365 3A20 
 2632      6F6E 0A00 
 2633               		.section	.progmem.data.__c.5188,"a",@progbits
 2636               	__c.5188:
 2637 0000 0A6B 6579 		.string	"\nkeyboard: off\n"
 2637      626F 6172 
 2637      643A 206F 
 2637      6666 0A00 
 2638               		.section	.progmem.data.__c.5186,"a",@progbits
 2641               	__c.5186:
 2642 0000 0A6B 6579 		.string	"\nkeyboard: on\n"
 2642      626F 6172 
 2642      643A 206F 
 2642      6E0A 00
 2643               		.section	.progmem.data.__c.5183,"a",@progbits
 2646               	__c.5183:
 2647 0000 0A6D 6174 		.string	"\nmatrix: off\n"
 2647      7269 783A 
 2647      206F 6666 
 2647      0A00 
 2648               		.section	.progmem.data.__c.5181,"a",@progbits
 2651               	__c.5181:
 2652 0000 0A6D 6174 		.string	"\nmatrix: on\n"
 2652      7269 783A 
 2652      206F 6E0A 
 2652      00
 2653               		.section	.progmem.data.__c.5178,"a",@progbits
 2656               	__c.5178:
 2657 0000 0A64 6562 		.string	"\ndebug: on\n"
 2657      7567 3A20 
 2657      6F6E 0A00 
 2658               		.section	.progmem.data.__c.5176,"a",@progbits
 2661               	__c.5176:
 2662 0000 0A64 6562 		.string	"\ndebug: off\n"
 2662      7567 3A20 
 2662      6F66 660A 
 2662      00
 2663               		.section	.progmem.data.__c.5173,"a",@progbits
 2666               	__c.5173:
 2667 0000 0A0A 626F 		.string	"\n\nbootloader... "
 2667      6F74 6C6F 
 2667      6164 6572 
 2667      2E2E 2E20 
 2667      00
 2668               		.section	.progmem.data.__c.5170,"a",@progbits
 2671               	__c.5170:
 2672 0000 433E 2000 		.string	"C> "
 2673               		.section	.progmem.data.__c.5164,"a",@progbits
 2676               	__c.5164:
 2677 0000 6565 636F 		.string	"eeconfig:\n"
 2677      6E66 6967 
 2677      3A0A 00
 2678               		.section	.bss.mousekey_param,"aw",@nobits
 2681               	mousekey_param:
 2682 0000 00        		.zero	1
 2683               	.global	command_state
 2684               		.section	.bss.command_state,"aw",@nobits
 2687               	command_state:
 2688 0000 00        		.zero	1
 2689               		.text
 2690               	.Letext0:
 2691               		.file 3 "/usr/lib/avr/include/stdint.h"
 2692               		.file 4 "../../tmk_core/common/report.h"
 2693               		.file 5 "../../tmk_core/common/keymap.h"
 2694               		.file 6 "../../tmk_core/common/debug.h"
 2695               		.file 7 "../../tmk_core/common/command.h"
 2696               		.file 8 "../../tmk_core/common/backlight.h"
 2697               		.file 9 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 2698               		.file 10 "../../tmk_core/common/host.h"
 2699               		.file 11 "../../tmk_core/common/action_util.h"
 2700               		.file 12 "../../tmk_core/common/mousekey.h"
 2701               		.file 13 "../../tmk_core/common/avr/xprintf.h"
 2702               		.file 14 "../../tmk_core/common/action_layer.h"
 2703               		.file 15 "../../tmk_core/common/action.h"
 2704               		.file 16 "../../tmk_core/common/keycode.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 command.c
     /tmp/ccYom99g.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccYom99g.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccYom99g.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccYom99g.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccYom99g.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccYom99g.s:12     .text.mousekey_console_help:0000000000000000 mousekey_console_help
     /tmp/ccYom99g.s:2246   .progmem.data.__c.5347:0000000000000000 __c.5347
     /tmp/ccYom99g.s:2241   .progmem.data.__c.5349:0000000000000000 __c.5349
     /tmp/ccYom99g.s:66     .text.mousekey_param_inc:0000000000000000 mousekey_param_inc
     /tmp/ccYom99g.s:2116   .progmem.data.__c.5303:0000000000000000 __c.5303
     /tmp/ccYom99g.s:2111   .progmem.data.__c.5307:0000000000000000 __c.5307
     /tmp/ccYom99g.s:2106   .progmem.data.__c.5310:0000000000000000 __c.5310
     /tmp/ccYom99g.s:2101   .progmem.data.__c.5313:0000000000000000 __c.5313
     /tmp/ccYom99g.s:2096   .progmem.data.__c.5316:0000000000000000 __c.5316
     /tmp/ccYom99g.s:2091   .progmem.data.__c.5319:0000000000000000 __c.5319
     /tmp/ccYom99g.s:339    .text.mousekey_param_dec:0000000000000000 mousekey_param_dec
     /tmp/ccYom99g.s:2086   .progmem.data.__c.5326:0000000000000000 __c.5326
     /tmp/ccYom99g.s:2081   .progmem.data.__c.5330:0000000000000000 __c.5330
     /tmp/ccYom99g.s:2076   .progmem.data.__c.5333:0000000000000000 __c.5333
     /tmp/ccYom99g.s:2071   .progmem.data.__c.5336:0000000000000000 __c.5336
     /tmp/ccYom99g.s:2066   .progmem.data.__c.5339:0000000000000000 __c.5339
     /tmp/ccYom99g.s:2061   .progmem.data.__c.5342:0000000000000000 __c.5342
     /tmp/ccYom99g.s:557    .text.switch_default_layer:0000000000000000 switch_default_layer
     /tmp/ccYom99g.s:2266   .progmem.data.__c.5398:0000000000000000 __c.5398
     /tmp/ccYom99g.s:626    .text.command_common:0000000000000000 command_common
     /tmp/ccYom99g.s:2271   .progmem.data.__c.5238:0000000000000000 __c.5238
     /tmp/ccYom99g.s:2671   .progmem.data.__c.5170:0000000000000000 __c.5170
     /tmp/ccYom99g.s:2687   .bss.command_state:0000000000000000 command_state
     /tmp/ccYom99g.s:2621   .progmem.data.__c.5196:0000000000000000 __c.5196
     /tmp/ccYom99g.s:2616   .progmem.data.__c.5198:0000000000000000 __c.5198
     /tmp/ccYom99g.s:2611   .progmem.data.__c.5200:0000000000000000 __c.5200
     /tmp/ccYom99g.s:2606   .progmem.data.__c.5202:0000000000000000 __c.5202
     /tmp/ccYom99g.s:2601   .progmem.data.__c.5204:0000000000000000 __c.5204
     /tmp/ccYom99g.s:2596   .progmem.data.__c.5206:0000000000000000 __c.5206
     /tmp/ccYom99g.s:2666   .progmem.data.__c.5173:0000000000000000 __c.5173
     /tmp/ccYom99g.s:2676   .progmem.data.__c.5164:0000000000000000 __c.5164
     /tmp/ccYom99g.s:2546   .progmem.data.__c.5049:0000000000000000 __c.5049
     /tmp/ccYom99g.s:2541   .progmem.data.__c.5051:0000000000000000 __c.5051
     /tmp/ccYom99g.s:2536   .progmem.data.__c.5053:0000000000000000 __c.5053
     /tmp/ccYom99g.s:2531   .progmem.data.__c.5056:0000000000000000 __c.5056
     /tmp/ccYom99g.s:2526   .progmem.data.__c.5058:0000000000000000 __c.5058
     /tmp/ccYom99g.s:2521   .progmem.data.__c.5060:0000000000000000 __c.5060
     /tmp/ccYom99g.s:2516   .progmem.data.__c.5062:0000000000000000 __c.5062
     /tmp/ccYom99g.s:2511   .progmem.data.__c.5064:0000000000000000 __c.5064
     /tmp/ccYom99g.s:2506   .progmem.data.__c.5066:0000000000000000 __c.5066
     /tmp/ccYom99g.s:2501   .progmem.data.__c.5068:0000000000000000 __c.5068
     /tmp/ccYom99g.s:2496   .progmem.data.__c.5070:0000000000000000 __c.5070
     /tmp/ccYom99g.s:2491   .progmem.data.__c.5072:0000000000000000 __c.5072
     /tmp/ccYom99g.s:2486   .progmem.data.__c.5074:0000000000000000 __c.5074
     /tmp/ccYom99g.s:2481   .progmem.data.__c.5076:0000000000000000 __c.5076
     /tmp/ccYom99g.s:2476   .progmem.data.__c.5078:0000000000000000 __c.5078
     /tmp/ccYom99g.s:2471   .progmem.data.__c.5080:0000000000000000 __c.5080
     /tmp/ccYom99g.s:2466   .progmem.data.__c.5082:0000000000000000 __c.5082
     /tmp/ccYom99g.s:2461   .progmem.data.__c.5084:0000000000000000 __c.5084
     /tmp/ccYom99g.s:2456   .progmem.data.__c.5087:0000000000000000 __c.5087
     /tmp/ccYom99g.s:2451   .progmem.data.__c.5089:0000000000000000 __c.5089
     /tmp/ccYom99g.s:2446   .progmem.data.__c.5091:0000000000000000 __c.5091
     /tmp/ccYom99g.s:2441   .progmem.data.__c.5093:0000000000000000 __c.5093
     /tmp/ccYom99g.s:2436   .progmem.data.__c.5095:0000000000000000 __c.5095
     /tmp/ccYom99g.s:2431   .progmem.data.__c.5097:0000000000000000 __c.5097
     /tmp/ccYom99g.s:2426   .progmem.data.__c.5099:0000000000000000 __c.5099
     /tmp/ccYom99g.s:2421   .progmem.data.__c.5101:0000000000000000 __c.5101
     /tmp/ccYom99g.s:2416   .progmem.data.__c.5103:0000000000000000 __c.5103
     /tmp/ccYom99g.s:2411   .progmem.data.__c.5105:0000000000000000 __c.5105
     /tmp/ccYom99g.s:2406   .progmem.data.__c.5107:0000000000000000 __c.5107
     /tmp/ccYom99g.s:2401   .progmem.data.__c.5109:0000000000000000 __c.5109
     /tmp/ccYom99g.s:2396   .progmem.data.__c.5111:0000000000000000 __c.5111
     /tmp/ccYom99g.s:2391   .progmem.data.__c.5113:0000000000000000 __c.5113
     /tmp/ccYom99g.s:2386   .progmem.data.__c.5115:0000000000000000 __c.5115
     /tmp/ccYom99g.s:2381   .progmem.data.__c.5117:0000000000000000 __c.5117
     /tmp/ccYom99g.s:2376   .progmem.data.__c.5119:0000000000000000 __c.5119
     /tmp/ccYom99g.s:2371   .progmem.data.__c.5121:0000000000000000 __c.5121
     /tmp/ccYom99g.s:2366   .progmem.data.__c.5123:0000000000000000 __c.5123
     /tmp/ccYom99g.s:2361   .progmem.data.__c.5125:0000000000000000 __c.5125
     /tmp/ccYom99g.s:2356   .progmem.data.__c.5127:0000000000000000 __c.5127
     /tmp/ccYom99g.s:2351   .progmem.data.__c.5129:0000000000000000 __c.5129
     /tmp/ccYom99g.s:2346   .progmem.data.__c.5131:0000000000000000 __c.5131
     /tmp/ccYom99g.s:2341   .progmem.data.__c.5133:0000000000000000 __c.5133
     /tmp/ccYom99g.s:2336   .progmem.data.__c.5135:0000000000000000 __c.5135
     /tmp/ccYom99g.s:2331   .progmem.data.__c.5137:0000000000000000 __c.5137
     /tmp/ccYom99g.s:2326   .progmem.data.__c.5139:0000000000000000 __c.5139
     /tmp/ccYom99g.s:2321   .progmem.data.__c.5142:0000000000000000 __c.5142
     /tmp/ccYom99g.s:2316   .progmem.data.__c.5144:0000000000000000 __c.5144
     /tmp/ccYom99g.s:2311   .progmem.data.__c.5146:0000000000000000 __c.5146
     /tmp/ccYom99g.s:2306   .progmem.data.__c.5148:0000000000000000 __c.5148
     /tmp/ccYom99g.s:2301   .progmem.data.__c.5150:0000000000000000 __c.5150
     /tmp/ccYom99g.s:2296   .progmem.data.__c.5152:0000000000000000 __c.5152
     /tmp/ccYom99g.s:2291   .progmem.data.__c.5154:0000000000000000 __c.5154
     /tmp/ccYom99g.s:2286   .progmem.data.__c.5156:0000000000000000 __c.5156
     /tmp/ccYom99g.s:2281   .progmem.data.__c.5158:0000000000000000 __c.5158
     /tmp/ccYom99g.s:2276   .progmem.data.__c.5044:0000000000000000 __c.5044
     /tmp/ccYom99g.s:2661   .progmem.data.__c.5176:0000000000000000 __c.5176
     /tmp/ccYom99g.s:2656   .progmem.data.__c.5178:0000000000000000 __c.5178
     /tmp/ccYom99g.s:2651   .progmem.data.__c.5181:0000000000000000 __c.5181
     /tmp/ccYom99g.s:2646   .progmem.data.__c.5183:0000000000000000 __c.5183
     /tmp/ccYom99g.s:2641   .progmem.data.__c.5186:0000000000000000 __c.5186
     /tmp/ccYom99g.s:2636   .progmem.data.__c.5188:0000000000000000 __c.5188
     /tmp/ccYom99g.s:2631   .progmem.data.__c.5191:0000000000000000 __c.5191
     /tmp/ccYom99g.s:2626   .progmem.data.__c.5193:0000000000000000 __c.5193
     /tmp/ccYom99g.s:2591   .progmem.data.__c.5209:0000000000000000 __c.5209
     /tmp/ccYom99g.s:2586   .progmem.data.__c.5211:0000000000000000 __c.5211
     /tmp/ccYom99g.s:2581   .progmem.data.__c.5213:0000000000000000 __c.5213
     /tmp/ccYom99g.s:2576   .progmem.data.__c.5215:0000000000000000 __c.5215
     /tmp/ccYom99g.s:2571   .progmem.data.__c.5217:0000000000000000 __c.5217
     /tmp/ccYom99g.s:2566   .progmem.data.__c.5219:0000000000000000 __c.5219
     /tmp/ccYom99g.s:2561   .progmem.data.__c.5222:0000000000000000 __c.5222
     /tmp/ccYom99g.s:2556   .progmem.data.__c.5224:0000000000000000 __c.5224
     /tmp/ccYom99g.s:2551   .progmem.data.__c.5233:0000000000000000 __c.5233
     /tmp/ccYom99g.s:1550   .text.command_console_extra:0000000000000000 command_console_extra
     /tmp/ccYom99g.s:1550   .text.command_console_extra:0000000000000000 command_console_extra.localalias.0
     /tmp/ccYom99g.s:1570   .text.command_extra:0000000000000000 command_extra
     /tmp/ccYom99g.s:1584   .text.command_proc:0000000000000000 command_proc
     /tmp/ccYom99g.s:2256   .progmem.data.__c.5249:0000000000000000 __c.5249
     /tmp/ccYom99g.s:2261   .progmem.data.__c.5254:0000000000000000 __c.5254
     /tmp/ccYom99g.s:2251   .progmem.data.__c.5252:0000000000000000 __c.5252
     /tmp/ccYom99g.s:2231   .progmem.data.__c.5373:0000000000000000 __c.5373
     /tmp/ccYom99g.s:2681   .bss.mousekey_param:0000000000000000 mousekey_param
     /tmp/ccYom99g.s:2236   .progmem.data.__c.5359:0000000000000000 __c.5359
     /tmp/ccYom99g.s:2211   .progmem.data.__c.5260:0000000000000000 __c.5260
     /tmp/ccYom99g.s:2206   .progmem.data.__c.5262:0000000000000000 __c.5262
     /tmp/ccYom99g.s:2201   .progmem.data.__c.5264:0000000000000000 __c.5264
     /tmp/ccYom99g.s:2196   .progmem.data.__c.5266:0000000000000000 __c.5266
     /tmp/ccYom99g.s:2191   .progmem.data.__c.5268:0000000000000000 __c.5268
     /tmp/ccYom99g.s:2186   .progmem.data.__c.5270:0000000000000000 __c.5270
     /tmp/ccYom99g.s:2181   .progmem.data.__c.5272:0000000000000000 __c.5272
     /tmp/ccYom99g.s:2176   .progmem.data.__c.5274:0000000000000000 __c.5274
     /tmp/ccYom99g.s:2171   .progmem.data.__c.5276:0000000000000000 __c.5276
     /tmp/ccYom99g.s:2166   .progmem.data.__c.5278:0000000000000000 __c.5278
     /tmp/ccYom99g.s:2161   .progmem.data.__c.5280:0000000000000000 __c.5280
     /tmp/ccYom99g.s:2156   .progmem.data.__c.5282:0000000000000000 __c.5282
     /tmp/ccYom99g.s:2151   .progmem.data.__c.5284:0000000000000000 __c.5284
     /tmp/ccYom99g.s:2146   .progmem.data.__c.5286:0000000000000000 __c.5286
     /tmp/ccYom99g.s:2141   .progmem.data.__c.5288:0000000000000000 __c.5288
     /tmp/ccYom99g.s:2136   .progmem.data.__c.5290:0000000000000000 __c.5290
     /tmp/ccYom99g.s:2131   .progmem.data.__c.5292:0000000000000000 __c.5292
     /tmp/ccYom99g.s:2126   .progmem.data.__c.5294:0000000000000000 __c.5294
     /tmp/ccYom99g.s:2121   .progmem.data.__c.5296:0000000000000000 __c.5296
     /tmp/ccYom99g.s:2047   .rodata.CSWTCH.43:0000000000000000 CSWTCH.43
     /tmp/ccYom99g.s:2226   .progmem.data.__c.5376:0000000000000000 __c.5376
     /tmp/ccYom99g.s:2221   .progmem.data.__c.5378:0000000000000000 __c.5378
     /tmp/ccYom99g.s:2216   .progmem.data.__c.5380:0000000000000000 __c.5380

UNDEFINED SYMBOLS
xputs
__xprintf
mk_delay
mk_interval
mk_max_speed
mk_time_to_max
mk_wheel_max_speed
mk_wheel_time_to_max
default_layer_set
clear_keyboard
debug_config
bootloader_jump
eeconfig_read_default_layer
eeconfig_read_debug
eeconfig_read_keymap
eeconfig_read_backlight
host_keyboard_leds
keyboard_protocol
keyboard_idle
keyboard_nkro
timer_read32
keyboard_report
__do_copy_data
__do_clear_bss
