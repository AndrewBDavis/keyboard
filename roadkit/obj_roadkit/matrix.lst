   1               		.file	"matrix.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.unselect_rows,"ax",@progbits
  12               	unselect_rows:
  13               	.LFB18:
  14               		.file 1 "matrix.c"
   1:matrix.c      **** /*
   2:matrix.c      **** Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:matrix.c      **** 
   4:matrix.c      **** This program is free software: you can redistribute it and/or modify
   5:matrix.c      **** it under the terms of the GNU General Public License as published by
   6:matrix.c      **** the Free Software Foundation, either version 2 of the License, or
   7:matrix.c      **** (at your option) any later version.
   8:matrix.c      **** 
   9:matrix.c      **** This program is distributed in the hope that it will be useful,
  10:matrix.c      **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:matrix.c      **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:matrix.c      **** GNU General Public License for more details.
  13:matrix.c      **** 
  14:matrix.c      **** You should have received a copy of the GNU General Public License
  15:matrix.c      **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:matrix.c      **** */
  17:matrix.c      **** 
  18:matrix.c      **** /*
  19:matrix.c      ****  * scan matrix
  20:matrix.c      ****  */
  21:matrix.c      **** #include <stdint.h>
  22:matrix.c      **** #include <stdbool.h>
  23:matrix.c      **** #include <avr/io.h>
  24:matrix.c      **** #include <util/delay.h>
  25:matrix.c      **** #include "print.h"
  26:matrix.c      **** #include "debug.h"
  27:matrix.c      **** #include "util.h"
  28:matrix.c      **** #include "matrix.h"
  29:matrix.c      **** 
  30:matrix.c      **** 
  31:matrix.c      **** #ifndef DEBOUNCE
  32:matrix.c      **** #   define DEBOUNCE	5
  33:matrix.c      **** #endif
  34:matrix.c      **** static uint8_t debouncing = DEBOUNCE;
  35:matrix.c      **** 
  36:matrix.c      **** /* matrix state(1:on, 0:off) */
  37:matrix.c      **** static matrix_row_t matrix[MATRIX_ROWS];
  38:matrix.c      **** static matrix_row_t matrix_debouncing[MATRIX_ROWS];
  39:matrix.c      **** 
  40:matrix.c      **** static matrix_row_t read_cols(void);
  41:matrix.c      **** static void init_cols(void);
  42:matrix.c      **** static void unselect_rows(void);
  43:matrix.c      **** static void select_row(uint8_t row);
  44:matrix.c      **** 
  45:matrix.c      **** 
  46:matrix.c      **** inline
  47:matrix.c      **** uint8_t matrix_rows(void)
  48:matrix.c      **** {
  49:matrix.c      ****     return MATRIX_ROWS;
  50:matrix.c      **** }
  51:matrix.c      **** 
  52:matrix.c      **** inline
  53:matrix.c      **** uint8_t matrix_cols(void)
  54:matrix.c      **** {
  55:matrix.c      ****     return MATRIX_COLS;
  56:matrix.c      **** }
  57:matrix.c      **** 
  58:matrix.c      **** void matrix_init(void)
  59:matrix.c      **** {
  60:matrix.c      ****     // To use PORTF disable JTAG with writing JTD bit twice within four cycles.
  61:matrix.c      ****     MCUCR |= (1<<JTD);
  62:matrix.c      ****     MCUCR |= (1<<JTD);
  63:matrix.c      **** 
  64:matrix.c      ****     // initialize row and col
  65:matrix.c      ****     unselect_rows();
  66:matrix.c      ****     init_cols();
  67:matrix.c      **** 
  68:matrix.c      ****     // initialize matrix state: all keys off
  69:matrix.c      ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
  70:matrix.c      ****         matrix[i] = 0;
  71:matrix.c      ****         matrix_debouncing[i] = 0;
  72:matrix.c      ****     }
  73:matrix.c      **** }
  74:matrix.c      **** 
  75:matrix.c      **** uint8_t matrix_scan(void)
  76:matrix.c      **** {
  77:matrix.c      ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
  78:matrix.c      ****         select_row(i);
  79:matrix.c      ****         _delay_us(30);  // without this wait read unstable value.
  80:matrix.c      ****         matrix_row_t cols = read_cols();
  81:matrix.c      ****         if (matrix_debouncing[i] != cols) {
  82:matrix.c      ****             matrix_debouncing[i] = cols;
  83:matrix.c      ****             if (debouncing) {
  84:matrix.c      ****                 debug("bounce!: "); debug_hex(debouncing); debug("\n");
  85:matrix.c      ****             }
  86:matrix.c      ****             debouncing = DEBOUNCE;
  87:matrix.c      ****         }
  88:matrix.c      ****         unselect_rows();
  89:matrix.c      ****     }
  90:matrix.c      **** 
  91:matrix.c      ****     if (debouncing) {
  92:matrix.c      ****         if (--debouncing) {
  93:matrix.c      ****             _delay_ms(1);
  94:matrix.c      ****         } else {
  95:matrix.c      ****             for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
  96:matrix.c      ****                 matrix[i] = matrix_debouncing[i];
  97:matrix.c      ****             }
  98:matrix.c      ****         }
  99:matrix.c      ****     }
 100:matrix.c      **** 
 101:matrix.c      ****     return 1;
 102:matrix.c      **** }
 103:matrix.c      **** 
 104:matrix.c      **** bool matrix_is_modified(void)
 105:matrix.c      **** {
 106:matrix.c      ****     if (debouncing) return false;
 107:matrix.c      ****     return true;
 108:matrix.c      **** }
 109:matrix.c      **** 
 110:matrix.c      **** inline
 111:matrix.c      **** bool matrix_is_on(uint8_t row, uint8_t col)
 112:matrix.c      **** {
 113:matrix.c      ****     return (matrix[row] & ((matrix_row_t)1<<col));
 114:matrix.c      **** }
 115:matrix.c      **** 
 116:matrix.c      **** inline
 117:matrix.c      **** matrix_row_t matrix_get_row(uint8_t row)
 118:matrix.c      **** {
 119:matrix.c      ****     return matrix[row];
 120:matrix.c      **** }
 121:matrix.c      **** 
 122:matrix.c      **** void matrix_print(void)
 123:matrix.c      **** {
 124:matrix.c      ****     print("\nr/c 0123456789ABCDEF\n");
 125:matrix.c      ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 126:matrix.c      ****         phex(row); print(": ");
 127:matrix.c      ****         pbin_reverse16(matrix_get_row(row));
 128:matrix.c      ****         print("\n");
 129:matrix.c      ****     }
 130:matrix.c      **** }
 131:matrix.c      **** 
 132:matrix.c      **** uint8_t matrix_key_count(void)
 133:matrix.c      **** {
 134:matrix.c      ****     uint8_t count = 0;
 135:matrix.c      ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 136:matrix.c      ****         count += bitpop16(matrix[i]);
 137:matrix.c      ****     }
 138:matrix.c      ****     return count;
 139:matrix.c      **** }
 140:matrix.c      **** 
 141:matrix.c      **** /* Column pin configuration
 142:matrix.c      ****  * col: 0   1   2   3
 143:matrix.c      ****  * pin: F1  F4  D6  D4
 144:matrix.c      **** */
 145:matrix.c      **** 
 146:matrix.c      **** static void  init_cols(void) 
 147:matrix.c      **** {
 148:matrix.c      ****      // Input with pull-up(DDR:0, PORT:1)
 149:matrix.c      ****     DDRF  &= ~0b00010010;
 150:matrix.c      ****     PORTF |=  0b00010010;
 151:matrix.c      ****     DDRD  &= ~0b01010000;
 152:matrix.c      ****     PORTD |=  0b01010000;
 153:matrix.c      **** }
 154:matrix.c      **** 
 155:matrix.c      ****  static matrix_row_t read_cols(void)
 156:matrix.c      ****  {
 157:matrix.c      ****      return (PINF&(1<<1) ? 0 : (1<<0)) |
 158:matrix.c      ****             (PINF&(1<<4) ? 0 : (1<<1)) |
 159:matrix.c      ****             (PIND&(1<<6) ? 0 : (1<<2)) |
 160:matrix.c      ****             (PIND&(1<<4) ? 0 : (1<<3));
 161:matrix.c      ****  }
 162:matrix.c      **** 
 163:matrix.c      **** /* Row pin configuration
 164:matrix.c      ****  * row: 0   1   2   3
 165:matrix.c      ****  * pin: F0  F5  D7  B4
 166:matrix.c      ****  */
 167:matrix.c      ****  static void unselect_rows(void)
 168:matrix.c      ****  {
  15               		.loc 1 168 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 169:matrix.c      ****      // Hi-Z(DDR:0, PORT:0) to unselect
 170:matrix.c      ****      DDRF  &= ~0b00100001;
  21               		.loc 1 170 0
  22 0000 80B3      		in r24,0x10
  23 0002 8E7D      		andi r24,lo8(-34)
  24 0004 80BB      		out 0x10,r24
 171:matrix.c      ****      PORTF &= ~0b00100001;
  25               		.loc 1 171 0
  26 0006 81B3      		in r24,0x11
  27 0008 8E7D      		andi r24,lo8(-34)
  28 000a 81BB      		out 0x11,r24
 172:matrix.c      ****      DDRD  &= ~0b10000000;
  29               		.loc 1 172 0
  30 000c 5798      		cbi 0xa,7
 173:matrix.c      ****      PORTD &= ~0b10000000;
  31               		.loc 1 173 0
  32 000e 5F98      		cbi 0xb,7
 174:matrix.c      **** 	DDRB  &= ~0b00010000;
  33               		.loc 1 174 0
  34 0010 2498      		cbi 0x4,4
 175:matrix.c      ****      PORTB &= ~0b00010000;
  35               		.loc 1 175 0
  36 0012 2C98      		cbi 0x5,4
  37 0014 0895      		ret
  38               		.cfi_endproc
  39               	.LFE18:
  41               		.section	.text.matrix_rows,"ax",@progbits
  42               	.global	matrix_rows
  44               	matrix_rows:
  45               	.LFB21:
  46               		.cfi_startproc
  47               	/* prologue: function */
  48               	/* frame size = 0 */
  49               	/* stack size = 0 */
  50               	.L__stack_usage = 0
  51 0000 84E0      		ldi r24,lo8(4)
  52 0002 0895      		ret
  53               		.cfi_endproc
  54               	.LFE21:
  56               		.section	.text.matrix_cols,"ax",@progbits
  57               	.global	matrix_cols
  59               	matrix_cols:
  60               	.LFB8:
  54:matrix.c      ****     return MATRIX_COLS;
  61               		.loc 1 54 0
  62               		.cfi_startproc
  63               	/* prologue: function */
  64               	/* frame size = 0 */
  65               	/* stack size = 0 */
  66               	.L__stack_usage = 0
  56:matrix.c      **** 
  67               		.loc 1 56 0
  68 0000 84E0      		ldi r24,lo8(4)
  69 0002 0895      		ret
  70               		.cfi_endproc
  71               	.LFE8:
  73               		.section	.text.matrix_init,"ax",@progbits
  74               	.global	matrix_init
  76               	matrix_init:
  77               	.LFB9:
  59:matrix.c      ****     // To use PORTF disable JTAG with writing JTD bit twice within four cycles.
  78               		.loc 1 59 0
  79               		.cfi_startproc
  80               	/* prologue: function */
  81               	/* frame size = 0 */
  82               	/* stack size = 0 */
  83               	.L__stack_usage = 0
  61:matrix.c      ****     MCUCR |= (1<<JTD);
  84               		.loc 1 61 0
  85 0000 85B7      		in r24,0x35
  86 0002 8068      		ori r24,lo8(-128)
  87 0004 85BF      		out 0x35,r24
  62:matrix.c      **** 
  88               		.loc 1 62 0
  89 0006 85B7      		in r24,0x35
  90 0008 8068      		ori r24,lo8(-128)
  91 000a 85BF      		out 0x35,r24
  65:matrix.c      ****     init_cols();
  92               		.loc 1 65 0
  93 000c 0E94 0000 		call unselect_rows
  94               	.LVL0:
  95               	.LBB23:
  96               	.LBB24:
 149:matrix.c      ****     PORTF |=  0b00010010;
  97               		.loc 1 149 0
  98 0010 80B3      		in r24,0x10
  99 0012 8D7E      		andi r24,lo8(-19)
 100 0014 80BB      		out 0x10,r24
 150:matrix.c      ****     DDRD  &= ~0b01010000;
 101               		.loc 1 150 0
 102 0016 81B3      		in r24,0x11
 103 0018 8261      		ori r24,lo8(18)
 104 001a 81BB      		out 0x11,r24
 151:matrix.c      ****     PORTD |=  0b01010000;
 105               		.loc 1 151 0
 106 001c 8AB1      		in r24,0xa
 107 001e 8F7A      		andi r24,lo8(-81)
 108 0020 8AB9      		out 0xa,r24
 152:matrix.c      **** }
 109               		.loc 1 152 0
 110 0022 8BB1      		in r24,0xb
 111 0024 8065      		ori r24,lo8(80)
 112 0026 8BB9      		out 0xb,r24
 113               	.LVL1:
 114               	.LBE24:
 115               	.LBE23:
 116               	.LBB25:
  70:matrix.c      ****         matrix_debouncing[i] = 0;
 117               		.loc 1 70 0
 118 0028 A0E0      		ldi r26,lo8(matrix)
 119 002a B0E0      		ldi r27,hi8(matrix)
 120 002c 1C92      		st X,__zero_reg__
  71:matrix.c      ****     }
 121               		.loc 1 71 0
 122 002e E0E0      		ldi r30,lo8(matrix_debouncing)
 123 0030 F0E0      		ldi r31,hi8(matrix_debouncing)
 124 0032 1082      		st Z,__zero_reg__
 125               	.LVL2:
  70:matrix.c      ****         matrix_debouncing[i] = 0;
 126               		.loc 1 70 0
 127 0034 1196      		adiw r26,1
 128 0036 1C92      		st X,__zero_reg__
 129 0038 1197      		sbiw r26,1
  71:matrix.c      ****     }
 130               		.loc 1 71 0
 131 003a 1182      		std Z+1,__zero_reg__
 132               	.LVL3:
  70:matrix.c      ****         matrix_debouncing[i] = 0;
 133               		.loc 1 70 0
 134 003c 1296      		adiw r26,2
 135 003e 1C92      		st X,__zero_reg__
 136 0040 1297      		sbiw r26,2
  71:matrix.c      ****     }
 137               		.loc 1 71 0
 138 0042 1282      		std Z+2,__zero_reg__
 139               	.LVL4:
  70:matrix.c      ****         matrix_debouncing[i] = 0;
 140               		.loc 1 70 0
 141 0044 1396      		adiw r26,3
 142 0046 1C92      		st X,__zero_reg__
  71:matrix.c      ****     }
 143               		.loc 1 71 0
 144 0048 1382      		std Z+3,__zero_reg__
 145               	.LVL5:
 146 004a 0895      		ret
 147               	.LBE25:
 148               		.cfi_endproc
 149               	.LFE9:
 151               		.section	.text.matrix_scan,"ax",@progbits
 152               	.global	matrix_scan
 154               	matrix_scan:
 155               	.LFB10:
  76:matrix.c      ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 156               		.loc 1 76 0
 157               		.cfi_startproc
 158 0000 DF92      		push r13
 159               	.LCFI0:
 160               		.cfi_def_cfa_offset 3
 161               		.cfi_offset 13, -2
 162 0002 EF92      		push r14
 163               	.LCFI1:
 164               		.cfi_def_cfa_offset 4
 165               		.cfi_offset 14, -3
 166 0004 FF92      		push r15
 167               	.LCFI2:
 168               		.cfi_def_cfa_offset 5
 169               		.cfi_offset 15, -4
 170 0006 0F93      		push r16
 171               	.LCFI3:
 172               		.cfi_def_cfa_offset 6
 173               		.cfi_offset 16, -5
 174 0008 1F93      		push r17
 175               	.LCFI4:
 176               		.cfi_def_cfa_offset 7
 177               		.cfi_offset 17, -6
 178 000a CF93      		push r28
 179               	.LCFI5:
 180               		.cfi_def_cfa_offset 8
 181               		.cfi_offset 28, -7
 182 000c DF93      		push r29
 183               	.LCFI6:
 184               		.cfi_def_cfa_offset 9
 185               		.cfi_offset 29, -8
 186               	/* prologue: function */
 187               	/* frame size = 0 */
 188               	/* stack size = 7 */
 189               	.L__stack_usage = 7
 190               	.LVL6:
 191 000e 00E0      		ldi r16,lo8(matrix_debouncing)
 192 0010 10E0      		ldi r17,hi8(matrix_debouncing)
 193               	.LBB40:
  77:matrix.c      ****         select_row(i);
 194               		.loc 1 77 0
 195 0012 C0E0      		ldi r28,0
 196               	.LBB41:
 197               	.LBB42:
 198               	.LBB43:
 157:matrix.c      ****             (PINF&(1<<4) ? 0 : (1<<1)) |
 199               		.loc 1 157 0
 200 0014 D1E0      		ldi r29,lo8(1)
 201               	.LBE43:
 202               	.LBE42:
  86:matrix.c      ****         }
 203               		.loc 1 86 0
 204 0016 85E0      		ldi r24,lo8(5)
 205 0018 D82E      		mov r13,r24
  84:matrix.c      ****             }
 206               		.loc 1 84 0
 207 001a 90E0      		ldi r25,lo8(__c.1999)
 208 001c E92E      		mov r14,r25
 209 001e 90E0      		ldi r25,hi8(__c.1999)
 210 0020 F92E      		mov r15,r25
 211               	.LVL7:
 212               	.L20:
 213               	.LBB45:
 214               	.LBB46:
 176:matrix.c      ****  }
 177:matrix.c      **** 
 178:matrix.c      ****  static void select_row(uint8_t row)
 179:matrix.c      ****  {
 180:matrix.c      ****      // Output low(DDR:1, PORT:0) to select
 181:matrix.c      ****      switch (row) {
 215               		.loc 1 181 0
 216 0022 C230      		cpi r28,lo8(2)
 217 0024 01F0      		breq .L7
 218 0026 C330      		cpi r28,lo8(3)
 219 0028 01F0      		breq .L8
 220 002a C130      		cpi r28,lo8(1)
 221 002c 01F0      		breq .L9
 182:matrix.c      ****          case 0:
 183:matrix.c      ****              DDRF  |= (1<<0);
 222               		.loc 1 183 0
 223 002e 809A      		sbi 0x10,0
 184:matrix.c      ****              PORTF &= ~(1<<0);
 224               		.loc 1 184 0
 225 0030 8898      		cbi 0x11,0
 226 0032 00C0      		rjmp .L10
 227               	.L9:
 185:matrix.c      ****              break;
 186:matrix.c      ****          case 1:
 187:matrix.c      ****              DDRF  |= (1<<5);
 228               		.loc 1 187 0
 229 0034 859A      		sbi 0x10,5
 188:matrix.c      ****              PORTF &= ~(1<<5);
 230               		.loc 1 188 0
 231 0036 8D98      		cbi 0x11,5
 232 0038 00C0      		rjmp .L10
 233               	.L7:
 189:matrix.c      ****              break;
 190:matrix.c      ****          case 2:
 191:matrix.c      ****              DDRD  |= (1<7);
 234               		.loc 1 191 0
 235 003a 509A      		sbi 0xa,0
 192:matrix.c      ****              PORTD &= ~(1<<7);
 236               		.loc 1 192 0
 237 003c 5F98      		cbi 0xb,7
 238 003e 00C0      		rjmp .L10
 239               	.L8:
 193:matrix.c      ****              break;
 194:matrix.c      ****          case 3:
 195:matrix.c      ****              DDRB  |= (1<<4);
 240               		.loc 1 195 0
 241 0040 249A      		sbi 0x4,4
 196:matrix.c      ****              PORTB &= ~(1<<4);
 242               		.loc 1 196 0
 243 0042 2C98      		cbi 0x5,4
 244               	.L10:
 245               	.LVL8:
 246               	.LBE46:
 247               	.LBE45:
 248               	.LBB47:
 249               	.LBB48:
 250               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/lib/avr/include/util/delay.h **** 
 189:/usr/lib/avr/include/util/delay.h **** #else
 190:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/lib/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/lib/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/lib/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/lib/avr/include/util/delay.h **** 	{
 196:/usr/lib/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/lib/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/lib/avr/include/util/delay.h **** 		{
 200:/usr/lib/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/lib/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/lib/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/lib/avr/include/util/delay.h **** 		}
 204:/usr/lib/avr/include/util/delay.h **** 		return;
 205:/usr/lib/avr/include/util/delay.h **** 	}
 206:/usr/lib/avr/include/util/delay.h **** 	else
 207:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/lib/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/lib/avr/include/util/delay.h **** #endif
 210:/usr/lib/avr/include/util/delay.h **** }
 211:/usr/lib/avr/include/util/delay.h **** 
 212:/usr/lib/avr/include/util/delay.h **** /**
 213:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/lib/avr/include/util/delay.h **** 
 215:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/lib/avr/include/util/delay.h **** 
 217:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/lib/avr/include/util/delay.h **** 
 220:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/lib/avr/include/util/delay.h **** 
 222:/usr/lib/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/lib/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/lib/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/lib/avr/include/util/delay.h **** 
 226:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/lib/avr/include/util/delay.h **** 
 231:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/lib/avr/include/util/delay.h **** 
 236:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/lib/avr/include/util/delay.h ****    respectively.
 240:/usr/lib/avr/include/util/delay.h **** 
 241:/usr/lib/avr/include/util/delay.h ****    \note
 242:/usr/lib/avr/include/util/delay.h **** 
 243:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/lib/avr/include/util/delay.h **** 
 253:/usr/lib/avr/include/util/delay.h ****  */
 254:/usr/lib/avr/include/util/delay.h **** void
 255:/usr/lib/avr/include/util/delay.h **** _delay_us(double __us)
 256:/usr/lib/avr/include/util/delay.h **** {
 257:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 258:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 262:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:/usr/lib/avr/include/util/delay.h **** 
 265:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/lib/avr/include/util/delay.h **** 
 268:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/lib/avr/include/util/delay.h **** 
 271:/usr/lib/avr/include/util/delay.h **** 	#else
 272:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 273:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:/usr/lib/avr/include/util/delay.h **** 	#endif
 275:/usr/lib/avr/include/util/delay.h **** 
 276:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 251               		.loc 2 276 0
 252 0044 80EA      		ldi r24,lo8(-96)
 253 0046 8A95      	1:	dec r24
 254 0048 01F4      		brne 1b
 255               	.LVL9:
 256               	.LBE48:
 257               	.LBE47:
 258               	.LBB49:
 259               	.LBB44:
 157:matrix.c      ****             (PINF&(1<<4) ? 0 : (1<<1)) |
 260               		.loc 1 157 0
 261 004a 8FB1      		in r24,0xf
 262 004c 8695      		lsr r24
 263 004e 8170      		andi r24,1
 264 0050 8D27      		eor r24,r29
 265 0052 7C99      		sbic 0xf,4
 266 0054 00C0      		rjmp .L25
 267 0056 92E0      		ldi r25,lo8(2)
 268 0058 00C0      		rjmp .L11
 269               	.L25:
 270 005a 90E0      		ldi r25,0
 271               	.L11:
 272 005c 892B      		or r24,r25
 273 005e 4E99      		sbic 0x9,6
 274 0060 00C0      		rjmp .L26
 275 0062 94E0      		ldi r25,lo8(4)
 276 0064 00C0      		rjmp .L12
 277               	.L26:
 278 0066 90E0      		ldi r25,0
 279               	.L12:
 280 0068 892B      		or r24,r25
 281 006a 4C99      		sbic 0x9,4
 282 006c 00C0      		rjmp .L27
 283 006e 98E0      		ldi r25,lo8(8)
 284 0070 00C0      		rjmp .L13
 285               	.L27:
 286 0072 90E0      		ldi r25,0
 287               	.L13:
 288 0074 892B      		or r24,r25
 289               	.LBE44:
 290               	.LBE49:
  81:matrix.c      ****             matrix_debouncing[i] = cols;
 291               		.loc 1 81 0
 292 0076 F801      		movw r30,r16
 293 0078 9081      		ld r25,Z
 294 007a 9817      		cp r25,r24
 295 007c 01F0      		breq .L14
  82:matrix.c      ****             if (debouncing) {
 296               		.loc 1 82 0
 297 007e 8083      		st Z,r24
  83:matrix.c      ****                 debug("bounce!: "); debug_hex(debouncing); debug("\n");
 298               		.loc 1 83 0
 299 0080 8091 0000 		lds r24,debouncing
 300 0084 8823      		tst r24
 301 0086 01F0      		breq .L16
  84:matrix.c      ****             }
 302               		.loc 1 84 0
 303 0088 8091 0000 		lds r24,debug_config
 304 008c 80FF      		sbrs r24,0
 305 008e 00C0      		rjmp .L17
  84:matrix.c      ****             }
 306               		.loc 1 84 0 is_stmt 0 discriminator 1
 307 0090 80E0      		ldi r24,lo8(__c.1997)
 308 0092 90E0      		ldi r25,hi8(__c.1997)
 309 0094 0E94 0000 		call xputs
 310               	.LVL10:
 311               	.L17:
  84:matrix.c      ****             }
 312               		.loc 1 84 0 discriminator 3
 313 0098 8091 0000 		lds r24,debug_config
 314 009c 80FF      		sbrs r24,0
 315 009e 00C0      		rjmp .L18
  84:matrix.c      ****             }
 316               		.loc 1 84 0 discriminator 4
 317 00a0 8091 0000 		lds r24,debouncing
 318 00a4 1F92      		push __zero_reg__
 319               	.LCFI7:
 320               		.cfi_def_cfa_offset 10
 321 00a6 8F93      		push r24
 322               	.LCFI8:
 323               		.cfi_def_cfa_offset 11
 324 00a8 FF92      		push r15
 325               	.LCFI9:
 326               		.cfi_def_cfa_offset 12
 327 00aa EF92      		push r14
 328               	.LCFI10:
 329               		.cfi_def_cfa_offset 13
 330 00ac 0E94 0000 		call __xprintf
 331               	.LVL11:
 332 00b0 0F90      		pop __tmp_reg__
 333 00b2 0F90      		pop __tmp_reg__
 334 00b4 0F90      		pop __tmp_reg__
 335 00b6 0F90      		pop __tmp_reg__
 336               	.LCFI11:
 337               		.cfi_def_cfa_offset 9
 338               	.L18:
  84:matrix.c      ****             }
 339               		.loc 1 84 0 discriminator 6
 340 00b8 8091 0000 		lds r24,debug_config
 341 00bc 80FF      		sbrs r24,0
 342 00be 00C0      		rjmp .L16
  84:matrix.c      ****             }
 343               		.loc 1 84 0 discriminator 7
 344 00c0 80E0      		ldi r24,lo8(__c.2001)
 345 00c2 90E0      		ldi r25,hi8(__c.2001)
 346 00c4 0E94 0000 		call xputs
 347               	.LVL12:
 348               	.L16:
  86:matrix.c      ****         }
 349               		.loc 1 86 0 is_stmt 1
 350 00c8 D092 0000 		sts debouncing,r13
 351               	.L14:
  88:matrix.c      ****     }
 352               		.loc 1 88 0 discriminator 2
 353 00cc 0E94 0000 		call unselect_rows
 354               	.LVL13:
 355               	.LBE41:
  77:matrix.c      ****         select_row(i);
 356               		.loc 1 77 0 discriminator 2
 357 00d0 CF5F      		subi r28,lo8(-(1))
 358               	.LVL14:
 359 00d2 0F5F      		subi r16,-1
 360 00d4 1F4F      		sbci r17,-1
 361 00d6 C430      		cpi r28,lo8(4)
 362 00d8 01F0      		breq .+2
 363 00da 00C0      		rjmp .L20
 364               	.LBE40:
  91:matrix.c      ****         if (--debouncing) {
 365               		.loc 1 91 0
 366 00dc 8091 0000 		lds r24,debouncing
 367 00e0 8823      		tst r24
 368 00e2 01F0      		breq .L22
  92:matrix.c      ****             _delay_ms(1);
 369               		.loc 1 92 0
 370 00e4 8150      		subi r24,lo8(-(-1))
 371 00e6 8093 0000 		sts debouncing,r24
 372 00ea 8823      		tst r24
 373 00ec 01F0      		breq .L23
 374               	.LVL15:
 375               	.LBB50:
 376               	.LBB51:
 187:/usr/lib/avr/include/util/delay.h **** 
 377               		.loc 2 187 0
 378 00ee 8FE9      		ldi r24,lo8(3999)
 379 00f0 9FE0      		ldi r25,hi8(3999)
 380 00f2 0197      	1:	sbiw r24,1
 381 00f4 01F4      		brne 1b
 382 00f6 00C0      		rjmp .
 383 00f8 0000      		nop
 384 00fa 00C0      		rjmp .L22
 385               	.LVL16:
 386               	.L23:
 387               	.LBE51:
 388               	.LBE50:
 389               	.LBB52:
  96:matrix.c      ****             }
 390               		.loc 1 96 0
 391 00fc 8091 0000 		lds r24,matrix_debouncing
 392 0100 8093 0000 		sts matrix,r24
 393               	.LVL17:
 394 0104 8091 0000 		lds r24,matrix_debouncing+1
 395 0108 8093 0000 		sts matrix+1,r24
 396               	.LVL18:
 397 010c 8091 0000 		lds r24,matrix_debouncing+2
 398 0110 8093 0000 		sts matrix+2,r24
 399               	.LVL19:
 400 0114 8091 0000 		lds r24,matrix_debouncing+3
 401 0118 8093 0000 		sts matrix+3,r24
 402               	.LVL20:
 403               	.L22:
 404               	.LBE52:
 102:matrix.c      **** 
 405               		.loc 1 102 0
 406 011c 81E0      		ldi r24,lo8(1)
 407               	/* epilogue start */
 408 011e DF91      		pop r29
 409 0120 CF91      		pop r28
 410               	.LVL21:
 411 0122 1F91      		pop r17
 412 0124 0F91      		pop r16
 413 0126 FF90      		pop r15
 414 0128 EF90      		pop r14
 415 012a DF90      		pop r13
 416 012c 0895      		ret
 417               		.cfi_endproc
 418               	.LFE10:
 420               		.section	.text.matrix_is_modified,"ax",@progbits
 421               	.global	matrix_is_modified
 423               	matrix_is_modified:
 424               	.LFB11:
 105:matrix.c      ****     if (debouncing) return false;
 425               		.loc 1 105 0
 426               		.cfi_startproc
 427               	/* prologue: function */
 428               	/* frame size = 0 */
 429               	/* stack size = 0 */
 430               	.L__stack_usage = 0
 431 0000 81E0      		ldi r24,lo8(1)
 432 0002 9091 0000 		lds r25,debouncing
 433 0006 9111      		cpse r25,__zero_reg__
 434 0008 80E0      		ldi r24,0
 435               	.L40:
 108:matrix.c      **** 
 436               		.loc 1 108 0
 437 000a 0895      		ret
 438               		.cfi_endproc
 439               	.LFE11:
 441               		.section	.text.matrix_is_on,"ax",@progbits
 442               	.global	matrix_is_on
 444               	matrix_is_on:
 445               	.LFB12:
 112:matrix.c      ****     return (matrix[row] & ((matrix_row_t)1<<col));
 446               		.loc 1 112 0
 447               		.cfi_startproc
 448               	.LVL22:
 449               	/* prologue: function */
 450               	/* frame size = 0 */
 451               	/* stack size = 0 */
 452               	.L__stack_usage = 0
 113:matrix.c      **** }
 453               		.loc 1 113 0
 454 0000 E82F      		mov r30,r24
 455 0002 F0E0      		ldi r31,0
 456 0004 E050      		subi r30,lo8(-(matrix))
 457 0006 F040      		sbci r31,hi8(-(matrix))
 458 0008 2081      		ld r18,Z
 459 000a 822F      		mov r24,r18
 460               	.LVL23:
 461 000c 90E0      		ldi r25,0
 462 000e 21E0      		ldi r18,lo8(1)
 463 0010 30E0      		ldi r19,0
 464 0012 00C0      		rjmp 2f
 465               		1:
 466 0014 220F      		lsl r18
 467 0016 331F      		rol r19
 468               		2:
 469 0018 6A95      		dec r22
 470 001a 02F4      		brpl 1b
 471 001c 2823      		and r18,r24
 472 001e 3923      		and r19,r25
 473 0020 81E0      		ldi r24,lo8(1)
 474 0022 232B      		or r18,r19
 475 0024 01F4      		brne .L45
 476 0026 80E0      		ldi r24,0
 477               	.L45:
 114:matrix.c      **** 
 478               		.loc 1 114 0
 479 0028 0895      		ret
 480               		.cfi_endproc
 481               	.LFE12:
 483               		.section	.text.matrix_get_row,"ax",@progbits
 484               	.global	matrix_get_row
 486               	matrix_get_row:
 487               	.LFB13:
 118:matrix.c      ****     return matrix[row];
 488               		.loc 1 118 0
 489               		.cfi_startproc
 490               	.LVL24:
 491               	/* prologue: function */
 492               	/* frame size = 0 */
 493               	/* stack size = 0 */
 494               	.L__stack_usage = 0
 119:matrix.c      **** }
 495               		.loc 1 119 0
 496 0000 E82F      		mov r30,r24
 497 0002 F0E0      		ldi r31,0
 498 0004 E050      		subi r30,lo8(-(matrix))
 499 0006 F040      		sbci r31,hi8(-(matrix))
 120:matrix.c      **** 
 500               		.loc 1 120 0
 501 0008 8081      		ld r24,Z
 502               	.LVL25:
 503 000a 0895      		ret
 504               		.cfi_endproc
 505               	.LFE13:
 507               		.section	.text.matrix_print,"ax",@progbits
 508               	.global	matrix_print
 510               	matrix_print:
 511               	.LFB14:
 123:matrix.c      ****     print("\nr/c 0123456789ABCDEF\n");
 512               		.loc 1 123 0
 513               		.cfi_startproc
 514 0000 CF92      		push r12
 515               	.LCFI12:
 516               		.cfi_def_cfa_offset 3
 517               		.cfi_offset 12, -2
 518 0002 DF92      		push r13
 519               	.LCFI13:
 520               		.cfi_def_cfa_offset 4
 521               		.cfi_offset 13, -3
 522 0004 EF92      		push r14
 523               	.LCFI14:
 524               		.cfi_def_cfa_offset 5
 525               		.cfi_offset 14, -4
 526 0006 FF92      		push r15
 527               	.LCFI15:
 528               		.cfi_def_cfa_offset 6
 529               		.cfi_offset 15, -5
 530 0008 0F93      		push r16
 531               	.LCFI16:
 532               		.cfi_def_cfa_offset 7
 533               		.cfi_offset 16, -6
 534 000a 1F93      		push r17
 535               	.LCFI17:
 536               		.cfi_def_cfa_offset 8
 537               		.cfi_offset 17, -7
 538 000c CF93      		push r28
 539               	.LCFI18:
 540               		.cfi_def_cfa_offset 9
 541               		.cfi_offset 28, -8
 542 000e DF93      		push r29
 543               	.LCFI19:
 544               		.cfi_def_cfa_offset 10
 545               		.cfi_offset 29, -9
 546               	/* prologue: function */
 547               	/* frame size = 0 */
 548               	/* stack size = 8 */
 549               	.L__stack_usage = 8
 124:matrix.c      ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 550               		.loc 1 124 0
 551 0010 80E0      		ldi r24,lo8(__c.2023)
 552 0012 90E0      		ldi r25,hi8(__c.2023)
 553 0014 0E94 0000 		call xputs
 554 0018 80E0      		ldi r24,lo8(matrix)
 555 001a E82E      		mov r14,r24
 556 001c 80E0      		ldi r24,hi8(matrix)
 557 001e F82E      		mov r15,r24
 558 0020 C0E0      		ldi r28,0
 559 0022 D0E0      		ldi r29,0
 560               	.LBB53:
 126:matrix.c      ****         pbin_reverse16(matrix_get_row(row));
 561               		.loc 1 126 0
 562 0024 90E0      		ldi r25,lo8(__c.2026)
 563 0026 C92E      		mov r12,r25
 564 0028 90E0      		ldi r25,hi8(__c.2026)
 565 002a D92E      		mov r13,r25
 127:matrix.c      ****         print("\n");
 566               		.loc 1 127 0
 567 002c 00E0      		ldi r16,lo8(__c.2030)
 568 002e 10E0      		ldi r17,hi8(__c.2030)
 569               	.L48:
 126:matrix.c      ****         pbin_reverse16(matrix_get_row(row));
 570               		.loc 1 126 0 discriminator 3
 571 0030 DF93      		push r29
 572               	.LCFI20:
 573               		.cfi_def_cfa_offset 11
 574 0032 CF93      		push r28
 575               	.LCFI21:
 576               		.cfi_def_cfa_offset 12
 577 0034 DF92      		push r13
 578               	.LCFI22:
 579               		.cfi_def_cfa_offset 13
 580 0036 CF92      		push r12
 581               	.LCFI23:
 582               		.cfi_def_cfa_offset 14
 583 0038 0E94 0000 		call __xprintf
 584 003c 80E0      		ldi r24,lo8(__c.2028)
 585 003e 90E0      		ldi r25,hi8(__c.2028)
 586 0040 0E94 0000 		call xputs
 587               	.LBB54:
 588               	.LBB55:
 119:matrix.c      **** }
 589               		.loc 1 119 0 discriminator 3
 590 0044 F701      		movw r30,r14
 591 0046 8191      		ld r24,Z+
 592 0048 7F01      		movw r14,r30
 593               	.LBE55:
 594               	.LBE54:
 127:matrix.c      ****         print("\n");
 595               		.loc 1 127 0 discriminator 3
 596 004a 90E0      		ldi r25,0
 597 004c 0E94 0000 		call bitrev16
 598 0050 9F93      		push r25
 599               	.LCFI24:
 600               		.cfi_def_cfa_offset 15
 601 0052 8F93      		push r24
 602               	.LCFI25:
 603               		.cfi_def_cfa_offset 16
 604 0054 1F93      		push r17
 605               	.LCFI26:
 606               		.cfi_def_cfa_offset 17
 607 0056 0F93      		push r16
 608               	.LCFI27:
 609               		.cfi_def_cfa_offset 18
 610 0058 0E94 0000 		call __xprintf
 128:matrix.c      ****     }
 611               		.loc 1 128 0 discriminator 3
 612 005c 80E0      		ldi r24,lo8(__c.2032)
 613 005e 90E0      		ldi r25,hi8(__c.2032)
 614 0060 0E94 0000 		call xputs
 615 0064 2196      		adiw r28,1
 125:matrix.c      ****         phex(row); print(": ");
 616               		.loc 1 125 0 discriminator 3
 617 0066 8DB7      		in r24,__SP_L__
 618 0068 9EB7      		in r25,__SP_H__
 619 006a 0896      		adiw r24,8
 620 006c 0FB6      		in __tmp_reg__,__SREG__
 621 006e F894      		cli
 622 0070 9EBF      		out __SP_H__,r25
 623 0072 0FBE      		out __SREG__,__tmp_reg__
 624 0074 8DBF      		out __SP_L__,r24
 625               	.LCFI28:
 626               		.cfi_def_cfa_offset 10
 627 0076 C430      		cpi r28,4
 628 0078 D105      		cpc r29,__zero_reg__
 629 007a 01F4      		brne .L48
 630               	/* epilogue start */
 631               	.LBE53:
 130:matrix.c      **** 
 632               		.loc 1 130 0
 633 007c DF91      		pop r29
 634 007e CF91      		pop r28
 635 0080 1F91      		pop r17
 636 0082 0F91      		pop r16
 637 0084 FF90      		pop r15
 638 0086 EF90      		pop r14
 639 0088 DF90      		pop r13
 640 008a CF90      		pop r12
 641 008c 0895      		ret
 642               		.cfi_endproc
 643               	.LFE14:
 645               		.section	.text.matrix_key_count,"ax",@progbits
 646               	.global	matrix_key_count
 648               	matrix_key_count:
 649               	.LFB15:
 133:matrix.c      ****     uint8_t count = 0;
 650               		.loc 1 133 0
 651               		.cfi_startproc
 652 0000 0F93      		push r16
 653               	.LCFI29:
 654               		.cfi_def_cfa_offset 3
 655               		.cfi_offset 16, -2
 656 0002 1F93      		push r17
 657               	.LCFI30:
 658               		.cfi_def_cfa_offset 4
 659               		.cfi_offset 17, -3
 660 0004 CF93      		push r28
 661               	.LCFI31:
 662               		.cfi_def_cfa_offset 5
 663               		.cfi_offset 28, -4
 664               	/* prologue: function */
 665               	/* frame size = 0 */
 666               	/* stack size = 3 */
 667               	.L__stack_usage = 3
 668               	.LVL26:
 669 0006 00E0      		ldi r16,lo8(matrix)
 670 0008 10E0      		ldi r17,hi8(matrix)
 134:matrix.c      ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 671               		.loc 1 134 0
 672 000a C0E0      		ldi r28,0
 673               	.LVL27:
 674               	.L51:
 675               	.LBB56:
 136:matrix.c      ****     }
 676               		.loc 1 136 0 discriminator 3
 677 000c F801      		movw r30,r16
 678 000e 8191      		ld r24,Z+
 679 0010 8F01      		movw r16,r30
 680               	.LVL28:
 681 0012 90E0      		ldi r25,0
 682 0014 0E94 0000 		call bitpop16
 683               	.LVL29:
 684 0018 C80F      		add r28,r24
 685               	.LVL30:
 135:matrix.c      ****         count += bitpop16(matrix[i]);
 686               		.loc 1 135 0 discriminator 3
 687 001a F0E0      		ldi r31,hi8(matrix+4)
 688 001c 0030      		cpi r16,lo8(matrix+4)
 689 001e 1F07      		cpc r17,r31
 690 0020 01F4      		brne .L51
 691               	.LBE56:
 139:matrix.c      **** 
 692               		.loc 1 139 0
 693 0022 8C2F      		mov r24,r28
 694               	/* epilogue start */
 695 0024 CF91      		pop r28
 696               	.LVL31:
 697 0026 1F91      		pop r17
 698 0028 0F91      		pop r16
 699               	.LVL32:
 700 002a 0895      		ret
 701               		.cfi_endproc
 702               	.LFE15:
 704               		.section	.progmem.data.__c.2032,"a",@progbits
 707               	__c.2032:
 708 0000 0A00      		.string	"\n"
 709               		.section	.progmem.data.__c.2030,"a",@progbits
 712               	__c.2030:
 713 0000 2530 3136 		.string	"%016b"
 713      6200 
 714               		.section	.progmem.data.__c.2028,"a",@progbits
 717               	__c.2028:
 718 0000 3A20 00   		.string	": "
 719               		.section	.progmem.data.__c.2026,"a",@progbits
 722               	__c.2026:
 723 0000 2530 3258 		.string	"%02X"
 723      00
 724               		.section	.progmem.data.__c.2023,"a",@progbits
 727               	__c.2023:
 728 0000 0A72 2F63 		.string	"\nr/c 0123456789ABCDEF\n"
 728      2030 3132 
 728      3334 3536 
 728      3738 3941 
 728      4243 4445 
 729               		.section	.progmem.data.__c.2001,"a",@progbits
 732               	__c.2001:
 733 0000 0A00      		.string	"\n"
 734               		.section	.progmem.data.__c.1999,"a",@progbits
 737               	__c.1999:
 738 0000 2530 3258 		.string	"%02X"
 738      00
 739               		.section	.progmem.data.__c.1997,"a",@progbits
 742               	__c.1997:
 743 0000 626F 756E 		.string	"bounce!: "
 743      6365 213A 
 743      2000 
 744               		.section	.bss.matrix_debouncing,"aw",@nobits
 747               	matrix_debouncing:
 748 0000 0000 0000 		.zero	4
 749               		.section	.bss.matrix,"aw",@nobits
 752               	matrix:
 753 0000 0000 0000 		.zero	4
 754               		.section	.data.debouncing,"aw",@progbits
 757               	debouncing:
 758 0000 05        		.byte	5
 759               		.text
 760               	.Letext0:
 761               		.file 3 "/usr/lib/avr/include/stdint.h"
 762               		.file 4 "../../tmk_core/common/debug.h"
 763               		.file 5 "../../tmk_core/common/matrix.h"
 764               		.file 6 "../../tmk_core/common/avr/xprintf.h"
 765               		.file 7 "../../tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 matrix.c
     /tmp/ccXPFfKu.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccXPFfKu.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccXPFfKu.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccXPFfKu.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccXPFfKu.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccXPFfKu.s:12     .text.unselect_rows:0000000000000000 unselect_rows
     /tmp/ccXPFfKu.s:44     .text.matrix_rows:0000000000000000 matrix_rows
     /tmp/ccXPFfKu.s:59     .text.matrix_cols:0000000000000000 matrix_cols
     /tmp/ccXPFfKu.s:76     .text.matrix_init:0000000000000000 matrix_init
     /tmp/ccXPFfKu.s:752    .bss.matrix:0000000000000000 matrix
     /tmp/ccXPFfKu.s:747    .bss.matrix_debouncing:0000000000000000 matrix_debouncing
     /tmp/ccXPFfKu.s:154    .text.matrix_scan:0000000000000000 matrix_scan
     /tmp/ccXPFfKu.s:737    .progmem.data.__c.1999:0000000000000000 __c.1999
     /tmp/ccXPFfKu.s:757    .data.debouncing:0000000000000000 debouncing
     /tmp/ccXPFfKu.s:742    .progmem.data.__c.1997:0000000000000000 __c.1997
     /tmp/ccXPFfKu.s:732    .progmem.data.__c.2001:0000000000000000 __c.2001
     /tmp/ccXPFfKu.s:423    .text.matrix_is_modified:0000000000000000 matrix_is_modified
     /tmp/ccXPFfKu.s:444    .text.matrix_is_on:0000000000000000 matrix_is_on
     /tmp/ccXPFfKu.s:486    .text.matrix_get_row:0000000000000000 matrix_get_row
     /tmp/ccXPFfKu.s:510    .text.matrix_print:0000000000000000 matrix_print
     /tmp/ccXPFfKu.s:727    .progmem.data.__c.2023:0000000000000000 __c.2023
     /tmp/ccXPFfKu.s:722    .progmem.data.__c.2026:0000000000000000 __c.2026
     /tmp/ccXPFfKu.s:712    .progmem.data.__c.2030:0000000000000000 __c.2030
     /tmp/ccXPFfKu.s:717    .progmem.data.__c.2028:0000000000000000 __c.2028
     /tmp/ccXPFfKu.s:707    .progmem.data.__c.2032:0000000000000000 __c.2032
     /tmp/ccXPFfKu.s:648    .text.matrix_key_count:0000000000000000 matrix_key_count

UNDEFINED SYMBOLS
debug_config
xputs
__xprintf
bitrev16
bitpop16
__do_copy_data
__do_clear_bss
